{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1552539178570},{"_id":"themes/BlueLake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1552539178571},{"_id":"themes/BlueLake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1552539178571},{"_id":"themes/BlueLake/_config.yml","hash":"79e8f501f592cf0f7e750774e2119cd58ac0383b","modified":1552539178571},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1552539178585},{"_id":"source/_posts/2018-06-13-git1.md","hash":"a0377db90cdc8fef23860468c2949b6c07f488ef","modified":1552539178545},{"_id":"source/_posts/2018-06-14-git2.md","hash":"a833eea3b55ebac2987542c7f04a671067f123db","modified":1552539178549},{"_id":"source/_posts/2018-06-14-git3.md","hash":"555c6389876839676d1373dd3941f7a57b5e0d79","modified":1552539178552},{"_id":"source/_posts/2018-06-14-git4.md","hash":"a34903006b4965cefee1f3dd936b9fb1cbb3dbd8","modified":1552539178554},{"_id":"source/_posts/2018-06-14-git5.md","hash":"cfb77d3f25a792dd8d22a9799baef5c1d48a9ae5","modified":1552539178557},{"_id":"source/_posts/2018-06-25-git6.md","hash":"e441cbe743c6591ab4a8e50df464d01caa3c0028","modified":1552539178562},{"_id":"source/_posts/2018-06-29-googledev.md","hash":"11084ece87e337c25b50f58a45b0e4ba889caf47","modified":1552539178564},{"_id":"source/_posts/2018-11-15-hexo.md","hash":"1c3030368ba14612d8a431b9f5200eb3a68ceaa4","modified":1552539178564},{"_id":"source/_posts/2018-11-15-keymap.md","hash":"226009e0ce40726d0796265a780fbb2e26a2d85a","modified":1552539178565},{"_id":"source/_posts/2018-11-15-npm.md","hash":"398461b166e811b0384253087401145d697a4ca8","modified":1552539178565},{"_id":"source/_posts/2018-11-15-vueserve.md","hash":"3577af6165bf21a972aa7bef8dcdde09e0bc42aa","modified":1552539178566},{"_id":"source/_posts/2018-11-19-array.md","hash":"faa2335c343485481fa3af4eceee165818bfcb33","modified":1552539178566},{"_id":"source/_posts/2018-12-19-sleep-quality.md","hash":"a02a6b3cc139b49f4870d1f1a559cece5fe5adff","modified":1552539178568},{"_id":"source/_posts/2018-12-19-coding-quality.md","hash":"cc02fcf5bba419b0e25828fcfd79ce3568bf9b58","modified":1552539178567},{"_id":"source/_posts/2018-12-21-axios.md","hash":"831002cc812ccab5454561cee3e9c4633d1dc0b0","modified":1552539178568},{"_id":"source/_posts/2018-11-19-string.md","hash":"0d8bfbbf0597973e71fd96a0c46cacef34940d70","modified":1552539178567},{"_id":"source/_posts/2019-03-19-android-apk.md","hash":"8f380439c74e62b15ade1515fc5adb3410efc41a","modified":1552971531595},{"_id":"source/_posts/2018-12-26-react1.md","hash":"03a2fe1e769e3b29a55f058b2e34c4023ef216f2","modified":1552539178569},{"_id":"source/_posts/2019-03-14-serve.md","hash":"ed84c0b7ed87f8cfc3db0d9c7b1e4c23bc8965a6","modified":1552539178569},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1552539178569},{"_id":"source/about/index.md","hash":"3346367d518f2658d26f0fb1256d9359f10656be","modified":1552539178570},{"_id":"source/_posts/2019-03-15-code-push.md","hash":"de3ab94030b8d9169bfd9a2a3bf00e23de5f0490","modified":1552626110329},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1552539178571},{"_id":"themes/BlueLake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1552539178572},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1552539178572},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1552539178572},{"_id":"themes/BlueLake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1552539178572},{"_id":"themes/BlueLake/languages/tr.yml","hash":"1c623122f1ff7878595de6783bd83afc3a746373","modified":1552539178573},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1552539178573},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1552539178573},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1552539178583},{"_id":"themes/BlueLake/layout/base.jade","hash":"e767f8150f8ce04f6f78924afa1ec68788ab37ed","modified":1552539178584},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1552539178584},{"_id":"themes/BlueLake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1552539178584},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1552539178585},{"_id":"themes/BlueLake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1552539178585},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1552539178585},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1552539178587},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1552539178586},{"_id":"source/_posts/2018-06-13-git1/image001.png","hash":"baa3b692db921bb9f105672c981696fcfafbeb45","modified":1552539178546},{"_id":"source/_posts/2018-06-13-git1/image002.png","hash":"550aae4a89e803e0f1e912046c572fff5953bb0c","modified":1552539178547},{"_id":"source/_posts/2018-06-13-git1/image003.png","hash":"761a48be3e08f4d2d899988be4bcb62288a0d4c5","modified":1552539178547},{"_id":"source/_posts/2018-06-13-git1/image005.png","hash":"61b8412368821f4918985ff229acad1721607572","modified":1552539178548},{"_id":"source/_posts/2018-06-13-git1/image004.png","hash":"523977f61f23680a7f748ece3615aa363fcdcf39","modified":1552539178547},{"_id":"source/_posts/2018-06-13-git1/image006.png","hash":"5e141416ccf588f2e4f659bcea479759dde7f44e","modified":1552539178548},{"_id":"source/_posts/2018-06-13-git1/image007.png","hash":"f4d3ee4c3a46d3b0df84c2a0389909918e042138","modified":1552539178549},{"_id":"source/_posts/2018-06-14-git2/image001.png","hash":"a4ed947935e12ddb4b0657f40eaa0fb3a0d96a00","modified":1552539178550},{"_id":"source/_posts/2018-06-14-git2/image002.png","hash":"d614a6eb9a137020b1e48cd9a7afd724202631cf","modified":1552539178550},{"_id":"source/_posts/2018-06-14-git2/image003.png","hash":"bd7e01b97b3e97317e0b38c34f84896a34ec14b7","modified":1552539178551},{"_id":"source/_posts/2018-06-14-git2/image004.png","hash":"a28338d5a190cfd74620ece82d1bbc8a26be421a","modified":1552539178551},{"_id":"source/_posts/2018-06-14-git3/image001.png","hash":"ebbb2ced73ccf66011eaee06a3320d311802983f","modified":1552539178552},{"_id":"source/_posts/2018-06-14-git3/image002.png","hash":"b4f43ef3de4a0e280f4518911345c07c3dd710c4","modified":1552539178553},{"_id":"source/_posts/2018-06-14-git3/image003.png","hash":"3cc9b01960c9e1fc1384fe580683e850275b121a","modified":1552539178554},{"_id":"source/_posts/2018-06-14-git4/image001.png","hash":"c13c931d9f4f8da4bd5d2660c78017424a8ff763","modified":1552539178555},{"_id":"source/_posts/2018-06-14-git4/image002.png","hash":"4d380a6a85930bd55506072725548354caf451a9","modified":1552539178556},{"_id":"source/_posts/2018-06-14-git4/image003.png","hash":"16f4b08f8c13bbb044b9d7d6b4321e7bc27a0bf4","modified":1552539178556},{"_id":"source/_posts/2018-06-14-git5/image003.png","hash":"a56d29f945d270d72709fcedda6e89cab5c01693","modified":1552539178560},{"_id":"source/_posts/2018-06-14-git5/image004.png","hash":"c526c42059557e5427edca61d273fbddb32b9605","modified":1552539178561},{"_id":"source/_posts/2018-06-14-git5/image002.png","hash":"22deb8ebb9b54a7f9c5daabbbaade22e0370c295","modified":1552539178559},{"_id":"source/_posts/2018-06-14-git5/image005.png","hash":"4fb5dbc44fa2ead3dbb263baefc149c570611c9d","modified":1552539178561},{"_id":"source/_posts/2018-06-14-git5/image006.png","hash":"8085395d91e4032d111d5466890ca3d9893e53ef","modified":1552539178562},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"0f0623140f7bf72319dc58f402fc84970a7cf370","modified":1552539178576},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1552539178576},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1552539178576},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"dbc5c401f4d8aa80fe9e73423aadb8b8969f0b62","modified":1552539178577},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1552539178577},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1552539178577},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1552539178578},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1552539178578},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1552539178578},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1552539178578},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1552539178577},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1552539178579},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1552539178579},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1552539178579},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1552539178580},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1552539178581},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1552539178581},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1552539178581},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1552539178582},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1552539178582},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1552539178583},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1552539178586},{"_id":"themes/BlueLake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1552539178587},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1552539178588},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1552539178588},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1552539178589},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1552539178589},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1552539178591},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1552539178591},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1552539178591},{"_id":"source/_posts/2018-06-14-git5/image001.png","hash":"a9a1e414edd6147833aa5c4b1dd0b075a8e33254","modified":1552539178558},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1552539178590},{"_id":"source/_posts/2019-03-19-android-apk/image002.png","hash":"1749af03cd6a617dbef6851b0a9f802bc7e95d07","modified":1552970747513},{"_id":"source/_posts/2019-03-19-android-apk/image001.png","hash":"b1d655d655278a6b9c0a1186255601fc31838564","modified":1552970761927},{"_id":"public/atom.xml","hash":"135f41e5513489918593234210d9222eecaa9b5f","modified":1552971543242},{"_id":"public/baidusitemap.xml","hash":"26a16895e6677b927718ae154d70d85536bbfd68","modified":1552971093685},{"_id":"public/content.json","hash":"c5243a9dbfa0109c38c3f2881c56535223bb613c","modified":1552971543244},{"_id":"public/sitemap.xml","hash":"b339c49758270a408de8cdc8852951334dff1af9","modified":1552971543253},{"_id":"public/about/index.html","hash":"12725267fc8fba22875e0e3d2a99334dfcbccb8b","modified":1552971093727},{"_id":"public/2019/03/15/code-push/index.html","hash":"df470018102667a32084df5447a7a34d24170d79","modified":1552971093727},{"_id":"public/2019/03/14/hello-world/index.html","hash":"b921f7636532f9501e17aeca29543a19fe72253a","modified":1552971093727},{"_id":"public/2019/03/14/serve/index.html","hash":"b7432de91ed2655aa811bd8a7576d02fa5a85c2c","modified":1552971093727},{"_id":"public/2018/12/26/react1/index.html","hash":"a657a504b6b8a40de4b8d8ca0028fbe24bd17795","modified":1552971093728},{"_id":"public/2018/12/21/axios/index.html","hash":"15a0650c32377b80021f75c64f8802b27b32a3fc","modified":1552971093728},{"_id":"public/2018/12/19/coding-quality/index.html","hash":"9f7a5955918f232aff298791b5dedda7b3bc8c8e","modified":1552971093728},{"_id":"public/2018/12/19/sleep-quality/index.html","hash":"d8e332eeb4ea17431ce50e784cbfb63326baa5af","modified":1552971093728},{"_id":"public/2018/11/19/string/index.html","hash":"cde2a4c2c05928a7e70531c5bf7dc6526b3fd43b","modified":1552971093728},{"_id":"public/2018/11/19/array/index.html","hash":"8a2ba82c3153b8633201be1f1db496c74d28b3be","modified":1552971093728},{"_id":"public/2018/11/15/npm/index.html","hash":"5732ff47fc4f76e8aa494fbb56bf2bee69224027","modified":1552971093728},{"_id":"public/2018/11/15/vueserve/index.html","hash":"1edc5c6a5fc1f29e4ebf44026469261d8d735822","modified":1552971093728},{"_id":"public/2018/11/15/keymap/index.html","hash":"044081fa87ce66387b4661e87cd820786b8b7a94","modified":1552971093728},{"_id":"public/2018/11/15/hexo/index.html","hash":"575b4461daa4b39b81f6431327d43b02f2793a29","modified":1552971093729},{"_id":"public/2018/06/29/googledev/index.html","hash":"532c68f0cabd88157cf85cdacc787f2b7696fbb1","modified":1552971093729},{"_id":"public/2018/06/25/git6/index.html","hash":"dc6401e565e890f9db529baf781b8b98dd1ef1cc","modified":1552971093729},{"_id":"public/2018/06/14/git5/index.html","hash":"f1538ccde55c2d6f94c91ca67fbba9cd2b51de99","modified":1552971093729},{"_id":"public/2018/06/14/git4/index.html","hash":"f511de595ecac7ff51cf03f9dcfc452d91f34def","modified":1552971093729},{"_id":"public/2018/06/14/git3/index.html","hash":"9940df963a80472c1e869a9928a8cded022f75aa","modified":1552971093729},{"_id":"public/2018/06/14/git2/index.html","hash":"60ceca316035460447d0f909ba4d15d8483d2255","modified":1552971093729},{"_id":"public/2018/06/13/git1/index.html","hash":"7eba25ae66776928324d82fc88ea60357b0374c3","modified":1552971093729},{"_id":"public/archives/index.html","hash":"ee97033565758560029c9370c20b72adb8ea43ac","modified":1552971093729},{"_id":"public/archives/page/2/index.html","hash":"027117b449b3d41aa524d6faaaaa1f612c02ab4f","modified":1552971093729},{"_id":"public/archives/2018/page/2/index.html","hash":"02b1d883c67e45e50417c80d688948f6627be720","modified":1552971093729},{"_id":"public/archives/2018/index.html","hash":"12a79bc77915832d41a2d0b91cd6d2bbd139e6c4","modified":1552971093729},{"_id":"public/archives/2018/06/index.html","hash":"0c5702f4d32104988f218681bcd44c0714d45181","modified":1552971093730},{"_id":"public/archives/2018/11/index.html","hash":"86e74b3e1a271697657fdb5c59425c7803a51c12","modified":1552971093730},{"_id":"public/archives/2018/12/index.html","hash":"f579a15b4d2121696c660c267510cbd4a7118136","modified":1552971093730},{"_id":"public/archives/2019/index.html","hash":"5cf9f16788a2c8b1c9f41bdcce440c9cbd13993b","modified":1552971093730},{"_id":"public/archives/2019/03/index.html","hash":"5cf9f16788a2c8b1c9f41bdcce440c9cbd13993b","modified":1552971093730},{"_id":"public/index.html","hash":"98ad50284d0e48d68e3b4814f746344d09b82a3a","modified":1552971093730},{"_id":"public/page/2/index.html","hash":"341f20231b02f7bd68a5f94f796ff4656d81e63b","modified":1552971093730},{"_id":"public/tags/Git/index.html","hash":"e9e00743f7f2d309e483618b5100f2c7a8113c85","modified":1552971093730},{"_id":"public/tags/tools/index.html","hash":"c6a2e4ac1785c5bca3b53b9445df0caf76c59ce0","modified":1552971093731},{"_id":"public/tags/JS/index.html","hash":"b398fb6d5009b2bf6d3e9a159da35dfa1d3fb94a","modified":1552971093731},{"_id":"public/tags/life/index.html","hash":"189569a7acca5355cc5ab7d65cdad3f547bb99c0","modified":1552971093732},{"_id":"public/tags/React/index.html","hash":"9a46da796a12b09ba39623c2b8a0dd7a8b4f5556","modified":1552971093732},{"_id":"public/2019/03/19/android-apk/index.html","hash":"3154844df470b3f6aff9a31cdfd25db6d534e0bd","modified":1552971543259},{"_id":"public/archives/page/3/index.html","hash":"c826e3293d27a5d1b3e51c89b94d7968d10d56da","modified":1552971093742},{"_id":"public/page/3/index.html","hash":"e6d89277319b049fee96d15222d9a02f12873a94","modified":1552971093742},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1552971093752},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1552971093752},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1552971093752},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1552971093752},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1552971093752},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1552971093752},{"_id":"public/2018/06/14/git3/image002.png","hash":"b4f43ef3de4a0e280f4518911345c07c3dd710c4","modified":1552971093752},{"_id":"public/2018/06/14/git3/image003.png","hash":"3cc9b01960c9e1fc1384fe580683e850275b121a","modified":1552971093753},{"_id":"public/2018/06/14/git4/image001.png","hash":"c13c931d9f4f8da4bd5d2660c78017424a8ff763","modified":1552971093753},{"_id":"public/2018/06/14/git4/image002.png","hash":"4d380a6a85930bd55506072725548354caf451a9","modified":1552971093753},{"_id":"public/2018/06/14/git4/image003.png","hash":"16f4b08f8c13bbb044b9d7d6b4321e7bc27a0bf4","modified":1552971093753},{"_id":"public/2018/06/14/git2/image001.png","hash":"a4ed947935e12ddb4b0657f40eaa0fb3a0d96a00","modified":1552971093753},{"_id":"public/2018/06/14/git2/image002.png","hash":"d614a6eb9a137020b1e48cd9a7afd724202631cf","modified":1552971093753},{"_id":"public/2018/06/14/git2/image003.png","hash":"bd7e01b97b3e97317e0b38c34f84896a34ec14b7","modified":1552971093753},{"_id":"public/2018/06/14/git2/image004.png","hash":"a28338d5a190cfd74620ece82d1bbc8a26be421a","modified":1552971093753},{"_id":"public/2018/06/14/git5/image003.png","hash":"a56d29f945d270d72709fcedda6e89cab5c01693","modified":1552971093753},{"_id":"public/2018/06/14/git5/image004.png","hash":"c526c42059557e5427edca61d273fbddb32b9605","modified":1552971093753},{"_id":"public/2018/06/14/git5/image005.png","hash":"4fb5dbc44fa2ead3dbb263baefc149c570611c9d","modified":1552971093753},{"_id":"public/2018/06/14/git5/image006.png","hash":"8085395d91e4032d111d5466890ca3d9893e53ef","modified":1552971093753},{"_id":"public/2018/06/13/git1/image001.png","hash":"baa3b692db921bb9f105672c981696fcfafbeb45","modified":1552971093753},{"_id":"public/2018/06/13/git1/image002.png","hash":"550aae4a89e803e0f1e912046c572fff5953bb0c","modified":1552971093754},{"_id":"public/2018/06/13/git1/image003.png","hash":"761a48be3e08f4d2d899988be4bcb62288a0d4c5","modified":1552971093754},{"_id":"public/2018/06/13/git1/image004.png","hash":"523977f61f23680a7f748ece3615aa363fcdcf39","modified":1552971093754},{"_id":"public/2018/06/13/git1/image005.png","hash":"61b8412368821f4918985ff229acad1721607572","modified":1552971093754},{"_id":"public/2018/06/13/git1/image006.png","hash":"5e141416ccf588f2e4f659bcea479759dde7f44e","modified":1552971093754},{"_id":"public/2018/06/13/git1/image007.png","hash":"f4d3ee4c3a46d3b0df84c2a0389909918e042138","modified":1552971093754},{"_id":"public/2018/06/14/git3/image001.png","hash":"ebbb2ced73ccf66011eaee06a3320d311802983f","modified":1552971094018},{"_id":"public/2018/06/14/git5/image001.png","hash":"a9a1e414edd6147833aa5c4b1dd0b075a8e33254","modified":1552971094018},{"_id":"public/2018/06/14/git5/image002.png","hash":"22deb8ebb9b54a7f9c5daabbbaade22e0370c295","modified":1552971094018},{"_id":"public/css/highlight.css","hash":"932879716cbce6f9a1b830070ed514082398f1ca","modified":1552971094021},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1552971094021},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1552971094021},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1552971094022},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1552971094022},{"_id":"public/css/style.css","hash":"45a02c24123d7107ed700c695506d5ef7c274fc1","modified":1552971094174},{"_id":"public/2019/03/19/android-apk/image002.png","hash":"1749af03cd6a617dbef6851b0a9f802bc7e95d07","modified":1552971094178},{"_id":"public/2019/03/19/android-apk/image001.png","hash":"b1d655d655278a6b9c0a1186255601fc31838564","modified":1552971094182}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-06-12T13:24:05.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-12 21:24:05\n---\n","updated":"2019-03-14T04:52:58.570Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjtfaw439000wmtjkj4ojnvxb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git系列之环境配置与github代码托管","date":"2018-06-13T14:35:54.000Z","_content":"## 1.名词解释\n**Git**: 一个免费的开源分布式版本控制系统\n**github**: 一个面向开源及私有软件项目的托管平台\n## 2.Git下载安装与配置\n从[git官网](https://git-scm.com/)上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\ngit基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入**git config –help**查看。\n{% asset_img image002.png this is second image %}\n<center>**图（2）**</center>\n配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator\\.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。\n{% asset_img image003.png this is second image %}\n<center>**图（3）**</center>\n\n## 3.github配置并新建托管项目\n访问[github官网](https://github.com/)，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。\nTitle名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。\n{% asset_img image004.png this is second image %}\n<center>**图（4）**</center>\n回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。\n{% asset_img image005.png this is second image %}\n<center>**图（5）**</center>\n创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。\n{% asset_img image006.png this is second image %}\n<center>**图（6）**</center>\n在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。\n{% asset_img image007.png this is second image %}\n<center>**图（7）**</center>\n","source":"_posts/2018-06-13-git1.md","raw":"---\ntitle: Git系列之环境配置与github代码托管\ndate: 2018-06-13 22:35:54\ntags: Git\n---\n## 1.名词解释\n**Git**: 一个免费的开源分布式版本控制系统\n**github**: 一个面向开源及私有软件项目的托管平台\n## 2.Git下载安装与配置\n从[git官网](https://git-scm.com/)上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\ngit基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入**git config –help**查看。\n{% asset_img image002.png this is second image %}\n<center>**图（2）**</center>\n配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator\\.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。\n{% asset_img image003.png this is second image %}\n<center>**图（3）**</center>\n\n## 3.github配置并新建托管项目\n访问[github官网](https://github.com/)，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。\nTitle名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。\n{% asset_img image004.png this is second image %}\n<center>**图（4）**</center>\n回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。\n{% asset_img image005.png this is second image %}\n<center>**图（5）**</center>\n创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。\n{% asset_img image006.png this is second image %}\n<center>**图（6）**</center>\n在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。\n{% asset_img image007.png this is second image %}\n<center>**图（7）**</center>\n","slug":"git1","published":1,"updated":"2019-03-14T04:52:58.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3cw0000mtjkjfw1p8yb","content":"<h2 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1.名词解释\"></a>1.名词解释</h2><p><strong>Git</strong>: 一个免费的开源分布式版本控制系统<br><strong>github</strong>: 一个面向开源及私有软件项目的托管平台</p>\n<h2 id=\"2-Git下载安装与配置\"><a href=\"#2-Git下载安装与配置\" class=\"headerlink\" title=\"2.Git下载安装与配置\"></a>2.Git下载安装与配置</h2><p>从<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git官网</a>上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。<br><img src=\"/2018/06/13/git1/image001.png\" title=\"this is first image\"></p>\n<center><strong>图（1）</strong></center><br>git基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入<strong>git config –help</strong>查看。<br><img src=\"/2018/06/13/git1/image002.png\" title=\"this is second image\"><br><center><strong>图（2）</strong></center><br>配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。<br><img src=\"/2018/06/13/git1/image003.png\" title=\"this is second image\"><br><center><strong>图（3）</strong></center>\n\n<h2 id=\"3-github配置并新建托管项目\"><a href=\"#3-github配置并新建托管项目\" class=\"headerlink\" title=\"3.github配置并新建托管项目\"></a>3.github配置并新建托管项目</h2><p>访问<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github官网</a>，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。<br>Title名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。<br><img src=\"/2018/06/13/git1/image004.png\" title=\"this is second image\"></p>\n<center><strong>图（4）</strong></center><br>回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。<br><img src=\"/2018/06/13/git1/image005.png\" title=\"this is second image\"><br><center><strong>图（5）</strong></center><br>创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。<br><img src=\"/2018/06/13/git1/image006.png\" title=\"this is second image\"><br><center><strong>图（6）</strong></center><br>在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。<br><img src=\"/2018/06/13/git1/image007.png\" title=\"this is second image\"><br><center><strong>图（7）</strong></center>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1.名词解释\"></a>1.名词解释</h2><p><strong>Git</strong>: 一个免费的开源分布式版本控制系统<br><strong>github</strong>: 一个面向开源及私有软件项目的托管平台</p>\n<h2 id=\"2-Git下载安装与配置\"><a href=\"#2-Git下载安装与配置\" class=\"headerlink\" title=\"2.Git下载安装与配置\"></a>2.Git下载安装与配置</h2><p>从<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git官网</a>上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。<br><img src=\"/2018/06/13/git1/image001.png\" title=\"this is first image\"></p>\n<center><strong>图（1）</strong></center><br>git基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入<strong>git config –help</strong>查看。<br><img src=\"/2018/06/13/git1/image002.png\" title=\"this is second image\"><br><center><strong>图（2）</strong></center><br>配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。<br><img src=\"/2018/06/13/git1/image003.png\" title=\"this is second image\"><br><center><strong>图（3）</strong></center>\n\n<h2 id=\"3-github配置并新建托管项目\"><a href=\"#3-github配置并新建托管项目\" class=\"headerlink\" title=\"3.github配置并新建托管项目\"></a>3.github配置并新建托管项目</h2><p>访问<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github官网</a>，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。<br>Title名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。<br><img src=\"/2018/06/13/git1/image004.png\" title=\"this is second image\"></p>\n<center><strong>图（4）</strong></center><br>回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。<br><img src=\"/2018/06/13/git1/image005.png\" title=\"this is second image\"><br><center><strong>图（5）</strong></center><br>创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。<br><img src=\"/2018/06/13/git1/image006.png\" title=\"this is second image\"><br><center><strong>图（6）</strong></center><br>在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。<br><img src=\"/2018/06/13/git1/image007.png\" title=\"this is second image\"><br><center><strong>图（7）</strong></center>\n"},{"title":"Git系列之本地仓库","date":"2018-06-14T13:48:30.000Z","_content":"## 1.初始化本地仓库\n本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。\n{% asset_img image003.png this is first image %}\n<center>**图（3）**</center>\n## 2.推送本地仓库至github\n先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。\n复制项目的git地址（如：git@github.com:zhuxiaobotongxue/test.git）。\n在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。\n{% asset_img image004.png this is first image %}\n<center>**图（4）**</center>\n此时刷新github仓库，就可以看到内容提交成功了。","source":"_posts/2018-06-14-git2.md","raw":"---\ntitle: Git系列之本地仓库\ndate: 2018-06-14 21:48:30\ntags: Git\n---\n## 1.初始化本地仓库\n本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。\n{% asset_img image003.png this is first image %}\n<center>**图（3）**</center>\n## 2.推送本地仓库至github\n先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。\n复制项目的git地址（如：git@github.com:zhuxiaobotongxue/test.git）。\n在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。\n{% asset_img image004.png this is first image %}\n<center>**图（4）**</center>\n此时刷新github仓库，就可以看到内容提交成功了。","slug":"git2","published":1,"updated":"2019-03-14T04:52:58.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3d50001mtjkih9079mw","content":"<h2 id=\"1-初始化本地仓库\"><a href=\"#1-初始化本地仓库\" class=\"headerlink\" title=\"1.初始化本地仓库\"></a>1.初始化本地仓库</h2><p>本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。<br><img src=\"/2018/06/14/git2/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】<br><img src=\"/2018/06/14/git2/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br>本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。<br><img src=\"/2018/06/14/git2/image003.png\" title=\"this is first image\"></p>\n<p><center><strong>图（3）</strong></center></p>\n<h2 id=\"2-推送本地仓库至github\"><a href=\"#2-推送本地仓库至github\" class=\"headerlink\" title=\"2.推送本地仓库至github\"></a>2.推送本地仓库至github</h2><p>先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。<br>复制项目的git地址（如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zhuxiaobotongxue/test.git）。<br>在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。<br><img src=\"/2018/06/14/git2/image004.png\" title=\"this is first image\"></p>\n<p><center><strong>图（4）</strong></center><br>此时刷新github仓库，就可以看到内容提交成功了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-初始化本地仓库\"><a href=\"#1-初始化本地仓库\" class=\"headerlink\" title=\"1.初始化本地仓库\"></a>1.初始化本地仓库</h2><p>本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。<br><img src=\"/2018/06/14/git2/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】<br><img src=\"/2018/06/14/git2/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br>本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。<br><img src=\"/2018/06/14/git2/image003.png\" title=\"this is first image\"></p>\n<p><center><strong>图（3）</strong></center></p>\n<h2 id=\"2-推送本地仓库至github\"><a href=\"#2-推送本地仓库至github\" class=\"headerlink\" title=\"2.推送本地仓库至github\"></a>2.推送本地仓库至github</h2><p>先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。<br>复制项目的git地址（如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zhuxiaobotongxue/test.git）。<br>在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。<br><img src=\"/2018/06/14/git2/image004.png\" title=\"this is first image\"></p>\n<p><center><strong>图（4）</strong></center><br>此时刷新github仓库，就可以看到内容提交成功了。</p>\n"},{"title":"Git系列之撤销","date":"2018-06-14T14:05:42.000Z","_content":"## 1.工作流的状态\n要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】\n**工作区**，修改文档尚未添加至版本控制\n**暂存区**，修改文档已添加至版本控制，但尚未提交至版本库\n**版本库**，修改文档提交至版本库，文档状态变化\n远程环境只有一种状态：\n**远程分支**，修改文档被提交至远程代码仓库\n【名词辨识】\nmaster/branch : 分支，master为项目默认分支，也叫主分支\nhead : 本地当前版本库的指针，指向最新的提交\norigin : 默认的远程版本库名称\n## 2.工作区撤销修改\n该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。\n撤销执行命令git checkout .即可。\n## 3.暂存区撤销修改\n该状态已添加至版本控制，即已执行git add，修改内容处于暂存区\n撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留\n## 4.版本库撤销修改\n该状态已添加至版本库，即已执行git commit,修改内容处于版本库。\n撤销命令如下：\ngit reset --hard HEAD~1\t撤销提交并删除修改\ngit reset --soft HEAD~1\t撤销提交并将修改恢复至**暂存区**\ngit reset HEAD~1\t\t撤销提交并就修改恢复至**工作区**\n## 5.远程分支撤销修改\n思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。\n{% asset_img image002.png this is first image %}\n也可以用--soft保持修改内容至暂存区，如下图所示。\n{% asset_img image003.png this is first image %}\n","source":"_posts/2018-06-14-git3.md","raw":"---\ntitle: Git系列之撤销\ndate: 2018-06-14 22:05:42\ntags: Git\n---\n## 1.工作流的状态\n要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】\n**工作区**，修改文档尚未添加至版本控制\n**暂存区**，修改文档已添加至版本控制，但尚未提交至版本库\n**版本库**，修改文档提交至版本库，文档状态变化\n远程环境只有一种状态：\n**远程分支**，修改文档被提交至远程代码仓库\n【名词辨识】\nmaster/branch : 分支，master为项目默认分支，也叫主分支\nhead : 本地当前版本库的指针，指向最新的提交\norigin : 默认的远程版本库名称\n## 2.工作区撤销修改\n该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。\n撤销执行命令git checkout .即可。\n## 3.暂存区撤销修改\n该状态已添加至版本控制，即已执行git add，修改内容处于暂存区\n撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留\n## 4.版本库撤销修改\n该状态已添加至版本库，即已执行git commit,修改内容处于版本库。\n撤销命令如下：\ngit reset --hard HEAD~1\t撤销提交并删除修改\ngit reset --soft HEAD~1\t撤销提交并将修改恢复至**暂存区**\ngit reset HEAD~1\t\t撤销提交并就修改恢复至**工作区**\n## 5.远程分支撤销修改\n思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。\n{% asset_img image002.png this is first image %}\n也可以用--soft保持修改内容至暂存区，如下图所示。\n{% asset_img image003.png this is first image %}\n","slug":"git3","published":1,"updated":"2019-03-14T04:52:58.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3dc0003mtjkhy0hd8kr","content":"<h2 id=\"1-工作流的状态\"><a href=\"#1-工作流的状态\" class=\"headerlink\" title=\"1.工作流的状态\"></a>1.工作流的状态</h2><p>要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。<br><img src=\"/2018/06/14/git3/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】<br><strong>工作区</strong>，修改文档尚未添加至版本控制<br><strong>暂存区</strong>，修改文档已添加至版本控制，但尚未提交至版本库<br><strong>版本库</strong>，修改文档提交至版本库，文档状态变化<br>远程环境只有一种状态：<br><strong>远程分支</strong>，修改文档被提交至远程代码仓库<br>【名词辨识】<br>master/branch : 分支，master为项目默认分支，也叫主分支<br>head : 本地当前版本库的指针，指向最新的提交<br>origin : 默认的远程版本库名称</p>\n<h2 id=\"2-工作区撤销修改\"><a href=\"#2-工作区撤销修改\" class=\"headerlink\" title=\"2.工作区撤销修改\"></a>2.工作区撤销修改</h2><p>该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。<br>撤销执行命令git checkout .即可。</p>\n<h2 id=\"3-暂存区撤销修改\"><a href=\"#3-暂存区撤销修改\" class=\"headerlink\" title=\"3.暂存区撤销修改\"></a>3.暂存区撤销修改</h2><p>该状态已添加至版本控制，即已执行git add，修改内容处于暂存区<br>撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留</p>\n<h2 id=\"4-版本库撤销修改\"><a href=\"#4-版本库撤销修改\" class=\"headerlink\" title=\"4.版本库撤销修改\"></a>4.版本库撤销修改</h2><p>该状态已添加至版本库，即已执行git commit,修改内容处于版本库。<br>撤销命令如下：<br>git reset –hard HEAD~1    撤销提交并删除修改<br>git reset –soft HEAD~1    撤销提交并将修改恢复至<strong>暂存区</strong><br>git reset HEAD~1        撤销提交并就修改恢复至<strong>工作区</strong></p>\n<h2 id=\"5-远程分支撤销修改\"><a href=\"#5-远程分支撤销修改\" class=\"headerlink\" title=\"5.远程分支撤销修改\"></a>5.远程分支撤销修改</h2><p>思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。<br><img src=\"/2018/06/14/git3/image002.png\" title=\"this is first image\"><br>也可以用–soft保持修改内容至暂存区，如下图所示。<br><img src=\"/2018/06/14/git3/image003.png\" title=\"this is first image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-工作流的状态\"><a href=\"#1-工作流的状态\" class=\"headerlink\" title=\"1.工作流的状态\"></a>1.工作流的状态</h2><p>要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。<br><img src=\"/2018/06/14/git3/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】<br><strong>工作区</strong>，修改文档尚未添加至版本控制<br><strong>暂存区</strong>，修改文档已添加至版本控制，但尚未提交至版本库<br><strong>版本库</strong>，修改文档提交至版本库，文档状态变化<br>远程环境只有一种状态：<br><strong>远程分支</strong>，修改文档被提交至远程代码仓库<br>【名词辨识】<br>master/branch : 分支，master为项目默认分支，也叫主分支<br>head : 本地当前版本库的指针，指向最新的提交<br>origin : 默认的远程版本库名称</p>\n<h2 id=\"2-工作区撤销修改\"><a href=\"#2-工作区撤销修改\" class=\"headerlink\" title=\"2.工作区撤销修改\"></a>2.工作区撤销修改</h2><p>该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。<br>撤销执行命令git checkout .即可。</p>\n<h2 id=\"3-暂存区撤销修改\"><a href=\"#3-暂存区撤销修改\" class=\"headerlink\" title=\"3.暂存区撤销修改\"></a>3.暂存区撤销修改</h2><p>该状态已添加至版本控制，即已执行git add，修改内容处于暂存区<br>撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留</p>\n<h2 id=\"4-版本库撤销修改\"><a href=\"#4-版本库撤销修改\" class=\"headerlink\" title=\"4.版本库撤销修改\"></a>4.版本库撤销修改</h2><p>该状态已添加至版本库，即已执行git commit,修改内容处于版本库。<br>撤销命令如下：<br>git reset –hard HEAD~1    撤销提交并删除修改<br>git reset –soft HEAD~1    撤销提交并将修改恢复至<strong>暂存区</strong><br>git reset HEAD~1        撤销提交并就修改恢复至<strong>工作区</strong></p>\n<h2 id=\"5-远程分支撤销修改\"><a href=\"#5-远程分支撤销修改\" class=\"headerlink\" title=\"5.远程分支撤销修改\"></a>5.远程分支撤销修改</h2><p>思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。<br><img src=\"/2018/06/14/git3/image002.png\" title=\"this is first image\"><br>也可以用–soft保持修改内容至暂存区，如下图所示。<br><img src=\"/2018/06/14/git3/image003.png\" title=\"this is first image\"></p>\n"},{"title":"Git系列之分支","date":"2018-06-14T14:21:52.000Z","_content":"## 1.创建本地分支并推送至github\n从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n推送该分支至github，并查看所有分支，如图（2）所示。\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n## 2.合并分支\n首先切换至master分支，将test_branch分支上所做的修改合并至master分支。\n推送合并后的提交至远程，如下图所示。\n【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】\n【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】\n{% asset_img image003.png this is first image %}\n","source":"_posts/2018-06-14-git4.md","raw":"---\ntitle: Git系列之分支\ndate: 2018-06-14 22:21:52\ntags: Git\n---\n## 1.创建本地分支并推送至github\n从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n推送该分支至github，并查看所有分支，如图（2）所示。\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n## 2.合并分支\n首先切换至master分支，将test_branch分支上所做的修改合并至master分支。\n推送合并后的提交至远程，如下图所示。\n【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】\n【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】\n{% asset_img image003.png this is first image %}\n","slug":"git4","published":1,"updated":"2019-03-14T04:52:58.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3de0004mtjkr60ty51f","content":"<h2 id=\"1-创建本地分支并推送至github\"><a href=\"#1-创建本地分支并推送至github\" class=\"headerlink\" title=\"1.创建本地分支并推送至github\"></a>1.创建本地分支并推送至github</h2><p>从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。<br><img src=\"/2018/06/14/git4/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>推送该分支至github，并查看所有分支，如图（2）所示。<br><img src=\"/2018/06/14/git4/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center></p>\n<h2 id=\"2-合并分支\"><a href=\"#2-合并分支\" class=\"headerlink\" title=\"2.合并分支\"></a>2.合并分支</h2><p>首先切换至master分支，将test_branch分支上所做的修改合并至master分支。<br>推送合并后的提交至远程，如下图所示。<br>【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】<br>【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】<br><img src=\"/2018/06/14/git4/image003.png\" title=\"this is first image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-创建本地分支并推送至github\"><a href=\"#1-创建本地分支并推送至github\" class=\"headerlink\" title=\"1.创建本地分支并推送至github\"></a>1.创建本地分支并推送至github</h2><p>从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。<br><img src=\"/2018/06/14/git4/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>推送该分支至github，并查看所有分支，如图（2）所示。<br><img src=\"/2018/06/14/git4/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center></p>\n<h2 id=\"2-合并分支\"><a href=\"#2-合并分支\" class=\"headerlink\" title=\"2.合并分支\"></a>2.合并分支</h2><p>首先切换至master分支，将test_branch分支上所做的修改合并至master分支。<br>推送合并后的提交至远程，如下图所示。<br>【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】<br>【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】<br><img src=\"/2018/06/14/git4/image003.png\" title=\"this is first image\"></p>\n"},{"title":"Git系列之冲突详解","date":"2018-06-14T15:52:59.000Z","_content":"## 1.冲突产生的原因\n针对某个合并操作,**HEAD仓库中被修改过的部分**与**工作目录中将被合并的修改部分**为同一代码片段,此时git不知如何取舍,便会产生冲突.\n## 2.演示冲突的产生\n从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。\n{% asset_img image001.png this is first image %}\n我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。\n{% asset_img image002.png this is first image %}\n此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。\n【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是**直接从暂存区取出至缓存区**】\n{% asset_img image003.png this is first image %}\n## 3.冲突解决的原理\n人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。\n## 4.演示冲突的解决\n冲突文件中冲突区域如下图所示。\n{% asset_img image004.png this is first image %}\n我们调整冲突后，如下图所示。\n【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】\n{% asset_img image005.png this is first image %}\n然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。\n{% asset_img image006.png this is first image %}\n","source":"_posts/2018-06-14-git5.md","raw":"---\ntitle: Git系列之冲突详解\ndate: 2018-06-14 23:52:59\ntags: Git\n---\n## 1.冲突产生的原因\n针对某个合并操作,**HEAD仓库中被修改过的部分**与**工作目录中将被合并的修改部分**为同一代码片段,此时git不知如何取舍,便会产生冲突.\n## 2.演示冲突的产生\n从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。\n{% asset_img image001.png this is first image %}\n我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。\n{% asset_img image002.png this is first image %}\n此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。\n【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是**直接从暂存区取出至缓存区**】\n{% asset_img image003.png this is first image %}\n## 3.冲突解决的原理\n人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。\n## 4.演示冲突的解决\n冲突文件中冲突区域如下图所示。\n{% asset_img image004.png this is first image %}\n我们调整冲突后，如下图所示。\n【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】\n{% asset_img image005.png this is first image %}\n然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。\n{% asset_img image006.png this is first image %}\n","slug":"git5","published":1,"updated":"2019-03-14T04:52:58.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3dg0005mtjk1q0g6k8k","content":"<h2 id=\"1-冲突产生的原因\"><a href=\"#1-冲突产生的原因\" class=\"headerlink\" title=\"1.冲突产生的原因\"></a>1.冲突产生的原因</h2><p>针对某个合并操作,<strong>HEAD仓库中被修改过的部分</strong>与<strong>工作目录中将被合并的修改部分</strong>为同一代码片段,此时git不知如何取舍,便会产生冲突.</p>\n<h2 id=\"2-演示冲突的产生\"><a href=\"#2-演示冲突的产生\" class=\"headerlink\" title=\"2.演示冲突的产生\"></a>2.演示冲突的产生</h2><p>从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。<br><img src=\"/2018/06/14/git5/image001.png\" title=\"this is first image\"><br>我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。<br><img src=\"/2018/06/14/git5/image002.png\" title=\"this is first image\"><br>此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。<br>【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是<strong>直接从暂存区取出至缓存区</strong>】<br><img src=\"/2018/06/14/git5/image003.png\" title=\"this is first image\"></p>\n<h2 id=\"3-冲突解决的原理\"><a href=\"#3-冲突解决的原理\" class=\"headerlink\" title=\"3.冲突解决的原理\"></a>3.冲突解决的原理</h2><p>人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。</p>\n<h2 id=\"4-演示冲突的解决\"><a href=\"#4-演示冲突的解决\" class=\"headerlink\" title=\"4.演示冲突的解决\"></a>4.演示冲突的解决</h2><p>冲突文件中冲突区域如下图所示。<br><img src=\"/2018/06/14/git5/image004.png\" title=\"this is first image\"><br>我们调整冲突后，如下图所示。<br>【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】<br><img src=\"/2018/06/14/git5/image005.png\" title=\"this is first image\"><br>然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。<br><img src=\"/2018/06/14/git5/image006.png\" title=\"this is first image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-冲突产生的原因\"><a href=\"#1-冲突产生的原因\" class=\"headerlink\" title=\"1.冲突产生的原因\"></a>1.冲突产生的原因</h2><p>针对某个合并操作,<strong>HEAD仓库中被修改过的部分</strong>与<strong>工作目录中将被合并的修改部分</strong>为同一代码片段,此时git不知如何取舍,便会产生冲突.</p>\n<h2 id=\"2-演示冲突的产生\"><a href=\"#2-演示冲突的产生\" class=\"headerlink\" title=\"2.演示冲突的产生\"></a>2.演示冲突的产生</h2><p>从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。<br><img src=\"/2018/06/14/git5/image001.png\" title=\"this is first image\"><br>我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。<br><img src=\"/2018/06/14/git5/image002.png\" title=\"this is first image\"><br>此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。<br>【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是<strong>直接从暂存区取出至缓存区</strong>】<br><img src=\"/2018/06/14/git5/image003.png\" title=\"this is first image\"></p>\n<h2 id=\"3-冲突解决的原理\"><a href=\"#3-冲突解决的原理\" class=\"headerlink\" title=\"3.冲突解决的原理\"></a>3.冲突解决的原理</h2><p>人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。</p>\n<h2 id=\"4-演示冲突的解决\"><a href=\"#4-演示冲突的解决\" class=\"headerlink\" title=\"4.演示冲突的解决\"></a>4.演示冲突的解决</h2><p>冲突文件中冲突区域如下图所示。<br><img src=\"/2018/06/14/git5/image004.png\" title=\"this is first image\"><br>我们调整冲突后，如下图所示。<br>【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】<br><img src=\"/2018/06/14/git5/image005.png\" title=\"this is first image\"><br>然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。<br><img src=\"/2018/06/14/git5/image006.png\" title=\"this is first image\"></p>\n"},{"title":"Git系列之命令一览","date":"2018-06-25T12:30:27.000Z","_content":"## 1.配置/初始化/常规操作\ngit --version\ngit help\ngit config --help\ngit config --list --global\ngit config --global --add user.name zhuxiaobotongxue\ngit init\ngit clone\ngit add .\ngit commit –m “this is a commit”\ngit push origin master\ngit pull origin self_branch\ngit fetch origin master  //拉取远程分支\ngit merge self_branch  //合并本地分支self_branch至当前分支\ngit checkout .  //撤销所有工作空间修改\ngit reset HEAD a.html  //撤销暂存区修改\ngit revert <commit>\t\t//撤销指定的提交\ngit checkout self_branch  //切换分支\ngit checkout –d self_branch  //删除本地分支\ngit log –p fileName  \t\t//查看指定文件提交历史\ngit log --oneline --decorate --graph --all\ngit diff --cached\ngit mv oldName newName   //文件改名\ngit rm fileName  \t\t\t//删除文件\ngit branch –a           //查看所有分支\n## 2.非频繁实用操作\ngit clone -b self_branch http://mall-service.git  //克隆指定分支\ngit reset --hard resetVersionHash\t//将工作空间强制恢复至指定提交\ngit push -f origin currentBranch\t//将本地分支强制推送至远程\ngit stash list\ngit stash pop stash@{0}\ngit remote add origin https://github.com/Test.git \t//将本地项目与远程建立联系\ngit push -u origin master\t//首次推送项目至远程，指定origin为默认\ngit push –delete origin self_branch //删除远程分支\ngit update-index --assume-unchanged FILENAME //已入库文件不再监听\ngit update-index --no-assume-unchanged FILENAME //恢复已入库文件监听\ngit gui  //调出图形界面\nssh-keygen -t rsa -C ”zhuxiaobotongxue@gmail.com” //生成秘钥\n## 3.小专题探究\n**拉取分支**\ngit pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支\n等同于\ngit fetch origin online\ngit checkout online\ngit merge origin/self_branch\t //将远程self_branch分支合并至当前分支\n**创建本地分支并提交至远程**\ngit checkout –b self_branch  \t//从当前分支创建本地分支并切换\ngit push origin selft_branch\t\t//将新分支提交至远程\n**忽略文件**\n.gitignore  //创建未入库文件忽略配置\n*.[oa]  表示忽略以o或者a结尾的文件\n*~ 表示忽略以~结尾的文件\n*.pyc 表示忽略以.pyc结尾的文件\n！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc\n\\!test.py 同上，不忽略以！开头的！test.py文件\nfoo/ 意思是忽略foo文件夹\n**/res 表示忽略顶层和任何层次的res文件夹\na 表示忽略a文件","source":"_posts/2018-06-25-git6.md","raw":"---\ntitle: Git系列之命令一览\ndate: 2018-06-25 20:30:27\ntags: Git\n---\n## 1.配置/初始化/常规操作\ngit --version\ngit help\ngit config --help\ngit config --list --global\ngit config --global --add user.name zhuxiaobotongxue\ngit init\ngit clone\ngit add .\ngit commit –m “this is a commit”\ngit push origin master\ngit pull origin self_branch\ngit fetch origin master  //拉取远程分支\ngit merge self_branch  //合并本地分支self_branch至当前分支\ngit checkout .  //撤销所有工作空间修改\ngit reset HEAD a.html  //撤销暂存区修改\ngit revert <commit>\t\t//撤销指定的提交\ngit checkout self_branch  //切换分支\ngit checkout –d self_branch  //删除本地分支\ngit log –p fileName  \t\t//查看指定文件提交历史\ngit log --oneline --decorate --graph --all\ngit diff --cached\ngit mv oldName newName   //文件改名\ngit rm fileName  \t\t\t//删除文件\ngit branch –a           //查看所有分支\n## 2.非频繁实用操作\ngit clone -b self_branch http://mall-service.git  //克隆指定分支\ngit reset --hard resetVersionHash\t//将工作空间强制恢复至指定提交\ngit push -f origin currentBranch\t//将本地分支强制推送至远程\ngit stash list\ngit stash pop stash@{0}\ngit remote add origin https://github.com/Test.git \t//将本地项目与远程建立联系\ngit push -u origin master\t//首次推送项目至远程，指定origin为默认\ngit push –delete origin self_branch //删除远程分支\ngit update-index --assume-unchanged FILENAME //已入库文件不再监听\ngit update-index --no-assume-unchanged FILENAME //恢复已入库文件监听\ngit gui  //调出图形界面\nssh-keygen -t rsa -C ”zhuxiaobotongxue@gmail.com” //生成秘钥\n## 3.小专题探究\n**拉取分支**\ngit pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支\n等同于\ngit fetch origin online\ngit checkout online\ngit merge origin/self_branch\t //将远程self_branch分支合并至当前分支\n**创建本地分支并提交至远程**\ngit checkout –b self_branch  \t//从当前分支创建本地分支并切换\ngit push origin selft_branch\t\t//将新分支提交至远程\n**忽略文件**\n.gitignore  //创建未入库文件忽略配置\n*.[oa]  表示忽略以o或者a结尾的文件\n*~ 表示忽略以~结尾的文件\n*.pyc 表示忽略以.pyc结尾的文件\n！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc\n\\!test.py 同上，不忽略以！开头的！test.py文件\nfoo/ 意思是忽略foo文件夹\n**/res 表示忽略顶层和任何层次的res文件夹\na 表示忽略a文件","slug":"git6","published":1,"updated":"2019-03-14T04:52:58.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3dj0008mtjk92cd1s5v","content":"<h2 id=\"1-配置-初始化-常规操作\"><a href=\"#1-配置-初始化-常规操作\" class=\"headerlink\" title=\"1.配置/初始化/常规操作\"></a>1.配置/初始化/常规操作</h2><p>git –version<br>git help<br>git config –help<br>git config –list –global<br>git config –global –add user.name zhuxiaobotongxue<br>git init<br>git clone<br>git add .<br>git commit –m “this is a commit”<br>git push origin master<br>git pull origin self_branch<br>git fetch origin master  //拉取远程分支<br>git merge self_branch  //合并本地分支self_branch至当前分支<br>git checkout .  //撤销所有工作空间修改<br>git reset HEAD a.html  //撤销暂存区修改<br>git revert <commit>        //撤销指定的提交<br>git checkout self_branch  //切换分支<br>git checkout –d self_branch  //删除本地分支<br>git log –p fileName          //查看指定文件提交历史<br>git log –oneline –decorate –graph –all<br>git diff –cached<br>git mv oldName newName   //文件改名<br>git rm fileName              //删除文件<br>git branch –a           //查看所有分支</commit></p>\n<h2 id=\"2-非频繁实用操作\"><a href=\"#2-非频繁实用操作\" class=\"headerlink\" title=\"2.非频繁实用操作\"></a>2.非频繁实用操作</h2><p>git clone -b self_branch <a href=\"http://mall-service.git\" target=\"_blank\" rel=\"noopener\">http://mall-service.git</a>  //克隆指定分支<br>git reset –hard resetVersionHash    //将工作空间强制恢复至指定提交<br>git push -f origin currentBranch    //将本地分支强制推送至远程<br>git stash list<br>git stash pop stash@{0}<br>git remote add origin <a href=\"https://github.com/Test.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Test.git</a>     //将本地项目与远程建立联系<br>git push -u origin master    //首次推送项目至远程，指定origin为默认<br>git push –delete origin self_branch //删除远程分支<br>git update-index –assume-unchanged FILENAME //已入库文件不再监听<br>git update-index –no-assume-unchanged FILENAME //恢复已入库文件监听<br>git gui  //调出图形界面<br>ssh-keygen -t rsa -C ”<a href=\"mailto:zhuxiaobotongxue@gmail.com\" target=\"_blank\" rel=\"noopener\">zhuxiaobotongxue@gmail.com</a>” //生成秘钥</p>\n<h2 id=\"3-小专题探究\"><a href=\"#3-小专题探究\" class=\"headerlink\" title=\"3.小专题探究\"></a>3.小专题探究</h2><p><strong>拉取分支</strong><br>git pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支<br>等同于<br>git fetch origin online<br>git checkout online<br>git merge origin/self_branch     //将远程self_branch分支合并至当前分支<br><strong>创建本地分支并提交至远程</strong><br>git checkout –b self_branch      //从当前分支创建本地分支并切换<br>git push origin selft_branch        //将新分支提交至远程<br><strong>忽略文件</strong><br>.gitignore  //创建未入库文件忽略配置<br><em>.[oa]  表示忽略以o或者a结尾的文件\n</em>~ 表示忽略以~结尾的文件<br>*.pyc 表示忽略以.pyc结尾的文件<br>！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc<br>!test.py 同上，不忽略以！开头的！test.py文件<br>foo/ 意思是忽略foo文件夹<br>**/res 表示忽略顶层和任何层次的res文件夹<br>a 表示忽略a文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-配置-初始化-常规操作\"><a href=\"#1-配置-初始化-常规操作\" class=\"headerlink\" title=\"1.配置/初始化/常规操作\"></a>1.配置/初始化/常规操作</h2><p>git –version<br>git help<br>git config –help<br>git config –list –global<br>git config –global –add user.name zhuxiaobotongxue<br>git init<br>git clone<br>git add .<br>git commit –m “this is a commit”<br>git push origin master<br>git pull origin self_branch<br>git fetch origin master  //拉取远程分支<br>git merge self_branch  //合并本地分支self_branch至当前分支<br>git checkout .  //撤销所有工作空间修改<br>git reset HEAD a.html  //撤销暂存区修改<br>git revert <commit>        //撤销指定的提交<br>git checkout self_branch  //切换分支<br>git checkout –d self_branch  //删除本地分支<br>git log –p fileName          //查看指定文件提交历史<br>git log –oneline –decorate –graph –all<br>git diff –cached<br>git mv oldName newName   //文件改名<br>git rm fileName              //删除文件<br>git branch –a           //查看所有分支</commit></p>\n<h2 id=\"2-非频繁实用操作\"><a href=\"#2-非频繁实用操作\" class=\"headerlink\" title=\"2.非频繁实用操作\"></a>2.非频繁实用操作</h2><p>git clone -b self_branch <a href=\"http://mall-service.git\" target=\"_blank\" rel=\"noopener\">http://mall-service.git</a>  //克隆指定分支<br>git reset –hard resetVersionHash    //将工作空间强制恢复至指定提交<br>git push -f origin currentBranch    //将本地分支强制推送至远程<br>git stash list<br>git stash pop stash@{0}<br>git remote add origin <a href=\"https://github.com/Test.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Test.git</a>     //将本地项目与远程建立联系<br>git push -u origin master    //首次推送项目至远程，指定origin为默认<br>git push –delete origin self_branch //删除远程分支<br>git update-index –assume-unchanged FILENAME //已入库文件不再监听<br>git update-index –no-assume-unchanged FILENAME //恢复已入库文件监听<br>git gui  //调出图形界面<br>ssh-keygen -t rsa -C ”<a href=\"mailto:zhuxiaobotongxue@gmail.com\" target=\"_blank\" rel=\"noopener\">zhuxiaobotongxue@gmail.com</a>” //生成秘钥</p>\n<h2 id=\"3-小专题探究\"><a href=\"#3-小专题探究\" class=\"headerlink\" title=\"3.小专题探究\"></a>3.小专题探究</h2><p><strong>拉取分支</strong><br>git pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支<br>等同于<br>git fetch origin online<br>git checkout online<br>git merge origin/self_branch     //将远程self_branch分支合并至当前分支<br><strong>创建本地分支并提交至远程</strong><br>git checkout –b self_branch      //从当前分支创建本地分支并切换<br>git push origin selft_branch        //将新分支提交至远程<br><strong>忽略文件</strong><br>.gitignore  //创建未入库文件忽略配置<br><em>.[oa]  表示忽略以o或者a结尾的文件\n</em>~ 表示忽略以~结尾的文件<br>*.pyc 表示忽略以.pyc结尾的文件<br>！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc<br>!test.py 同上，不忽略以！开头的！test.py文件<br>foo/ 意思是忽略foo文件夹<br>**/res 表示忽略顶层和任何层次的res文件夹<br>a 表示忽略a文件</p>\n"},{"title":"开发者工具","date":"2018-06-29T12:49:28.000Z","_content":"## 1.Elements\nctrl+shift+c\t\t选取dom元素\nESC\t\t\t\t在Elements面板可以用打开Console\n在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,\n同时面包屑导航会给出层级结构,\n按住并拖动节点可以移动节点位置,\n查看元素事件侦听器,选中对应元素,打开Elements->Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,\n单击节点,右键Break on可以为节点添加Dom事件监听,在Elements->DOM Breakpoints面板可以查看详情,\n鼠标悬停在Elements->Styles面板对应css名称上可以查看受影响的Dom,\n在对应css右下角有小图标可以调整颜色和阴影,\n编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,\nCtrl+点击任何css属性可以直接跳转至对应文件相应行\n## 2.Console\n提供了一个命令行接口，用来与网页代码互动。\nF12\t\t\t\t打开DevTools\nctrl+shift+J\t\t打开控制台并定位光标\nctrl+L\t\t\t清空控制台\nconsole.log('aaa');\nconsole.info('aaa');\nconsole.error('aaa');\nconsole.warn('aaa');\n分组日志\nconsole.group('aaa');\nconsole.log('我是aaa小组的日志');\nconsole.groupEnd();\n断言日志\nconsole.assert(false,'当第一个参数为false时输出该条消息');\n统计执行次数日志\nfunction myFun(){\n\tconsole.count('myFun被执行的次数');\n}\nmyFun();\nmyFun();\n输出对象的属性和方法\nconsole.dir(document.body);\n统计代码执行时间\nconsole.time(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\");\n查看代码执行对cpu的使用情况\nconsole.profile(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.profileEnd(\"Array initialize\");\n执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息\n复制选中的DOM结构至剪切板\ncopy(document.body);\n输出对象的键或值对\nvar myObj = {name:'xiaoming',sex:'female'};\nkeys(myObj);\nvalues(myObj);\n用表格样式输出json格式数组\nvar myArray = [{\"name\":\"xiaoming\"},{\"sex\":\"12\"}];\nconsole.table(myArray);\n\nconsole.log('%c This text is styled!',\n  'color: red; background: yellow; font-size: 24px;'\n)\n\nvar number = 11 * 9;\nvar color = 'red';\nconsole.log('%d %s balloons', number, color);\n\n%s 字符串\n%d 整数\n%i 整数\n%f 浮点数\n%o 对象的链接\n%c CSS格式字符串\n\ndebugger\n","source":"_posts/2018-06-29-googledev.md","raw":"---\ntitle: 开发者工具\ndate: 2018-06-29 20:49:28\ntags: tools\n---\n## 1.Elements\nctrl+shift+c\t\t选取dom元素\nESC\t\t\t\t在Elements面板可以用打开Console\n在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,\n同时面包屑导航会给出层级结构,\n按住并拖动节点可以移动节点位置,\n查看元素事件侦听器,选中对应元素,打开Elements->Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,\n单击节点,右键Break on可以为节点添加Dom事件监听,在Elements->DOM Breakpoints面板可以查看详情,\n鼠标悬停在Elements->Styles面板对应css名称上可以查看受影响的Dom,\n在对应css右下角有小图标可以调整颜色和阴影,\n编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,\nCtrl+点击任何css属性可以直接跳转至对应文件相应行\n## 2.Console\n提供了一个命令行接口，用来与网页代码互动。\nF12\t\t\t\t打开DevTools\nctrl+shift+J\t\t打开控制台并定位光标\nctrl+L\t\t\t清空控制台\nconsole.log('aaa');\nconsole.info('aaa');\nconsole.error('aaa');\nconsole.warn('aaa');\n分组日志\nconsole.group('aaa');\nconsole.log('我是aaa小组的日志');\nconsole.groupEnd();\n断言日志\nconsole.assert(false,'当第一个参数为false时输出该条消息');\n统计执行次数日志\nfunction myFun(){\n\tconsole.count('myFun被执行的次数');\n}\nmyFun();\nmyFun();\n输出对象的属性和方法\nconsole.dir(document.body);\n统计代码执行时间\nconsole.time(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\");\n查看代码执行对cpu的使用情况\nconsole.profile(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.profileEnd(\"Array initialize\");\n执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息\n复制选中的DOM结构至剪切板\ncopy(document.body);\n输出对象的键或值对\nvar myObj = {name:'xiaoming',sex:'female'};\nkeys(myObj);\nvalues(myObj);\n用表格样式输出json格式数组\nvar myArray = [{\"name\":\"xiaoming\"},{\"sex\":\"12\"}];\nconsole.table(myArray);\n\nconsole.log('%c This text is styled!',\n  'color: red; background: yellow; font-size: 24px;'\n)\n\nvar number = 11 * 9;\nvar color = 'red';\nconsole.log('%d %s balloons', number, color);\n\n%s 字符串\n%d 整数\n%i 整数\n%f 浮点数\n%o 对象的链接\n%c CSS格式字符串\n\ndebugger\n","slug":"googledev","published":1,"updated":"2019-03-14T04:52:58.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3dl000amtjkgia78iv8","content":"<h2 id=\"1-Elements\"><a href=\"#1-Elements\" class=\"headerlink\" title=\"1.Elements\"></a>1.Elements</h2><p>ctrl+shift+c        选取dom元素<br>ESC                在Elements面板可以用打开Console<br>在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,<br>同时面包屑导航会给出层级结构,<br>按住并拖动节点可以移动节点位置,<br>查看元素事件侦听器,选中对应元素,打开Elements-&gt;Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,<br>单击节点,右键Break on可以为节点添加Dom事件监听,在Elements-&gt;DOM Breakpoints面板可以查看详情,<br>鼠标悬停在Elements-&gt;Styles面板对应css名称上可以查看受影响的Dom,<br>在对应css右下角有小图标可以调整颜色和阴影,<br>编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,<br>Ctrl+点击任何css属性可以直接跳转至对应文件相应行</p>\n<h2 id=\"2-Console\"><a href=\"#2-Console\" class=\"headerlink\" title=\"2.Console\"></a>2.Console</h2><p>提供了一个命令行接口，用来与网页代码互动。<br>F12                打开DevTools<br>ctrl+shift+J        打开控制台并定位光标<br>ctrl+L            清空控制台<br>console.log(‘aaa’);<br>console.info(‘aaa’);<br>console.error(‘aaa’);<br>console.warn(‘aaa’);<br>分组日志<br>console.group(‘aaa’);<br>console.log(‘我是aaa小组的日志’);<br>console.groupEnd();<br>断言日志<br>console.assert(false,’当第一个参数为false时输出该条消息’);<br>统计执行次数日志<br>function myFun(){<br>    console.count(‘myFun被执行的次数’);<br>}<br>myFun();<br>myFun();<br>输出对象的属性和方法<br>console.dir(document.body);<br>统计代码执行时间<br>console.time(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.timeEnd(“Array initialize”);<br>查看代码执行对cpu的使用情况<br>console.profile(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.profileEnd(“Array initialize”);<br>执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息<br>复制选中的DOM结构至剪切板<br>copy(document.body);<br>输出对象的键或值对<br>var myObj = {name:’xiaoming’,sex:’female’};<br>keys(myObj);<br>values(myObj);<br>用表格样式输出json格式数组<br>var myArray = [{“name”:”xiaoming”},{“sex”:”12”}];<br>console.table(myArray);</p>\n<p>console.log(‘%c This text is styled!’,<br>  ‘color: red; background: yellow; font-size: 24px;’<br>)</p>\n<p>var number = 11 * 9;<br>var color = ‘red’;<br>console.log(‘%d %s balloons’, number, color);</p>\n<p>%s 字符串<br>%d 整数<br>%i 整数<br>%f 浮点数<br>%o 对象的链接<br>%c CSS格式字符串</p>\n<p>debugger</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Elements\"><a href=\"#1-Elements\" class=\"headerlink\" title=\"1.Elements\"></a>1.Elements</h2><p>ctrl+shift+c        选取dom元素<br>ESC                在Elements面板可以用打开Console<br>在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,<br>同时面包屑导航会给出层级结构,<br>按住并拖动节点可以移动节点位置,<br>查看元素事件侦听器,选中对应元素,打开Elements-&gt;Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,<br>单击节点,右键Break on可以为节点添加Dom事件监听,在Elements-&gt;DOM Breakpoints面板可以查看详情,<br>鼠标悬停在Elements-&gt;Styles面板对应css名称上可以查看受影响的Dom,<br>在对应css右下角有小图标可以调整颜色和阴影,<br>编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,<br>Ctrl+点击任何css属性可以直接跳转至对应文件相应行</p>\n<h2 id=\"2-Console\"><a href=\"#2-Console\" class=\"headerlink\" title=\"2.Console\"></a>2.Console</h2><p>提供了一个命令行接口，用来与网页代码互动。<br>F12                打开DevTools<br>ctrl+shift+J        打开控制台并定位光标<br>ctrl+L            清空控制台<br>console.log(‘aaa’);<br>console.info(‘aaa’);<br>console.error(‘aaa’);<br>console.warn(‘aaa’);<br>分组日志<br>console.group(‘aaa’);<br>console.log(‘我是aaa小组的日志’);<br>console.groupEnd();<br>断言日志<br>console.assert(false,’当第一个参数为false时输出该条消息’);<br>统计执行次数日志<br>function myFun(){<br>    console.count(‘myFun被执行的次数’);<br>}<br>myFun();<br>myFun();<br>输出对象的属性和方法<br>console.dir(document.body);<br>统计代码执行时间<br>console.time(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.timeEnd(“Array initialize”);<br>查看代码执行对cpu的使用情况<br>console.profile(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.profileEnd(“Array initialize”);<br>执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息<br>复制选中的DOM结构至剪切板<br>copy(document.body);<br>输出对象的键或值对<br>var myObj = {name:’xiaoming’,sex:’female’};<br>keys(myObj);<br>values(myObj);<br>用表格样式输出json格式数组<br>var myArray = [{“name”:”xiaoming”},{“sex”:”12”}];<br>console.table(myArray);</p>\n<p>console.log(‘%c This text is styled!’,<br>  ‘color: red; background: yellow; font-size: 24px;’<br>)</p>\n<p>var number = 11 * 9;<br>var color = ‘red’;<br>console.log(‘%d %s balloons’, number, color);</p>\n<p>%s 字符串<br>%d 整数<br>%i 整数<br>%f 浮点数<br>%o 对象的链接<br>%c CSS格式字符串</p>\n<p>debugger</p>\n"},{"title":"hexo使用笔记","date":"2018-11-15T11:44:41.000Z","_content":"## 1.文档目的\n该文档用于自己及时查看，并快速上手继续写博客\n参考网址：[hexo官方文挡](https://hexo.io/zh-cn/docs/commands)\n## 2.快速编写博客\n1.查看自己远程博客：https://zhuxiaobotongxue.github.io/\n2.本地化启动服务：**hexo s**\n3.如何生成一篇博客(如：git1)：**hexo new post git1**\n4.打开source文件夹并编辑博客，[markdown语法](https://www.jianshu.com/p/191d1e21f7ed)\n5.编译博客： **hexo g**\n6.部署至远程：**hexo d**\n7.备份原代码：**git add ./git commit -m ''/git push**\n","source":"_posts/2018-11-15-hexo.md","raw":"---\ntitle: hexo使用笔记\ndate: 2018-11-15 19:44:41\ntags: tools\n---\n## 1.文档目的\n该文档用于自己及时查看，并快速上手继续写博客\n参考网址：[hexo官方文挡](https://hexo.io/zh-cn/docs/commands)\n## 2.快速编写博客\n1.查看自己远程博客：https://zhuxiaobotongxue.github.io/\n2.本地化启动服务：**hexo s**\n3.如何生成一篇博客(如：git1)：**hexo new post git1**\n4.打开source文件夹并编辑博客，[markdown语法](https://www.jianshu.com/p/191d1e21f7ed)\n5.编译博客： **hexo g**\n6.部署至远程：**hexo d**\n7.备份原代码：**git add ./git commit -m ''/git push**\n","slug":"hexo","published":1,"updated":"2019-03-14T04:52:58.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3dn000dmtjkomv1yxxk","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于自己及时查看，并快速上手继续写博客<br>参考网址：<a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">hexo官方文挡</a></p>\n<h2 id=\"2-快速编写博客\"><a href=\"#2-快速编写博客\" class=\"headerlink\" title=\"2.快速编写博客\"></a>2.快速编写博客</h2><p>1.查看自己远程博客：<a href=\"https://zhuxiaobotongxue.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhuxiaobotongxue.github.io/</a><br>2.本地化启动服务：<strong>hexo s</strong><br>3.如何生成一篇博客(如：git1)：<strong>hexo new post git1</strong><br>4.打开source文件夹并编辑博客，<a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">markdown语法</a><br>5.编译博客： <strong>hexo g</strong><br>6.部署至远程：<strong>hexo d</strong><br>7.备份原代码：<strong>git add ./git commit -m ‘’/git push</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于自己及时查看，并快速上手继续写博客<br>参考网址：<a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">hexo官方文挡</a></p>\n<h2 id=\"2-快速编写博客\"><a href=\"#2-快速编写博客\" class=\"headerlink\" title=\"2.快速编写博客\"></a>2.快速编写博客</h2><p>1.查看自己远程博客：<a href=\"https://zhuxiaobotongxue.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhuxiaobotongxue.github.io/</a><br>2.本地化启动服务：<strong>hexo s</strong><br>3.如何生成一篇博客(如：git1)：<strong>hexo new post git1</strong><br>4.打开source文件夹并编辑博客，<a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">markdown语法</a><br>5.编译博客： <strong>hexo g</strong><br>6.部署至远程：<strong>hexo d</strong><br>7.备份原代码：<strong>git add ./git commit -m ‘’/git push</strong></p>\n"},{"title":"keymap","date":"2018-11-15T12:12:21.000Z","_content":"## 1.windows平台常用快捷键\n\n**【win系统】**\n无鼠标快捷操作电脑[win7]\n[1]开启键盘操作鼠标\n控制面板->轻松访问->鼠标更易用->设置鼠标键...\nAlt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动\n[2]常用系统快捷键\nWIN 打开搜素程序和文件\nWIN+E 我的电脑\nWIN+T 切换任务栏\nWIN+L 锁定计算机\nWIN+D 显示桌面\nWIN+M 最小化所有窗口\nWIN+R 打开运行对话框\nWIN+Tab 3D切换任务栏程序\nWIN+空格键 预览桌面\nWIN+方向键 最大/小化窗口/左右移动窗口\n关闭活动应用程序:Alt+F4\n\n**【Webstorm快捷键】**\n多处编辑：Alt+左键单击\n控制台：Alt+F12\n打开任何文件：Double Shift\n打开最近文件：Ctrl+E\n全局搜索字符串：Ctrl+H\nSettings:Ctrl+Alt+S\nFormat code:Ctrl+Alt+L\n删除一行： Ctrl+X\n复制行：Ctrl+D\n查找行：Ctrl+G\n折叠代码块： Ctrl+加减号\n注释：Ctrl+/ 或 Ctrl+Shift+/\n向上/下移动代码行：Shift+Alt+Up/Down\n向上/下移动代码块：Ctrl+Shift+Up/Down\n方法追踪：Ctrl+B或Ctrl+左键单击\n跳转到变量实现处：Ctrl+B\n跳转到方法实现处：Ctrl + Alt + B\n打开定义快速查看：Ctrl + Shift + I\n跳转到当前页面的上/下一个方法块：Alt + Up/Down\n高亮错误或警告快速定位：F2\n格式化代码：Ctrl+Alt+L\n自动修正：Alt+Enter\n查找文本：Ctrl+F\n查找下/上一个：F3/Shift + F3\n高亮显示选中文本：Ctrl+Shift+F7\n替换文本：Ctrl+R\n方法参数提示：Ctrl+P\n显示方法注释：Ctrl+Q\n打开配置窗口：Ctrl+Alt+S\n文件名查找文件：Ctrl+Shift+N\n通过字符快速查找：Ctrl+Shift+Alt+N\n重新开始一行（无论光标在哪里）：Shift+Enter\nsurround with代码块：Ctrl+Alt+T\n大小写转换：Ctrl+Shift+U\n输出模板：Ctrl+J\n匹配代码块括号：Ctrl+[\n显示当前文件的结构：Ctrl+F12\n折叠/展开代码块：Ctrl+\"-\"/\"+\"\n返回至上次浏览的位置 Ctrl+Alt+ left/right\n逐级向上选中代码：Ctrl+W\n\n**【浏览器】**\n打开新窗口:Ctrl+T\n切换导航栏窗口:Ctrl+Tab\n关闭活动页面:Ctrl+W\n上下浏览网页:方向键和Page Up和Page Down\n\n## 2.mac平台常用快捷键\n\n**【mac系统】**\nCommand + Shift + c 打开我的电脑\nCommand + Shift + h 打开当前用户文件夹\nCommand + 向上箭头 打开包含当前文件夹的文件夹\nCommand + [ / ] 打开上一个文件夹/下一个文件夹\nCommand + w 关闭最前tab\nCommand + m  最小化当前应用窗口\nCommand + q 关闭当前应用\nCommand + T 打开多个tab 【eg:浏览器，Terminal】\nCommand + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】\ncontrol + tab 转向下一个标签页【eg:webStorm多个编辑窗口】\ncontrol + shift + tab 转向上一个标签页\nControl + 向上向下 查看所有打开窗口\n**【两个手指向下滑：向下滚动】**\n\nCommand + shift + n 新建文件夹\nCommand + N 新建文件【eg:sublime新文件，webStorm新文件】\nCommand + delete 删除\nReturn 重命名选中的文件或文件夹\n\nShift 搜狗输入法中英文切换\nCommand + , 当前应用的偏好设置\n\n**【文件处理快捷键】**\nCommand + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾\nCommand + 左右 将光标移动到行首/行尾\nCommand + L 将光标移动到指定行\nCommand + shift + 上下左右 选中文本\nalt + 上下 选取代码块\nShift + 上下左右 扩展选择区域\nCommand + f 查找 \nCommand + r 替换 \nDelete 删除光标左边的字符\nFn + delete 删除光标右边的字符\nOption + delete 删除光标左边的word\n\n**【截图快捷键】**\nCommand + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件\nCommand + shift + 4                 截取选中屏幕区域到文件\nCommand + shift + control + 3  截取全屏到剪贴板\nCommand + shift + control + 4  截取选中屏幕区域到剪贴板\n\n**【Mac下浏览器快捷键】**\nCommand + L 光标直接跳至地址栏\nChrome 开发者模式  Command + alt + j\n刷新 Command + r\n\n**【Mac下webStorm快捷键】**\n全局查找 Command + shift + f\n格式整理 Command + alt + L\n注释：Command + /\n调整缩进 Shift +  tab\n复制当前行 Command + d\n删除当前行 Command + delete\n快速换行 Shift + Enter\n清除缩进变成单行 Command + Shift + J\n光标在多处定位 Alt + 单击\n大小写转换 Command + Shift + U\n\n## 3.其他工具\n\n**【sublime】**\nsublime修炼：一款得心应手的开发软件\n1.sublime官网下载，安装时勾选右键打开文件\n2.快捷键设置Preferences->Key Bindings-User\n打开浏览器：ctrl+alt+f\n3.命令模式ctrl+shift+p，输入install package，安装命令包\n\n**【VIM】**\n【命令模式】\n左下上右:HJKL\n向右向下跳一个词:w/b\n下/上一个句子/段落 （）/{}\n跳转到行首/行尾：0/shift+$\n跳转到最后一行/第一行：shift+G/gg\n跳转到上一次编辑的地方：\n跳转到上一次编辑的文件：ctrl+o/ctrl+i\n整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行\n非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行\n删除选中内容:X\n删除某行：DD / dl (L字符) /dw (w单词)\n替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw\n复制当前行：YY /yl /yw\n复制一个词：YW\n复制任意选中内容：先选中，再按Y\n粘贴：P\n撤销：U/u\n代码格式化 选中，按=\n\n【编辑模式】\n进入/退出 :i/a/0/shift+o esc\n自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）\n\n【扩展模式】\n：! 命令 （叹号后面有个空格）\n搜索：/searchText /搜索文本 回车确认 然后按N查找下一个\n向前搜索：？searchText\n退出搜索高亮：nohl\n[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局\n[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText\n横屏分屏：sp 上下横屏切换ctrl+ww\n竖屏分屏：vs 左右竖屏切换ctrl+ww\n退出分屏：q\n显示行号：set number","source":"_posts/2018-11-15-keymap.md","raw":"---\ntitle: keymap\ndate: 2018-11-15 20:12:21\ntags: tools\n---\n## 1.windows平台常用快捷键\n\n**【win系统】**\n无鼠标快捷操作电脑[win7]\n[1]开启键盘操作鼠标\n控制面板->轻松访问->鼠标更易用->设置鼠标键...\nAlt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动\n[2]常用系统快捷键\nWIN 打开搜素程序和文件\nWIN+E 我的电脑\nWIN+T 切换任务栏\nWIN+L 锁定计算机\nWIN+D 显示桌面\nWIN+M 最小化所有窗口\nWIN+R 打开运行对话框\nWIN+Tab 3D切换任务栏程序\nWIN+空格键 预览桌面\nWIN+方向键 最大/小化窗口/左右移动窗口\n关闭活动应用程序:Alt+F4\n\n**【Webstorm快捷键】**\n多处编辑：Alt+左键单击\n控制台：Alt+F12\n打开任何文件：Double Shift\n打开最近文件：Ctrl+E\n全局搜索字符串：Ctrl+H\nSettings:Ctrl+Alt+S\nFormat code:Ctrl+Alt+L\n删除一行： Ctrl+X\n复制行：Ctrl+D\n查找行：Ctrl+G\n折叠代码块： Ctrl+加减号\n注释：Ctrl+/ 或 Ctrl+Shift+/\n向上/下移动代码行：Shift+Alt+Up/Down\n向上/下移动代码块：Ctrl+Shift+Up/Down\n方法追踪：Ctrl+B或Ctrl+左键单击\n跳转到变量实现处：Ctrl+B\n跳转到方法实现处：Ctrl + Alt + B\n打开定义快速查看：Ctrl + Shift + I\n跳转到当前页面的上/下一个方法块：Alt + Up/Down\n高亮错误或警告快速定位：F2\n格式化代码：Ctrl+Alt+L\n自动修正：Alt+Enter\n查找文本：Ctrl+F\n查找下/上一个：F3/Shift + F3\n高亮显示选中文本：Ctrl+Shift+F7\n替换文本：Ctrl+R\n方法参数提示：Ctrl+P\n显示方法注释：Ctrl+Q\n打开配置窗口：Ctrl+Alt+S\n文件名查找文件：Ctrl+Shift+N\n通过字符快速查找：Ctrl+Shift+Alt+N\n重新开始一行（无论光标在哪里）：Shift+Enter\nsurround with代码块：Ctrl+Alt+T\n大小写转换：Ctrl+Shift+U\n输出模板：Ctrl+J\n匹配代码块括号：Ctrl+[\n显示当前文件的结构：Ctrl+F12\n折叠/展开代码块：Ctrl+\"-\"/\"+\"\n返回至上次浏览的位置 Ctrl+Alt+ left/right\n逐级向上选中代码：Ctrl+W\n\n**【浏览器】**\n打开新窗口:Ctrl+T\n切换导航栏窗口:Ctrl+Tab\n关闭活动页面:Ctrl+W\n上下浏览网页:方向键和Page Up和Page Down\n\n## 2.mac平台常用快捷键\n\n**【mac系统】**\nCommand + Shift + c 打开我的电脑\nCommand + Shift + h 打开当前用户文件夹\nCommand + 向上箭头 打开包含当前文件夹的文件夹\nCommand + [ / ] 打开上一个文件夹/下一个文件夹\nCommand + w 关闭最前tab\nCommand + m  最小化当前应用窗口\nCommand + q 关闭当前应用\nCommand + T 打开多个tab 【eg:浏览器，Terminal】\nCommand + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】\ncontrol + tab 转向下一个标签页【eg:webStorm多个编辑窗口】\ncontrol + shift + tab 转向上一个标签页\nControl + 向上向下 查看所有打开窗口\n**【两个手指向下滑：向下滚动】**\n\nCommand + shift + n 新建文件夹\nCommand + N 新建文件【eg:sublime新文件，webStorm新文件】\nCommand + delete 删除\nReturn 重命名选中的文件或文件夹\n\nShift 搜狗输入法中英文切换\nCommand + , 当前应用的偏好设置\n\n**【文件处理快捷键】**\nCommand + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾\nCommand + 左右 将光标移动到行首/行尾\nCommand + L 将光标移动到指定行\nCommand + shift + 上下左右 选中文本\nalt + 上下 选取代码块\nShift + 上下左右 扩展选择区域\nCommand + f 查找 \nCommand + r 替换 \nDelete 删除光标左边的字符\nFn + delete 删除光标右边的字符\nOption + delete 删除光标左边的word\n\n**【截图快捷键】**\nCommand + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件\nCommand + shift + 4                 截取选中屏幕区域到文件\nCommand + shift + control + 3  截取全屏到剪贴板\nCommand + shift + control + 4  截取选中屏幕区域到剪贴板\n\n**【Mac下浏览器快捷键】**\nCommand + L 光标直接跳至地址栏\nChrome 开发者模式  Command + alt + j\n刷新 Command + r\n\n**【Mac下webStorm快捷键】**\n全局查找 Command + shift + f\n格式整理 Command + alt + L\n注释：Command + /\n调整缩进 Shift +  tab\n复制当前行 Command + d\n删除当前行 Command + delete\n快速换行 Shift + Enter\n清除缩进变成单行 Command + Shift + J\n光标在多处定位 Alt + 单击\n大小写转换 Command + Shift + U\n\n## 3.其他工具\n\n**【sublime】**\nsublime修炼：一款得心应手的开发软件\n1.sublime官网下载，安装时勾选右键打开文件\n2.快捷键设置Preferences->Key Bindings-User\n打开浏览器：ctrl+alt+f\n3.命令模式ctrl+shift+p，输入install package，安装命令包\n\n**【VIM】**\n【命令模式】\n左下上右:HJKL\n向右向下跳一个词:w/b\n下/上一个句子/段落 （）/{}\n跳转到行首/行尾：0/shift+$\n跳转到最后一行/第一行：shift+G/gg\n跳转到上一次编辑的地方：\n跳转到上一次编辑的文件：ctrl+o/ctrl+i\n整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行\n非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行\n删除选中内容:X\n删除某行：DD / dl (L字符) /dw (w单词)\n替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw\n复制当前行：YY /yl /yw\n复制一个词：YW\n复制任意选中内容：先选中，再按Y\n粘贴：P\n撤销：U/u\n代码格式化 选中，按=\n\n【编辑模式】\n进入/退出 :i/a/0/shift+o esc\n自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）\n\n【扩展模式】\n：! 命令 （叹号后面有个空格）\n搜索：/searchText /搜索文本 回车确认 然后按N查找下一个\n向前搜索：？searchText\n退出搜索高亮：nohl\n[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局\n[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText\n横屏分屏：sp 上下横屏切换ctrl+ww\n竖屏分屏：vs 左右竖屏切换ctrl+ww\n退出分屏：q\n显示行号：set number","slug":"keymap","published":1,"updated":"2019-03-14T04:52:58.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3dp000fmtjkf6t0l7a5","content":"<h2 id=\"1-windows平台常用快捷键\"><a href=\"#1-windows平台常用快捷键\" class=\"headerlink\" title=\"1.windows平台常用快捷键\"></a>1.windows平台常用快捷键</h2><p><strong>【win系统】</strong><br>无鼠标快捷操作电脑[win7]<br>[1]开启键盘操作鼠标<br>控制面板-&gt;轻松访问-&gt;鼠标更易用-&gt;设置鼠标键…<br>Alt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动<br>[2]常用系统快捷键<br>WIN 打开搜素程序和文件<br>WIN+E 我的电脑<br>WIN+T 切换任务栏<br>WIN+L 锁定计算机<br>WIN+D 显示桌面<br>WIN+M 最小化所有窗口<br>WIN+R 打开运行对话框<br>WIN+Tab 3D切换任务栏程序<br>WIN+空格键 预览桌面<br>WIN+方向键 最大/小化窗口/左右移动窗口<br>关闭活动应用程序:Alt+F4</p>\n<p><strong>【Webstorm快捷键】</strong><br>多处编辑：Alt+左键单击<br>控制台：Alt+F12<br>打开任何文件：Double Shift<br>打开最近文件：Ctrl+E<br>全局搜索字符串：Ctrl+H<br>Settings:Ctrl+Alt+S<br>Format code:Ctrl+Alt+L<br>删除一行： Ctrl+X<br>复制行：Ctrl+D<br>查找行：Ctrl+G<br>折叠代码块： Ctrl+加减号<br>注释：Ctrl+/ 或 Ctrl+Shift+/<br>向上/下移动代码行：Shift+Alt+Up/Down<br>向上/下移动代码块：Ctrl+Shift+Up/Down<br>方法追踪：Ctrl+B或Ctrl+左键单击<br>跳转到变量实现处：Ctrl+B<br>跳转到方法实现处：Ctrl + Alt + B<br>打开定义快速查看：Ctrl + Shift + I<br>跳转到当前页面的上/下一个方法块：Alt + Up/Down<br>高亮错误或警告快速定位：F2<br>格式化代码：Ctrl+Alt+L<br>自动修正：Alt+Enter<br>查找文本：Ctrl+F<br>查找下/上一个：F3/Shift + F3<br>高亮显示选中文本：Ctrl+Shift+F7<br>替换文本：Ctrl+R<br>方法参数提示：Ctrl+P<br>显示方法注释：Ctrl+Q<br>打开配置窗口：Ctrl+Alt+S<br>文件名查找文件：Ctrl+Shift+N<br>通过字符快速查找：Ctrl+Shift+Alt+N<br>重新开始一行（无论光标在哪里）：Shift+Enter<br>surround with代码块：Ctrl+Alt+T<br>大小写转换：Ctrl+Shift+U<br>输出模板：Ctrl+J<br>匹配代码块括号：Ctrl+[<br>显示当前文件的结构：Ctrl+F12<br>折叠/展开代码块：Ctrl+”-“/“+”<br>返回至上次浏览的位置 Ctrl+Alt+ left/right<br>逐级向上选中代码：Ctrl+W</p>\n<p><strong>【浏览器】</strong><br>打开新窗口:Ctrl+T<br>切换导航栏窗口:Ctrl+Tab<br>关闭活动页面:Ctrl+W<br>上下浏览网页:方向键和Page Up和Page Down</p>\n<h2 id=\"2-mac平台常用快捷键\"><a href=\"#2-mac平台常用快捷键\" class=\"headerlink\" title=\"2.mac平台常用快捷键\"></a>2.mac平台常用快捷键</h2><p><strong>【mac系统】</strong><br>Command + Shift + c 打开我的电脑<br>Command + Shift + h 打开当前用户文件夹<br>Command + 向上箭头 打开包含当前文件夹的文件夹<br>Command + [ / ] 打开上一个文件夹/下一个文件夹<br>Command + w 关闭最前tab<br>Command + m  最小化当前应用窗口<br>Command + q 关闭当前应用<br>Command + T 打开多个tab 【eg:浏览器，Terminal】<br>Command + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】<br>control + tab 转向下一个标签页【eg:webStorm多个编辑窗口】<br>control + shift + tab 转向上一个标签页<br>Control + 向上向下 查看所有打开窗口<br><strong>【两个手指向下滑：向下滚动】</strong></p>\n<p>Command + shift + n 新建文件夹<br>Command + N 新建文件【eg:sublime新文件，webStorm新文件】<br>Command + delete 删除<br>Return 重命名选中的文件或文件夹</p>\n<p>Shift 搜狗输入法中英文切换<br>Command + , 当前应用的偏好设置</p>\n<p><strong>【文件处理快捷键】</strong><br>Command + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾<br>Command + 左右 将光标移动到行首/行尾<br>Command + L 将光标移动到指定行<br>Command + shift + 上下左右 选中文本<br>alt + 上下 选取代码块<br>Shift + 上下左右 扩展选择区域<br>Command + f 查找<br>Command + r 替换<br>Delete 删除光标左边的字符<br>Fn + delete 删除光标右边的字符<br>Option + delete 删除光标左边的word</p>\n<p><strong>【截图快捷键】</strong><br>Command + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件<br>Command + shift + 4                 截取选中屏幕区域到文件<br>Command + shift + control + 3  截取全屏到剪贴板<br>Command + shift + control + 4  截取选中屏幕区域到剪贴板</p>\n<p><strong>【Mac下浏览器快捷键】</strong><br>Command + L 光标直接跳至地址栏<br>Chrome 开发者模式  Command + alt + j<br>刷新 Command + r</p>\n<p><strong>【Mac下webStorm快捷键】</strong><br>全局查找 Command + shift + f<br>格式整理 Command + alt + L<br>注释：Command + /<br>调整缩进 Shift +  tab<br>复制当前行 Command + d<br>删除当前行 Command + delete<br>快速换行 Shift + Enter<br>清除缩进变成单行 Command + Shift + J<br>光标在多处定位 Alt + 单击<br>大小写转换 Command + Shift + U</p>\n<h2 id=\"3-其他工具\"><a href=\"#3-其他工具\" class=\"headerlink\" title=\"3.其他工具\"></a>3.其他工具</h2><p><strong>【sublime】</strong><br>sublime修炼：一款得心应手的开发软件<br>1.sublime官网下载，安装时勾选右键打开文件<br>2.快捷键设置Preferences-&gt;Key Bindings-User<br>打开浏览器：ctrl+alt+f<br>3.命令模式ctrl+shift+p，输入install package，安装命令包</p>\n<p><strong>【VIM】</strong><br>【命令模式】<br>左下上右:HJKL<br>向右向下跳一个词:w/b<br>下/上一个句子/段落 （）/{}<br>跳转到行首/行尾：0/shift+$<br>跳转到最后一行/第一行：shift+G/gg<br>跳转到上一次编辑的地方：<br>跳转到上一次编辑的文件：ctrl+o/ctrl+i<br>整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行<br>非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行<br>删除选中内容:X<br>删除某行：DD / dl (L字符) /dw (w单词)<br>替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw<br>复制当前行：YY /yl /yw<br>复制一个词：YW<br>复制任意选中内容：先选中，再按Y<br>粘贴：P<br>撤销：U/u<br>代码格式化 选中，按=</p>\n<p>【编辑模式】<br>进入/退出 :i/a/0/shift+o esc<br>自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）</p>\n<p>【扩展模式】<br>：! 命令 （叹号后面有个空格）<br>搜索：/searchText /搜索文本 回车确认 然后按N查找下一个<br>向前搜索：？searchText<br>退出搜索高亮：nohl<br>[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局<br>[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText<br>横屏分屏：sp 上下横屏切换ctrl+ww<br>竖屏分屏：vs 左右竖屏切换ctrl+ww<br>退出分屏：q<br>显示行号：set number</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-windows平台常用快捷键\"><a href=\"#1-windows平台常用快捷键\" class=\"headerlink\" title=\"1.windows平台常用快捷键\"></a>1.windows平台常用快捷键</h2><p><strong>【win系统】</strong><br>无鼠标快捷操作电脑[win7]<br>[1]开启键盘操作鼠标<br>控制面板-&gt;轻松访问-&gt;鼠标更易用-&gt;设置鼠标键…<br>Alt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动<br>[2]常用系统快捷键<br>WIN 打开搜素程序和文件<br>WIN+E 我的电脑<br>WIN+T 切换任务栏<br>WIN+L 锁定计算机<br>WIN+D 显示桌面<br>WIN+M 最小化所有窗口<br>WIN+R 打开运行对话框<br>WIN+Tab 3D切换任务栏程序<br>WIN+空格键 预览桌面<br>WIN+方向键 最大/小化窗口/左右移动窗口<br>关闭活动应用程序:Alt+F4</p>\n<p><strong>【Webstorm快捷键】</strong><br>多处编辑：Alt+左键单击<br>控制台：Alt+F12<br>打开任何文件：Double Shift<br>打开最近文件：Ctrl+E<br>全局搜索字符串：Ctrl+H<br>Settings:Ctrl+Alt+S<br>Format code:Ctrl+Alt+L<br>删除一行： Ctrl+X<br>复制行：Ctrl+D<br>查找行：Ctrl+G<br>折叠代码块： Ctrl+加减号<br>注释：Ctrl+/ 或 Ctrl+Shift+/<br>向上/下移动代码行：Shift+Alt+Up/Down<br>向上/下移动代码块：Ctrl+Shift+Up/Down<br>方法追踪：Ctrl+B或Ctrl+左键单击<br>跳转到变量实现处：Ctrl+B<br>跳转到方法实现处：Ctrl + Alt + B<br>打开定义快速查看：Ctrl + Shift + I<br>跳转到当前页面的上/下一个方法块：Alt + Up/Down<br>高亮错误或警告快速定位：F2<br>格式化代码：Ctrl+Alt+L<br>自动修正：Alt+Enter<br>查找文本：Ctrl+F<br>查找下/上一个：F3/Shift + F3<br>高亮显示选中文本：Ctrl+Shift+F7<br>替换文本：Ctrl+R<br>方法参数提示：Ctrl+P<br>显示方法注释：Ctrl+Q<br>打开配置窗口：Ctrl+Alt+S<br>文件名查找文件：Ctrl+Shift+N<br>通过字符快速查找：Ctrl+Shift+Alt+N<br>重新开始一行（无论光标在哪里）：Shift+Enter<br>surround with代码块：Ctrl+Alt+T<br>大小写转换：Ctrl+Shift+U<br>输出模板：Ctrl+J<br>匹配代码块括号：Ctrl+[<br>显示当前文件的结构：Ctrl+F12<br>折叠/展开代码块：Ctrl+”-“/“+”<br>返回至上次浏览的位置 Ctrl+Alt+ left/right<br>逐级向上选中代码：Ctrl+W</p>\n<p><strong>【浏览器】</strong><br>打开新窗口:Ctrl+T<br>切换导航栏窗口:Ctrl+Tab<br>关闭活动页面:Ctrl+W<br>上下浏览网页:方向键和Page Up和Page Down</p>\n<h2 id=\"2-mac平台常用快捷键\"><a href=\"#2-mac平台常用快捷键\" class=\"headerlink\" title=\"2.mac平台常用快捷键\"></a>2.mac平台常用快捷键</h2><p><strong>【mac系统】</strong><br>Command + Shift + c 打开我的电脑<br>Command + Shift + h 打开当前用户文件夹<br>Command + 向上箭头 打开包含当前文件夹的文件夹<br>Command + [ / ] 打开上一个文件夹/下一个文件夹<br>Command + w 关闭最前tab<br>Command + m  最小化当前应用窗口<br>Command + q 关闭当前应用<br>Command + T 打开多个tab 【eg:浏览器，Terminal】<br>Command + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】<br>control + tab 转向下一个标签页【eg:webStorm多个编辑窗口】<br>control + shift + tab 转向上一个标签页<br>Control + 向上向下 查看所有打开窗口<br><strong>【两个手指向下滑：向下滚动】</strong></p>\n<p>Command + shift + n 新建文件夹<br>Command + N 新建文件【eg:sublime新文件，webStorm新文件】<br>Command + delete 删除<br>Return 重命名选中的文件或文件夹</p>\n<p>Shift 搜狗输入法中英文切换<br>Command + , 当前应用的偏好设置</p>\n<p><strong>【文件处理快捷键】</strong><br>Command + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾<br>Command + 左右 将光标移动到行首/行尾<br>Command + L 将光标移动到指定行<br>Command + shift + 上下左右 选中文本<br>alt + 上下 选取代码块<br>Shift + 上下左右 扩展选择区域<br>Command + f 查找<br>Command + r 替换<br>Delete 删除光标左边的字符<br>Fn + delete 删除光标右边的字符<br>Option + delete 删除光标左边的word</p>\n<p><strong>【截图快捷键】</strong><br>Command + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件<br>Command + shift + 4                 截取选中屏幕区域到文件<br>Command + shift + control + 3  截取全屏到剪贴板<br>Command + shift + control + 4  截取选中屏幕区域到剪贴板</p>\n<p><strong>【Mac下浏览器快捷键】</strong><br>Command + L 光标直接跳至地址栏<br>Chrome 开发者模式  Command + alt + j<br>刷新 Command + r</p>\n<p><strong>【Mac下webStorm快捷键】</strong><br>全局查找 Command + shift + f<br>格式整理 Command + alt + L<br>注释：Command + /<br>调整缩进 Shift +  tab<br>复制当前行 Command + d<br>删除当前行 Command + delete<br>快速换行 Shift + Enter<br>清除缩进变成单行 Command + Shift + J<br>光标在多处定位 Alt + 单击<br>大小写转换 Command + Shift + U</p>\n<h2 id=\"3-其他工具\"><a href=\"#3-其他工具\" class=\"headerlink\" title=\"3.其他工具\"></a>3.其他工具</h2><p><strong>【sublime】</strong><br>sublime修炼：一款得心应手的开发软件<br>1.sublime官网下载，安装时勾选右键打开文件<br>2.快捷键设置Preferences-&gt;Key Bindings-User<br>打开浏览器：ctrl+alt+f<br>3.命令模式ctrl+shift+p，输入install package，安装命令包</p>\n<p><strong>【VIM】</strong><br>【命令模式】<br>左下上右:HJKL<br>向右向下跳一个词:w/b<br>下/上一个句子/段落 （）/{}<br>跳转到行首/行尾：0/shift+$<br>跳转到最后一行/第一行：shift+G/gg<br>跳转到上一次编辑的地方：<br>跳转到上一次编辑的文件：ctrl+o/ctrl+i<br>整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行<br>非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行<br>删除选中内容:X<br>删除某行：DD / dl (L字符) /dw (w单词)<br>替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw<br>复制当前行：YY /yl /yw<br>复制一个词：YW<br>复制任意选中内容：先选中，再按Y<br>粘贴：P<br>撤销：U/u<br>代码格式化 选中，按=</p>\n<p>【编辑模式】<br>进入/退出 :i/a/0/shift+o esc<br>自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）</p>\n<p>【扩展模式】<br>：! 命令 （叹号后面有个空格）<br>搜索：/searchText /搜索文本 回车确认 然后按N查找下一个<br>向前搜索：？searchText<br>退出搜索高亮：nohl<br>[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局<br>[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText<br>横屏分屏：sp 上下横屏切换ctrl+ww<br>竖屏分屏：vs 左右竖屏切换ctrl+ww<br>退出分屏：q<br>显示行号：set number</p>\n"},{"title":"npm淘宝镜像","date":"2018-11-15T13:18:51.000Z","_content":"## 1.文档目的\n该文档用于解释说明npm淘宝镜像的使用\n参考网址：[淘宝npm镜像](http://npm.taobao.org/)、[react native环境搭建](https://reactnative.cn/docs/getting-started/)、[淘宝镜像说明](https://blog.csdn.net/quuqu/article/details/64121812)\n\n## 2.内容梳理\n淘宝镜像使用目的：加快访问速度\n使用方式及其对比：\n* npm切换镜像源（加快访问速度）：\n**npm config set registry https://registry.npm.taobao.org --global**\n**npm config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**npm config list**\n**npm config get registry**\n**npm config get disturl**\n* yarn方式[推荐]\nyarn安装：\n**npm install -g yarn**\nyarn配置镜像源：\n**yarn config set registry https://registry.npm.taobao.org --global**\n**yarn config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**yarn config list**\n**yarn config get registry**\n**yarn config get disturl**\n* cnpm方式[不推荐：安装的模块路径比较奇怪]\n**npm install -g cnpm --registry=https://registry.npm.taobao.org**\n\n## 3.扩展\n查看npm全局安装默认路径（打开则可以看到具体安装的模块）：\n**npm config get prefix**\n全局安装模块：\n**npm install -g @vue/cli**或**yarn global add @vue/cli**\n全局卸载已安装模块：\n**npm uninstall vue-cli -g**或**yarn global remove vue-cli**\n","source":"_posts/2018-11-15-npm.md","raw":"---\ntitle: npm淘宝镜像\ndate: 2018-11-15 21:18:51\ntags: tools\n---\n## 1.文档目的\n该文档用于解释说明npm淘宝镜像的使用\n参考网址：[淘宝npm镜像](http://npm.taobao.org/)、[react native环境搭建](https://reactnative.cn/docs/getting-started/)、[淘宝镜像说明](https://blog.csdn.net/quuqu/article/details/64121812)\n\n## 2.内容梳理\n淘宝镜像使用目的：加快访问速度\n使用方式及其对比：\n* npm切换镜像源（加快访问速度）：\n**npm config set registry https://registry.npm.taobao.org --global**\n**npm config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**npm config list**\n**npm config get registry**\n**npm config get disturl**\n* yarn方式[推荐]\nyarn安装：\n**npm install -g yarn**\nyarn配置镜像源：\n**yarn config set registry https://registry.npm.taobao.org --global**\n**yarn config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**yarn config list**\n**yarn config get registry**\n**yarn config get disturl**\n* cnpm方式[不推荐：安装的模块路径比较奇怪]\n**npm install -g cnpm --registry=https://registry.npm.taobao.org**\n\n## 3.扩展\n查看npm全局安装默认路径（打开则可以看到具体安装的模块）：\n**npm config get prefix**\n全局安装模块：\n**npm install -g @vue/cli**或**yarn global add @vue/cli**\n全局卸载已安装模块：\n**npm uninstall vue-cli -g**或**yarn global remove vue-cli**\n","slug":"npm","published":1,"updated":"2019-03-14T04:52:58.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3ds000imtjkhyhj4ir7","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于解释说明npm淘宝镜像的使用<br>参考网址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a>、<a href=\"https://reactnative.cn/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">react native环境搭建</a>、<a href=\"https://blog.csdn.net/quuqu/article/details/64121812\" target=\"_blank\" rel=\"noopener\">淘宝镜像说明</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>淘宝镜像使用目的：加快访问速度<br>使用方式及其对比：</p>\n<ul>\n<li>npm切换镜像源（加快访问速度）：<br><strong>npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>npm config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>npm config list</strong><br><strong>npm config get registry</strong><br><strong>npm config get disturl</strong></li>\n<li>yarn方式[推荐]<br>yarn安装：<br><strong>npm install -g yarn</strong><br>yarn配置镜像源：<br><strong>yarn config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>yarn config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>yarn config list</strong><br><strong>yarn config get registry</strong><br><strong>yarn config get disturl</strong></li>\n<li>cnpm方式[不推荐：安装的模块路径比较奇怪]<br><strong>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></strong></li>\n</ul>\n<h2 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3.扩展\"></a>3.扩展</h2><p>查看npm全局安装默认路径（打开则可以看到具体安装的模块）：<br><strong>npm config get prefix</strong><br>全局安装模块：<br><strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>全局卸载已安装模块：<br><strong>npm uninstall vue-cli -g</strong>或<strong>yarn global remove vue-cli</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于解释说明npm淘宝镜像的使用<br>参考网址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a>、<a href=\"https://reactnative.cn/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">react native环境搭建</a>、<a href=\"https://blog.csdn.net/quuqu/article/details/64121812\" target=\"_blank\" rel=\"noopener\">淘宝镜像说明</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>淘宝镜像使用目的：加快访问速度<br>使用方式及其对比：</p>\n<ul>\n<li>npm切换镜像源（加快访问速度）：<br><strong>npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>npm config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>npm config list</strong><br><strong>npm config get registry</strong><br><strong>npm config get disturl</strong></li>\n<li>yarn方式[推荐]<br>yarn安装：<br><strong>npm install -g yarn</strong><br>yarn配置镜像源：<br><strong>yarn config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>yarn config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>yarn config list</strong><br><strong>yarn config get registry</strong><br><strong>yarn config get disturl</strong></li>\n<li>cnpm方式[不推荐：安装的模块路径比较奇怪]<br><strong>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></strong></li>\n</ul>\n<h2 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3.扩展\"></a>3.扩展</h2><p>查看npm全局安装默认路径（打开则可以看到具体安装的模块）：<br><strong>npm config get prefix</strong><br>全局安装模块：<br><strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>全局卸载已安装模块：<br><strong>npm uninstall vue-cli -g</strong>或<strong>yarn global remove vue-cli</strong></p>\n"},{"title":"vue组件快速原型开发","date":"2018-11-15T12:56:20.000Z","_content":"## 1.文档目的\n该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件\n参考网址：基于[vue cli 3.0](https://cli.vuejs.org/zh/guide/)中快速[原型开发](https://cli.vuejs.org/zh/guide/prototyping.html)模块\n\n## 2.快速原型开发\n检查是否安装了vue cli 3.0开发环境： **vue --version**\n安装vue cli 3.0环境: **npm install -g @vue/cli**或**yarn global add @vue/cli**\n安装全局扩展： **npm install -g @vue/cli-service-global**\n编写App.vue组件：\n```\n  <template>\n    <h1>Hello!</h1>\n  </template>\n```\n运行组件： **vue serve**\n编译构建组件： **vue build**","source":"_posts/2018-11-15-vueserve.md","raw":"---\ntitle: vue组件快速原型开发\ndate: 2018-11-15 20:56:20\ntags: tools\n---\n## 1.文档目的\n该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件\n参考网址：基于[vue cli 3.0](https://cli.vuejs.org/zh/guide/)中快速[原型开发](https://cli.vuejs.org/zh/guide/prototyping.html)模块\n\n## 2.快速原型开发\n检查是否安装了vue cli 3.0开发环境： **vue --version**\n安装vue cli 3.0环境: **npm install -g @vue/cli**或**yarn global add @vue/cli**\n安装全局扩展： **npm install -g @vue/cli-service-global**\n编写App.vue组件：\n```\n  <template>\n    <h1>Hello!</h1>\n  </template>\n```\n运行组件： **vue serve**\n编译构建组件： **vue build**","slug":"vueserve","published":1,"updated":"2019-03-14T04:52:58.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3du000kmtjk1p04z261","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件<br>参考网址：基于<a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">vue cli 3.0</a>中快速<a href=\"https://cli.vuejs.org/zh/guide/prototyping.html\" target=\"_blank\" rel=\"noopener\">原型开发</a>模块</p>\n<h2 id=\"2-快速原型开发\"><a href=\"#2-快速原型开发\" class=\"headerlink\" title=\"2.快速原型开发\"></a>2.快速原型开发</h2><p>检查是否安装了vue cli 3.0开发环境： <strong>vue –version</strong><br>安装vue cli 3.0环境: <strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>安装全局扩展： <strong>npm install -g @vue/cli-service-global</strong><br>编写App.vue组件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行组件： <strong>vue serve</strong><br>编译构建组件： <strong>vue build</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件<br>参考网址：基于<a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">vue cli 3.0</a>中快速<a href=\"https://cli.vuejs.org/zh/guide/prototyping.html\" target=\"_blank\" rel=\"noopener\">原型开发</a>模块</p>\n<h2 id=\"2-快速原型开发\"><a href=\"#2-快速原型开发\" class=\"headerlink\" title=\"2.快速原型开发\"></a>2.快速原型开发</h2><p>检查是否安装了vue cli 3.0开发环境： <strong>vue –version</strong><br>安装vue cli 3.0环境: <strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>安装全局扩展： <strong>npm install -g @vue/cli-service-global</strong><br>编写App.vue组件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行组件： <strong>vue serve</strong><br>编译构建组件： <strong>vue build</strong></p>\n"},{"title":"array","date":"2018-11-19T11:55:59.000Z","_content":"## 1.文档目的\n熟练掌握js数组属性和方法，熟能生巧\n参考文档：[MDN Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\n## 2.Array一览\narray    数组 【联想记忆法:部署兵力，我就是将军】\n【方法的分类方法，是否改变数组自身，是否是判断类型的】\nArray.length\nArray.prototype\n【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象\n【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例\n【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型\n\n**修改器方法**\n会改变调用它们的对象自身的值：\nArray.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素\nArray.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素\nArray.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。\nArray.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素\nArray.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。\nArray.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值\nArray.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序\n\n**访问方法**\n不会改变调用它们的对象的值\n【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。\n【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1\n【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。\n【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。\nArray.prototype.toString() 返回一个由所有数组元素组合而成的字符串\nArray.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串\nArray.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。\n\n**迭代方法**\n【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined\n【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改\n【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。\n【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。\nArray.prototype.forEach() 为数组中的每个元素执行一次回调函数。\n【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。\n【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回\nArray.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。\nArray.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键\nArray.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值\nArray.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值\nArray.prototype.reduceRight() 从右到左，同上\n\n\n小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮\nconsole.table(values)\n\n思考：【数组，字符串，对象 相互转化】\n\n// 字符串转数组 split\n// 数组转字符串 toString/join\n\n字符串可以当做数组直接用查看某个位置字符","source":"_posts/2018-11-19-array.md","raw":"---\ntitle: array\ndate: 2018-11-19 19:55:59\ntags: JS\n---\n## 1.文档目的\n熟练掌握js数组属性和方法，熟能生巧\n参考文档：[MDN Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\n## 2.Array一览\narray    数组 【联想记忆法:部署兵力，我就是将军】\n【方法的分类方法，是否改变数组自身，是否是判断类型的】\nArray.length\nArray.prototype\n【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象\n【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例\n【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型\n\n**修改器方法**\n会改变调用它们的对象自身的值：\nArray.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素\nArray.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素\nArray.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。\nArray.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素\nArray.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。\nArray.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值\nArray.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序\n\n**访问方法**\n不会改变调用它们的对象的值\n【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。\n【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1\n【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。\n【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。\nArray.prototype.toString() 返回一个由所有数组元素组合而成的字符串\nArray.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串\nArray.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。\n\n**迭代方法**\n【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined\n【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改\n【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。\n【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。\nArray.prototype.forEach() 为数组中的每个元素执行一次回调函数。\n【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。\n【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回\nArray.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。\nArray.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键\nArray.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值\nArray.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值\nArray.prototype.reduceRight() 从右到左，同上\n\n\n小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮\nconsole.table(values)\n\n思考：【数组，字符串，对象 相互转化】\n\n// 字符串转数组 split\n// 数组转字符串 toString/join\n\n字符串可以当做数组直接用查看某个位置字符","slug":"array","published":1,"updated":"2019-03-14T04:52:58.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw3dx000nmtjkx6uyomw6","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js数组属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">MDN Array</a></p>\n<h2 id=\"2-Array一览\"><a href=\"#2-Array一览\" class=\"headerlink\" title=\"2.Array一览\"></a>2.Array一览</h2><p>array    数组 【联想记忆法:部署兵力，我就是将军】<br>【方法的分类方法，是否改变数组自身，是否是判断类型的】<br>Array.length<br>Array.prototype<br>【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象<br>【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例<br>【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型</p>\n<p><strong>修改器方法</strong><br>会改变调用它们的对象自身的值：<br>Array.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素<br>Array.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素<br>Array.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。<br>Array.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素<br>Array.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br>Array.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值<br>Array.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序</p>\n<p><strong>访问方法</strong><br>不会改变调用它们的对象的值<br>【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。<br>【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1<br>【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。<br>【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。<br>【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。<br>Array.prototype.toString() 返回一个由所有数组元素组合而成的字符串<br>Array.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串<br>Array.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。</p>\n<p><strong>迭代方法</strong><br>【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined<br>【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改<br>【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。<br>【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。<br>Array.prototype.forEach() 为数组中的每个元素执行一次回调函数。<br>【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。<br>【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回<br>Array.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br>Array.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键<br>Array.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值<br>Array.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值<br>Array.prototype.reduceRight() 从右到左，同上</p>\n<p>小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮<br>console.table(values)</p>\n<p>思考：【数组，字符串，对象 相互转化】</p>\n<p>// 字符串转数组 split<br>// 数组转字符串 toString/join</p>\n<p>字符串可以当做数组直接用查看某个位置字符</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js数组属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">MDN Array</a></p>\n<h2 id=\"2-Array一览\"><a href=\"#2-Array一览\" class=\"headerlink\" title=\"2.Array一览\"></a>2.Array一览</h2><p>array    数组 【联想记忆法:部署兵力，我就是将军】<br>【方法的分类方法，是否改变数组自身，是否是判断类型的】<br>Array.length<br>Array.prototype<br>【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象<br>【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例<br>【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型</p>\n<p><strong>修改器方法</strong><br>会改变调用它们的对象自身的值：<br>Array.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素<br>Array.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素<br>Array.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。<br>Array.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素<br>Array.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br>Array.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值<br>Array.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序</p>\n<p><strong>访问方法</strong><br>不会改变调用它们的对象的值<br>【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。<br>【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1<br>【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。<br>【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。<br>【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。<br>Array.prototype.toString() 返回一个由所有数组元素组合而成的字符串<br>Array.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串<br>Array.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。</p>\n<p><strong>迭代方法</strong><br>【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined<br>【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改<br>【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。<br>【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。<br>Array.prototype.forEach() 为数组中的每个元素执行一次回调函数。<br>【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。<br>【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回<br>Array.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br>Array.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键<br>Array.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值<br>Array.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值<br>Array.prototype.reduceRight() 从右到左，同上</p>\n<p>小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮<br>console.table(values)</p>\n<p>思考：【数组，字符串，对象 相互转化】</p>\n<p>// 字符串转数组 split<br>// 数组转字符串 toString/join</p>\n<p>字符串可以当做数组直接用查看某个位置字符</p>\n"},{"title":"sleep-quality","date":"2018-12-18T22:24:35.000Z","_content":"## 1.文档目的\n该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量\n参考网址：[乐哈健康:提升睡眠质量](https://m.leha.com/health/59359)\n## 2.提升睡眠质量九大原则\n1、改掉睡前吃东西的习惯\n2、调整睡眠环境\n3、改变睡姿\n4、睡前梳梳头\n5、睡前用热水泡泡脚\n6、蜂蜜加牛奶改善睡眠质量\n7、临睡前要注意放松心情\n8、睡前舒缓运动消除疲劳\n9、睡觉时枕头别垫太高\n","source":"_posts/2018-12-19-sleep-quality.md","raw":"---\ntitle: sleep-quality\ndate: 2018-12-19 06:24:35\ntags: life\n---\n## 1.文档目的\n该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量\n参考网址：[乐哈健康:提升睡眠质量](https://m.leha.com/health/59359)\n## 2.提升睡眠质量九大原则\n1、改掉睡前吃东西的习惯\n2、调整睡眠环境\n3、改变睡姿\n4、睡前梳梳头\n5、睡前用热水泡泡脚\n6、蜂蜜加牛奶改善睡眠质量\n7、临睡前要注意放松心情\n8、睡前舒缓运动消除疲劳\n9、睡觉时枕头别垫太高\n","slug":"sleep-quality","published":1,"updated":"2019-03-14T04:52:58.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw437000vmtjkltid893t","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量<br>参考网址：<a href=\"https://m.leha.com/health/59359\" target=\"_blank\" rel=\"noopener\">乐哈健康:提升睡眠质量</a></p>\n<h2 id=\"2-提升睡眠质量九大原则\"><a href=\"#2-提升睡眠质量九大原则\" class=\"headerlink\" title=\"2.提升睡眠质量九大原则\"></a>2.提升睡眠质量九大原则</h2><p>1、改掉睡前吃东西的习惯<br>2、调整睡眠环境<br>3、改变睡姿<br>4、睡前梳梳头<br>5、睡前用热水泡泡脚<br>6、蜂蜜加牛奶改善睡眠质量<br>7、临睡前要注意放松心情<br>8、睡前舒缓运动消除疲劳<br>9、睡觉时枕头别垫太高</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量<br>参考网址：<a href=\"https://m.leha.com/health/59359\" target=\"_blank\" rel=\"noopener\">乐哈健康:提升睡眠质量</a></p>\n<h2 id=\"2-提升睡眠质量九大原则\"><a href=\"#2-提升睡眠质量九大原则\" class=\"headerlink\" title=\"2.提升睡眠质量九大原则\"></a>2.提升睡眠质量九大原则</h2><p>1、改掉睡前吃东西的习惯<br>2、调整睡眠环境<br>3、改变睡姿<br>4、睡前梳梳头<br>5、睡前用热水泡泡脚<br>6、蜂蜜加牛奶改善睡眠质量<br>7、临睡前要注意放松心情<br>8、睡前舒缓运动消除疲劳<br>9、睡觉时枕头别垫太高</p>\n"},{"title":"coding-quality","date":"2018-12-18T22:43:00.000Z","_content":"## 1.文档目的\n一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助\n参考网址：\n[雅虎军规35条](https://www.jianshu.com/p/4cbcd202a591)、\n[JavaScript 编码规范](https://github.com/yuche/javascript)、\n[eslint规则](http://eslint.cn/docs/rules/)、\n[js编码风格（阮一峰）](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n[ES6编程风格](http://es6.ruanyifeng.com/#docs/style)\n## 2.心得\n编程讲究章法，要心中有想法，才能动手编码，正所谓\"三思而后行\"，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5\n基于node开发环境转换：[Babel](https://www.jianshu.com/p/647950617a6d)\n在线转换：[Babel](https://babeljs.io/repl)、[Traceur](https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22)\n1、前端的发展讲究\"工程化\"，\"模块化\"和\"组件化\"，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，\n工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等\n模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写\n组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面\n2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等\n## 3.编程命名规则介绍\n驼峰命名法：如exampleName\n帕斯卡命名法：如ExampleName\n下划线命名法：如example_name\n中划线命名法：如example-name\n匈牙利命名法(体现类型)：如g_example_name或aExampleNames\n## 3.整理实用条款\n1、工程化，模块化，组件化的思想\n2、项目命名使用中划线命名法,比如twitter-bootstrap\n3、项目中文件夹命名使用中划线命名法：比如global-api\n3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js\n3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from './CheckBox'\n4、类名用帕斯卡命名法：比如AdminUser{}\n5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()\n6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法\n7、常量命名原则：全部大写且用下划线连接，如USER_TYPE\n","source":"_posts/2018-12-19-coding-quality.md","raw":"---\ntitle: coding-quality\ndate: 2018-12-19 06:43:00\ntags: tools\n---\n## 1.文档目的\n一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助\n参考网址：\n[雅虎军规35条](https://www.jianshu.com/p/4cbcd202a591)、\n[JavaScript 编码规范](https://github.com/yuche/javascript)、\n[eslint规则](http://eslint.cn/docs/rules/)、\n[js编码风格（阮一峰）](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n[ES6编程风格](http://es6.ruanyifeng.com/#docs/style)\n## 2.心得\n编程讲究章法，要心中有想法，才能动手编码，正所谓\"三思而后行\"，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5\n基于node开发环境转换：[Babel](https://www.jianshu.com/p/647950617a6d)\n在线转换：[Babel](https://babeljs.io/repl)、[Traceur](https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22)\n1、前端的发展讲究\"工程化\"，\"模块化\"和\"组件化\"，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，\n工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等\n模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写\n组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面\n2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等\n## 3.编程命名规则介绍\n驼峰命名法：如exampleName\n帕斯卡命名法：如ExampleName\n下划线命名法：如example_name\n中划线命名法：如example-name\n匈牙利命名法(体现类型)：如g_example_name或aExampleNames\n## 3.整理实用条款\n1、工程化，模块化，组件化的思想\n2、项目命名使用中划线命名法,比如twitter-bootstrap\n3、项目中文件夹命名使用中划线命名法：比如global-api\n3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js\n3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from './CheckBox'\n4、类名用帕斯卡命名法：比如AdminUser{}\n5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()\n6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法\n7、常量命名原则：全部大写且用下划线连接，如USER_TYPE\n","slug":"coding-quality","published":1,"updated":"2019-03-14T04:52:58.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw43a000xmtjkulttbo4c","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助<br>参考网址：<br><a href=\"https://www.jianshu.com/p/4cbcd202a591\" target=\"_blank\" rel=\"noopener\">雅虎军规35条</a>、<br><a href=\"https://github.com/yuche/javascript\" target=\"_blank\" rel=\"noopener\">JavaScript 编码规范</a>、<br><a href=\"http://eslint.cn/docs/rules/\" target=\"_blank\" rel=\"noopener\">eslint规则</a>、<br><a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">js编码风格（阮一峰）</a><br><a href=\"http://es6.ruanyifeng.com/#docs/style\" target=\"_blank\" rel=\"noopener\">ES6编程风格</a></p>\n<h2 id=\"2-心得\"><a href=\"#2-心得\" class=\"headerlink\" title=\"2.心得\"></a>2.心得</h2><p>编程讲究章法，要心中有想法，才能动手编码，正所谓”三思而后行”，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5<br>基于node开发环境转换：<a href=\"https://www.jianshu.com/p/647950617a6d\" target=\"_blank\" rel=\"noopener\">Babel</a><br>在线转换：<a href=\"https://babeljs.io/repl\" target=\"_blank\" rel=\"noopener\">Babel</a>、<a href=\"https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22\" target=\"_blank\" rel=\"noopener\">Traceur</a><br>1、前端的发展讲究”工程化”，”模块化”和”组件化”，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，<br>工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等<br>模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写<br>组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面<br>2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等</p>\n<h2 id=\"3-编程命名规则介绍\"><a href=\"#3-编程命名规则介绍\" class=\"headerlink\" title=\"3.编程命名规则介绍\"></a>3.编程命名规则介绍</h2><p>驼峰命名法：如exampleName<br>帕斯卡命名法：如ExampleName<br>下划线命名法：如example_name<br>中划线命名法：如example-name<br>匈牙利命名法(体现类型)：如g_example_name或aExampleNames</p>\n<h2 id=\"3-整理实用条款\"><a href=\"#3-整理实用条款\" class=\"headerlink\" title=\"3.整理实用条款\"></a>3.整理实用条款</h2><p>1、工程化，模块化，组件化的思想<br>2、项目命名使用中划线命名法,比如twitter-bootstrap<br>3、项目中文件夹命名使用中划线命名法：比如global-api<br>3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js<br>3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from ‘./CheckBox’<br>4、类名用帕斯卡命名法：比如AdminUser{}<br>5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()<br>6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法<br>7、常量命名原则：全部大写且用下划线连接，如USER_TYPE</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助<br>参考网址：<br><a href=\"https://www.jianshu.com/p/4cbcd202a591\" target=\"_blank\" rel=\"noopener\">雅虎军规35条</a>、<br><a href=\"https://github.com/yuche/javascript\" target=\"_blank\" rel=\"noopener\">JavaScript 编码规范</a>、<br><a href=\"http://eslint.cn/docs/rules/\" target=\"_blank\" rel=\"noopener\">eslint规则</a>、<br><a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">js编码风格（阮一峰）</a><br><a href=\"http://es6.ruanyifeng.com/#docs/style\" target=\"_blank\" rel=\"noopener\">ES6编程风格</a></p>\n<h2 id=\"2-心得\"><a href=\"#2-心得\" class=\"headerlink\" title=\"2.心得\"></a>2.心得</h2><p>编程讲究章法，要心中有想法，才能动手编码，正所谓”三思而后行”，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5<br>基于node开发环境转换：<a href=\"https://www.jianshu.com/p/647950617a6d\" target=\"_blank\" rel=\"noopener\">Babel</a><br>在线转换：<a href=\"https://babeljs.io/repl\" target=\"_blank\" rel=\"noopener\">Babel</a>、<a href=\"https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22\" target=\"_blank\" rel=\"noopener\">Traceur</a><br>1、前端的发展讲究”工程化”，”模块化”和”组件化”，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，<br>工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等<br>模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写<br>组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面<br>2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等</p>\n<h2 id=\"3-编程命名规则介绍\"><a href=\"#3-编程命名规则介绍\" class=\"headerlink\" title=\"3.编程命名规则介绍\"></a>3.编程命名规则介绍</h2><p>驼峰命名法：如exampleName<br>帕斯卡命名法：如ExampleName<br>下划线命名法：如example_name<br>中划线命名法：如example-name<br>匈牙利命名法(体现类型)：如g_example_name或aExampleNames</p>\n<h2 id=\"3-整理实用条款\"><a href=\"#3-整理实用条款\" class=\"headerlink\" title=\"3.整理实用条款\"></a>3.整理实用条款</h2><p>1、工程化，模块化，组件化的思想<br>2、项目命名使用中划线命名法,比如twitter-bootstrap<br>3、项目中文件夹命名使用中划线命名法：比如global-api<br>3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js<br>3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from ‘./CheckBox’<br>4、类名用帕斯卡命名法：比如AdminUser{}<br>5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()<br>6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法<br>7、常量命名原则：全部大写且用下划线连接，如USER_TYPE</p>\n"},{"title":"string","date":"2018-11-19T12:04:20.000Z","_content":"## 1.文档目的\n熟练掌握js字符串属性和方法，熟能生巧\n参考文档：[MDN String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n## 2.String一览\nString.prototype.constructor\nString.prototype.length  返回了字符串的长度\nN  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）\nString()   将其它对象转化为字符串\n\n【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串\n【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。\n【布尔类型】String.prototype.lastIndexOf() 同上，相反\n【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符\n【布尔类型】String.prototype.endsWith()  同上，相反\n【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较\n【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。\n【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。\n【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。\n【新字符串】String.prototype.padEnd()  同上，相反\n【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。\n【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。\n【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符\n【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。\n【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。\nString.prototype.charAt()  返回特定位置的字符。\nString.prototype.split()  将字符串对象分割成字符串数组。\n\nString.prototype.toLowerCase() 转化为小写\nString.prototype.toLocaleLowerCase() 转为本地化小写\nString.prototype.toUpperCase() 同上，相反\nString.prototype.toLocaleUpperCase() 同上，相反\nString.prototype.trim()  从字符串的开始和结尾去除空格。\nString.prototype.trimLeft()   从字符串的左侧去除空格\nString.prototype.trimRight()   从字符串的右侧去除空格\n\nString.prototype.toString()  返回用字符串对象的字符串值\nString.prototype.valueOf()  返回特定对象的原始值（同toString()）\n\nString是基本类型，Array是引用类型\n\n**总结:**\n1.一些列布尔类型的方法\n2.一些列对值的增删改查及遍历\n3.数组和字符串可以相互转化\ntoString join 和 split\n有空多看看，熟能生巧\n\n扩展学习:splice 和 sort\n\nforEach() 遍历数组\nfor .. in  遍历obj的key\nfor... of  遍历obj的value","source":"_posts/2018-11-19-string.md","raw":"---\ntitle: string\ndate: 2018-11-19 20:04:20\ntags: JS\n---\n## 1.文档目的\n熟练掌握js字符串属性和方法，熟能生巧\n参考文档：[MDN String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n## 2.String一览\nString.prototype.constructor\nString.prototype.length  返回了字符串的长度\nN  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）\nString()   将其它对象转化为字符串\n\n【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串\n【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。\n【布尔类型】String.prototype.lastIndexOf() 同上，相反\n【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符\n【布尔类型】String.prototype.endsWith()  同上，相反\n【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较\n【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。\n【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。\n【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。\n【新字符串】String.prototype.padEnd()  同上，相反\n【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。\n【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。\n【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符\n【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。\n【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。\nString.prototype.charAt()  返回特定位置的字符。\nString.prototype.split()  将字符串对象分割成字符串数组。\n\nString.prototype.toLowerCase() 转化为小写\nString.prototype.toLocaleLowerCase() 转为本地化小写\nString.prototype.toUpperCase() 同上，相反\nString.prototype.toLocaleUpperCase() 同上，相反\nString.prototype.trim()  从字符串的开始和结尾去除空格。\nString.prototype.trimLeft()   从字符串的左侧去除空格\nString.prototype.trimRight()   从字符串的右侧去除空格\n\nString.prototype.toString()  返回用字符串对象的字符串值\nString.prototype.valueOf()  返回特定对象的原始值（同toString()）\n\nString是基本类型，Array是引用类型\n\n**总结:**\n1.一些列布尔类型的方法\n2.一些列对值的增删改查及遍历\n3.数组和字符串可以相互转化\ntoString join 和 split\n有空多看看，熟能生巧\n\n扩展学习:splice 和 sort\n\nforEach() 遍历数组\nfor .. in  遍历obj的key\nfor... of  遍历obj的value","slug":"string","published":1,"updated":"2019-03-14T04:52:58.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw43d000zmtjkh484v706","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js字符串属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener\">MDN String</a></p>\n<h2 id=\"2-String一览\"><a href=\"#2-String一览\" class=\"headerlink\" title=\"2.String一览\"></a>2.String一览</h2><p>String.prototype.constructor<br>String.prototype.length  返回了字符串的长度<br>N  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）<br>String()   将其它对象转化为字符串</p>\n<p>【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串<br>【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。<br>【布尔类型】String.prototype.lastIndexOf() 同上，相反<br>【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符<br>【布尔类型】String.prototype.endsWith()  同上，相反<br>【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较<br>【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。<br>【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。<br>【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。<br>【新字符串】String.prototype.padEnd()  同上，相反<br>【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。<br>【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。<br>【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符<br>【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。<br>【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。<br>String.prototype.charAt()  返回特定位置的字符。<br>String.prototype.split()  将字符串对象分割成字符串数组。</p>\n<p>String.prototype.toLowerCase() 转化为小写<br>String.prototype.toLocaleLowerCase() 转为本地化小写<br>String.prototype.toUpperCase() 同上，相反<br>String.prototype.toLocaleUpperCase() 同上，相反<br>String.prototype.trim()  从字符串的开始和结尾去除空格。<br>String.prototype.trimLeft()   从字符串的左侧去除空格<br>String.prototype.trimRight()   从字符串的右侧去除空格</p>\n<p>String.prototype.toString()  返回用字符串对象的字符串值<br>String.prototype.valueOf()  返回特定对象的原始值（同toString()）</p>\n<p>String是基本类型，Array是引用类型</p>\n<p><strong>总结:</strong><br>1.一些列布尔类型的方法<br>2.一些列对值的增删改查及遍历<br>3.数组和字符串可以相互转化<br>toString join 和 split<br>有空多看看，熟能生巧</p>\n<p>扩展学习:splice 和 sort</p>\n<p>forEach() 遍历数组<br>for .. in  遍历obj的key<br>for… of  遍历obj的value</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js字符串属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener\">MDN String</a></p>\n<h2 id=\"2-String一览\"><a href=\"#2-String一览\" class=\"headerlink\" title=\"2.String一览\"></a>2.String一览</h2><p>String.prototype.constructor<br>String.prototype.length  返回了字符串的长度<br>N  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）<br>String()   将其它对象转化为字符串</p>\n<p>【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串<br>【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。<br>【布尔类型】String.prototype.lastIndexOf() 同上，相反<br>【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符<br>【布尔类型】String.prototype.endsWith()  同上，相反<br>【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较<br>【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。<br>【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。<br>【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。<br>【新字符串】String.prototype.padEnd()  同上，相反<br>【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。<br>【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。<br>【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符<br>【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。<br>【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。<br>String.prototype.charAt()  返回特定位置的字符。<br>String.prototype.split()  将字符串对象分割成字符串数组。</p>\n<p>String.prototype.toLowerCase() 转化为小写<br>String.prototype.toLocaleLowerCase() 转为本地化小写<br>String.prototype.toUpperCase() 同上，相反<br>String.prototype.toLocaleUpperCase() 同上，相反<br>String.prototype.trim()  从字符串的开始和结尾去除空格。<br>String.prototype.trimLeft()   从字符串的左侧去除空格<br>String.prototype.trimRight()   从字符串的右侧去除空格</p>\n<p>String.prototype.toString()  返回用字符串对象的字符串值<br>String.prototype.valueOf()  返回特定对象的原始值（同toString()）</p>\n<p>String是基本类型，Array是引用类型</p>\n<p><strong>总结:</strong><br>1.一些列布尔类型的方法<br>2.一些列对值的增删改查及遍历<br>3.数组和字符串可以相互转化<br>toString join 和 split<br>有空多看看，熟能生巧</p>\n<p>扩展学习:splice 和 sort</p>\n<p>forEach() 遍历数组<br>for .. in  遍历obj的key<br>for… of  遍历obj的value</p>\n"},{"title":"axios","date":"2018-12-20T23:11:54.000Z","_content":"## 1.文档目的\n通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作\n参考网址：[axios](https://www.kancloud.cn/yunye/axios/234845)\n## 2.实践要点分析\n1.get请求直接拼接动态数据\nget请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）\n例如在Swagger UI上看到的形式为：\n**【GET】   /resourceApply/get/{id}**\n**(Parameters)  id[required]  string**\n那么前端的请求方法声明就应该如下（即：将参数直接拼接）：\n```\ngetDepartById = id => this.get(`/resourceApply/get/${id}`)\n```\n对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：\n```\nDepartApi.getDepartById(rowId)\n```\n2.get等请求params参数形式\nparams参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中\n例如在Swagger UI上看到的get请求形式为：\n**【GET】   /role/findPermsByRoleId**\n**(Parameters)  roleId[required]  string**\n那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):\n```\nfindPermsByRoleId = (params) => this.get('dce-admin/role/findPermsByRoleId', params)\nDepartApi.findPermsByRoleId({roleId: this.$route.param.id})\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId: roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\npost请求也是可以有params参数的(data可以默认为{}，来占位)：\n```\nsubAudit = (data, params) => this.post('/dce-res/resourceDB/subAudit', data, params)\nDbRegisterApi.subAudit({}, { resourceDBId: params.row.id })\n```\n3.post等请求data参数形式\n`data` 是作为请求主体被发送的数据，只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n必须是以下类型之一：\n- string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n- 浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]\n- Node 专属： Stream\n例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：\n**【POST】   /dce-admin/depart**\n**(Parameters)  depart[required]  body**\n那么前端的请求方法声明和调用方法就应该如下：\n```\naddDepart = data => this.post('/dce-admin/depart', data)\nDepartApi.addDepart(this.formValidate)\n```\n当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变\n4.跨域等问题的处理\n跨域原因：\n浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据\n解决方案（在axios请求配置中加入如下配置）：\n```\n// 'proxy' 定义代理服务器的主机名称和端口\n// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n```","source":"_posts/2018-12-21-axios.md","raw":"---\ntitle: axios\ndate: 2018-12-21 07:11:54\ntags: tools\n---\n## 1.文档目的\n通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作\n参考网址：[axios](https://www.kancloud.cn/yunye/axios/234845)\n## 2.实践要点分析\n1.get请求直接拼接动态数据\nget请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）\n例如在Swagger UI上看到的形式为：\n**【GET】   /resourceApply/get/{id}**\n**(Parameters)  id[required]  string**\n那么前端的请求方法声明就应该如下（即：将参数直接拼接）：\n```\ngetDepartById = id => this.get(`/resourceApply/get/${id}`)\n```\n对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：\n```\nDepartApi.getDepartById(rowId)\n```\n2.get等请求params参数形式\nparams参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中\n例如在Swagger UI上看到的get请求形式为：\n**【GET】   /role/findPermsByRoleId**\n**(Parameters)  roleId[required]  string**\n那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):\n```\nfindPermsByRoleId = (params) => this.get('dce-admin/role/findPermsByRoleId', params)\nDepartApi.findPermsByRoleId({roleId: this.$route.param.id})\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId: roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\npost请求也是可以有params参数的(data可以默认为{}，来占位)：\n```\nsubAudit = (data, params) => this.post('/dce-res/resourceDB/subAudit', data, params)\nDbRegisterApi.subAudit({}, { resourceDBId: params.row.id })\n```\n3.post等请求data参数形式\n`data` 是作为请求主体被发送的数据，只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n必须是以下类型之一：\n- string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n- 浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]\n- Node 专属： Stream\n例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：\n**【POST】   /dce-admin/depart**\n**(Parameters)  depart[required]  body**\n那么前端的请求方法声明和调用方法就应该如下：\n```\naddDepart = data => this.post('/dce-admin/depart', data)\nDepartApi.addDepart(this.formValidate)\n```\n当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变\n4.跨域等问题的处理\n跨域原因：\n浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据\n解决方案（在axios请求配置中加入如下配置）：\n```\n// 'proxy' 定义代理服务器的主机名称和端口\n// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n```","slug":"axios","published":1,"updated":"2019-03-14T04:52:58.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw43l0011mtjkcvnyrmzl","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作<br>参考网址：<a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">axios</a></p>\n<h2 id=\"2-实践要点分析\"><a href=\"#2-实践要点分析\" class=\"headerlink\" title=\"2.实践要点分析\"></a>2.实践要点分析</h2><p>1.get请求直接拼接动态数据<br>get请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）<br>例如在Swagger UI上看到的形式为：<br><strong>【GET】   /resourceApply/get/{id}</strong><br><strong>(Parameters)  id[required]  string</strong><br>那么前端的请求方法声明就应该如下（即：将参数直接拼接）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDepartById = id =&gt; this.get(`/resourceApply/get/$&#123;id&#125;`)</span><br></pre></td></tr></table></figure></p>\n<p>对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DepartApi.getDepartById(rowId)</span><br></pre></td></tr></table></figure></p>\n<p>2.get等请求params参数形式<br>params参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中<br>例如在Swagger UI上看到的get请求形式为：<br><strong>【GET】   /role/findPermsByRoleId</strong><br><strong>(Parameters)  roleId[required]  string</strong><br>那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (params) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, params)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(&#123;roleId: this.$route.param.id&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId: roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>post请求也是可以有params参数的(data可以默认为{}，来占位)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subAudit = (data, params) =&gt; this.post(&apos;/dce-res/resourceDB/subAudit&apos;, data, params)</span><br><span class=\"line\">DbRegisterApi.subAudit(&#123;&#125;, &#123; resourceDBId: params.row.id &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3.post等请求data参数形式<br><code>data</code> 是作为请求主体被发送的数据，只适用于这些请求方法 ‘PUT’, ‘POST’, 和 ‘PATCH’<br>必须是以下类型之一：</p>\n<ul>\n<li>string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</li>\n<li>浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]</li>\n<li>Node 专属： Stream<br>例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：<br><strong>【POST】   /dce-admin/depart</strong><br><strong>(Parameters)  depart[required]  body</strong><br>那么前端的请求方法声明和调用方法就应该如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addDepart = data =&gt; this.post(&apos;/dce-admin/depart&apos;, data)</span><br><span class=\"line\">DepartApi.addDepart(this.formValidate)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变<br>4.跨域等问题的处理<br>跨域原因：<br>浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据<br>解决方案（在axios请求配置中加入如下配置）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &apos;proxy&apos; 定义代理服务器的主机名称和端口</span><br><span class=\"line\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class=\"line\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">    port: 9000,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: &apos;mikeymike&apos;,</span><br><span class=\"line\">      password: &apos;rapunz3l&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作<br>参考网址：<a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">axios</a></p>\n<h2 id=\"2-实践要点分析\"><a href=\"#2-实践要点分析\" class=\"headerlink\" title=\"2.实践要点分析\"></a>2.实践要点分析</h2><p>1.get请求直接拼接动态数据<br>get请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）<br>例如在Swagger UI上看到的形式为：<br><strong>【GET】   /resourceApply/get/{id}</strong><br><strong>(Parameters)  id[required]  string</strong><br>那么前端的请求方法声明就应该如下（即：将参数直接拼接）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDepartById = id =&gt; this.get(`/resourceApply/get/$&#123;id&#125;`)</span><br></pre></td></tr></table></figure></p>\n<p>对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DepartApi.getDepartById(rowId)</span><br></pre></td></tr></table></figure></p>\n<p>2.get等请求params参数形式<br>params参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中<br>例如在Swagger UI上看到的get请求形式为：<br><strong>【GET】   /role/findPermsByRoleId</strong><br><strong>(Parameters)  roleId[required]  string</strong><br>那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (params) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, params)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(&#123;roleId: this.$route.param.id&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId: roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>post请求也是可以有params参数的(data可以默认为{}，来占位)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subAudit = (data, params) =&gt; this.post(&apos;/dce-res/resourceDB/subAudit&apos;, data, params)</span><br><span class=\"line\">DbRegisterApi.subAudit(&#123;&#125;, &#123; resourceDBId: params.row.id &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3.post等请求data参数形式<br><code>data</code> 是作为请求主体被发送的数据，只适用于这些请求方法 ‘PUT’, ‘POST’, 和 ‘PATCH’<br>必须是以下类型之一：</p>\n<ul>\n<li>string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</li>\n<li>浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]</li>\n<li>Node 专属： Stream<br>例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：<br><strong>【POST】   /dce-admin/depart</strong><br><strong>(Parameters)  depart[required]  body</strong><br>那么前端的请求方法声明和调用方法就应该如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addDepart = data =&gt; this.post(&apos;/dce-admin/depart&apos;, data)</span><br><span class=\"line\">DepartApi.addDepart(this.formValidate)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变<br>4.跨域等问题的处理<br>跨域原因：<br>浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据<br>解决方案（在axios请求配置中加入如下配置）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &apos;proxy&apos; 定义代理服务器的主机名称和端口</span><br><span class=\"line\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class=\"line\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">    port: 9000,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: &apos;mikeymike&apos;,</span><br><span class=\"line\">      password: &apos;rapunz3l&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n"},{"title":"React+Redux模式","date":"2018-12-25T22:15:26.000Z","_content":"## 1.文档目的\n学习并理解React+Redux模式\n参考网址：[慕课网:在React中使用Redux数据流](https://www.imooc.com/learn/744)\n## 2.概念笔记\n1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），\n需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）\n2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，\n实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state\n","source":"_posts/2018-12-26-react1.md","raw":"---\ntitle: React+Redux模式\ndate: 2018-12-26 06:15:26\ntags: React\n---\n## 1.文档目的\n学习并理解React+Redux模式\n参考网址：[慕课网:在React中使用Redux数据流](https://www.imooc.com/learn/744)\n## 2.概念笔记\n1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），\n需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）\n2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，\n实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state\n","slug":"react1","published":1,"updated":"2019-03-14T04:52:58.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw43m0013mtjkr61af3eq","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>学习并理解React+Redux模式<br>参考网址：<a href=\"https://www.imooc.com/learn/744\" target=\"_blank\" rel=\"noopener\">慕课网:在React中使用Redux数据流</a></p>\n<h2 id=\"2-概念笔记\"><a href=\"#2-概念笔记\" class=\"headerlink\" title=\"2.概念笔记\"></a>2.概念笔记</h2><p>1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），<br>需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）<br>2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，<br>实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>学习并理解React+Redux模式<br>参考网址：<a href=\"https://www.imooc.com/learn/744\" target=\"_blank\" rel=\"noopener\">慕课网:在React中使用Redux数据流</a></p>\n<h2 id=\"2-概念笔记\"><a href=\"#2-概念笔记\" class=\"headerlink\" title=\"2.概念笔记\"></a>2.概念笔记</h2><p>1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），<br>需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）<br>2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，<br>实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state</p>\n"},{"title":"基于React Native的android打包","date":"2019-03-19T04:39:12.000Z","_content":"## 1.文档目的\n打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.\n打包IOS，需要有打包证书支持,这里先不做探究.\n打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。\n\n## 2.内容梳理\n步骤一:配置android/app/build.gradle文件,如图一所示\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n```\n signingConfigs {\n        release {\n            storeFile file(MYAPP_RELEASE_STORE_FILE)\n            storePassword MYAPP_RELEASE_STORE_PASSWORD\n            keyAlias MYAPP_RELEASE_KEY_ALIAS\n            keyPassword MYAPP_RELEASE_KEY_PASSWORD\n        }\n }\n\nsigningConfig signingConfigs.release\n```\n步骤二:配置android/gradle.properties文件,如图二所示\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n```\nMYAPP_RELEASE_STORE_FILE=my-release-key.keystore\n\nMYAPP_RELEASE_KEY_ALIAS=my-key-alias\n\nMYAPP_RELEASE_STORE_PASSWORD=123456789\n\nMYAPP_RELEASE_KEY_PASSWORD=123456789\n```\n步骤三:在android/app/文件夹下添加key文件\n[my-release-key.keystore 提取码: ncpe](https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA)\n","source":"_posts/2019-03-19-android-apk.md","raw":"---\ntitle: 基于React Native的android打包\ndate: 2019-03-19 12:39:12\ntags: tools\n---\n## 1.文档目的\n打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.\n打包IOS，需要有打包证书支持,这里先不做探究.\n打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。\n\n## 2.内容梳理\n步骤一:配置android/app/build.gradle文件,如图一所示\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n```\n signingConfigs {\n        release {\n            storeFile file(MYAPP_RELEASE_STORE_FILE)\n            storePassword MYAPP_RELEASE_STORE_PASSWORD\n            keyAlias MYAPP_RELEASE_KEY_ALIAS\n            keyPassword MYAPP_RELEASE_KEY_PASSWORD\n        }\n }\n\nsigningConfig signingConfigs.release\n```\n步骤二:配置android/gradle.properties文件,如图二所示\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n```\nMYAPP_RELEASE_STORE_FILE=my-release-key.keystore\n\nMYAPP_RELEASE_KEY_ALIAS=my-key-alias\n\nMYAPP_RELEASE_STORE_PASSWORD=123456789\n\nMYAPP_RELEASE_KEY_PASSWORD=123456789\n```\n步骤三:在android/app/文件夹下添加key文件\n[my-release-key.keystore 提取码: ncpe](https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA)\n","slug":"android-apk","published":1,"updated":"2019-03-19T04:58:51.595Z","_id":"cjtfaw43o0015mtjk1bsi8n50","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.<br>打包IOS，需要有打包证书支持,这里先不做探究.<br>打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>步骤一:配置android/app/build.gradle文件,如图一所示<br><img src=\"/2019/03/19/android-apk/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class=\"line\">            storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class=\"line\">            keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class=\"line\">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signingConfig signingConfigs.release</span><br></pre></td></tr></table></figure></p>\n<p>步骤二:配置android/gradle.properties文件,如图二所示<br><img src=\"/2019/03/19/android-apk/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_STORE_PASSWORD=123456789</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_PASSWORD=123456789</span><br></pre></td></tr></table></figure></p>\n<p>步骤三:在android/app/文件夹下添加key文件<br><a href=\"https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA\" target=\"_blank\" rel=\"noopener\">my-release-key.keystore 提取码: ncpe</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.<br>打包IOS，需要有打包证书支持,这里先不做探究.<br>打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>步骤一:配置android/app/build.gradle文件,如图一所示<br><img src=\"/2019/03/19/android-apk/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class=\"line\">            storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class=\"line\">            keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class=\"line\">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signingConfig signingConfigs.release</span><br></pre></td></tr></table></figure></p>\n<p>步骤二:配置android/gradle.properties文件,如图二所示<br><img src=\"/2019/03/19/android-apk/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_STORE_PASSWORD=123456789</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_PASSWORD=123456789</span><br></pre></td></tr></table></figure></p>\n<p>步骤三:在android/app/文件夹下添加key文件<br><a href=\"https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA\" target=\"_blank\" rel=\"noopener\">my-release-key.keystore 提取码: ncpe</a></p>\n"},{"title":"serve静态资源服务器","date":"2019-03-14T04:36:57.000Z","_content":"## 1.文档目的\n前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用\n\n## 2.内容梳理\n全局安装\n```\nyarn global add serve\n```\n查看版本信息\n```\nserve --version\n```\n进入需要开启服务的文件夹,启动服务\n```\nserve .\n```","source":"_posts/2019-03-14-serve.md","raw":"---\ntitle: serve静态资源服务器\ndate: 2019-03-14 12:36:57\ntags: tools\n---\n## 1.文档目的\n前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用\n\n## 2.内容梳理\n全局安装\n```\nyarn global add serve\n```\n查看版本信息\n```\nserve --version\n```\n进入需要开启服务的文件夹,启动服务\n```\nserve .\n```","slug":"serve","published":1,"updated":"2019-03-14T04:52:58.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw43p0018mtjkn5z8h6t1","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add serve</span><br></pre></td></tr></table></figure></p>\n<p>查看版本信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve --version</span><br></pre></td></tr></table></figure></p>\n<p>进入需要开启服务的文件夹,启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve .</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add serve</span><br></pre></td></tr></table></figure></p>\n<p>查看版本信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve --version</span><br></pre></td></tr></table></figure></p>\n<p>进入需要开启服务的文件夹,启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve .</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-03-14T04:52:58.569Z","updated":"2019-03-14T04:52:58.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw43q001amtjk9tmlv1qj","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"基于React Native的热更新","date":"2019-03-15T04:56:32.000Z","_content":"## 1.文档目的\n基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法\n参考网址: [react-native-code-push常用命令](https://www.jianshu.com/p/8f7ae770a5ac)\n\n## 2.内容梳理\n查看服务器app部署情况\n```\ncode-push app list\n```\n查看发布信息\n```\ncode-push deployment ls Rasog-android -k\n```\n发布命令\n```\ncode-push release-react Rasog-android android --t 1.0.0 --d Staging --des \"1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除\" --m true\n```\n","source":"_posts/2019-03-15-code-push.md","raw":"---\ntitle: 基于React Native的热更新\ndate: 2019-03-15 12:56:32\ntags: tools\n---\n## 1.文档目的\n基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法\n参考网址: [react-native-code-push常用命令](https://www.jianshu.com/p/8f7ae770a5ac)\n\n## 2.内容梳理\n查看服务器app部署情况\n```\ncode-push app list\n```\n查看发布信息\n```\ncode-push deployment ls Rasog-android -k\n```\n发布命令\n```\ncode-push release-react Rasog-android android --t 1.0.0 --d Staging --des \"1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除\" --m true\n```\n","slug":"code-push","published":1,"updated":"2019-03-15T05:01:50.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtfaw43s001cmtjk6r79y9ng","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法<br>参考网址: <a href=\"https://www.jianshu.com/p/8f7ae770a5ac\" target=\"_blank\" rel=\"noopener\">react-native-code-push常用命令</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>查看服务器app部署情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app list</span><br></pre></td></tr></table></figure></p>\n<p>查看发布信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push deployment ls Rasog-android -k</span><br></pre></td></tr></table></figure></p>\n<p>发布命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react Rasog-android android --t 1.0.0 --d Staging --des &quot;1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除&quot; --m true</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法<br>参考网址: <a href=\"https://www.jianshu.com/p/8f7ae770a5ac\" target=\"_blank\" rel=\"noopener\">react-native-code-push常用命令</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>查看服务器app部署情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app list</span><br></pre></td></tr></table></figure></p>\n<p>查看发布信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push deployment ls Rasog-android -k</span><br></pre></td></tr></table></figure></p>\n<p>发布命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react Rasog-android android --t 1.0.0 --d Staging --des &quot;1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除&quot; --m true</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[{"_id":"source/_posts/2018-06-14-git3/image001.png","slug":"image001.png","post":"cjtfaw3dc0003mtjkhy0hd8kr","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git3/image002.png","slug":"image002.png","post":"cjtfaw3dc0003mtjkhy0hd8kr","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git3/image003.png","slug":"image003.png","post":"cjtfaw3dc0003mtjkhy0hd8kr","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git4/image001.png","slug":"image001.png","post":"cjtfaw3de0004mtjkr60ty51f","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git4/image002.png","slug":"image002.png","post":"cjtfaw3de0004mtjkr60ty51f","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git4/image003.png","slug":"image003.png","post":"cjtfaw3de0004mtjkr60ty51f","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image001.png","slug":"image001.png","post":"cjtfaw3d50001mtjkih9079mw","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image002.png","slug":"image002.png","post":"cjtfaw3d50001mtjkih9079mw","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image003.png","slug":"image003.png","post":"cjtfaw3d50001mtjkih9079mw","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image004.png","slug":"image004.png","post":"cjtfaw3d50001mtjkih9079mw","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image001.png","slug":"image001.png","post":"cjtfaw3dg0005mtjk1q0g6k8k","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image002.png","slug":"image002.png","post":"cjtfaw3dg0005mtjk1q0g6k8k","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image003.png","slug":"image003.png","post":"cjtfaw3dg0005mtjk1q0g6k8k","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image004.png","slug":"image004.png","post":"cjtfaw3dg0005mtjk1q0g6k8k","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image005.png","slug":"image005.png","post":"cjtfaw3dg0005mtjk1q0g6k8k","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image006.png","slug":"image006.png","post":"cjtfaw3dg0005mtjk1q0g6k8k","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image001.png","slug":"image001.png","post":"cjtfaw3cw0000mtjkjfw1p8yb","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image002.png","slug":"image002.png","post":"cjtfaw3cw0000mtjkjfw1p8yb","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image003.png","slug":"image003.png","post":"cjtfaw3cw0000mtjkjfw1p8yb","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image004.png","slug":"image004.png","post":"cjtfaw3cw0000mtjkjfw1p8yb","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image005.png","slug":"image005.png","post":"cjtfaw3cw0000mtjkjfw1p8yb","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image006.png","slug":"image006.png","post":"cjtfaw3cw0000mtjkjfw1p8yb","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image007.png","slug":"image007.png","post":"cjtfaw3cw0000mtjkjfw1p8yb","modified":0,"renderable":0},{"_id":"source/_posts/2019-03-19-android-apk/image001.png","slug":"image001.png","post":"cjtfaw43o0015mtjk1bsi8n50","modified":0,"renderable":0},{"_id":"source/_posts/2019-03-19-android-apk/image002.png","slug":"image002.png","post":"cjtfaw43o0015mtjk1bsi8n50","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjtfaw3de0004mtjkr60ty51f","tag_id":"cjtfaw3d90002mtjk2yamtb6t","_id":"cjtfaw3dj0007mtjka5n5q6ph"},{"post_id":"cjtfaw3cw0000mtjkjfw1p8yb","tag_id":"cjtfaw3d90002mtjk2yamtb6t","_id":"cjtfaw3dl0009mtjko3pvvlnf"},{"post_id":"cjtfaw3dg0005mtjk1q0g6k8k","tag_id":"cjtfaw3d90002mtjk2yamtb6t","_id":"cjtfaw3dn000cmtjkllmaa4ii"},{"post_id":"cjtfaw3dj0008mtjk92cd1s5v","tag_id":"cjtfaw3d90002mtjk2yamtb6t","_id":"cjtfaw3dp000emtjkzjv0lmu5"},{"post_id":"cjtfaw3d50001mtjkih9079mw","tag_id":"cjtfaw3d90002mtjk2yamtb6t","_id":"cjtfaw3ds000hmtjksy2fh2ci"},{"post_id":"cjtfaw3dc0003mtjkhy0hd8kr","tag_id":"cjtfaw3d90002mtjk2yamtb6t","_id":"cjtfaw3du000jmtjko3jvhauq"},{"post_id":"cjtfaw3ds000imtjkhyhj4ir7","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw3dx000mmtjkj48dne2x"},{"post_id":"cjtfaw3dl000amtjkgia78iv8","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw3dy000omtjk78ayxbjg"},{"post_id":"cjtfaw3du000kmtjk1p04z261","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw3dz000qmtjk8aty2sfx"},{"post_id":"cjtfaw3dn000dmtjkomv1yxxk","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw3dz000rmtjknc9ni92b"},{"post_id":"cjtfaw3dp000fmtjkf6t0l7a5","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw3dz000tmtjkwcjz69jg"},{"post_id":"cjtfaw3dx000nmtjkx6uyomw6","tag_id":"cjtfaw3dz000smtjk7382rojw","_id":"cjtfaw3dz000umtjk3vjjbt67"},{"post_id":"cjtfaw43a000xmtjkulttbo4c","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw43k0010mtjkt61lpdvn"},{"post_id":"cjtfaw43d000zmtjkh484v706","tag_id":"cjtfaw3dz000smtjk7382rojw","_id":"cjtfaw43m0012mtjkb753nke3"},{"post_id":"cjtfaw43l0011mtjkcvnyrmzl","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw43n0014mtjkxvo1mbni"},{"post_id":"cjtfaw437000vmtjkltid893t","tag_id":"cjtfaw43c000ymtjku0s4xrep","_id":"cjtfaw43p0017mtjk2no36e1d"},{"post_id":"cjtfaw43o0015mtjk1bsi8n50","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw43q0019mtjk9ldfi47t"},{"post_id":"cjtfaw43p0018mtjkn5z8h6t1","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw43s001bmtjk0y14tv6z"},{"post_id":"cjtfaw43m0013mtjkr61af3eq","tag_id":"cjtfaw43p0016mtjk6cfvqiaq","_id":"cjtfaw43t001dmtjkia6sm3ii"},{"post_id":"cjtfaw43s001cmtjk6r79y9ng","tag_id":"cjtfaw3dr000gmtjkmnxws2wv","_id":"cjtfaw43u001emtjkvnpur5qm"}],"Tag":[{"name":"Git","_id":"cjtfaw3d90002mtjk2yamtb6t"},{"name":"tools","_id":"cjtfaw3dr000gmtjkmnxws2wv"},{"name":"JS","_id":"cjtfaw3dz000smtjk7382rojw"},{"name":"life","_id":"cjtfaw43c000ymtjku0s4xrep"},{"name":"React","_id":"cjtfaw43p0016mtjk6cfvqiaq"}]}}