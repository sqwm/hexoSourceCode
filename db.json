{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1549082157722},{"_id":"themes/BlueLake/README.en.md","hash":"6cc6e346635bf26dd71030b9c3c6443507cd4108","modified":1549082157723},{"_id":"themes/BlueLake/README.md","hash":"66c3ef7a779b6d65bad90daa2e03bcb7a1bb742f","modified":1549082157723},{"_id":"themes/BlueLake/_config.yml","hash":"17f7d151708a009182efa0b00951625df5d2970f","modified":1555833887913},{"_id":"source/_posts/2018-06-13-git1.md","hash":"02f8df861e875816ac34235cc64478513263d6c9","modified":1549082157698},{"_id":"source/_posts/2018-06-14-git2.md","hash":"57dc8ffd3874d39ac69b7ac4246a24d82d286034","modified":1549082157703},{"_id":"themes/BlueLake/package.json","hash":"cdef382c442618b24305fd3e38ac7a3accf87aa9","modified":1549082157739},{"_id":"source/_posts/2018-06-14-git3.md","hash":"b37411e01e88fdf1f0552c89309e41ddfba2c9a0","modified":1549082157706},{"_id":"source/_posts/2018-06-14-git4.md","hash":"f5e16b482b68951b03ec335b853d1745562903aa","modified":1549082157709},{"_id":"source/_posts/2018-06-25-git6.md","hash":"6bb498690e7406bbcfe4db12d721a5fcb23aecde","modified":1549082157716},{"_id":"source/_posts/2018-06-14-git5.md","hash":"89cb2692d365ae83c895ceb2c3130eee50b046f1","modified":1549082157711},{"_id":"source/_posts/2018-06-29-googledev.md","hash":"5e822411b99fac43d2e9470aff59709babb4788f","modified":1555833887893},{"_id":"source/_posts/2018-11-15-keymap.md","hash":"af64b591359a18dd93f8294c41d97287e3b28e94","modified":1555833887893},{"_id":"source/_posts/2018-11-15-hexo.md","hash":"5f073343aceade214bf7e8e5b6e9f8af6611072d","modified":1555833887893},{"_id":"source/_posts/2018-11-19-array.md","hash":"154735288bc5854b150ac82876d18215fcf1cfb5","modified":1549082157718},{"_id":"source/_posts/2018-11-19-string.md","hash":"3345077b376871cb59c665f85708ca8c7a84133f","modified":1549082157719},{"_id":"source/_posts/2018-11-15-npm.md","hash":"babdb08505c4a664803dd4993e75551edf03aac1","modified":1555833887893},{"_id":"source/_posts/2018-12-19-coding-quality.md","hash":"b24d6a81309f18d8bc57a6a231e02f59cf2a9368","modified":1555833887893},{"_id":"source/_posts/2018-12-19-sleep-quality.md","hash":"e9c740d4bcbe882a611215cb75fa8bc37e9755a3","modified":1549082157720},{"_id":"source/_posts/2018-11-15-vueserve.md","hash":"c68a5c5bae68542336c6bb172e4c8feb90efb028","modified":1555833887893},{"_id":"source/_posts/2018-12-21-axios.md","hash":"6b7eeaaad36957373da3357f413bb78917c9ad55","modified":1555833887893},{"_id":"source/_posts/2018-12-26-react1.md","hash":"10a1e1d368156a5c9b06121740a5fe618b102f30","modified":1549082157720},{"_id":"source/_posts/2019-03-26-theme.md","hash":"ccd83252ba6e3f4cbf379689b8f29200d932fbdc","modified":1555834189486},{"_id":"source/_posts/2019-03-14-serve.md","hash":"c507fc3c671c9cd42a49631f3a9fbb7d3593cffe","modified":1555833887903},{"_id":"source/_posts/2019-03-15-code-push.md","hash":"f0395370b4f4f37b00d10901749b92bf527d39ab","modified":1555833887903},{"_id":"source/_posts/2019-03-27-echarts.md","hash":"c8e015a70e315ae795bad33b6d86b5a9852228e7","modified":1555833887913},{"_id":"source/_posts/2019-03-25-android-manifest.md","hash":"7afa44c69e87c05ec462cd98b81e420bf7c83a3b","modified":1555833887903},{"_id":"source/_posts/2019-04-04-pdf-view.md","hash":"9fd3865c7b4f80e6edde0ad9670275e76c3bebee","modified":1555833887913},{"_id":"source/_posts/2019-04-11-json-server.md","hash":"9985a1f7453d48d077269a1d073ccd4be4b36f12","modified":1555833887913},{"_id":"source/_posts/temp.css","hash":"05b31ec66bd86be7c0d306ae3b3b80cfe6fcb3de","modified":1556933453027},{"_id":"source/about/index.md","hash":"1f42f4a631c6da7baecdb2a7a2e112dcf2be756e","modified":1549082157721},{"_id":"source/_posts/2019-04-21-style.md","hash":"26ed4a2244f0a5a8c3ddaa7a66386e9f5c3b4b80","modified":1555837605847},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"a127deb32d1df69bbe50a3824a5f90472513c9c3","modified":1549082157724},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"bd97d5e4b39d30da1644b90256dfc4e6b1d76988","modified":1549082157726},{"_id":"themes/BlueLake/languages/en.yml","hash":"95bac2c366505d016b5defc47370679b9f5f3c4b","modified":1549082157725},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"baa68725feeec6643f875a532a9d55ba8aacdb2c","modified":1549082157725},{"_id":"themes/BlueLake/languages/ko.yml","hash":"fc8826724f570136d9a2d3ec2705b7b7000e0f14","modified":1549082157726},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"d7f5842295509746f878e627c4c7e298f3f1613a","modified":1549082157727},{"_id":"themes/BlueLake/languages/tr.yml","hash":"5f13d55fdd5bdd1115075736e3e26a1ea1dd1dea","modified":1549082157727},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"d4d587ba81864910715c0c3879605cc6a9362e09","modified":1549082157727},{"_id":"source/_posts/2019-04-21-icon.md","hash":"fce3d810b7436faf4ad6fb018da851699eba0fff","modified":1555838757812},{"_id":"source/_posts/2019-03-19-android-apk.md","hash":"bca34648e9fd9222c651ac735c3aeda3cfcd6310","modified":1555833887903},{"_id":"themes/BlueLake/layout/archive.jade","hash":"98d9fb812edbc180878fdadb65bc38499eef2cc4","modified":1549082157736},{"_id":"themes/BlueLake/layout/base.jade","hash":"d65bebf7f9db0d4efc080b399a4c73b70a052f6e","modified":1549082157736},{"_id":"themes/BlueLake/layout/category.jade","hash":"9f3a9f1d6f0bbad258b308ad8d49128c05b422cf","modified":1549082157737},{"_id":"themes/BlueLake/layout/index.jade","hash":"dd81d9f7a6b388de2ab731b17b3ba55f70df4a5f","modified":1549082157737},{"_id":"themes/BlueLake/layout/tag.jade","hash":"50c7af7565751db5d7672beb434768885fb224cb","modified":1549082157738},{"_id":"themes/BlueLake/layout/page.jade","hash":"415404398931d98db28bff723886b07dcb8bbbc3","modified":1549082157738},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1549082157739},{"_id":"themes/BlueLake/layout/post.jade","hash":"0305258c33e4d02f977ee1aaf7f2429b993fda17","modified":1549082157738},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1549082157741},{"_id":"source/_posts/2018-06-13-git1/image001.png","hash":"baa3b692db921bb9f105672c981696fcfafbeb45","modified":1549082157699},{"_id":"source/_posts/2018-06-13-git1/image005.png","hash":"61b8412368821f4918985ff229acad1721607572","modified":1549082157701},{"_id":"source/_posts/2018-06-13-git1/image003.png","hash":"761a48be3e08f4d2d899988be4bcb62288a0d4c5","modified":1549082157700},{"_id":"source/_posts/2018-06-13-git1/image004.png","hash":"523977f61f23680a7f748ece3615aa363fcdcf39","modified":1549082157700},{"_id":"source/_posts/2018-06-13-git1/image006.png","hash":"5e141416ccf588f2e4f659bcea479759dde7f44e","modified":1549082157702},{"_id":"source/_posts/2018-06-13-git1/image007.png","hash":"f4d3ee4c3a46d3b0df84c2a0389909918e042138","modified":1549082157703},{"_id":"source/_posts/2018-06-14-git2/image001.png","hash":"a4ed947935e12ddb4b0657f40eaa0fb3a0d96a00","modified":1549082157704},{"_id":"source/_posts/2018-06-14-git2/image002.png","hash":"d614a6eb9a137020b1e48cd9a7afd724202631cf","modified":1549082157705},{"_id":"source/_posts/2018-06-13-git1/image002.png","hash":"550aae4a89e803e0f1e912046c572fff5953bb0c","modified":1549082157699},{"_id":"source/_posts/2018-06-14-git2/image004.png","hash":"a28338d5a190cfd74620ece82d1bbc8a26be421a","modified":1549082157706},{"_id":"source/_posts/2018-06-14-git3/image002.png","hash":"b4f43ef3de4a0e280f4518911345c07c3dd710c4","modified":1549082157708},{"_id":"source/_posts/2018-06-14-git2/image003.png","hash":"bd7e01b97b3e97317e0b38c34f84896a34ec14b7","modified":1549082157705},{"_id":"source/_posts/2018-06-14-git3/image001.png","hash":"ebbb2ced73ccf66011eaee06a3320d311802983f","modified":1549082157707},{"_id":"source/_posts/2018-06-14-git3/image003.png","hash":"3cc9b01960c9e1fc1384fe580683e850275b121a","modified":1549082157708},{"_id":"source/_posts/2018-06-14-git4/image001.png","hash":"c13c931d9f4f8da4bd5d2660c78017424a8ff763","modified":1549082157709},{"_id":"source/_posts/2018-06-14-git4/image003.png","hash":"16f4b08f8c13bbb044b9d7d6b4321e7bc27a0bf4","modified":1549082157711},{"_id":"source/_posts/2018-06-14-git4/image002.png","hash":"4d380a6a85930bd55506072725548354caf451a9","modified":1549082157710},{"_id":"source/_posts/2018-06-14-git5/image003.png","hash":"a56d29f945d270d72709fcedda6e89cab5c01693","modified":1549082157714},{"_id":"source/_posts/2019-03-26-theme/image001.png","hash":"192ec29acf1a9d30c21ca498a5c36fec1bcb7204","modified":1556935470130},{"_id":"source/_posts/2018-06-14-git5/image005.png","hash":"4fb5dbc44fa2ead3dbb263baefc149c570611c9d","modified":1549082157715},{"_id":"source/_posts/2018-06-14-git5/image006.png","hash":"8085395d91e4032d111d5466890ca3d9893e53ef","modified":1549082157715},{"_id":"source/_posts/2018-06-14-git5/image004.png","hash":"c526c42059557e5427edca61d273fbddb32b9605","modified":1549082157714},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"e0aa5d7adc1218a324a484abe3513e9545f89067","modified":1549082157730},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"21d05990aa5a19632f9ed51085ef7727adeea17a","modified":1549082157728},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1549082157730},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"c1f1955d12aee22a931a3f4ad9d0e9a408e80f3c","modified":1549082157729},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"0e9d4d6ad530919a29f3d420ea9420c73f980300","modified":1549082157728},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1549082157731},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1549082157730},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"d970c81b5cdbd7c0348ee28e93bcbb006d613b6d","modified":1549082157729},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1549082157731},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"c632919f04194dcf6e0e8ccc572554a859aa922b","modified":1549082157733},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1549082157732},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1549082157731},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"ba0839518db2cb9dafee67ca5e471219bfba2e90","modified":1549082157732},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"4f2fba7fcb39a6bf70ff04dad9a3dab2563b21e7","modified":1549082157732},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"9af40206a525db1cb9761fa6facb36332057acf3","modified":1549082157734},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"164a83faaf92ec19d268fd303bf6e30348ddef5c","modified":1549082157734},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"0107affa0c6b22e09546fcf82a6f71ba2dd1e315","modified":1549082157734},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"c6f778d5d2f13bacbd83a56a9e9faaeac0dda0ed","modified":1549082157735},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"6e587b7d254d0d92b959ba58262f5e81b618eba2","modified":1549082157733},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"c75308c2b72456cfb98cb80f280c66e58f171705","modified":1549082157735},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"4e90378aa88c5694126dc8ea5bed3bb2f8642e53","modified":1549082157736},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"92b5c306f276f8ea6a134e303b1b63612d25ecfe","modified":1549082157740},{"_id":"themes/BlueLake/source/css/style.styl","hash":"45776bc176bc8ed0d664e953e23d6a0a9a030929","modified":1549082157740},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1549082157742},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1549082157744},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1549082157743},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1549082157743},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"7ce826f7b678ff3c524fce8bbd480c188e50c7ee","modified":1549082157746},{"_id":"themes/BlueLake/source/js/totop.js","hash":"d9367c6fa3e973bc5f32ce38d951858455726a02","modified":1549082157747},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"9e68d688f2f12ec193ce9496beb0fd42e1de2288","modified":1549082157746},{"_id":"source/_posts/2018-06-14-git5/image002.png","hash":"22deb8ebb9b54a7f9c5daabbbaade22e0370c295","modified":1549082157713},{"_id":"source/_posts/2018-06-14-git5/image001.png","hash":"a9a1e414edd6147833aa5c4b1dd0b075a8e33254","modified":1549082157712},{"_id":"source/_posts/2019-03-19-android-apk/image002.png","hash":"1749af03cd6a617dbef6851b0a9f802bc7e95d07","modified":1555833887903},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1549082157745},{"_id":"source/_posts/2019-03-19-android-apk/image001.png","hash":"b1d655d655278a6b9c0a1186255601fc31838564","modified":1555833887903},{"_id":"public/baidusitemap.xml","hash":"d3e83db69f5da7df978f03b67f00beac9abd8188","modified":1556935521101},{"_id":"public/atom.xml","hash":"cbc9c801aec98bd185601cd12e64f292287f9e76","modified":1556935521102},{"_id":"public/sitemap.xml","hash":"49b23d65059fa1e87fbe8cd5e4a5f6be00f0e382","modified":1556935521103},{"_id":"public/content.json","hash":"635789c5fabd7ca7193389dce9dcc30f99dfaef5","modified":1556935521103},{"_id":"public/about/index.html","hash":"ddbb01a9826412361beb904ad69eab40b7287fbd","modified":1556935521630},{"_id":"public/2019/05/04/temp/index.html","hash":"4f6f9467c9d14e45281e3c5657af6760b7ddb21b","modified":1556935521667},{"_id":"public/2019/04/21/icon/index.html","hash":"c0dda0b8c8d705fb5c1babacbdb63e9773f82980","modified":1556935521667},{"_id":"public/2019/04/11/json-server/index.html","hash":"46fa822daef597e17eca3c681217d3138dc429c2","modified":1556935521668},{"_id":"public/2019/04/21/style/index.html","hash":"d6121b101838ed4d8a7a2164259b81716105c316","modified":1556935521668},{"_id":"public/2019/03/19/android-apk/index.html","hash":"23bf4ee7c031d54f9bcfffb99be08c81e3fe0b4b","modified":1556935521668},{"_id":"public/2019/03/25/android-manifest/index.html","hash":"8826e99f2284b0c504c5c2bb4b65ab2ac132a067","modified":1556935521668},{"_id":"public/2019/03/26/theme/index.html","hash":"193aee4a8b954ba3d5d2c5b90f3b286bf09d7941","modified":1556935521668},{"_id":"public/2018/12/26/react1/index.html","hash":"611cd0866ef072e1fa38bdfc887e6dc91f2d1ed3","modified":1556935521668},{"_id":"public/2018/12/21/axios/index.html","hash":"6e15dfe6f82c087db1e35b9fa114f2ba2e7b1a2b","modified":1556935521668},{"_id":"public/2018/12/19/coding-quality/index.html","hash":"2ae27c2f40255891810f2a23978a3e05c2e703f4","modified":1556935521669},{"_id":"public/2018/12/19/sleep-quality/index.html","hash":"a76721791df02627cffb91a82bf1877922145ff2","modified":1556935521669},{"_id":"public/2018/11/19/string/index.html","hash":"b1bd98c439b11473b418c623c67e2ab31c6087a8","modified":1556935521669},{"_id":"public/2018/11/19/array/index.html","hash":"7b4f07cbb4506294848d567f21825c767a7ebc2e","modified":1556935521669},{"_id":"public/2018/11/15/npm/index.html","hash":"29dfef74c170e1865ec130ad77658de7d0cd9673","modified":1556935521669},{"_id":"public/2018/11/15/vueserve/index.html","hash":"6cae291799837baf24e34895d96a4d4057a46bd1","modified":1556935521669},{"_id":"public/2018/11/15/keymap/index.html","hash":"4c7c45d94a8d4cfdcf7a0bc793243eaab99e5749","modified":1556935521669},{"_id":"public/2018/11/15/hexo/index.html","hash":"98e5651e37ecc3c9379a00aca40bdbde733ff1ac","modified":1556935521669},{"_id":"public/2018/06/29/googledev/index.html","hash":"8ab9825d935513b11f2c2cb111c08b7166306ec0","modified":1556935521670},{"_id":"public/2018/06/14/git5/index.html","hash":"4dac42aa9586ad892ad5529d9e23f18da104e608","modified":1556935521670},{"_id":"public/2018/06/14/git4/index.html","hash":"1cf6499240e171a39105ec61dac60e3c70319c59","modified":1556935521670},{"_id":"public/2018/06/25/git6/index.html","hash":"1c14c20d429475142725a484736bf9ee110a654c","modified":1556935521670},{"_id":"public/2018/06/14/git3/index.html","hash":"4b883d4adc8d084484b9977c6d4049237952447c","modified":1556935521670},{"_id":"public/2018/06/13/git1/index.html","hash":"bd9c6d433dd1da9008c768c16d7f9435588beefa","modified":1556935521670},{"_id":"public/2018/06/14/git2/index.html","hash":"2bb47457c35010870923d3a73951352d89eb4686","modified":1556935521670},{"_id":"public/archives/index.html","hash":"ae96cc4c483cbb454abcb0df28850ca065f17c4c","modified":1556935521670},{"_id":"public/archives/page/2/index.html","hash":"35b0e156bfbe68fd77da8af644e7b61c1249577a","modified":1556935521671},{"_id":"public/archives/2018/index.html","hash":"7b55098426b973b3e55d84d92922356139f291b3","modified":1556935521671},{"_id":"public/archives/2018/page/2/index.html","hash":"0ae304d5e2c3dbe2e40adf2bc207a474fa22a601","modified":1556935521671},{"_id":"public/archives/2018/06/index.html","hash":"8522a1919334a2517f109e6356e87fe42b8d4afb","modified":1556935521671},{"_id":"public/archives/2018/11/index.html","hash":"eb411474717e643d9ba4d82fb2821b380a3984a1","modified":1556935521671},{"_id":"public/archives/2018/12/index.html","hash":"43fd7e6ef216e05e5ff0f2633693d1a70cb5b365","modified":1556935521671},{"_id":"public/archives/2019/index.html","hash":"d3b02a82706dd90a0e3c1a9559c54e90d95c63e4","modified":1556935521671},{"_id":"public/archives/2019/03/index.html","hash":"ffa46e0b60f2c55cdfc0d7471c0625256c13039e","modified":1556935521672},{"_id":"public/index.html","hash":"2dc546dfb4303af5d1dcce446d0dd6c3382d5b5b","modified":1556935521672},{"_id":"public/page/2/index.html","hash":"a7052086759f6f0c55a36050d77a79f6e88988ba","modified":1556935521672},{"_id":"public/archives/2019/04/index.html","hash":"651f87fc43f87b4394df295b086cec490308586e","modified":1556935521672},{"_id":"public/tags/Git/index.html","hash":"f9aba4828f024497a2b39150f1a59a02ebb10a63","modified":1556935521672},{"_id":"public/tags/GoogleDev/index.html","hash":"c02c547c3104e7e0705c88f21898e4a880e52ef2","modified":1556935521672},{"_id":"public/tags/keymap/index.html","hash":"0116c97e33fbd66a8bde033404db54185245b765","modified":1556935521672},{"_id":"public/archives/page/3/index.html","hash":"57df279aa14a976382ee1855ac791d95c5e361b1","modified":1556935521672},{"_id":"public/2019/03/14/serve/index.html","hash":"6d8cb4ae8932814a52c71f5000d148173ff2d4bd","modified":1556935521673},{"_id":"public/page/3/index.html","hash":"6a62bf2b40993355a298622c0e11a98d2d55cd93","modified":1556935521673},{"_id":"public/tags/JS/index.html","hash":"a1eb74e61cf3f8c04fb1cf1b451c23e50de482fa","modified":1556935521673},{"_id":"public/tags/Npm/index.html","hash":"780cc7a0d18eafcc3cf9ab2ce11905b6f87445f5","modified":1556935521673},{"_id":"public/tags/life/index.html","hash":"7510100c00a9906a6fdf7e3999b33b5819fabdf1","modified":1556935521673},{"_id":"public/tags/VueServe/index.html","hash":"f7b273780794783d421fd4d5d434ee2d78a12ad5","modified":1556935521673},{"_id":"public/tags/Axios/index.html","hash":"f7ef4c69f1627e12ba3b3982d4fa67f91f8944f4","modified":1556935521673},{"_id":"public/tags/css/index.html","hash":"1c8967c794c2cf4821b7daaf935ba07d61d5a46d","modified":1556935521673},{"_id":"public/tags/Hexo/index.html","hash":"30f56f1da679705eccfb33e58aad021e458ffb5d","modified":1556935521674},{"_id":"public/tags/React/index.html","hash":"e5e709339ed46b256cc100e73ac7ba0171bdf6c7","modified":1556935521674},{"_id":"public/tags/CodingQuality/index.html","hash":"9157d5d2bd53e020126c5f24a5229212d7af5bce","modified":1556935521674},{"_id":"public/tags/Serve/index.html","hash":"73c071147bec83dc18b25c3914cc9e4914f233ea","modified":1556935521674},{"_id":"public/tags/JSON/index.html","hash":"d009292bdb12ba69d062094c5975164bc7c0fd93","modified":1556935521674},{"_id":"public/tags/echarts/index.html","hash":"9ad2bcca6484fe24fa80eaf28bf1796bf3fe6daf","modified":1556935521674},{"_id":"public/2019/04/04/pdf-view/index.html","hash":"edc67d989b74db5323d1e93de5aafb37b5a27e55","modified":1556935521674},{"_id":"public/2019/03/27/echarts/index.html","hash":"82e0cd9af529ff2f6d8c7125c2ad766a2445d075","modified":1556935521674},{"_id":"public/2019/03/15/code-push/index.html","hash":"4f289a08017cf9221fd7293d2901c2234fbee3a8","modified":1556935521675},{"_id":"public/archives/2019/page/2/index.html","hash":"98155db34d5b46d1970a4f68a56027b525f90b69","modified":1556935521676},{"_id":"public/archives/2019/05/index.html","hash":"97905bb6f894c4e7df7119f0a0766df7b38d7915","modified":1556935521676},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1556935521710},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1556935521710},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1556935521710},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1556935521710},{"_id":"public/iconfont/iconfont.svg","hash":"a910f5840f8e25b7a6e5c47b9a04ae49b9db8c32","modified":1556935521710},{"_id":"public/2018/06/13/git1/image001.png","hash":"baa3b692db921bb9f105672c981696fcfafbeb45","modified":1556935521711},{"_id":"public/2018/06/13/git1/image002.png","hash":"550aae4a89e803e0f1e912046c572fff5953bb0c","modified":1556935521711},{"_id":"public/2018/06/13/git1/image003.png","hash":"761a48be3e08f4d2d899988be4bcb62288a0d4c5","modified":1556935521711},{"_id":"public/2018/06/13/git1/image007.png","hash":"f4d3ee4c3a46d3b0df84c2a0389909918e042138","modified":1556935521716},{"_id":"public/2018/06/13/git1/image004.png","hash":"523977f61f23680a7f748ece3615aa363fcdcf39","modified":1556935521716},{"_id":"public/2018/06/13/git1/image005.png","hash":"61b8412368821f4918985ff229acad1721607572","modified":1556935521717},{"_id":"public/2019/03/26/theme/image001.png","hash":"192ec29acf1a9d30c21ca498a5c36fec1bcb7204","modified":1556935521717},{"_id":"public/2018/06/14/git4/image003.png","hash":"16f4b08f8c13bbb044b9d7d6b4321e7bc27a0bf4","modified":1556935521717},{"_id":"public/2018/06/13/git1/image006.png","hash":"5e141416ccf588f2e4f659bcea479759dde7f44e","modified":1556935521717},{"_id":"public/2018/06/14/git4/image002.png","hash":"4d380a6a85930bd55506072725548354caf451a9","modified":1556935521717},{"_id":"public/2018/06/14/git4/image001.png","hash":"c13c931d9f4f8da4bd5d2660c78017424a8ff763","modified":1556935521717},{"_id":"public/2018/06/14/git3/image002.png","hash":"b4f43ef3de4a0e280f4518911345c07c3dd710c4","modified":1556935521717},{"_id":"public/2018/06/14/git3/image001.png","hash":"ebbb2ced73ccf66011eaee06a3320d311802983f","modified":1556935521718},{"_id":"public/2018/06/14/git3/image003.png","hash":"3cc9b01960c9e1fc1384fe580683e850275b121a","modified":1556935521718},{"_id":"public/2018/06/14/git2/image002.png","hash":"d614a6eb9a137020b1e48cd9a7afd724202631cf","modified":1556935521718},{"_id":"public/2018/06/14/git2/image001.png","hash":"a4ed947935e12ddb4b0657f40eaa0fb3a0d96a00","modified":1556935521718},{"_id":"public/2018/06/14/git2/image003.png","hash":"bd7e01b97b3e97317e0b38c34f84896a34ec14b7","modified":1556935521718},{"_id":"public/2018/06/14/git5/image003.png","hash":"a56d29f945d270d72709fcedda6e89cab5c01693","modified":1556935521719},{"_id":"public/2018/06/14/git2/image004.png","hash":"a28338d5a190cfd74620ece82d1bbc8a26be421a","modified":1556935521719},{"_id":"public/2018/06/14/git5/image004.png","hash":"c526c42059557e5427edca61d273fbddb32b9605","modified":1556935521719},{"_id":"public/2018/06/14/git5/image005.png","hash":"4fb5dbc44fa2ead3dbb263baefc149c570611c9d","modified":1556935521719},{"_id":"public/2018/06/14/git5/image006.png","hash":"8085395d91e4032d111d5466890ca3d9893e53ef","modified":1556935521719},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1556935522968},{"_id":"public/2018/06/14/git5/image001.png","hash":"a9a1e414edd6147833aa5c4b1dd0b075a8e33254","modified":1556935522969},{"_id":"public/2018/06/14/git5/image002.png","hash":"22deb8ebb9b54a7f9c5daabbbaade22e0370c295","modified":1556935522969},{"_id":"public/css/highlight.css","hash":"932879716cbce6f9a1b830070ed514082398f1ca","modified":1556935522981},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1556935522981},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1556935522981},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1556935522982},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1556935522982},{"_id":"public/2019/03/19/android-apk/image002.png","hash":"1749af03cd6a617dbef6851b0a9f802bc7e95d07","modified":1556935523269},{"_id":"public/css/style.css","hash":"45a02c24123d7107ed700c695506d5ef7c274fc1","modified":1556935523316},{"_id":"public/2019/03/19/android-apk/image001.png","hash":"b1d655d655278a6b9c0a1186255601fc31838564","modified":1556935523330}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-06-12T13:24:05.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-12 21:24:05\n---\n","updated":"2019-02-02T04:35:57.721Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjv8v7ivb0004hkuzfywc9b2z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git系列之环境配置与github代码托管","date":"2018-06-13T14:35:54.000Z","_content":"## 1.名词解释\n**Git**: 一个免费的开源分布式版本控制系统\n**github**: 一个面向开源及私有软件项目的托管平台\n## 2.Git下载安装与配置\n从[git官网](https://git-scm.com/)上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\ngit基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入**git config –help**查看。\n{% asset_img image002.png this is second image %}\n<center>**图（2）**</center>\n配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator\\.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。\n{% asset_img image003.png this is second image %}\n<center>**图（3）**</center>\n\n## 3.github配置并新建托管项目\n访问[github官网](https://github.com/)，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。\nTitle名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。\n{% asset_img image004.png this is second image %}\n<center>**图（4）**</center>\n回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。\n{% asset_img image005.png this is second image %}\n<center>**图（5）**</center>\n创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。\n{% asset_img image006.png this is second image %}\n<center>**图（6）**</center>\n在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。\n{% asset_img image007.png this is second image %}\n<center>**图（7）**</center>\n","source":"_posts/2018-06-13-git1.md","raw":"---\ntitle: Git系列之环境配置与github代码托管\ndate: 2018-06-13 22:35:54\ntags: Git\n---\n## 1.名词解释\n**Git**: 一个免费的开源分布式版本控制系统\n**github**: 一个面向开源及私有软件项目的托管平台\n## 2.Git下载安装与配置\n从[git官网](https://git-scm.com/)上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\ngit基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入**git config –help**查看。\n{% asset_img image002.png this is second image %}\n<center>**图（2）**</center>\n配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator\\.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。\n{% asset_img image003.png this is second image %}\n<center>**图（3）**</center>\n\n## 3.github配置并新建托管项目\n访问[github官网](https://github.com/)，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。\nTitle名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。\n{% asset_img image004.png this is second image %}\n<center>**图（4）**</center>\n回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。\n{% asset_img image005.png this is second image %}\n<center>**图（5）**</center>\n创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。\n{% asset_img image006.png this is second image %}\n<center>**图（6）**</center>\n在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。\n{% asset_img image007.png this is second image %}\n<center>**图（7）**</center>\n","slug":"git1","published":1,"updated":"2019-02-02T04:35:57.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7hwm0000hkuz9mbzpfp0","content":"<h2 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1.名词解释\"></a>1.名词解释</h2><p><strong>Git</strong>: 一个免费的开源分布式版本控制系统<br><strong>github</strong>: 一个面向开源及私有软件项目的托管平台</p>\n<h2 id=\"2-Git下载安装与配置\"><a href=\"#2-Git下载安装与配置\" class=\"headerlink\" title=\"2.Git下载安装与配置\"></a>2.Git下载安装与配置</h2><p>从<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git官网</a>上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。<br><img src=\"/2018/06/13/git1/image001.png\" title=\"this is first image\"></p>\n<center><strong>图（1）</strong></center><br>git基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入<strong>git config –help</strong>查看。<br><img src=\"/2018/06/13/git1/image002.png\" title=\"this is second image\"><br><center><strong>图（2）</strong></center><br>配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。<br><img src=\"/2018/06/13/git1/image003.png\" title=\"this is second image\"><br><center><strong>图（3）</strong></center>\n\n<h2 id=\"3-github配置并新建托管项目\"><a href=\"#3-github配置并新建托管项目\" class=\"headerlink\" title=\"3.github配置并新建托管项目\"></a>3.github配置并新建托管项目</h2><p>访问<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github官网</a>，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。<br>Title名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。<br><img src=\"/2018/06/13/git1/image004.png\" title=\"this is second image\"></p>\n<center><strong>图（4）</strong></center><br>回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。<br><img src=\"/2018/06/13/git1/image005.png\" title=\"this is second image\"><br><center><strong>图（5）</strong></center><br>创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。<br><img src=\"/2018/06/13/git1/image006.png\" title=\"this is second image\"><br><center><strong>图（6）</strong></center><br>在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。<br><img src=\"/2018/06/13/git1/image007.png\" title=\"this is second image\"><br><center><strong>图（7）</strong></center>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1.名词解释\"></a>1.名词解释</h2><p><strong>Git</strong>: 一个免费的开源分布式版本控制系统<br><strong>github</strong>: 一个面向开源及私有软件项目的托管平台</p>\n<h2 id=\"2-Git下载安装与配置\"><a href=\"#2-Git下载安装与配置\" class=\"headerlink\" title=\"2.Git下载安装与配置\"></a>2.Git下载安装与配置</h2><p>从<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git官网</a>上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。<br><img src=\"/2018/06/13/git1/image001.png\" title=\"this is first image\"></p>\n<center><strong>图（1）</strong></center><br>git基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入<strong>git config –help</strong>查看。<br><img src=\"/2018/06/13/git1/image002.png\" title=\"this is second image\"><br><center><strong>图（2）</strong></center><br>配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。<br><img src=\"/2018/06/13/git1/image003.png\" title=\"this is second image\"><br><center><strong>图（3）</strong></center>\n\n<h2 id=\"3-github配置并新建托管项目\"><a href=\"#3-github配置并新建托管项目\" class=\"headerlink\" title=\"3.github配置并新建托管项目\"></a>3.github配置并新建托管项目</h2><p>访问<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github官网</a>，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。<br>Title名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。<br><img src=\"/2018/06/13/git1/image004.png\" title=\"this is second image\"></p>\n<center><strong>图（4）</strong></center><br>回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。<br><img src=\"/2018/06/13/git1/image005.png\" title=\"this is second image\"><br><center><strong>图（5）</strong></center><br>创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。<br><img src=\"/2018/06/13/git1/image006.png\" title=\"this is second image\"><br><center><strong>图（6）</strong></center><br>在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。<br><img src=\"/2018/06/13/git1/image007.png\" title=\"this is second image\"><br><center><strong>图（7）</strong></center>\n"},{"title":"Git系列之本地仓库","date":"2018-06-14T13:48:30.000Z","_content":"## 1.初始化本地仓库\n本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。\n{% asset_img image003.png this is first image %}\n<center>**图（3）**</center>\n## 2.推送本地仓库至github\n先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。\n复制项目的git地址（如：git@github.com:zhuxiaobotongxue/test.git）。\n在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。\n{% asset_img image004.png this is first image %}\n<center>**图（4）**</center>\n此时刷新github仓库，就可以看到内容提交成功了。","source":"_posts/2018-06-14-git2.md","raw":"---\ntitle: Git系列之本地仓库\ndate: 2018-06-14 21:48:30\ntags: Git\n---\n## 1.初始化本地仓库\n本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。\n{% asset_img image003.png this is first image %}\n<center>**图（3）**</center>\n## 2.推送本地仓库至github\n先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。\n复制项目的git地址（如：git@github.com:zhuxiaobotongxue/test.git）。\n在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。\n{% asset_img image004.png this is first image %}\n<center>**图（4）**</center>\n此时刷新github仓库，就可以看到内容提交成功了。","slug":"git2","published":1,"updated":"2019-02-02T04:35:57.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iv70003hkuzick4i3ph","content":"<h2 id=\"1-初始化本地仓库\"><a href=\"#1-初始化本地仓库\" class=\"headerlink\" title=\"1.初始化本地仓库\"></a>1.初始化本地仓库</h2><p>本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。<br><img src=\"/2018/06/14/git2/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】<br><img src=\"/2018/06/14/git2/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br>本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。<br><img src=\"/2018/06/14/git2/image003.png\" title=\"this is first image\"></p>\n<p><center><strong>图（3）</strong></center></p>\n<h2 id=\"2-推送本地仓库至github\"><a href=\"#2-推送本地仓库至github\" class=\"headerlink\" title=\"2.推送本地仓库至github\"></a>2.推送本地仓库至github</h2><p>先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。<br>复制项目的git地址（如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zhuxiaobotongxue/test.git）。<br>在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。<br><img src=\"/2018/06/14/git2/image004.png\" title=\"this is first image\"></p>\n<p><center><strong>图（4）</strong></center><br>此时刷新github仓库，就可以看到内容提交成功了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-初始化本地仓库\"><a href=\"#1-初始化本地仓库\" class=\"headerlink\" title=\"1.初始化本地仓库\"></a>1.初始化本地仓库</h2><p>本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。<br><img src=\"/2018/06/14/git2/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】<br><img src=\"/2018/06/14/git2/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br>本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。<br><img src=\"/2018/06/14/git2/image003.png\" title=\"this is first image\"></p>\n<p><center><strong>图（3）</strong></center></p>\n<h2 id=\"2-推送本地仓库至github\"><a href=\"#2-推送本地仓库至github\" class=\"headerlink\" title=\"2.推送本地仓库至github\"></a>2.推送本地仓库至github</h2><p>先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。<br>复制项目的git地址（如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zhuxiaobotongxue/test.git）。<br>在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。<br><img src=\"/2018/06/14/git2/image004.png\" title=\"this is first image\"></p>\n<p><center><strong>图（4）</strong></center><br>此时刷新github仓库，就可以看到内容提交成功了。</p>\n"},{"title":"Git系列之撤销","date":"2018-06-14T14:05:42.000Z","_content":"## 1.工作流的状态\n要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】\n**工作区**，修改文档尚未添加至版本控制\n**暂存区**，修改文档已添加至版本控制，但尚未提交至版本库\n**版本库**，修改文档提交至版本库，文档状态变化\n远程环境只有一种状态：\n**远程分支**，修改文档被提交至远程代码仓库\n【名词辨识】\nmaster/branch : 分支，master为项目默认分支，也叫主分支\nhead : 本地当前版本库的指针，指向最新的提交\norigin : 默认的远程版本库名称\n## 2.工作区撤销修改\n该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。\n撤销执行命令git checkout .即可。\n## 3.暂存区撤销修改\n该状态已添加至版本控制，即已执行git add，修改内容处于暂存区\n撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留\n## 4.版本库撤销修改\n该状态已添加至版本库，即已执行git commit,修改内容处于版本库。\n撤销命令如下：\ngit reset --hard HEAD~1\t撤销提交并删除修改\ngit reset --soft HEAD~1\t撤销提交并将修改恢复至**暂存区**\ngit reset HEAD~1\t\t撤销提交并就修改恢复至**工作区**\n## 5.远程分支撤销修改\n思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。\n{% asset_img image002.png this is first image %}\n也可以用--soft保持修改内容至暂存区，如下图所示。\n{% asset_img image003.png this is first image %}\n","source":"_posts/2018-06-14-git3.md","raw":"---\ntitle: Git系列之撤销\ndate: 2018-06-14 22:05:42\ntags: Git\n---\n## 1.工作流的状态\n要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】\n**工作区**，修改文档尚未添加至版本控制\n**暂存区**，修改文档已添加至版本控制，但尚未提交至版本库\n**版本库**，修改文档提交至版本库，文档状态变化\n远程环境只有一种状态：\n**远程分支**，修改文档被提交至远程代码仓库\n【名词辨识】\nmaster/branch : 分支，master为项目默认分支，也叫主分支\nhead : 本地当前版本库的指针，指向最新的提交\norigin : 默认的远程版本库名称\n## 2.工作区撤销修改\n该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。\n撤销执行命令git checkout .即可。\n## 3.暂存区撤销修改\n该状态已添加至版本控制，即已执行git add，修改内容处于暂存区\n撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留\n## 4.版本库撤销修改\n该状态已添加至版本库，即已执行git commit,修改内容处于版本库。\n撤销命令如下：\ngit reset --hard HEAD~1\t撤销提交并删除修改\ngit reset --soft HEAD~1\t撤销提交并将修改恢复至**暂存区**\ngit reset HEAD~1\t\t撤销提交并就修改恢复至**工作区**\n## 5.远程分支撤销修改\n思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。\n{% asset_img image002.png this is first image %}\n也可以用--soft保持修改内容至暂存区，如下图所示。\n{% asset_img image003.png this is first image %}\n","slug":"git3","published":1,"updated":"2019-02-02T04:35:57.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7ive0005hkuzzwisc9m8","content":"<h2 id=\"1-工作流的状态\"><a href=\"#1-工作流的状态\" class=\"headerlink\" title=\"1.工作流的状态\"></a>1.工作流的状态</h2><p>要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。<br><img src=\"/2018/06/14/git3/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】<br><strong>工作区</strong>，修改文档尚未添加至版本控制<br><strong>暂存区</strong>，修改文档已添加至版本控制，但尚未提交至版本库<br><strong>版本库</strong>，修改文档提交至版本库，文档状态变化<br>远程环境只有一种状态：<br><strong>远程分支</strong>，修改文档被提交至远程代码仓库<br>【名词辨识】<br>master/branch : 分支，master为项目默认分支，也叫主分支<br>head : 本地当前版本库的指针，指向最新的提交<br>origin : 默认的远程版本库名称</p>\n<h2 id=\"2-工作区撤销修改\"><a href=\"#2-工作区撤销修改\" class=\"headerlink\" title=\"2.工作区撤销修改\"></a>2.工作区撤销修改</h2><p>该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。<br>撤销执行命令git checkout .即可。</p>\n<h2 id=\"3-暂存区撤销修改\"><a href=\"#3-暂存区撤销修改\" class=\"headerlink\" title=\"3.暂存区撤销修改\"></a>3.暂存区撤销修改</h2><p>该状态已添加至版本控制，即已执行git add，修改内容处于暂存区<br>撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留</p>\n<h2 id=\"4-版本库撤销修改\"><a href=\"#4-版本库撤销修改\" class=\"headerlink\" title=\"4.版本库撤销修改\"></a>4.版本库撤销修改</h2><p>该状态已添加至版本库，即已执行git commit,修改内容处于版本库。<br>撤销命令如下：<br>git reset –hard HEAD~1    撤销提交并删除修改<br>git reset –soft HEAD~1    撤销提交并将修改恢复至<strong>暂存区</strong><br>git reset HEAD~1        撤销提交并就修改恢复至<strong>工作区</strong></p>\n<h2 id=\"5-远程分支撤销修改\"><a href=\"#5-远程分支撤销修改\" class=\"headerlink\" title=\"5.远程分支撤销修改\"></a>5.远程分支撤销修改</h2><p>思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。<br><img src=\"/2018/06/14/git3/image002.png\" title=\"this is first image\"><br>也可以用–soft保持修改内容至暂存区，如下图所示。<br><img src=\"/2018/06/14/git3/image003.png\" title=\"this is first image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-工作流的状态\"><a href=\"#1-工作流的状态\" class=\"headerlink\" title=\"1.工作流的状态\"></a>1.工作流的状态</h2><p>要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。<br><img src=\"/2018/06/14/git3/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】<br><strong>工作区</strong>，修改文档尚未添加至版本控制<br><strong>暂存区</strong>，修改文档已添加至版本控制，但尚未提交至版本库<br><strong>版本库</strong>，修改文档提交至版本库，文档状态变化<br>远程环境只有一种状态：<br><strong>远程分支</strong>，修改文档被提交至远程代码仓库<br>【名词辨识】<br>master/branch : 分支，master为项目默认分支，也叫主分支<br>head : 本地当前版本库的指针，指向最新的提交<br>origin : 默认的远程版本库名称</p>\n<h2 id=\"2-工作区撤销修改\"><a href=\"#2-工作区撤销修改\" class=\"headerlink\" title=\"2.工作区撤销修改\"></a>2.工作区撤销修改</h2><p>该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。<br>撤销执行命令git checkout .即可。</p>\n<h2 id=\"3-暂存区撤销修改\"><a href=\"#3-暂存区撤销修改\" class=\"headerlink\" title=\"3.暂存区撤销修改\"></a>3.暂存区撤销修改</h2><p>该状态已添加至版本控制，即已执行git add，修改内容处于暂存区<br>撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留</p>\n<h2 id=\"4-版本库撤销修改\"><a href=\"#4-版本库撤销修改\" class=\"headerlink\" title=\"4.版本库撤销修改\"></a>4.版本库撤销修改</h2><p>该状态已添加至版本库，即已执行git commit,修改内容处于版本库。<br>撤销命令如下：<br>git reset –hard HEAD~1    撤销提交并删除修改<br>git reset –soft HEAD~1    撤销提交并将修改恢复至<strong>暂存区</strong><br>git reset HEAD~1        撤销提交并就修改恢复至<strong>工作区</strong></p>\n<h2 id=\"5-远程分支撤销修改\"><a href=\"#5-远程分支撤销修改\" class=\"headerlink\" title=\"5.远程分支撤销修改\"></a>5.远程分支撤销修改</h2><p>思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。<br><img src=\"/2018/06/14/git3/image002.png\" title=\"this is first image\"><br>也可以用–soft保持修改内容至暂存区，如下图所示。<br><img src=\"/2018/06/14/git3/image003.png\" title=\"this is first image\"></p>\n"},{"title":"Git系列之分支","date":"2018-06-14T14:21:52.000Z","_content":"## 1.创建本地分支并推送至github\n从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n推送该分支至github，并查看所有分支，如图（2）所示。\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n## 2.合并分支\n首先切换至master分支，将test_branch分支上所做的修改合并至master分支。\n推送合并后的提交至远程，如下图所示。\n【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】\n【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】\n{% asset_img image003.png this is first image %}\n","source":"_posts/2018-06-14-git4.md","raw":"---\ntitle: Git系列之分支\ndate: 2018-06-14 22:21:52\ntags: Git\n---\n## 1.创建本地分支并推送至github\n从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n推送该分支至github，并查看所有分支，如图（2）所示。\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n## 2.合并分支\n首先切换至master分支，将test_branch分支上所做的修改合并至master分支。\n推送合并后的提交至远程，如下图所示。\n【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】\n【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】\n{% asset_img image003.png this is first image %}\n","slug":"git4","published":1,"updated":"2019-02-02T04:35:57.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7ivj0007hkuzhg749lxg","content":"<h2 id=\"1-创建本地分支并推送至github\"><a href=\"#1-创建本地分支并推送至github\" class=\"headerlink\" title=\"1.创建本地分支并推送至github\"></a>1.创建本地分支并推送至github</h2><p>从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。<br><img src=\"/2018/06/14/git4/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>推送该分支至github，并查看所有分支，如图（2）所示。<br><img src=\"/2018/06/14/git4/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center></p>\n<h2 id=\"2-合并分支\"><a href=\"#2-合并分支\" class=\"headerlink\" title=\"2.合并分支\"></a>2.合并分支</h2><p>首先切换至master分支，将test_branch分支上所做的修改合并至master分支。<br>推送合并后的提交至远程，如下图所示。<br>【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】<br>【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】<br><img src=\"/2018/06/14/git4/image003.png\" title=\"this is first image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-创建本地分支并推送至github\"><a href=\"#1-创建本地分支并推送至github\" class=\"headerlink\" title=\"1.创建本地分支并推送至github\"></a>1.创建本地分支并推送至github</h2><p>从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。<br><img src=\"/2018/06/14/git4/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>推送该分支至github，并查看所有分支，如图（2）所示。<br><img src=\"/2018/06/14/git4/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center></p>\n<h2 id=\"2-合并分支\"><a href=\"#2-合并分支\" class=\"headerlink\" title=\"2.合并分支\"></a>2.合并分支</h2><p>首先切换至master分支，将test_branch分支上所做的修改合并至master分支。<br>推送合并后的提交至远程，如下图所示。<br>【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】<br>【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】<br><img src=\"/2018/06/14/git4/image003.png\" title=\"this is first image\"></p>\n"},{"title":"Git系列之命令一览","date":"2018-06-25T12:30:27.000Z","_content":"## 1.配置/初始化/常规操作\ngit --version\ngit help\ngit config --help\ngit config --list --global\ngit config --global --add user.name zhuxiaobotongxue\ngit init\ngit clone\ngit add .\ngit commit –m “this is a commit”\ngit push origin master\ngit pull origin self_branch\ngit fetch origin master  //拉取远程分支\ngit merge self_branch  //合并本地分支self_branch至当前分支\ngit checkout .  //撤销所有工作空间修改\ngit reset HEAD a.html  //撤销暂存区修改\ngit revert <commit>\t\t//撤销指定的提交\ngit checkout self_branch  //切换分支\ngit checkout –d self_branch  //删除本地分支\ngit log –p fileName  \t\t//查看指定文件提交历史\ngit log --oneline --decorate --graph --all\ngit diff --cached\ngit mv oldName newName   //文件改名\ngit rm fileName  \t\t\t//删除文件\ngit branch –a           //查看所有分支\n## 2.非频繁实用操作\ngit clone -b self_branch http://mall-service.git  //克隆指定分支\ngit reset --hard resetVersionHash\t//将工作空间强制恢复至指定提交\ngit push -f origin currentBranch\t//将本地分支强制推送至远程\ngit stash list\ngit stash pop stash@{0}\ngit remote add origin https://github.com/Test.git \t//将本地项目与远程建立联系\ngit push -u origin master\t//首次推送项目至远程，指定origin为默认\ngit push –delete origin self_branch //删除远程分支\ngit update-index --assume-unchanged FILENAME //已入库文件不再监听\ngit update-index --no-assume-unchanged FILENAME //恢复已入库文件监听\ngit gui  //调出图形界面\nssh-keygen -t rsa -C ”zhuxiaobotongxue@gmail.com” //生成秘钥\n## 3.小专题探究\n**拉取分支**\ngit pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支\n等同于\ngit fetch origin online\ngit checkout online\ngit merge origin/self_branch\t //将远程self_branch分支合并至当前分支\n**创建本地分支并提交至远程**\ngit checkout –b self_branch  \t//从当前分支创建本地分支并切换\ngit push origin selft_branch\t\t//将新分支提交至远程\n**忽略文件**\n.gitignore  //创建未入库文件忽略配置\n*.[oa]  表示忽略以o或者a结尾的文件\n*~ 表示忽略以~结尾的文件\n*.pyc 表示忽略以.pyc结尾的文件\n！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc\n\\!test.py 同上，不忽略以！开头的！test.py文件\nfoo/ 意思是忽略foo文件夹\n**/res 表示忽略顶层和任何层次的res文件夹\na 表示忽略a文件","source":"_posts/2018-06-25-git6.md","raw":"---\ntitle: Git系列之命令一览\ndate: 2018-06-25 20:30:27\ntags: Git\n---\n## 1.配置/初始化/常规操作\ngit --version\ngit help\ngit config --help\ngit config --list --global\ngit config --global --add user.name zhuxiaobotongxue\ngit init\ngit clone\ngit add .\ngit commit –m “this is a commit”\ngit push origin master\ngit pull origin self_branch\ngit fetch origin master  //拉取远程分支\ngit merge self_branch  //合并本地分支self_branch至当前分支\ngit checkout .  //撤销所有工作空间修改\ngit reset HEAD a.html  //撤销暂存区修改\ngit revert <commit>\t\t//撤销指定的提交\ngit checkout self_branch  //切换分支\ngit checkout –d self_branch  //删除本地分支\ngit log –p fileName  \t\t//查看指定文件提交历史\ngit log --oneline --decorate --graph --all\ngit diff --cached\ngit mv oldName newName   //文件改名\ngit rm fileName  \t\t\t//删除文件\ngit branch –a           //查看所有分支\n## 2.非频繁实用操作\ngit clone -b self_branch http://mall-service.git  //克隆指定分支\ngit reset --hard resetVersionHash\t//将工作空间强制恢复至指定提交\ngit push -f origin currentBranch\t//将本地分支强制推送至远程\ngit stash list\ngit stash pop stash@{0}\ngit remote add origin https://github.com/Test.git \t//将本地项目与远程建立联系\ngit push -u origin master\t//首次推送项目至远程，指定origin为默认\ngit push –delete origin self_branch //删除远程分支\ngit update-index --assume-unchanged FILENAME //已入库文件不再监听\ngit update-index --no-assume-unchanged FILENAME //恢复已入库文件监听\ngit gui  //调出图形界面\nssh-keygen -t rsa -C ”zhuxiaobotongxue@gmail.com” //生成秘钥\n## 3.小专题探究\n**拉取分支**\ngit pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支\n等同于\ngit fetch origin online\ngit checkout online\ngit merge origin/self_branch\t //将远程self_branch分支合并至当前分支\n**创建本地分支并提交至远程**\ngit checkout –b self_branch  \t//从当前分支创建本地分支并切换\ngit push origin selft_branch\t\t//将新分支提交至远程\n**忽略文件**\n.gitignore  //创建未入库文件忽略配置\n*.[oa]  表示忽略以o或者a结尾的文件\n*~ 表示忽略以~结尾的文件\n*.pyc 表示忽略以.pyc结尾的文件\n！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc\n\\!test.py 同上，不忽略以！开头的！test.py文件\nfoo/ 意思是忽略foo文件夹\n**/res 表示忽略顶层和任何层次的res文件夹\na 表示忽略a文件","slug":"git6","published":1,"updated":"2019-02-02T04:35:57.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7ivw0009hkuzmp6gh8ma","content":"<h2 id=\"1-配置-初始化-常规操作\"><a href=\"#1-配置-初始化-常规操作\" class=\"headerlink\" title=\"1.配置/初始化/常规操作\"></a>1.配置/初始化/常规操作</h2><p>git –version<br>git help<br>git config –help<br>git config –list –global<br>git config –global –add user.name zhuxiaobotongxue<br>git init<br>git clone<br>git add .<br>git commit –m “this is a commit”<br>git push origin master<br>git pull origin self_branch<br>git fetch origin master  //拉取远程分支<br>git merge self_branch  //合并本地分支self_branch至当前分支<br>git checkout .  //撤销所有工作空间修改<br>git reset HEAD a.html  //撤销暂存区修改<br>git revert <commit>        //撤销指定的提交<br>git checkout self_branch  //切换分支<br>git checkout –d self_branch  //删除本地分支<br>git log –p fileName          //查看指定文件提交历史<br>git log –oneline –decorate –graph –all<br>git diff –cached<br>git mv oldName newName   //文件改名<br>git rm fileName              //删除文件<br>git branch –a           //查看所有分支</commit></p>\n<h2 id=\"2-非频繁实用操作\"><a href=\"#2-非频繁实用操作\" class=\"headerlink\" title=\"2.非频繁实用操作\"></a>2.非频繁实用操作</h2><p>git clone -b self_branch <a href=\"http://mall-service.git\" target=\"_blank\" rel=\"noopener\">http://mall-service.git</a>  //克隆指定分支<br>git reset –hard resetVersionHash    //将工作空间强制恢复至指定提交<br>git push -f origin currentBranch    //将本地分支强制推送至远程<br>git stash list<br>git stash pop stash@{0}<br>git remote add origin <a href=\"https://github.com/Test.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Test.git</a>     //将本地项目与远程建立联系<br>git push -u origin master    //首次推送项目至远程，指定origin为默认<br>git push –delete origin self_branch //删除远程分支<br>git update-index –assume-unchanged FILENAME //已入库文件不再监听<br>git update-index –no-assume-unchanged FILENAME //恢复已入库文件监听<br>git gui  //调出图形界面<br>ssh-keygen -t rsa -C ”<a href=\"mailto:zhuxiaobotongxue@gmail.com\" target=\"_blank\" rel=\"noopener\">zhuxiaobotongxue@gmail.com</a>” //生成秘钥</p>\n<h2 id=\"3-小专题探究\"><a href=\"#3-小专题探究\" class=\"headerlink\" title=\"3.小专题探究\"></a>3.小专题探究</h2><p><strong>拉取分支</strong><br>git pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支<br>等同于<br>git fetch origin online<br>git checkout online<br>git merge origin/self_branch     //将远程self_branch分支合并至当前分支<br><strong>创建本地分支并提交至远程</strong><br>git checkout –b self_branch      //从当前分支创建本地分支并切换<br>git push origin selft_branch        //将新分支提交至远程<br><strong>忽略文件</strong><br>.gitignore  //创建未入库文件忽略配置<br><em>.[oa]  表示忽略以o或者a结尾的文件\n</em>~ 表示忽略以~结尾的文件<br>*.pyc 表示忽略以.pyc结尾的文件<br>！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc<br>!test.py 同上，不忽略以！开头的！test.py文件<br>foo/ 意思是忽略foo文件夹<br>**/res 表示忽略顶层和任何层次的res文件夹<br>a 表示忽略a文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-配置-初始化-常规操作\"><a href=\"#1-配置-初始化-常规操作\" class=\"headerlink\" title=\"1.配置/初始化/常规操作\"></a>1.配置/初始化/常规操作</h2><p>git –version<br>git help<br>git config –help<br>git config –list –global<br>git config –global –add user.name zhuxiaobotongxue<br>git init<br>git clone<br>git add .<br>git commit –m “this is a commit”<br>git push origin master<br>git pull origin self_branch<br>git fetch origin master  //拉取远程分支<br>git merge self_branch  //合并本地分支self_branch至当前分支<br>git checkout .  //撤销所有工作空间修改<br>git reset HEAD a.html  //撤销暂存区修改<br>git revert <commit>        //撤销指定的提交<br>git checkout self_branch  //切换分支<br>git checkout –d self_branch  //删除本地分支<br>git log –p fileName          //查看指定文件提交历史<br>git log –oneline –decorate –graph –all<br>git diff –cached<br>git mv oldName newName   //文件改名<br>git rm fileName              //删除文件<br>git branch –a           //查看所有分支</commit></p>\n<h2 id=\"2-非频繁实用操作\"><a href=\"#2-非频繁实用操作\" class=\"headerlink\" title=\"2.非频繁实用操作\"></a>2.非频繁实用操作</h2><p>git clone -b self_branch <a href=\"http://mall-service.git\" target=\"_blank\" rel=\"noopener\">http://mall-service.git</a>  //克隆指定分支<br>git reset –hard resetVersionHash    //将工作空间强制恢复至指定提交<br>git push -f origin currentBranch    //将本地分支强制推送至远程<br>git stash list<br>git stash pop stash@{0}<br>git remote add origin <a href=\"https://github.com/Test.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Test.git</a>     //将本地项目与远程建立联系<br>git push -u origin master    //首次推送项目至远程，指定origin为默认<br>git push –delete origin self_branch //删除远程分支<br>git update-index –assume-unchanged FILENAME //已入库文件不再监听<br>git update-index –no-assume-unchanged FILENAME //恢复已入库文件监听<br>git gui  //调出图形界面<br>ssh-keygen -t rsa -C ”<a href=\"mailto:zhuxiaobotongxue@gmail.com\" target=\"_blank\" rel=\"noopener\">zhuxiaobotongxue@gmail.com</a>” //生成秘钥</p>\n<h2 id=\"3-小专题探究\"><a href=\"#3-小专题探究\" class=\"headerlink\" title=\"3.小专题探究\"></a>3.小专题探究</h2><p><strong>拉取分支</strong><br>git pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支<br>等同于<br>git fetch origin online<br>git checkout online<br>git merge origin/self_branch     //将远程self_branch分支合并至当前分支<br><strong>创建本地分支并提交至远程</strong><br>git checkout –b self_branch      //从当前分支创建本地分支并切换<br>git push origin selft_branch        //将新分支提交至远程<br><strong>忽略文件</strong><br>.gitignore  //创建未入库文件忽略配置<br><em>.[oa]  表示忽略以o或者a结尾的文件\n</em>~ 表示忽略以~结尾的文件<br>*.pyc 表示忽略以.pyc结尾的文件<br>！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc<br>!test.py 同上，不忽略以！开头的！test.py文件<br>foo/ 意思是忽略foo文件夹<br>**/res 表示忽略顶层和任何层次的res文件夹<br>a 表示忽略a文件</p>\n"},{"title":"Git系列之冲突详解","date":"2018-06-14T15:52:59.000Z","_content":"## 1.冲突产生的原因\n针对某个合并操作,**HEAD仓库中被修改过的部分**与**工作目录中将被合并的修改部分**为同一代码片段,此时git不知如何取舍,便会产生冲突.\n## 2.演示冲突的产生\n从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。\n{% asset_img image001.png this is first image %}\n我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。\n{% asset_img image002.png this is first image %}\n此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。\n【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是**直接从暂存区取出至缓存区**】\n{% asset_img image003.png this is first image %}\n## 3.冲突解决的原理\n人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。\n## 4.演示冲突的解决\n冲突文件中冲突区域如下图所示。\n{% asset_img image004.png this is first image %}\n我们调整冲突后，如下图所示。\n【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】\n{% asset_img image005.png this is first image %}\n然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。\n{% asset_img image006.png this is first image %}\n","source":"_posts/2018-06-14-git5.md","raw":"---\ntitle: Git系列之冲突详解\ndate: 2018-06-14 23:52:59\ntags: Git\n---\n## 1.冲突产生的原因\n针对某个合并操作,**HEAD仓库中被修改过的部分**与**工作目录中将被合并的修改部分**为同一代码片段,此时git不知如何取舍,便会产生冲突.\n## 2.演示冲突的产生\n从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。\n{% asset_img image001.png this is first image %}\n我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。\n{% asset_img image002.png this is first image %}\n此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。\n【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是**直接从暂存区取出至缓存区**】\n{% asset_img image003.png this is first image %}\n## 3.冲突解决的原理\n人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。\n## 4.演示冲突的解决\n冲突文件中冲突区域如下图所示。\n{% asset_img image004.png this is first image %}\n我们调整冲突后，如下图所示。\n【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】\n{% asset_img image005.png this is first image %}\n然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。\n{% asset_img image006.png this is first image %}\n","slug":"git5","published":1,"updated":"2019-02-02T04:35:57.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iw1000bhkuzkqt388xa","content":"<h2 id=\"1-冲突产生的原因\"><a href=\"#1-冲突产生的原因\" class=\"headerlink\" title=\"1.冲突产生的原因\"></a>1.冲突产生的原因</h2><p>针对某个合并操作,<strong>HEAD仓库中被修改过的部分</strong>与<strong>工作目录中将被合并的修改部分</strong>为同一代码片段,此时git不知如何取舍,便会产生冲突.</p>\n<h2 id=\"2-演示冲突的产生\"><a href=\"#2-演示冲突的产生\" class=\"headerlink\" title=\"2.演示冲突的产生\"></a>2.演示冲突的产生</h2><p>从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。<br><img src=\"/2018/06/14/git5/image001.png\" title=\"this is first image\"><br>我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。<br><img src=\"/2018/06/14/git5/image002.png\" title=\"this is first image\"><br>此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。<br>【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是<strong>直接从暂存区取出至缓存区</strong>】<br><img src=\"/2018/06/14/git5/image003.png\" title=\"this is first image\"></p>\n<h2 id=\"3-冲突解决的原理\"><a href=\"#3-冲突解决的原理\" class=\"headerlink\" title=\"3.冲突解决的原理\"></a>3.冲突解决的原理</h2><p>人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。</p>\n<h2 id=\"4-演示冲突的解决\"><a href=\"#4-演示冲突的解决\" class=\"headerlink\" title=\"4.演示冲突的解决\"></a>4.演示冲突的解决</h2><p>冲突文件中冲突区域如下图所示。<br><img src=\"/2018/06/14/git5/image004.png\" title=\"this is first image\"><br>我们调整冲突后，如下图所示。<br>【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】<br><img src=\"/2018/06/14/git5/image005.png\" title=\"this is first image\"><br>然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。<br><img src=\"/2018/06/14/git5/image006.png\" title=\"this is first image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-冲突产生的原因\"><a href=\"#1-冲突产生的原因\" class=\"headerlink\" title=\"1.冲突产生的原因\"></a>1.冲突产生的原因</h2><p>针对某个合并操作,<strong>HEAD仓库中被修改过的部分</strong>与<strong>工作目录中将被合并的修改部分</strong>为同一代码片段,此时git不知如何取舍,便会产生冲突.</p>\n<h2 id=\"2-演示冲突的产生\"><a href=\"#2-演示冲突的产生\" class=\"headerlink\" title=\"2.演示冲突的产生\"></a>2.演示冲突的产生</h2><p>从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。<br><img src=\"/2018/06/14/git5/image001.png\" title=\"this is first image\"><br>我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。<br><img src=\"/2018/06/14/git5/image002.png\" title=\"this is first image\"><br>此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。<br>【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是<strong>直接从暂存区取出至缓存区</strong>】<br><img src=\"/2018/06/14/git5/image003.png\" title=\"this is first image\"></p>\n<h2 id=\"3-冲突解决的原理\"><a href=\"#3-冲突解决的原理\" class=\"headerlink\" title=\"3.冲突解决的原理\"></a>3.冲突解决的原理</h2><p>人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。</p>\n<h2 id=\"4-演示冲突的解决\"><a href=\"#4-演示冲突的解决\" class=\"headerlink\" title=\"4.演示冲突的解决\"></a>4.演示冲突的解决</h2><p>冲突文件中冲突区域如下图所示。<br><img src=\"/2018/06/14/git5/image004.png\" title=\"this is first image\"><br>我们调整冲突后，如下图所示。<br>【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】<br><img src=\"/2018/06/14/git5/image005.png\" title=\"this is first image\"><br>然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。<br><img src=\"/2018/06/14/git5/image006.png\" title=\"this is first image\"></p>\n"},{"title":"开发者工具","date":"2018-06-29T12:49:28.000Z","_content":"## 1.Elements\nctrl+shift+c\t\t选取dom元素\nESC\t\t\t\t在Elements面板可以用打开Console\n在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,\n同时面包屑导航会给出层级结构,\n按住并拖动节点可以移动节点位置,\n查看元素事件侦听器,选中对应元素,打开Elements->Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,\n单击节点,右键Break on可以为节点添加Dom事件监听,在Elements->DOM Breakpoints面板可以查看详情,\n鼠标悬停在Elements->Styles面板对应css名称上可以查看受影响的Dom,\n在对应css右下角有小图标可以调整颜色和阴影,\n编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,\nCtrl+点击任何css属性可以直接跳转至对应文件相应行\n## 2.Console\n提供了一个命令行接口，用来与网页代码互动。\nF12\t\t\t\t打开DevTools\nctrl+shift+J\t\t打开控制台并定位光标\nctrl+L\t\t\t清空控制台\nconsole.log('aaa');\nconsole.info('aaa');\nconsole.error('aaa');\nconsole.warn('aaa');\n分组日志\nconsole.group('aaa');\nconsole.log('我是aaa小组的日志');\nconsole.groupEnd();\n断言日志\nconsole.assert(false,'当第一个参数为false时输出该条消息');\n统计执行次数日志\nfunction myFun(){\n\tconsole.count('myFun被执行的次数');\n}\nmyFun();\nmyFun();\n输出对象的属性和方法\nconsole.dir(document.body);\n统计代码执行时间\nconsole.time(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\");\n查看代码执行对cpu的使用情况\nconsole.profile(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.profileEnd(\"Array initialize\");\n执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息\n复制选中的DOM结构至剪切板\ncopy(document.body);\n输出对象的键或值对\nvar myObj = {name:'xiaoming',sex:'female'};\nkeys(myObj);\nvalues(myObj);\n用表格样式输出json格式数组\nvar myArray = [{\"name\":\"xiaoming\"},{\"sex\":\"12\"}];\nconsole.table(myArray);\n\nconsole.log('%c This text is styled!',\n  'color: red; background: yellow; font-size: 24px;'\n)\n\nvar number = 11 * 9;\nvar color = 'red';\nconsole.log('%d %s balloons', number, color);\n\n%s 字符串\n%d 整数\n%i 整数\n%f 浮点数\n%o 对象的链接\n%c CSS格式字符串\n\ndebugger\n","source":"_posts/2018-06-29-googledev.md","raw":"---\ntitle: 开发者工具\ndate: 2018-06-29 20:49:28\ntags: GoogleDev\n---\n## 1.Elements\nctrl+shift+c\t\t选取dom元素\nESC\t\t\t\t在Elements面板可以用打开Console\n在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,\n同时面包屑导航会给出层级结构,\n按住并拖动节点可以移动节点位置,\n查看元素事件侦听器,选中对应元素,打开Elements->Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,\n单击节点,右键Break on可以为节点添加Dom事件监听,在Elements->DOM Breakpoints面板可以查看详情,\n鼠标悬停在Elements->Styles面板对应css名称上可以查看受影响的Dom,\n在对应css右下角有小图标可以调整颜色和阴影,\n编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,\nCtrl+点击任何css属性可以直接跳转至对应文件相应行\n## 2.Console\n提供了一个命令行接口，用来与网页代码互动。\nF12\t\t\t\t打开DevTools\nctrl+shift+J\t\t打开控制台并定位光标\nctrl+L\t\t\t清空控制台\nconsole.log('aaa');\nconsole.info('aaa');\nconsole.error('aaa');\nconsole.warn('aaa');\n分组日志\nconsole.group('aaa');\nconsole.log('我是aaa小组的日志');\nconsole.groupEnd();\n断言日志\nconsole.assert(false,'当第一个参数为false时输出该条消息');\n统计执行次数日志\nfunction myFun(){\n\tconsole.count('myFun被执行的次数');\n}\nmyFun();\nmyFun();\n输出对象的属性和方法\nconsole.dir(document.body);\n统计代码执行时间\nconsole.time(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\");\n查看代码执行对cpu的使用情况\nconsole.profile(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.profileEnd(\"Array initialize\");\n执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息\n复制选中的DOM结构至剪切板\ncopy(document.body);\n输出对象的键或值对\nvar myObj = {name:'xiaoming',sex:'female'};\nkeys(myObj);\nvalues(myObj);\n用表格样式输出json格式数组\nvar myArray = [{\"name\":\"xiaoming\"},{\"sex\":\"12\"}];\nconsole.table(myArray);\n\nconsole.log('%c This text is styled!',\n  'color: red; background: yellow; font-size: 24px;'\n)\n\nvar number = 11 * 9;\nvar color = 'red';\nconsole.log('%d %s balloons', number, color);\n\n%s 字符串\n%d 整数\n%i 整数\n%f 浮点数\n%o 对象的链接\n%c CSS格式字符串\n\ndebugger\n","slug":"googledev","published":1,"updated":"2019-04-21T08:04:47.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iw3000dhkuzlqwsoyr6","content":"<h2 id=\"1-Elements\"><a href=\"#1-Elements\" class=\"headerlink\" title=\"1.Elements\"></a>1.Elements</h2><p>ctrl+shift+c        选取dom元素<br>ESC                在Elements面板可以用打开Console<br>在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,<br>同时面包屑导航会给出层级结构,<br>按住并拖动节点可以移动节点位置,<br>查看元素事件侦听器,选中对应元素,打开Elements-&gt;Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,<br>单击节点,右键Break on可以为节点添加Dom事件监听,在Elements-&gt;DOM Breakpoints面板可以查看详情,<br>鼠标悬停在Elements-&gt;Styles面板对应css名称上可以查看受影响的Dom,<br>在对应css右下角有小图标可以调整颜色和阴影,<br>编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,<br>Ctrl+点击任何css属性可以直接跳转至对应文件相应行</p>\n<h2 id=\"2-Console\"><a href=\"#2-Console\" class=\"headerlink\" title=\"2.Console\"></a>2.Console</h2><p>提供了一个命令行接口，用来与网页代码互动。<br>F12                打开DevTools<br>ctrl+shift+J        打开控制台并定位光标<br>ctrl+L            清空控制台<br>console.log(‘aaa’);<br>console.info(‘aaa’);<br>console.error(‘aaa’);<br>console.warn(‘aaa’);<br>分组日志<br>console.group(‘aaa’);<br>console.log(‘我是aaa小组的日志’);<br>console.groupEnd();<br>断言日志<br>console.assert(false,’当第一个参数为false时输出该条消息’);<br>统计执行次数日志<br>function myFun(){<br>    console.count(‘myFun被执行的次数’);<br>}<br>myFun();<br>myFun();<br>输出对象的属性和方法<br>console.dir(document.body);<br>统计代码执行时间<br>console.time(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.timeEnd(“Array initialize”);<br>查看代码执行对cpu的使用情况<br>console.profile(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.profileEnd(“Array initialize”);<br>执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息<br>复制选中的DOM结构至剪切板<br>copy(document.body);<br>输出对象的键或值对<br>var myObj = {name:’xiaoming’,sex:’female’};<br>keys(myObj);<br>values(myObj);<br>用表格样式输出json格式数组<br>var myArray = [{“name”:”xiaoming”},{“sex”:”12”}];<br>console.table(myArray);</p>\n<p>console.log(‘%c This text is styled!’,<br>  ‘color: red; background: yellow; font-size: 24px;’<br>)</p>\n<p>var number = 11 * 9;<br>var color = ‘red’;<br>console.log(‘%d %s balloons’, number, color);</p>\n<p>%s 字符串<br>%d 整数<br>%i 整数<br>%f 浮点数<br>%o 对象的链接<br>%c CSS格式字符串</p>\n<p>debugger</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Elements\"><a href=\"#1-Elements\" class=\"headerlink\" title=\"1.Elements\"></a>1.Elements</h2><p>ctrl+shift+c        选取dom元素<br>ESC                在Elements面板可以用打开Console<br>在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,<br>同时面包屑导航会给出层级结构,<br>按住并拖动节点可以移动节点位置,<br>查看元素事件侦听器,选中对应元素,打开Elements-&gt;Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,<br>单击节点,右键Break on可以为节点添加Dom事件监听,在Elements-&gt;DOM Breakpoints面板可以查看详情,<br>鼠标悬停在Elements-&gt;Styles面板对应css名称上可以查看受影响的Dom,<br>在对应css右下角有小图标可以调整颜色和阴影,<br>编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,<br>Ctrl+点击任何css属性可以直接跳转至对应文件相应行</p>\n<h2 id=\"2-Console\"><a href=\"#2-Console\" class=\"headerlink\" title=\"2.Console\"></a>2.Console</h2><p>提供了一个命令行接口，用来与网页代码互动。<br>F12                打开DevTools<br>ctrl+shift+J        打开控制台并定位光标<br>ctrl+L            清空控制台<br>console.log(‘aaa’);<br>console.info(‘aaa’);<br>console.error(‘aaa’);<br>console.warn(‘aaa’);<br>分组日志<br>console.group(‘aaa’);<br>console.log(‘我是aaa小组的日志’);<br>console.groupEnd();<br>断言日志<br>console.assert(false,’当第一个参数为false时输出该条消息’);<br>统计执行次数日志<br>function myFun(){<br>    console.count(‘myFun被执行的次数’);<br>}<br>myFun();<br>myFun();<br>输出对象的属性和方法<br>console.dir(document.body);<br>统计代码执行时间<br>console.time(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.timeEnd(“Array initialize”);<br>查看代码执行对cpu的使用情况<br>console.profile(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.profileEnd(“Array initialize”);<br>执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息<br>复制选中的DOM结构至剪切板<br>copy(document.body);<br>输出对象的键或值对<br>var myObj = {name:’xiaoming’,sex:’female’};<br>keys(myObj);<br>values(myObj);<br>用表格样式输出json格式数组<br>var myArray = [{“name”:”xiaoming”},{“sex”:”12”}];<br>console.table(myArray);</p>\n<p>console.log(‘%c This text is styled!’,<br>  ‘color: red; background: yellow; font-size: 24px;’<br>)</p>\n<p>var number = 11 * 9;<br>var color = ‘red’;<br>console.log(‘%d %s balloons’, number, color);</p>\n<p>%s 字符串<br>%d 整数<br>%i 整数<br>%f 浮点数<br>%o 对象的链接<br>%c CSS格式字符串</p>\n<p>debugger</p>\n"},{"title":"keymap","date":"2018-11-15T12:12:21.000Z","_content":"## 1.windows平台常用快捷键\n\n**【win系统】**\n无鼠标快捷操作电脑[win7]\n[1]开启键盘操作鼠标\n控制面板->轻松访问->鼠标更易用->设置鼠标键...\nAlt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动\n[2]常用系统快捷键\nWIN 打开搜素程序和文件\nWIN+E 我的电脑\nWIN+T 切换任务栏\nWIN+L 锁定计算机\nWIN+D 显示桌面\nWIN+M 最小化所有窗口\nWIN+R 打开运行对话框\nWIN+Tab 3D切换任务栏程序\nWIN+空格键 预览桌面\nWIN+方向键 最大/小化窗口/左右移动窗口\n关闭活动应用程序:Alt+F4\n\n**【Webstorm快捷键】**\n多处编辑：Alt+左键单击\n控制台：Alt+F12\n打开任何文件：Double Shift\n打开最近文件：Ctrl+E\n全局搜索字符串：Ctrl+H\nSettings:Ctrl+Alt+S\nFormat code:Ctrl+Alt+L\n删除一行： Ctrl+X\n复制行：Ctrl+D\n查找行：Ctrl+G\n折叠代码块： Ctrl+加减号\n注释：Ctrl+/ 或 Ctrl+Shift+/\n向上/下移动代码行：Shift+Alt+Up/Down\n向上/下移动代码块：Ctrl+Shift+Up/Down\n方法追踪：Ctrl+B或Ctrl+左键单击\n跳转到变量实现处：Ctrl+B\n跳转到方法实现处：Ctrl + Alt + B\n打开定义快速查看：Ctrl + Shift + I\n跳转到当前页面的上/下一个方法块：Alt + Up/Down\n高亮错误或警告快速定位：F2\n格式化代码：Ctrl+Alt+L\n自动修正：Alt+Enter\n查找文本：Ctrl+F\n查找下/上一个：F3/Shift + F3\n高亮显示选中文本：Ctrl+Shift+F7\n替换文本：Ctrl+R\n方法参数提示：Ctrl+P\n显示方法注释：Ctrl+Q\n打开配置窗口：Ctrl+Alt+S\n文件名查找文件：Ctrl+Shift+N\n通过字符快速查找：Ctrl+Shift+Alt+N\n重新开始一行（无论光标在哪里）：Shift+Enter\nsurround with代码块：Ctrl+Alt+T\n大小写转换：Ctrl+Shift+U\n输出模板：Ctrl+J\n匹配代码块括号：Ctrl+[\n显示当前文件的结构：Ctrl+F12\n折叠/展开代码块：Ctrl+\"-\"/\"+\"\n返回至上次浏览的位置 Ctrl+Alt+ left/right\n逐级向上选中代码：Ctrl+W\n\n**【浏览器】**\n打开新窗口:Ctrl+T\n切换导航栏窗口:Ctrl+Tab\n关闭活动页面:Ctrl+W\n上下浏览网页:方向键和Page Up和Page Down\n\n## 2.mac平台常用快捷键\n\n**【mac系统】**\nCommand + Shift + c 打开我的电脑\nCommand + Shift + h 打开当前用户文件夹\nCommand + 向上箭头 打开包含当前文件夹的文件夹\nCommand + [ / ] 打开上一个文件夹/下一个文件夹\nCommand + w 关闭最前tab\nCommand + m  最小化当前应用窗口\nCommand + q 关闭当前应用\nCommand + T 打开多个tab 【eg:浏览器，Terminal】\nCommand + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】\ncontrol + tab 转向下一个标签页【eg:webStorm多个编辑窗口】\ncontrol + shift + tab 转向上一个标签页\nControl + 向上向下 查看所有打开窗口\n**【两个手指向下滑：向下滚动】**\n\nCommand + shift + n 新建文件夹\nCommand + N 新建文件【eg:sublime新文件，webStorm新文件】\nCommand + delete 删除\nReturn 重命名选中的文件或文件夹\n\nShift 搜狗输入法中英文切换\nCommand + , 当前应用的偏好设置\n\n**【文件处理快捷键】**\nCommand + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾\nCommand + 左右 将光标移动到行首/行尾\nCommand + L 将光标移动到指定行\nCommand + shift + 上下左右 选中文本\nalt + 上下 选取代码块\nShift + 上下左右 扩展选择区域\nCommand + f 查找 \nCommand + r 替换 \nDelete 删除光标左边的字符\nFn + delete 删除光标右边的字符\nOption + delete 删除光标左边的word\n\n**【截图快捷键】**\nCommand + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件\nCommand + shift + 4                 截取选中屏幕区域到文件\nCommand + shift + control + 3  截取全屏到剪贴板\nCommand + shift + control + 4  截取选中屏幕区域到剪贴板\n\n**【Mac下浏览器快捷键】**\nCommand + L 光标直接跳至地址栏\nChrome 开发者模式  Command + alt + j\n刷新 Command + r\n\n**【Mac下webStorm快捷键】**\n全局查找 Command + shift + f\n格式整理 Command + alt + L\n注释：Command + /\n调整缩进 Shift +  tab\n复制当前行 Command + d\n删除当前行 Command + delete\n快速换行 Shift + Enter\n清除缩进变成单行 Command + Shift + J\n光标在多处定位 Alt + 单击\n大小写转换 Command + Shift + U\n\n## 3.其他工具\n\n**【sublime】**\nsublime修炼：一款得心应手的开发软件\n1.sublime官网下载，安装时勾选右键打开文件\n2.快捷键设置Preferences->Key Bindings-User\n打开浏览器：ctrl+alt+f\n3.命令模式ctrl+shift+p，输入install package，安装命令包\n\n**【VIM】**\n【命令模式】\n左下上右:HJKL\n向右向下跳一个词:w/b\n下/上一个句子/段落 （）/{}\n跳转到行首/行尾：0/shift+$\n跳转到最后一行/第一行：shift+G/gg\n跳转到上一次编辑的地方：\n跳转到上一次编辑的文件：ctrl+o/ctrl+i\n整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行\n非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行\n删除选中内容:X\n删除某行：DD / dl (L字符) /dw (w单词)\n替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw\n复制当前行：YY /yl /yw\n复制一个词：YW\n复制任意选中内容：先选中，再按Y\n粘贴：P\n撤销：U/u\n代码格式化 选中，按=\n\n【编辑模式】\n进入/退出 :i/a/0/shift+o esc\n自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）\n\n【扩展模式】\n：! 命令 （叹号后面有个空格）\n搜索：/searchText /搜索文本 回车确认 然后按N查找下一个\n向前搜索：？searchText\n退出搜索高亮：nohl\n[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局\n[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText\n横屏分屏：sp 上下横屏切换ctrl+ww\n竖屏分屏：vs 左右竖屏切换ctrl+ww\n退出分屏：q\n显示行号：set number","source":"_posts/2018-11-15-keymap.md","raw":"---\ntitle: keymap\ndate: 2018-11-15 20:12:21\ntags: keymap\n---\n## 1.windows平台常用快捷键\n\n**【win系统】**\n无鼠标快捷操作电脑[win7]\n[1]开启键盘操作鼠标\n控制面板->轻松访问->鼠标更易用->设置鼠标键...\nAlt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动\n[2]常用系统快捷键\nWIN 打开搜素程序和文件\nWIN+E 我的电脑\nWIN+T 切换任务栏\nWIN+L 锁定计算机\nWIN+D 显示桌面\nWIN+M 最小化所有窗口\nWIN+R 打开运行对话框\nWIN+Tab 3D切换任务栏程序\nWIN+空格键 预览桌面\nWIN+方向键 最大/小化窗口/左右移动窗口\n关闭活动应用程序:Alt+F4\n\n**【Webstorm快捷键】**\n多处编辑：Alt+左键单击\n控制台：Alt+F12\n打开任何文件：Double Shift\n打开最近文件：Ctrl+E\n全局搜索字符串：Ctrl+H\nSettings:Ctrl+Alt+S\nFormat code:Ctrl+Alt+L\n删除一行： Ctrl+X\n复制行：Ctrl+D\n查找行：Ctrl+G\n折叠代码块： Ctrl+加减号\n注释：Ctrl+/ 或 Ctrl+Shift+/\n向上/下移动代码行：Shift+Alt+Up/Down\n向上/下移动代码块：Ctrl+Shift+Up/Down\n方法追踪：Ctrl+B或Ctrl+左键单击\n跳转到变量实现处：Ctrl+B\n跳转到方法实现处：Ctrl + Alt + B\n打开定义快速查看：Ctrl + Shift + I\n跳转到当前页面的上/下一个方法块：Alt + Up/Down\n高亮错误或警告快速定位：F2\n格式化代码：Ctrl+Alt+L\n自动修正：Alt+Enter\n查找文本：Ctrl+F\n查找下/上一个：F3/Shift + F3\n高亮显示选中文本：Ctrl+Shift+F7\n替换文本：Ctrl+R\n方法参数提示：Ctrl+P\n显示方法注释：Ctrl+Q\n打开配置窗口：Ctrl+Alt+S\n文件名查找文件：Ctrl+Shift+N\n通过字符快速查找：Ctrl+Shift+Alt+N\n重新开始一行（无论光标在哪里）：Shift+Enter\nsurround with代码块：Ctrl+Alt+T\n大小写转换：Ctrl+Shift+U\n输出模板：Ctrl+J\n匹配代码块括号：Ctrl+[\n显示当前文件的结构：Ctrl+F12\n折叠/展开代码块：Ctrl+\"-\"/\"+\"\n返回至上次浏览的位置 Ctrl+Alt+ left/right\n逐级向上选中代码：Ctrl+W\n\n**【浏览器】**\n打开新窗口:Ctrl+T\n切换导航栏窗口:Ctrl+Tab\n关闭活动页面:Ctrl+W\n上下浏览网页:方向键和Page Up和Page Down\n\n## 2.mac平台常用快捷键\n\n**【mac系统】**\nCommand + Shift + c 打开我的电脑\nCommand + Shift + h 打开当前用户文件夹\nCommand + 向上箭头 打开包含当前文件夹的文件夹\nCommand + [ / ] 打开上一个文件夹/下一个文件夹\nCommand + w 关闭最前tab\nCommand + m  最小化当前应用窗口\nCommand + q 关闭当前应用\nCommand + T 打开多个tab 【eg:浏览器，Terminal】\nCommand + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】\ncontrol + tab 转向下一个标签页【eg:webStorm多个编辑窗口】\ncontrol + shift + tab 转向上一个标签页\nControl + 向上向下 查看所有打开窗口\n**【两个手指向下滑：向下滚动】**\n\nCommand + shift + n 新建文件夹\nCommand + N 新建文件【eg:sublime新文件，webStorm新文件】\nCommand + delete 删除\nReturn 重命名选中的文件或文件夹\n\nShift 搜狗输入法中英文切换\nCommand + , 当前应用的偏好设置\n\n**【文件处理快捷键】**\nCommand + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾\nCommand + 左右 将光标移动到行首/行尾\nCommand + L 将光标移动到指定行\nCommand + shift + 上下左右 选中文本\nalt + 上下 选取代码块\nShift + 上下左右 扩展选择区域\nCommand + f 查找 \nCommand + r 替换 \nDelete 删除光标左边的字符\nFn + delete 删除光标右边的字符\nOption + delete 删除光标左边的word\n\n**【截图快捷键】**\nCommand + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件\nCommand + shift + 4                 截取选中屏幕区域到文件\nCommand + shift + control + 3  截取全屏到剪贴板\nCommand + shift + control + 4  截取选中屏幕区域到剪贴板\n\n**【Mac下浏览器快捷键】**\nCommand + L 光标直接跳至地址栏\nChrome 开发者模式  Command + alt + j\n刷新 Command + r\n\n**【Mac下webStorm快捷键】**\n全局查找 Command + shift + f\n格式整理 Command + alt + L\n注释：Command + /\n调整缩进 Shift +  tab\n复制当前行 Command + d\n删除当前行 Command + delete\n快速换行 Shift + Enter\n清除缩进变成单行 Command + Shift + J\n光标在多处定位 Alt + 单击\n大小写转换 Command + Shift + U\n\n## 3.其他工具\n\n**【sublime】**\nsublime修炼：一款得心应手的开发软件\n1.sublime官网下载，安装时勾选右键打开文件\n2.快捷键设置Preferences->Key Bindings-User\n打开浏览器：ctrl+alt+f\n3.命令模式ctrl+shift+p，输入install package，安装命令包\n\n**【VIM】**\n【命令模式】\n左下上右:HJKL\n向右向下跳一个词:w/b\n下/上一个句子/段落 （）/{}\n跳转到行首/行尾：0/shift+$\n跳转到最后一行/第一行：shift+G/gg\n跳转到上一次编辑的地方：\n跳转到上一次编辑的文件：ctrl+o/ctrl+i\n整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行\n非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行\n删除选中内容:X\n删除某行：DD / dl (L字符) /dw (w单词)\n替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw\n复制当前行：YY /yl /yw\n复制一个词：YW\n复制任意选中内容：先选中，再按Y\n粘贴：P\n撤销：U/u\n代码格式化 选中，按=\n\n【编辑模式】\n进入/退出 :i/a/0/shift+o esc\n自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）\n\n【扩展模式】\n：! 命令 （叹号后面有个空格）\n搜索：/searchText /搜索文本 回车确认 然后按N查找下一个\n向前搜索：？searchText\n退出搜索高亮：nohl\n[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局\n[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText\n横屏分屏：sp 上下横屏切换ctrl+ww\n竖屏分屏：vs 左右竖屏切换ctrl+ww\n退出分屏：q\n显示行号：set number","slug":"keymap","published":1,"updated":"2019-04-21T08:04:47.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iw6000fhkuz1j7erx9d","content":"<h2 id=\"1-windows平台常用快捷键\"><a href=\"#1-windows平台常用快捷键\" class=\"headerlink\" title=\"1.windows平台常用快捷键\"></a>1.windows平台常用快捷键</h2><p><strong>【win系统】</strong><br>无鼠标快捷操作电脑[win7]<br>[1]开启键盘操作鼠标<br>控制面板-&gt;轻松访问-&gt;鼠标更易用-&gt;设置鼠标键…<br>Alt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动<br>[2]常用系统快捷键<br>WIN 打开搜素程序和文件<br>WIN+E 我的电脑<br>WIN+T 切换任务栏<br>WIN+L 锁定计算机<br>WIN+D 显示桌面<br>WIN+M 最小化所有窗口<br>WIN+R 打开运行对话框<br>WIN+Tab 3D切换任务栏程序<br>WIN+空格键 预览桌面<br>WIN+方向键 最大/小化窗口/左右移动窗口<br>关闭活动应用程序:Alt+F4</p>\n<p><strong>【Webstorm快捷键】</strong><br>多处编辑：Alt+左键单击<br>控制台：Alt+F12<br>打开任何文件：Double Shift<br>打开最近文件：Ctrl+E<br>全局搜索字符串：Ctrl+H<br>Settings:Ctrl+Alt+S<br>Format code:Ctrl+Alt+L<br>删除一行： Ctrl+X<br>复制行：Ctrl+D<br>查找行：Ctrl+G<br>折叠代码块： Ctrl+加减号<br>注释：Ctrl+/ 或 Ctrl+Shift+/<br>向上/下移动代码行：Shift+Alt+Up/Down<br>向上/下移动代码块：Ctrl+Shift+Up/Down<br>方法追踪：Ctrl+B或Ctrl+左键单击<br>跳转到变量实现处：Ctrl+B<br>跳转到方法实现处：Ctrl + Alt + B<br>打开定义快速查看：Ctrl + Shift + I<br>跳转到当前页面的上/下一个方法块：Alt + Up/Down<br>高亮错误或警告快速定位：F2<br>格式化代码：Ctrl+Alt+L<br>自动修正：Alt+Enter<br>查找文本：Ctrl+F<br>查找下/上一个：F3/Shift + F3<br>高亮显示选中文本：Ctrl+Shift+F7<br>替换文本：Ctrl+R<br>方法参数提示：Ctrl+P<br>显示方法注释：Ctrl+Q<br>打开配置窗口：Ctrl+Alt+S<br>文件名查找文件：Ctrl+Shift+N<br>通过字符快速查找：Ctrl+Shift+Alt+N<br>重新开始一行（无论光标在哪里）：Shift+Enter<br>surround with代码块：Ctrl+Alt+T<br>大小写转换：Ctrl+Shift+U<br>输出模板：Ctrl+J<br>匹配代码块括号：Ctrl+[<br>显示当前文件的结构：Ctrl+F12<br>折叠/展开代码块：Ctrl+”-“/“+”<br>返回至上次浏览的位置 Ctrl+Alt+ left/right<br>逐级向上选中代码：Ctrl+W</p>\n<p><strong>【浏览器】</strong><br>打开新窗口:Ctrl+T<br>切换导航栏窗口:Ctrl+Tab<br>关闭活动页面:Ctrl+W<br>上下浏览网页:方向键和Page Up和Page Down</p>\n<h2 id=\"2-mac平台常用快捷键\"><a href=\"#2-mac平台常用快捷键\" class=\"headerlink\" title=\"2.mac平台常用快捷键\"></a>2.mac平台常用快捷键</h2><p><strong>【mac系统】</strong><br>Command + Shift + c 打开我的电脑<br>Command + Shift + h 打开当前用户文件夹<br>Command + 向上箭头 打开包含当前文件夹的文件夹<br>Command + [ / ] 打开上一个文件夹/下一个文件夹<br>Command + w 关闭最前tab<br>Command + m  最小化当前应用窗口<br>Command + q 关闭当前应用<br>Command + T 打开多个tab 【eg:浏览器，Terminal】<br>Command + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】<br>control + tab 转向下一个标签页【eg:webStorm多个编辑窗口】<br>control + shift + tab 转向上一个标签页<br>Control + 向上向下 查看所有打开窗口<br><strong>【两个手指向下滑：向下滚动】</strong></p>\n<p>Command + shift + n 新建文件夹<br>Command + N 新建文件【eg:sublime新文件，webStorm新文件】<br>Command + delete 删除<br>Return 重命名选中的文件或文件夹</p>\n<p>Shift 搜狗输入法中英文切换<br>Command + , 当前应用的偏好设置</p>\n<p><strong>【文件处理快捷键】</strong><br>Command + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾<br>Command + 左右 将光标移动到行首/行尾<br>Command + L 将光标移动到指定行<br>Command + shift + 上下左右 选中文本<br>alt + 上下 选取代码块<br>Shift + 上下左右 扩展选择区域<br>Command + f 查找<br>Command + r 替换<br>Delete 删除光标左边的字符<br>Fn + delete 删除光标右边的字符<br>Option + delete 删除光标左边的word</p>\n<p><strong>【截图快捷键】</strong><br>Command + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件<br>Command + shift + 4                 截取选中屏幕区域到文件<br>Command + shift + control + 3  截取全屏到剪贴板<br>Command + shift + control + 4  截取选中屏幕区域到剪贴板</p>\n<p><strong>【Mac下浏览器快捷键】</strong><br>Command + L 光标直接跳至地址栏<br>Chrome 开发者模式  Command + alt + j<br>刷新 Command + r</p>\n<p><strong>【Mac下webStorm快捷键】</strong><br>全局查找 Command + shift + f<br>格式整理 Command + alt + L<br>注释：Command + /<br>调整缩进 Shift +  tab<br>复制当前行 Command + d<br>删除当前行 Command + delete<br>快速换行 Shift + Enter<br>清除缩进变成单行 Command + Shift + J<br>光标在多处定位 Alt + 单击<br>大小写转换 Command + Shift + U</p>\n<h2 id=\"3-其他工具\"><a href=\"#3-其他工具\" class=\"headerlink\" title=\"3.其他工具\"></a>3.其他工具</h2><p><strong>【sublime】</strong><br>sublime修炼：一款得心应手的开发软件<br>1.sublime官网下载，安装时勾选右键打开文件<br>2.快捷键设置Preferences-&gt;Key Bindings-User<br>打开浏览器：ctrl+alt+f<br>3.命令模式ctrl+shift+p，输入install package，安装命令包</p>\n<p><strong>【VIM】</strong><br>【命令模式】<br>左下上右:HJKL<br>向右向下跳一个词:w/b<br>下/上一个句子/段落 （）/{}<br>跳转到行首/行尾：0/shift+$<br>跳转到最后一行/第一行：shift+G/gg<br>跳转到上一次编辑的地方：<br>跳转到上一次编辑的文件：ctrl+o/ctrl+i<br>整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行<br>非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行<br>删除选中内容:X<br>删除某行：DD / dl (L字符) /dw (w单词)<br>替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw<br>复制当前行：YY /yl /yw<br>复制一个词：YW<br>复制任意选中内容：先选中，再按Y<br>粘贴：P<br>撤销：U/u<br>代码格式化 选中，按=</p>\n<p>【编辑模式】<br>进入/退出 :i/a/0/shift+o esc<br>自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）</p>\n<p>【扩展模式】<br>：! 命令 （叹号后面有个空格）<br>搜索：/searchText /搜索文本 回车确认 然后按N查找下一个<br>向前搜索：？searchText<br>退出搜索高亮：nohl<br>[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局<br>[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText<br>横屏分屏：sp 上下横屏切换ctrl+ww<br>竖屏分屏：vs 左右竖屏切换ctrl+ww<br>退出分屏：q<br>显示行号：set number</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-windows平台常用快捷键\"><a href=\"#1-windows平台常用快捷键\" class=\"headerlink\" title=\"1.windows平台常用快捷键\"></a>1.windows平台常用快捷键</h2><p><strong>【win系统】</strong><br>无鼠标快捷操作电脑[win7]<br>[1]开启键盘操作鼠标<br>控制面板-&gt;轻松访问-&gt;鼠标更易用-&gt;设置鼠标键…<br>Alt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动<br>[2]常用系统快捷键<br>WIN 打开搜素程序和文件<br>WIN+E 我的电脑<br>WIN+T 切换任务栏<br>WIN+L 锁定计算机<br>WIN+D 显示桌面<br>WIN+M 最小化所有窗口<br>WIN+R 打开运行对话框<br>WIN+Tab 3D切换任务栏程序<br>WIN+空格键 预览桌面<br>WIN+方向键 最大/小化窗口/左右移动窗口<br>关闭活动应用程序:Alt+F4</p>\n<p><strong>【Webstorm快捷键】</strong><br>多处编辑：Alt+左键单击<br>控制台：Alt+F12<br>打开任何文件：Double Shift<br>打开最近文件：Ctrl+E<br>全局搜索字符串：Ctrl+H<br>Settings:Ctrl+Alt+S<br>Format code:Ctrl+Alt+L<br>删除一行： Ctrl+X<br>复制行：Ctrl+D<br>查找行：Ctrl+G<br>折叠代码块： Ctrl+加减号<br>注释：Ctrl+/ 或 Ctrl+Shift+/<br>向上/下移动代码行：Shift+Alt+Up/Down<br>向上/下移动代码块：Ctrl+Shift+Up/Down<br>方法追踪：Ctrl+B或Ctrl+左键单击<br>跳转到变量实现处：Ctrl+B<br>跳转到方法实现处：Ctrl + Alt + B<br>打开定义快速查看：Ctrl + Shift + I<br>跳转到当前页面的上/下一个方法块：Alt + Up/Down<br>高亮错误或警告快速定位：F2<br>格式化代码：Ctrl+Alt+L<br>自动修正：Alt+Enter<br>查找文本：Ctrl+F<br>查找下/上一个：F3/Shift + F3<br>高亮显示选中文本：Ctrl+Shift+F7<br>替换文本：Ctrl+R<br>方法参数提示：Ctrl+P<br>显示方法注释：Ctrl+Q<br>打开配置窗口：Ctrl+Alt+S<br>文件名查找文件：Ctrl+Shift+N<br>通过字符快速查找：Ctrl+Shift+Alt+N<br>重新开始一行（无论光标在哪里）：Shift+Enter<br>surround with代码块：Ctrl+Alt+T<br>大小写转换：Ctrl+Shift+U<br>输出模板：Ctrl+J<br>匹配代码块括号：Ctrl+[<br>显示当前文件的结构：Ctrl+F12<br>折叠/展开代码块：Ctrl+”-“/“+”<br>返回至上次浏览的位置 Ctrl+Alt+ left/right<br>逐级向上选中代码：Ctrl+W</p>\n<p><strong>【浏览器】</strong><br>打开新窗口:Ctrl+T<br>切换导航栏窗口:Ctrl+Tab<br>关闭活动页面:Ctrl+W<br>上下浏览网页:方向键和Page Up和Page Down</p>\n<h2 id=\"2-mac平台常用快捷键\"><a href=\"#2-mac平台常用快捷键\" class=\"headerlink\" title=\"2.mac平台常用快捷键\"></a>2.mac平台常用快捷键</h2><p><strong>【mac系统】</strong><br>Command + Shift + c 打开我的电脑<br>Command + Shift + h 打开当前用户文件夹<br>Command + 向上箭头 打开包含当前文件夹的文件夹<br>Command + [ / ] 打开上一个文件夹/下一个文件夹<br>Command + w 关闭最前tab<br>Command + m  最小化当前应用窗口<br>Command + q 关闭当前应用<br>Command + T 打开多个tab 【eg:浏览器，Terminal】<br>Command + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】<br>control + tab 转向下一个标签页【eg:webStorm多个编辑窗口】<br>control + shift + tab 转向上一个标签页<br>Control + 向上向下 查看所有打开窗口<br><strong>【两个手指向下滑：向下滚动】</strong></p>\n<p>Command + shift + n 新建文件夹<br>Command + N 新建文件【eg:sublime新文件，webStorm新文件】<br>Command + delete 删除<br>Return 重命名选中的文件或文件夹</p>\n<p>Shift 搜狗输入法中英文切换<br>Command + , 当前应用的偏好设置</p>\n<p><strong>【文件处理快捷键】</strong><br>Command + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾<br>Command + 左右 将光标移动到行首/行尾<br>Command + L 将光标移动到指定行<br>Command + shift + 上下左右 选中文本<br>alt + 上下 选取代码块<br>Shift + 上下左右 扩展选择区域<br>Command + f 查找<br>Command + r 替换<br>Delete 删除光标左边的字符<br>Fn + delete 删除光标右边的字符<br>Option + delete 删除光标左边的word</p>\n<p><strong>【截图快捷键】</strong><br>Command + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件<br>Command + shift + 4                 截取选中屏幕区域到文件<br>Command + shift + control + 3  截取全屏到剪贴板<br>Command + shift + control + 4  截取选中屏幕区域到剪贴板</p>\n<p><strong>【Mac下浏览器快捷键】</strong><br>Command + L 光标直接跳至地址栏<br>Chrome 开发者模式  Command + alt + j<br>刷新 Command + r</p>\n<p><strong>【Mac下webStorm快捷键】</strong><br>全局查找 Command + shift + f<br>格式整理 Command + alt + L<br>注释：Command + /<br>调整缩进 Shift +  tab<br>复制当前行 Command + d<br>删除当前行 Command + delete<br>快速换行 Shift + Enter<br>清除缩进变成单行 Command + Shift + J<br>光标在多处定位 Alt + 单击<br>大小写转换 Command + Shift + U</p>\n<h2 id=\"3-其他工具\"><a href=\"#3-其他工具\" class=\"headerlink\" title=\"3.其他工具\"></a>3.其他工具</h2><p><strong>【sublime】</strong><br>sublime修炼：一款得心应手的开发软件<br>1.sublime官网下载，安装时勾选右键打开文件<br>2.快捷键设置Preferences-&gt;Key Bindings-User<br>打开浏览器：ctrl+alt+f<br>3.命令模式ctrl+shift+p，输入install package，安装命令包</p>\n<p><strong>【VIM】</strong><br>【命令模式】<br>左下上右:HJKL<br>向右向下跳一个词:w/b<br>下/上一个句子/段落 （）/{}<br>跳转到行首/行尾：0/shift+$<br>跳转到最后一行/第一行：shift+G/gg<br>跳转到上一次编辑的地方：<br>跳转到上一次编辑的文件：ctrl+o/ctrl+i<br>整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行<br>非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行<br>删除选中内容:X<br>删除某行：DD / dl (L字符) /dw (w单词)<br>替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw<br>复制当前行：YY /yl /yw<br>复制一个词：YW<br>复制任意选中内容：先选中，再按Y<br>粘贴：P<br>撤销：U/u<br>代码格式化 选中，按=</p>\n<p>【编辑模式】<br>进入/退出 :i/a/0/shift+o esc<br>自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）</p>\n<p>【扩展模式】<br>：! 命令 （叹号后面有个空格）<br>搜索：/searchText /搜索文本 回车确认 然后按N查找下一个<br>向前搜索：？searchText<br>退出搜索高亮：nohl<br>[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局<br>[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText<br>横屏分屏：sp 上下横屏切换ctrl+ww<br>竖屏分屏：vs 左右竖屏切换ctrl+ww<br>退出分屏：q<br>显示行号：set number</p>\n"},{"title":"hexo使用笔记","date":"2018-11-15T11:44:41.000Z","_content":"## 1.文档目的\n该文档用于自己及时查看，并快速上手继续写博客\n参考网址：[hexo官方文挡](https://hexo.io/zh-cn/docs/commands)\n## 2.快速编写博客\n1.查看自己远程博客：https://zhuxiaobotongxue.github.io/\n2.本地化启动服务：**hexo s**\n3.如何生成一篇博客(如：git1)：**hexo new post git1**\n4.打开source文件夹并编辑博客，[markdown语法](https://www.jianshu.com/p/191d1e21f7ed)\n5.编译博客： **hexo g**\n6.部署至远程：**hexo d**\n7.备份原代码：**git add ./git commit -m ''/git push**\n","source":"_posts/2018-11-15-hexo.md","raw":"---\ntitle: hexo使用笔记\ndate: 2018-11-15 19:44:41\ntags: Hexo\n---\n## 1.文档目的\n该文档用于自己及时查看，并快速上手继续写博客\n参考网址：[hexo官方文挡](https://hexo.io/zh-cn/docs/commands)\n## 2.快速编写博客\n1.查看自己远程博客：https://zhuxiaobotongxue.github.io/\n2.本地化启动服务：**hexo s**\n3.如何生成一篇博客(如：git1)：**hexo new post git1**\n4.打开source文件夹并编辑博客，[markdown语法](https://www.jianshu.com/p/191d1e21f7ed)\n5.编译博客： **hexo g**\n6.部署至远程：**hexo d**\n7.备份原代码：**git add ./git commit -m ''/git push**\n","slug":"hexo","published":1,"updated":"2019-04-21T08:04:47.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iw9000hhkuzmtmflzew","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于自己及时查看，并快速上手继续写博客<br>参考网址：<a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">hexo官方文挡</a></p>\n<h2 id=\"2-快速编写博客\"><a href=\"#2-快速编写博客\" class=\"headerlink\" title=\"2.快速编写博客\"></a>2.快速编写博客</h2><p>1.查看自己远程博客：<a href=\"https://zhuxiaobotongxue.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhuxiaobotongxue.github.io/</a><br>2.本地化启动服务：<strong>hexo s</strong><br>3.如何生成一篇博客(如：git1)：<strong>hexo new post git1</strong><br>4.打开source文件夹并编辑博客，<a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">markdown语法</a><br>5.编译博客： <strong>hexo g</strong><br>6.部署至远程：<strong>hexo d</strong><br>7.备份原代码：<strong>git add ./git commit -m ‘’/git push</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于自己及时查看，并快速上手继续写博客<br>参考网址：<a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">hexo官方文挡</a></p>\n<h2 id=\"2-快速编写博客\"><a href=\"#2-快速编写博客\" class=\"headerlink\" title=\"2.快速编写博客\"></a>2.快速编写博客</h2><p>1.查看自己远程博客：<a href=\"https://zhuxiaobotongxue.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhuxiaobotongxue.github.io/</a><br>2.本地化启动服务：<strong>hexo s</strong><br>3.如何生成一篇博客(如：git1)：<strong>hexo new post git1</strong><br>4.打开source文件夹并编辑博客，<a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">markdown语法</a><br>5.编译博客： <strong>hexo g</strong><br>6.部署至远程：<strong>hexo d</strong><br>7.备份原代码：<strong>git add ./git commit -m ‘’/git push</strong></p>\n"},{"title":"array","date":"2018-11-19T11:55:59.000Z","_content":"## 1.文档目的\n熟练掌握js数组属性和方法，熟能生巧\n参考文档：[MDN Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\n## 2.Array一览\narray    数组 【联想记忆法:部署兵力，我就是将军】\n【方法的分类方法，是否改变数组自身，是否是判断类型的】\nArray.length\nArray.prototype\n【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象\n【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例\n【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型\n\n**修改器方法**\n会改变调用它们的对象自身的值：\nArray.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素\nArray.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素\nArray.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。\nArray.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素\nArray.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。\nArray.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值\nArray.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序\n\n**访问方法**\n不会改变调用它们的对象的值\n【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。\n【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1\n【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。\n【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。\nArray.prototype.toString() 返回一个由所有数组元素组合而成的字符串\nArray.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串\nArray.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。\n\n**迭代方法**\n【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined\n【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改\n【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。\n【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。\nArray.prototype.forEach() 为数组中的每个元素执行一次回调函数。\n【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。\n【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回\nArray.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。\nArray.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键\nArray.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值\nArray.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值\nArray.prototype.reduceRight() 从右到左，同上\n\n\n小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮\nconsole.table(values)\n\n思考：【数组，字符串，对象 相互转化】\n\n// 字符串转数组 split\n// 数组转字符串 toString/join\n\n字符串可以当做数组直接用查看某个位置字符","source":"_posts/2018-11-19-array.md","raw":"---\ntitle: array\ndate: 2018-11-19 19:55:59\ntags: JS\n---\n## 1.文档目的\n熟练掌握js数组属性和方法，熟能生巧\n参考文档：[MDN Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\n## 2.Array一览\narray    数组 【联想记忆法:部署兵力，我就是将军】\n【方法的分类方法，是否改变数组自身，是否是判断类型的】\nArray.length\nArray.prototype\n【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象\n【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例\n【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型\n\n**修改器方法**\n会改变调用它们的对象自身的值：\nArray.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素\nArray.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素\nArray.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。\nArray.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素\nArray.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。\nArray.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值\nArray.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序\n\n**访问方法**\n不会改变调用它们的对象的值\n【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。\n【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1\n【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。\n【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。\nArray.prototype.toString() 返回一个由所有数组元素组合而成的字符串\nArray.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串\nArray.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。\n\n**迭代方法**\n【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined\n【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改\n【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。\n【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。\nArray.prototype.forEach() 为数组中的每个元素执行一次回调函数。\n【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。\n【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回\nArray.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。\nArray.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键\nArray.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值\nArray.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值\nArray.prototype.reduceRight() 从右到左，同上\n\n\n小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮\nconsole.table(values)\n\n思考：【数组，字符串，对象 相互转化】\n\n// 字符串转数组 split\n// 数组转字符串 toString/join\n\n字符串可以当做数组直接用查看某个位置字符","slug":"array","published":1,"updated":"2019-02-02T04:35:57.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwb000ihkuzv1ryelwj","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js数组属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">MDN Array</a></p>\n<h2 id=\"2-Array一览\"><a href=\"#2-Array一览\" class=\"headerlink\" title=\"2.Array一览\"></a>2.Array一览</h2><p>array    数组 【联想记忆法:部署兵力，我就是将军】<br>【方法的分类方法，是否改变数组自身，是否是判断类型的】<br>Array.length<br>Array.prototype<br>【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象<br>【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例<br>【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型</p>\n<p><strong>修改器方法</strong><br>会改变调用它们的对象自身的值：<br>Array.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素<br>Array.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素<br>Array.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。<br>Array.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素<br>Array.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br>Array.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值<br>Array.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序</p>\n<p><strong>访问方法</strong><br>不会改变调用它们的对象的值<br>【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。<br>【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1<br>【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。<br>【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。<br>【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。<br>Array.prototype.toString() 返回一个由所有数组元素组合而成的字符串<br>Array.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串<br>Array.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。</p>\n<p><strong>迭代方法</strong><br>【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined<br>【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改<br>【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。<br>【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。<br>Array.prototype.forEach() 为数组中的每个元素执行一次回调函数。<br>【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。<br>【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回<br>Array.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br>Array.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键<br>Array.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值<br>Array.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值<br>Array.prototype.reduceRight() 从右到左，同上</p>\n<p>小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮<br>console.table(values)</p>\n<p>思考：【数组，字符串，对象 相互转化】</p>\n<p>// 字符串转数组 split<br>// 数组转字符串 toString/join</p>\n<p>字符串可以当做数组直接用查看某个位置字符</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js数组属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">MDN Array</a></p>\n<h2 id=\"2-Array一览\"><a href=\"#2-Array一览\" class=\"headerlink\" title=\"2.Array一览\"></a>2.Array一览</h2><p>array    数组 【联想记忆法:部署兵力，我就是将军】<br>【方法的分类方法，是否改变数组自身，是否是判断类型的】<br>Array.length<br>Array.prototype<br>【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象<br>【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例<br>【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型</p>\n<p><strong>修改器方法</strong><br>会改变调用它们的对象自身的值：<br>Array.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素<br>Array.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素<br>Array.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。<br>Array.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素<br>Array.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br>Array.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值<br>Array.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序</p>\n<p><strong>访问方法</strong><br>不会改变调用它们的对象的值<br>【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。<br>【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1<br>【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。<br>【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。<br>【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。<br>Array.prototype.toString() 返回一个由所有数组元素组合而成的字符串<br>Array.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串<br>Array.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。</p>\n<p><strong>迭代方法</strong><br>【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined<br>【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改<br>【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。<br>【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。<br>Array.prototype.forEach() 为数组中的每个元素执行一次回调函数。<br>【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。<br>【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回<br>Array.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br>Array.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键<br>Array.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值<br>Array.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值<br>Array.prototype.reduceRight() 从右到左，同上</p>\n<p>小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮<br>console.table(values)</p>\n<p>思考：【数组，字符串，对象 相互转化】</p>\n<p>// 字符串转数组 split<br>// 数组转字符串 toString/join</p>\n<p>字符串可以当做数组直接用查看某个位置字符</p>\n"},{"title":"string","date":"2018-11-19T12:04:20.000Z","_content":"## 1.文档目的\n熟练掌握js字符串属性和方法，熟能生巧\n参考文档：[MDN String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n## 2.String一览\nString.prototype.constructor\nString.prototype.length  返回了字符串的长度\nN  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）\nString()   将其它对象转化为字符串\n\n【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串\n【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。\n【布尔类型】String.prototype.lastIndexOf() 同上，相反\n【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符\n【布尔类型】String.prototype.endsWith()  同上，相反\n【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较\n【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。\n【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。\n【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。\n【新字符串】String.prototype.padEnd()  同上，相反\n【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。\n【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。\n【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符\n【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。\n【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。\nString.prototype.charAt()  返回特定位置的字符。\nString.prototype.split()  将字符串对象分割成字符串数组。\n\nString.prototype.toLowerCase() 转化为小写\nString.prototype.toLocaleLowerCase() 转为本地化小写\nString.prototype.toUpperCase() 同上，相反\nString.prototype.toLocaleUpperCase() 同上，相反\nString.prototype.trim()  从字符串的开始和结尾去除空格。\nString.prototype.trimLeft()   从字符串的左侧去除空格\nString.prototype.trimRight()   从字符串的右侧去除空格\n\nString.prototype.toString()  返回用字符串对象的字符串值\nString.prototype.valueOf()  返回特定对象的原始值（同toString()）\n\nString是基本类型，Array是引用类型\n\n**总结:**\n1.一些列布尔类型的方法\n2.一些列对值的增删改查及遍历\n3.数组和字符串可以相互转化\ntoString join 和 split\n有空多看看，熟能生巧\n\n扩展学习:splice 和 sort\n\nforEach() 遍历数组\nfor .. in  遍历obj的key\nfor... of  遍历obj的value","source":"_posts/2018-11-19-string.md","raw":"---\ntitle: string\ndate: 2018-11-19 20:04:20\ntags: JS\n---\n## 1.文档目的\n熟练掌握js字符串属性和方法，熟能生巧\n参考文档：[MDN String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n## 2.String一览\nString.prototype.constructor\nString.prototype.length  返回了字符串的长度\nN  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）\nString()   将其它对象转化为字符串\n\n【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串\n【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。\n【布尔类型】String.prototype.lastIndexOf() 同上，相反\n【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符\n【布尔类型】String.prototype.endsWith()  同上，相反\n【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较\n【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。\n【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。\n【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。\n【新字符串】String.prototype.padEnd()  同上，相反\n【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。\n【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。\n【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符\n【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。\n【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。\nString.prototype.charAt()  返回特定位置的字符。\nString.prototype.split()  将字符串对象分割成字符串数组。\n\nString.prototype.toLowerCase() 转化为小写\nString.prototype.toLocaleLowerCase() 转为本地化小写\nString.prototype.toUpperCase() 同上，相反\nString.prototype.toLocaleUpperCase() 同上，相反\nString.prototype.trim()  从字符串的开始和结尾去除空格。\nString.prototype.trimLeft()   从字符串的左侧去除空格\nString.prototype.trimRight()   从字符串的右侧去除空格\n\nString.prototype.toString()  返回用字符串对象的字符串值\nString.prototype.valueOf()  返回特定对象的原始值（同toString()）\n\nString是基本类型，Array是引用类型\n\n**总结:**\n1.一些列布尔类型的方法\n2.一些列对值的增删改查及遍历\n3.数组和字符串可以相互转化\ntoString join 和 split\n有空多看看，熟能生巧\n\n扩展学习:splice 和 sort\n\nforEach() 遍历数组\nfor .. in  遍历obj的key\nfor... of  遍历obj的value","slug":"string","published":1,"updated":"2019-02-02T04:35:57.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwc000jhkuzjhinga48","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js字符串属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener\">MDN String</a></p>\n<h2 id=\"2-String一览\"><a href=\"#2-String一览\" class=\"headerlink\" title=\"2.String一览\"></a>2.String一览</h2><p>String.prototype.constructor<br>String.prototype.length  返回了字符串的长度<br>N  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）<br>String()   将其它对象转化为字符串</p>\n<p>【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串<br>【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。<br>【布尔类型】String.prototype.lastIndexOf() 同上，相反<br>【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符<br>【布尔类型】String.prototype.endsWith()  同上，相反<br>【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较<br>【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。<br>【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。<br>【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。<br>【新字符串】String.prototype.padEnd()  同上，相反<br>【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。<br>【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。<br>【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符<br>【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。<br>【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。<br>String.prototype.charAt()  返回特定位置的字符。<br>String.prototype.split()  将字符串对象分割成字符串数组。</p>\n<p>String.prototype.toLowerCase() 转化为小写<br>String.prototype.toLocaleLowerCase() 转为本地化小写<br>String.prototype.toUpperCase() 同上，相反<br>String.prototype.toLocaleUpperCase() 同上，相反<br>String.prototype.trim()  从字符串的开始和结尾去除空格。<br>String.prototype.trimLeft()   从字符串的左侧去除空格<br>String.prototype.trimRight()   从字符串的右侧去除空格</p>\n<p>String.prototype.toString()  返回用字符串对象的字符串值<br>String.prototype.valueOf()  返回特定对象的原始值（同toString()）</p>\n<p>String是基本类型，Array是引用类型</p>\n<p><strong>总结:</strong><br>1.一些列布尔类型的方法<br>2.一些列对值的增删改查及遍历<br>3.数组和字符串可以相互转化<br>toString join 和 split<br>有空多看看，熟能生巧</p>\n<p>扩展学习:splice 和 sort</p>\n<p>forEach() 遍历数组<br>for .. in  遍历obj的key<br>for… of  遍历obj的value</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js字符串属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener\">MDN String</a></p>\n<h2 id=\"2-String一览\"><a href=\"#2-String一览\" class=\"headerlink\" title=\"2.String一览\"></a>2.String一览</h2><p>String.prototype.constructor<br>String.prototype.length  返回了字符串的长度<br>N  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）<br>String()   将其它对象转化为字符串</p>\n<p>【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串<br>【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。<br>【布尔类型】String.prototype.lastIndexOf() 同上，相反<br>【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符<br>【布尔类型】String.prototype.endsWith()  同上，相反<br>【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较<br>【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。<br>【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。<br>【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。<br>【新字符串】String.prototype.padEnd()  同上，相反<br>【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。<br>【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。<br>【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符<br>【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。<br>【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。<br>String.prototype.charAt()  返回特定位置的字符。<br>String.prototype.split()  将字符串对象分割成字符串数组。</p>\n<p>String.prototype.toLowerCase() 转化为小写<br>String.prototype.toLocaleLowerCase() 转为本地化小写<br>String.prototype.toUpperCase() 同上，相反<br>String.prototype.toLocaleUpperCase() 同上，相反<br>String.prototype.trim()  从字符串的开始和结尾去除空格。<br>String.prototype.trimLeft()   从字符串的左侧去除空格<br>String.prototype.trimRight()   从字符串的右侧去除空格</p>\n<p>String.prototype.toString()  返回用字符串对象的字符串值<br>String.prototype.valueOf()  返回特定对象的原始值（同toString()）</p>\n<p>String是基本类型，Array是引用类型</p>\n<p><strong>总结:</strong><br>1.一些列布尔类型的方法<br>2.一些列对值的增删改查及遍历<br>3.数组和字符串可以相互转化<br>toString join 和 split<br>有空多看看，熟能生巧</p>\n<p>扩展学习:splice 和 sort</p>\n<p>forEach() 遍历数组<br>for .. in  遍历obj的key<br>for… of  遍历obj的value</p>\n"},{"title":"coding-quality","date":"2018-12-18T22:43:00.000Z","_content":"## 1.文档目的\n一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助\n参考网址：\n[雅虎军规35条](https://www.jianshu.com/p/4cbcd202a591)、\n[JavaScript 编码规范](https://github.com/yuche/javascript)、\n[eslint规则](http://eslint.cn/docs/rules/)、\n[js编码风格（阮一峰）](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n[ES6编程风格](http://es6.ruanyifeng.com/#docs/style)\n## 2.心得\n编程讲究章法，要心中有想法，才能动手编码，正所谓\"三思而后行\"，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5\n基于node开发环境转换：[Babel](https://www.jianshu.com/p/647950617a6d)\n在线转换：[Babel](https://babeljs.io/repl)、[Traceur](https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22)\n1、前端的发展讲究\"工程化\"，\"模块化\"和\"组件化\"，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，\n工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等\n模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写\n组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面\n2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等\n## 3.编程命名规则介绍\n驼峰命名法：如exampleName\n帕斯卡命名法：如ExampleName\n下划线命名法：如example_name\n中划线命名法：如example-name\n匈牙利命名法(体现类型)：如g_example_name或aExampleNames\n## 3.整理实用条款\n1、工程化，模块化，组件化的思想\n2、项目命名使用中划线命名法,比如twitter-bootstrap\n3、项目中文件夹命名使用中划线命名法：比如global-api\n3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js\n3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from './CheckBox'\n4、类名用帕斯卡命名法：比如AdminUser{}\n5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()\n6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法\n7、常量命名原则：全部大写且用下划线连接，如USER_TYPE\n","source":"_posts/2018-12-19-coding-quality.md","raw":"---\ntitle: coding-quality\ndate: 2018-12-19 06:43:00\ntags: CodingQuality\n---\n## 1.文档目的\n一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助\n参考网址：\n[雅虎军规35条](https://www.jianshu.com/p/4cbcd202a591)、\n[JavaScript 编码规范](https://github.com/yuche/javascript)、\n[eslint规则](http://eslint.cn/docs/rules/)、\n[js编码风格（阮一峰）](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n[ES6编程风格](http://es6.ruanyifeng.com/#docs/style)\n## 2.心得\n编程讲究章法，要心中有想法，才能动手编码，正所谓\"三思而后行\"，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5\n基于node开发环境转换：[Babel](https://www.jianshu.com/p/647950617a6d)\n在线转换：[Babel](https://babeljs.io/repl)、[Traceur](https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22)\n1、前端的发展讲究\"工程化\"，\"模块化\"和\"组件化\"，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，\n工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等\n模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写\n组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面\n2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等\n## 3.编程命名规则介绍\n驼峰命名法：如exampleName\n帕斯卡命名法：如ExampleName\n下划线命名法：如example_name\n中划线命名法：如example-name\n匈牙利命名法(体现类型)：如g_example_name或aExampleNames\n## 3.整理实用条款\n1、工程化，模块化，组件化的思想\n2、项目命名使用中划线命名法,比如twitter-bootstrap\n3、项目中文件夹命名使用中划线命名法：比如global-api\n3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js\n3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from './CheckBox'\n4、类名用帕斯卡命名法：比如AdminUser{}\n5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()\n6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法\n7、常量命名原则：全部大写且用下划线连接，如USER_TYPE\n","slug":"coding-quality","published":1,"updated":"2019-04-21T08:04:47.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwe000mhkuz9l77hmr6","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助<br>参考网址：<br><a href=\"https://www.jianshu.com/p/4cbcd202a591\" target=\"_blank\" rel=\"noopener\">雅虎军规35条</a>、<br><a href=\"https://github.com/yuche/javascript\" target=\"_blank\" rel=\"noopener\">JavaScript 编码规范</a>、<br><a href=\"http://eslint.cn/docs/rules/\" target=\"_blank\" rel=\"noopener\">eslint规则</a>、<br><a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">js编码风格（阮一峰）</a><br><a href=\"http://es6.ruanyifeng.com/#docs/style\" target=\"_blank\" rel=\"noopener\">ES6编程风格</a></p>\n<h2 id=\"2-心得\"><a href=\"#2-心得\" class=\"headerlink\" title=\"2.心得\"></a>2.心得</h2><p>编程讲究章法，要心中有想法，才能动手编码，正所谓”三思而后行”，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5<br>基于node开发环境转换：<a href=\"https://www.jianshu.com/p/647950617a6d\" target=\"_blank\" rel=\"noopener\">Babel</a><br>在线转换：<a href=\"https://babeljs.io/repl\" target=\"_blank\" rel=\"noopener\">Babel</a>、<a href=\"https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22\" target=\"_blank\" rel=\"noopener\">Traceur</a><br>1、前端的发展讲究”工程化”，”模块化”和”组件化”，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，<br>工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等<br>模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写<br>组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面<br>2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等</p>\n<h2 id=\"3-编程命名规则介绍\"><a href=\"#3-编程命名规则介绍\" class=\"headerlink\" title=\"3.编程命名规则介绍\"></a>3.编程命名规则介绍</h2><p>驼峰命名法：如exampleName<br>帕斯卡命名法：如ExampleName<br>下划线命名法：如example_name<br>中划线命名法：如example-name<br>匈牙利命名法(体现类型)：如g_example_name或aExampleNames</p>\n<h2 id=\"3-整理实用条款\"><a href=\"#3-整理实用条款\" class=\"headerlink\" title=\"3.整理实用条款\"></a>3.整理实用条款</h2><p>1、工程化，模块化，组件化的思想<br>2、项目命名使用中划线命名法,比如twitter-bootstrap<br>3、项目中文件夹命名使用中划线命名法：比如global-api<br>3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js<br>3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from ‘./CheckBox’<br>4、类名用帕斯卡命名法：比如AdminUser{}<br>5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()<br>6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法<br>7、常量命名原则：全部大写且用下划线连接，如USER_TYPE</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助<br>参考网址：<br><a href=\"https://www.jianshu.com/p/4cbcd202a591\" target=\"_blank\" rel=\"noopener\">雅虎军规35条</a>、<br><a href=\"https://github.com/yuche/javascript\" target=\"_blank\" rel=\"noopener\">JavaScript 编码规范</a>、<br><a href=\"http://eslint.cn/docs/rules/\" target=\"_blank\" rel=\"noopener\">eslint规则</a>、<br><a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">js编码风格（阮一峰）</a><br><a href=\"http://es6.ruanyifeng.com/#docs/style\" target=\"_blank\" rel=\"noopener\">ES6编程风格</a></p>\n<h2 id=\"2-心得\"><a href=\"#2-心得\" class=\"headerlink\" title=\"2.心得\"></a>2.心得</h2><p>编程讲究章法，要心中有想法，才能动手编码，正所谓”三思而后行”，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5<br>基于node开发环境转换：<a href=\"https://www.jianshu.com/p/647950617a6d\" target=\"_blank\" rel=\"noopener\">Babel</a><br>在线转换：<a href=\"https://babeljs.io/repl\" target=\"_blank\" rel=\"noopener\">Babel</a>、<a href=\"https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22\" target=\"_blank\" rel=\"noopener\">Traceur</a><br>1、前端的发展讲究”工程化”，”模块化”和”组件化”，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，<br>工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等<br>模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写<br>组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面<br>2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等</p>\n<h2 id=\"3-编程命名规则介绍\"><a href=\"#3-编程命名规则介绍\" class=\"headerlink\" title=\"3.编程命名规则介绍\"></a>3.编程命名规则介绍</h2><p>驼峰命名法：如exampleName<br>帕斯卡命名法：如ExampleName<br>下划线命名法：如example_name<br>中划线命名法：如example-name<br>匈牙利命名法(体现类型)：如g_example_name或aExampleNames</p>\n<h2 id=\"3-整理实用条款\"><a href=\"#3-整理实用条款\" class=\"headerlink\" title=\"3.整理实用条款\"></a>3.整理实用条款</h2><p>1、工程化，模块化，组件化的思想<br>2、项目命名使用中划线命名法,比如twitter-bootstrap<br>3、项目中文件夹命名使用中划线命名法：比如global-api<br>3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js<br>3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from ‘./CheckBox’<br>4、类名用帕斯卡命名法：比如AdminUser{}<br>5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()<br>6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法<br>7、常量命名原则：全部大写且用下划线连接，如USER_TYPE</p>\n"},{"title":"npm淘宝镜像","date":"2018-11-15T13:18:51.000Z","_content":"## 1.文档目的\n该文档用于解释说明npm淘宝镜像的使用\n参考网址：[淘宝npm镜像](http://npm.taobao.org/)、[react native环境搭建](https://reactnative.cn/docs/getting-started/)、[淘宝镜像说明](https://blog.csdn.net/quuqu/article/details/64121812)\n\n## 2.内容梳理\n淘宝镜像使用目的：加快访问速度\n使用方式及其对比：\n* npm切换镜像源（加快访问速度）：\n**npm config set registry https://registry.npm.taobao.org --global**\n**npm config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**npm config list**\n**npm config get registry**\n**npm config get disturl**\n* yarn方式[推荐]\nyarn安装：\n**npm install -g yarn**\nyarn配置镜像源：\n**yarn config set registry https://registry.npm.taobao.org --global**\n**yarn config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**yarn config list**\n**yarn config get registry**\n**yarn config get disturl**\n* cnpm方式[不推荐：安装的模块路径比较奇怪]\n**npm install -g cnpm --registry=https://registry.npm.taobao.org**\n\n## 3.扩展\n查看npm全局安装默认路径（打开则可以看到具体安装的模块）：\n**npm config get prefix**\n全局安装模块：\n**npm install -g @vue/cli**或**yarn global add @vue/cli**\n全局卸载已安装模块：\n**npm uninstall vue-cli -g**或**yarn global remove vue-cli**\n","source":"_posts/2018-11-15-npm.md","raw":"---\ntitle: npm淘宝镜像\ndate: 2018-11-15 21:18:51\ntags: Npm\n---\n## 1.文档目的\n该文档用于解释说明npm淘宝镜像的使用\n参考网址：[淘宝npm镜像](http://npm.taobao.org/)、[react native环境搭建](https://reactnative.cn/docs/getting-started/)、[淘宝镜像说明](https://blog.csdn.net/quuqu/article/details/64121812)\n\n## 2.内容梳理\n淘宝镜像使用目的：加快访问速度\n使用方式及其对比：\n* npm切换镜像源（加快访问速度）：\n**npm config set registry https://registry.npm.taobao.org --global**\n**npm config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**npm config list**\n**npm config get registry**\n**npm config get disturl**\n* yarn方式[推荐]\nyarn安装：\n**npm install -g yarn**\nyarn配置镜像源：\n**yarn config set registry https://registry.npm.taobao.org --global**\n**yarn config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**yarn config list**\n**yarn config get registry**\n**yarn config get disturl**\n* cnpm方式[不推荐：安装的模块路径比较奇怪]\n**npm install -g cnpm --registry=https://registry.npm.taobao.org**\n\n## 3.扩展\n查看npm全局安装默认路径（打开则可以看到具体安装的模块）：\n**npm config get prefix**\n全局安装模块：\n**npm install -g @vue/cli**或**yarn global add @vue/cli**\n全局卸载已安装模块：\n**npm uninstall vue-cli -g**或**yarn global remove vue-cli**\n","slug":"npm","published":1,"updated":"2019-04-21T08:04:47.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwg000nhkuz5cks7q67","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于解释说明npm淘宝镜像的使用<br>参考网址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a>、<a href=\"https://reactnative.cn/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">react native环境搭建</a>、<a href=\"https://blog.csdn.net/quuqu/article/details/64121812\" target=\"_blank\" rel=\"noopener\">淘宝镜像说明</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>淘宝镜像使用目的：加快访问速度<br>使用方式及其对比：</p>\n<ul>\n<li>npm切换镜像源（加快访问速度）：<br><strong>npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>npm config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>npm config list</strong><br><strong>npm config get registry</strong><br><strong>npm config get disturl</strong></li>\n<li>yarn方式[推荐]<br>yarn安装：<br><strong>npm install -g yarn</strong><br>yarn配置镜像源：<br><strong>yarn config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>yarn config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>yarn config list</strong><br><strong>yarn config get registry</strong><br><strong>yarn config get disturl</strong></li>\n<li>cnpm方式[不推荐：安装的模块路径比较奇怪]<br><strong>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></strong></li>\n</ul>\n<h2 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3.扩展\"></a>3.扩展</h2><p>查看npm全局安装默认路径（打开则可以看到具体安装的模块）：<br><strong>npm config get prefix</strong><br>全局安装模块：<br><strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>全局卸载已安装模块：<br><strong>npm uninstall vue-cli -g</strong>或<strong>yarn global remove vue-cli</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于解释说明npm淘宝镜像的使用<br>参考网址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a>、<a href=\"https://reactnative.cn/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">react native环境搭建</a>、<a href=\"https://blog.csdn.net/quuqu/article/details/64121812\" target=\"_blank\" rel=\"noopener\">淘宝镜像说明</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>淘宝镜像使用目的：加快访问速度<br>使用方式及其对比：</p>\n<ul>\n<li>npm切换镜像源（加快访问速度）：<br><strong>npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>npm config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>npm config list</strong><br><strong>npm config get registry</strong><br><strong>npm config get disturl</strong></li>\n<li>yarn方式[推荐]<br>yarn安装：<br><strong>npm install -g yarn</strong><br>yarn配置镜像源：<br><strong>yarn config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>yarn config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>yarn config list</strong><br><strong>yarn config get registry</strong><br><strong>yarn config get disturl</strong></li>\n<li>cnpm方式[不推荐：安装的模块路径比较奇怪]<br><strong>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></strong></li>\n</ul>\n<h2 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3.扩展\"></a>3.扩展</h2><p>查看npm全局安装默认路径（打开则可以看到具体安装的模块）：<br><strong>npm config get prefix</strong><br>全局安装模块：<br><strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>全局卸载已安装模块：<br><strong>npm uninstall vue-cli -g</strong>或<strong>yarn global remove vue-cli</strong></p>\n"},{"title":"sleep-quality","date":"2018-12-18T22:24:35.000Z","_content":"## 1.文档目的\n该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量\n参考网址：[乐哈健康:提升睡眠质量](https://m.leha.com/health/59359)\n## 2.提升睡眠质量九大原则\n1、改掉睡前吃东西的习惯\n2、调整睡眠环境\n3、改变睡姿\n4、睡前梳梳头\n5、睡前用热水泡泡脚\n6、蜂蜜加牛奶改善睡眠质量\n7、临睡前要注意放松心情\n8、睡前舒缓运动消除疲劳\n9、睡觉时枕头别垫太高\n","source":"_posts/2018-12-19-sleep-quality.md","raw":"---\ntitle: sleep-quality\ndate: 2018-12-19 06:24:35\ntags: life\n---\n## 1.文档目的\n该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量\n参考网址：[乐哈健康:提升睡眠质量](https://m.leha.com/health/59359)\n## 2.提升睡眠质量九大原则\n1、改掉睡前吃东西的习惯\n2、调整睡眠环境\n3、改变睡姿\n4、睡前梳梳头\n5、睡前用热水泡泡脚\n6、蜂蜜加牛奶改善睡眠质量\n7、临睡前要注意放松心情\n8、睡前舒缓运动消除疲劳\n9、睡觉时枕头别垫太高\n","slug":"sleep-quality","published":1,"updated":"2019-02-02T04:35:57.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwi000phkuz2us8buvf","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量<br>参考网址：<a href=\"https://m.leha.com/health/59359\" target=\"_blank\" rel=\"noopener\">乐哈健康:提升睡眠质量</a></p>\n<h2 id=\"2-提升睡眠质量九大原则\"><a href=\"#2-提升睡眠质量九大原则\" class=\"headerlink\" title=\"2.提升睡眠质量九大原则\"></a>2.提升睡眠质量九大原则</h2><p>1、改掉睡前吃东西的习惯<br>2、调整睡眠环境<br>3、改变睡姿<br>4、睡前梳梳头<br>5、睡前用热水泡泡脚<br>6、蜂蜜加牛奶改善睡眠质量<br>7、临睡前要注意放松心情<br>8、睡前舒缓运动消除疲劳<br>9、睡觉时枕头别垫太高</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量<br>参考网址：<a href=\"https://m.leha.com/health/59359\" target=\"_blank\" rel=\"noopener\">乐哈健康:提升睡眠质量</a></p>\n<h2 id=\"2-提升睡眠质量九大原则\"><a href=\"#2-提升睡眠质量九大原则\" class=\"headerlink\" title=\"2.提升睡眠质量九大原则\"></a>2.提升睡眠质量九大原则</h2><p>1、改掉睡前吃东西的习惯<br>2、调整睡眠环境<br>3、改变睡姿<br>4、睡前梳梳头<br>5、睡前用热水泡泡脚<br>6、蜂蜜加牛奶改善睡眠质量<br>7、临睡前要注意放松心情<br>8、睡前舒缓运动消除疲劳<br>9、睡觉时枕头别垫太高</p>\n"},{"title":"vue组件快速原型开发","date":"2018-11-15T12:56:20.000Z","_content":"## 1.文档目的\n该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件\n参考网址：基于[vue cli 3.0](https://cli.vuejs.org/zh/guide/)中快速[原型开发](https://cli.vuejs.org/zh/guide/prototyping.html)模块\n\n## 2.快速原型开发\n检查是否安装了vue cli 3.0开发环境： **vue --version**\n安装vue cli 3.0环境: **npm install -g @vue/cli**或**yarn global add @vue/cli**\n安装全局扩展： **npm install -g @vue/cli-service-global**\n编写App.vue组件：\n```\n  <template>\n    <h1>Hello!</h1>\n  </template>\n```\n运行组件： **vue serve**\n编译构建组件： **vue build**","source":"_posts/2018-11-15-vueserve.md","raw":"---\ntitle: vue组件快速原型开发\ndate: 2018-11-15 20:56:20\ntags: VueServe\n---\n## 1.文档目的\n该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件\n参考网址：基于[vue cli 3.0](https://cli.vuejs.org/zh/guide/)中快速[原型开发](https://cli.vuejs.org/zh/guide/prototyping.html)模块\n\n## 2.快速原型开发\n检查是否安装了vue cli 3.0开发环境： **vue --version**\n安装vue cli 3.0环境: **npm install -g @vue/cli**或**yarn global add @vue/cli**\n安装全局扩展： **npm install -g @vue/cli-service-global**\n编写App.vue组件：\n```\n  <template>\n    <h1>Hello!</h1>\n  </template>\n```\n运行组件： **vue serve**\n编译构建组件： **vue build**","slug":"vueserve","published":1,"updated":"2019-04-21T08:04:47.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwj000rhkuz9ijjp84s","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件<br>参考网址：基于<a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">vue cli 3.0</a>中快速<a href=\"https://cli.vuejs.org/zh/guide/prototyping.html\" target=\"_blank\" rel=\"noopener\">原型开发</a>模块</p>\n<h2 id=\"2-快速原型开发\"><a href=\"#2-快速原型开发\" class=\"headerlink\" title=\"2.快速原型开发\"></a>2.快速原型开发</h2><p>检查是否安装了vue cli 3.0开发环境： <strong>vue –version</strong><br>安装vue cli 3.0环境: <strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>安装全局扩展： <strong>npm install -g @vue/cli-service-global</strong><br>编写App.vue组件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行组件： <strong>vue serve</strong><br>编译构建组件： <strong>vue build</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件<br>参考网址：基于<a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">vue cli 3.0</a>中快速<a href=\"https://cli.vuejs.org/zh/guide/prototyping.html\" target=\"_blank\" rel=\"noopener\">原型开发</a>模块</p>\n<h2 id=\"2-快速原型开发\"><a href=\"#2-快速原型开发\" class=\"headerlink\" title=\"2.快速原型开发\"></a>2.快速原型开发</h2><p>检查是否安装了vue cli 3.0开发环境： <strong>vue –version</strong><br>安装vue cli 3.0环境: <strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>安装全局扩展： <strong>npm install -g @vue/cli-service-global</strong><br>编写App.vue组件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行组件： <strong>vue serve</strong><br>编译构建组件： <strong>vue build</strong></p>\n"},{"title":"axios","date":"2018-12-20T23:11:54.000Z","_content":"## 1.文档目的\n通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作\n参考网址：[axios](https://www.kancloud.cn/yunye/axios/234845)\n## 2.实践要点分析\n1.get请求直接拼接动态数据\nget请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）\n例如在Swagger UI上看到的形式为：\n**【GET】   /resourceApply/get/{id}**\n**(Parameters)  id[required]  string**\n那么前端的请求方法声明就应该如下（即：将参数直接拼接）：\n```\ngetDepartById = id => this.get(`/resourceApply/get/${id}`)\n```\n对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：\n```\nDepartApi.getDepartById(rowId)\n```\n2.get等请求params参数形式\nparams参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中\n例如在Swagger UI上看到的get请求形式为：\n**【GET】   /role/findPermsByRoleId**\n**(Parameters)  roleId[required]  string**\n那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):\n```\nfindPermsByRoleId = (params) => this.get('dce-admin/role/findPermsByRoleId', params)\nDepartApi.findPermsByRoleId({roleId: this.$route.param.id})\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId: roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\npost请求也是可以有params参数的(data可以默认为{}，来占位)：\n```\nsubAudit = (data, params) => this.post('/dce-res/resourceDB/subAudit', data, params)\nDbRegisterApi.subAudit({}, { resourceDBId: params.row.id })\n```\n3.post等请求data参数形式\n`data` 是作为请求主体被发送的数据，只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n必须是以下类型之一：\n- string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n- 浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]\n- Node 专属： Stream\n例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：\n**【POST】   /dce-admin/depart**\n**(Parameters)  depart[required]  body**\n那么前端的请求方法声明和调用方法就应该如下：\n```\naddDepart = data => this.post('/dce-admin/depart', data)\nDepartApi.addDepart(this.formValidate)\n```\n当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变\n4.跨域等问题的处理\n跨域原因：\n浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据\n解决方案（在axios请求配置中加入如下配置）：\n```\n// 'proxy' 定义代理服务器的主机名称和端口\n// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n```","source":"_posts/2018-12-21-axios.md","raw":"---\ntitle: axios\ndate: 2018-12-21 07:11:54\ntags: Axios\n---\n## 1.文档目的\n通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作\n参考网址：[axios](https://www.kancloud.cn/yunye/axios/234845)\n## 2.实践要点分析\n1.get请求直接拼接动态数据\nget请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）\n例如在Swagger UI上看到的形式为：\n**【GET】   /resourceApply/get/{id}**\n**(Parameters)  id[required]  string**\n那么前端的请求方法声明就应该如下（即：将参数直接拼接）：\n```\ngetDepartById = id => this.get(`/resourceApply/get/${id}`)\n```\n对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：\n```\nDepartApi.getDepartById(rowId)\n```\n2.get等请求params参数形式\nparams参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中\n例如在Swagger UI上看到的get请求形式为：\n**【GET】   /role/findPermsByRoleId**\n**(Parameters)  roleId[required]  string**\n那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):\n```\nfindPermsByRoleId = (params) => this.get('dce-admin/role/findPermsByRoleId', params)\nDepartApi.findPermsByRoleId({roleId: this.$route.param.id})\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId: roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\npost请求也是可以有params参数的(data可以默认为{}，来占位)：\n```\nsubAudit = (data, params) => this.post('/dce-res/resourceDB/subAudit', data, params)\nDbRegisterApi.subAudit({}, { resourceDBId: params.row.id })\n```\n3.post等请求data参数形式\n`data` 是作为请求主体被发送的数据，只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n必须是以下类型之一：\n- string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n- 浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]\n- Node 专属： Stream\n例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：\n**【POST】   /dce-admin/depart**\n**(Parameters)  depart[required]  body**\n那么前端的请求方法声明和调用方法就应该如下：\n```\naddDepart = data => this.post('/dce-admin/depart', data)\nDepartApi.addDepart(this.formValidate)\n```\n当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变\n4.跨域等问题的处理\n跨域原因：\n浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据\n解决方案（在axios请求配置中加入如下配置）：\n```\n// 'proxy' 定义代理服务器的主机名称和端口\n// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n```","slug":"axios","published":1,"updated":"2019-04-21T08:04:47.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwl000thkuzap4wyrqq","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作<br>参考网址：<a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">axios</a></p>\n<h2 id=\"2-实践要点分析\"><a href=\"#2-实践要点分析\" class=\"headerlink\" title=\"2.实践要点分析\"></a>2.实践要点分析</h2><p>1.get请求直接拼接动态数据<br>get请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）<br>例如在Swagger UI上看到的形式为：<br><strong>【GET】   /resourceApply/get/{id}</strong><br><strong>(Parameters)  id[required]  string</strong><br>那么前端的请求方法声明就应该如下（即：将参数直接拼接）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDepartById = id =&gt; this.get(`/resourceApply/get/$&#123;id&#125;`)</span><br></pre></td></tr></table></figure></p>\n<p>对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DepartApi.getDepartById(rowId)</span><br></pre></td></tr></table></figure></p>\n<p>2.get等请求params参数形式<br>params参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中<br>例如在Swagger UI上看到的get请求形式为：<br><strong>【GET】   /role/findPermsByRoleId</strong><br><strong>(Parameters)  roleId[required]  string</strong><br>那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (params) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, params)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(&#123;roleId: this.$route.param.id&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId: roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>post请求也是可以有params参数的(data可以默认为{}，来占位)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subAudit = (data, params) =&gt; this.post(&apos;/dce-res/resourceDB/subAudit&apos;, data, params)</span><br><span class=\"line\">DbRegisterApi.subAudit(&#123;&#125;, &#123; resourceDBId: params.row.id &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3.post等请求data参数形式<br><code>data</code> 是作为请求主体被发送的数据，只适用于这些请求方法 ‘PUT’, ‘POST’, 和 ‘PATCH’<br>必须是以下类型之一：</p>\n<ul>\n<li>string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</li>\n<li>浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]</li>\n<li>Node 专属： Stream<br>例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：<br><strong>【POST】   /dce-admin/depart</strong><br><strong>(Parameters)  depart[required]  body</strong><br>那么前端的请求方法声明和调用方法就应该如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addDepart = data =&gt; this.post(&apos;/dce-admin/depart&apos;, data)</span><br><span class=\"line\">DepartApi.addDepart(this.formValidate)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变<br>4.跨域等问题的处理<br>跨域原因：<br>浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据<br>解决方案（在axios请求配置中加入如下配置）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &apos;proxy&apos; 定义代理服务器的主机名称和端口</span><br><span class=\"line\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class=\"line\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">    port: 9000,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: &apos;mikeymike&apos;,</span><br><span class=\"line\">      password: &apos;rapunz3l&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作<br>参考网址：<a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">axios</a></p>\n<h2 id=\"2-实践要点分析\"><a href=\"#2-实践要点分析\" class=\"headerlink\" title=\"2.实践要点分析\"></a>2.实践要点分析</h2><p>1.get请求直接拼接动态数据<br>get请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）<br>例如在Swagger UI上看到的形式为：<br><strong>【GET】   /resourceApply/get/{id}</strong><br><strong>(Parameters)  id[required]  string</strong><br>那么前端的请求方法声明就应该如下（即：将参数直接拼接）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDepartById = id =&gt; this.get(`/resourceApply/get/$&#123;id&#125;`)</span><br></pre></td></tr></table></figure></p>\n<p>对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DepartApi.getDepartById(rowId)</span><br></pre></td></tr></table></figure></p>\n<p>2.get等请求params参数形式<br>params参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中<br>例如在Swagger UI上看到的get请求形式为：<br><strong>【GET】   /role/findPermsByRoleId</strong><br><strong>(Parameters)  roleId[required]  string</strong><br>那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (params) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, params)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(&#123;roleId: this.$route.param.id&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId: roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>post请求也是可以有params参数的(data可以默认为{}，来占位)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subAudit = (data, params) =&gt; this.post(&apos;/dce-res/resourceDB/subAudit&apos;, data, params)</span><br><span class=\"line\">DbRegisterApi.subAudit(&#123;&#125;, &#123; resourceDBId: params.row.id &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3.post等请求data参数形式<br><code>data</code> 是作为请求主体被发送的数据，只适用于这些请求方法 ‘PUT’, ‘POST’, 和 ‘PATCH’<br>必须是以下类型之一：</p>\n<ul>\n<li>string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</li>\n<li>浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]</li>\n<li>Node 专属： Stream<br>例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：<br><strong>【POST】   /dce-admin/depart</strong><br><strong>(Parameters)  depart[required]  body</strong><br>那么前端的请求方法声明和调用方法就应该如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addDepart = data =&gt; this.post(&apos;/dce-admin/depart&apos;, data)</span><br><span class=\"line\">DepartApi.addDepart(this.formValidate)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变<br>4.跨域等问题的处理<br>跨域原因：<br>浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据<br>解决方案（在axios请求配置中加入如下配置）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &apos;proxy&apos; 定义代理服务器的主机名称和端口</span><br><span class=\"line\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class=\"line\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">    port: 9000,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: &apos;mikeymike&apos;,</span><br><span class=\"line\">      password: &apos;rapunz3l&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n"},{"title":"color","date":"2019-03-26T04:32:40.000Z","_content":"## 1.文档目的\n收集整理常用样式,便于通用配置出简约大气的页面\n参考网址:\n[Flat UI 色表](https://flatuicolors.com/palette/defo),[香港地铁色](https://metrocolor.live/index.html),[经验配色法则](https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers)\n\n## 2.内容梳理\n基于ES6语法配置常用颜色值如下:\n```\nexport const Colors = {\n  <!-- Flat UI 色表 -->\n  Turquoise:'#1abc9c',\n  GreenSea: '#16a085'\n  Emerald: '#2ecc71'\n  Nephritis: '#27ae60'\n  PeterRiver: '#3498db'\n  BelizeHole: '#2980b9'\n  Amethyst: '#9b59b6'\n  Wisteria: '#8e44ad'\n  WetAsphalt: '#34495e'\n  MidnightBlue: '#2c3e50'\n  SunFlower: '#f1c40f'\n  Orange: '#f39c12'\n  Carrot: '#e67e22'\n  Pumpkin: '#d35400'\n  Alizarin: '#e74c3c'\n  Pomegranate: '#c0392b'\n  Clouds: '#ecf0f1'\n  Silver: '#bdc3c7'\n  Concrete: '#95a5a6'\n  Asbestos: '#7f8c8d'\n  <!-- 经验配色法则 -->\n  <!-- 主题深:cf69 -->\n  Purple: '#9966ff'\n  DarkBlue: '#6666ff'\n  Green:'#66ff99'\n  LightBlue: '#6699ff'\n  <!-- 主题浅:cf69 -->\n  Yellow: '#ffff66'\n  LightOrange: '#ffcc66'\n  DarkOrange: '#ff9966'\n  Red: '#ff6666'\n  <!-- 主题灰:abcdef -->\n  GrayBlue: '#abcdef'\n  GrayGreen: '#bedcaf'\n  GrayEmerald: '#cafedb'\n  GrayPurple: '#decafb'\n  <!-- 文字黑: 分级标题 -->\n  DarkerBlack: '#1a2a3a'\n  DarkBlack: '#2a3a4a'\n  Black: '#333333'\n  LightBlack: '#3a4a5a'\n  LighterBlack: '#4a5a6a'\n  <!-- 图层灰:背景, 列表项 -->\n  DarkerGray: '#aaaaaa'\n  DarkGray: '#bbbbbb'\n  Gray: '#cccccc'\n  LightGray: '#dddddd'\n  LighterGray: '#eeeeee'\n}\n\n```\n","source":"_posts/2019-03-26-theme.md","raw":"---\ntitle: color\ndate: 2019-03-26 12:32:40\ntags: css\n---\n## 1.文档目的\n收集整理常用样式,便于通用配置出简约大气的页面\n参考网址:\n[Flat UI 色表](https://flatuicolors.com/palette/defo),[香港地铁色](https://metrocolor.live/index.html),[经验配色法则](https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers)\n\n## 2.内容梳理\n基于ES6语法配置常用颜色值如下:\n```\nexport const Colors = {\n  <!-- Flat UI 色表 -->\n  Turquoise:'#1abc9c',\n  GreenSea: '#16a085'\n  Emerald: '#2ecc71'\n  Nephritis: '#27ae60'\n  PeterRiver: '#3498db'\n  BelizeHole: '#2980b9'\n  Amethyst: '#9b59b6'\n  Wisteria: '#8e44ad'\n  WetAsphalt: '#34495e'\n  MidnightBlue: '#2c3e50'\n  SunFlower: '#f1c40f'\n  Orange: '#f39c12'\n  Carrot: '#e67e22'\n  Pumpkin: '#d35400'\n  Alizarin: '#e74c3c'\n  Pomegranate: '#c0392b'\n  Clouds: '#ecf0f1'\n  Silver: '#bdc3c7'\n  Concrete: '#95a5a6'\n  Asbestos: '#7f8c8d'\n  <!-- 经验配色法则 -->\n  <!-- 主题深:cf69 -->\n  Purple: '#9966ff'\n  DarkBlue: '#6666ff'\n  Green:'#66ff99'\n  LightBlue: '#6699ff'\n  <!-- 主题浅:cf69 -->\n  Yellow: '#ffff66'\n  LightOrange: '#ffcc66'\n  DarkOrange: '#ff9966'\n  Red: '#ff6666'\n  <!-- 主题灰:abcdef -->\n  GrayBlue: '#abcdef'\n  GrayGreen: '#bedcaf'\n  GrayEmerald: '#cafedb'\n  GrayPurple: '#decafb'\n  <!-- 文字黑: 分级标题 -->\n  DarkerBlack: '#1a2a3a'\n  DarkBlack: '#2a3a4a'\n  Black: '#333333'\n  LightBlack: '#3a4a5a'\n  LighterBlack: '#4a5a6a'\n  <!-- 图层灰:背景, 列表项 -->\n  DarkerGray: '#aaaaaa'\n  DarkGray: '#bbbbbb'\n  Gray: '#cccccc'\n  LightGray: '#dddddd'\n  LighterGray: '#eeeeee'\n}\n\n```\n","slug":"theme","published":1,"updated":"2019-04-21T08:09:49.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwm000vhkuzmdw6dr2h","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>收集整理常用样式,便于通用配置出简约大气的页面<br>参考网址:<br><a href=\"https://flatuicolors.com/palette/defo\" target=\"_blank\" rel=\"noopener\">Flat UI 色表</a>,<a href=\"https://metrocolor.live/index.html\" target=\"_blank\" rel=\"noopener\">香港地铁色</a>,<a href=\"https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers\" target=\"_blank\" rel=\"noopener\">经验配色法则</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>基于ES6语法配置常用颜色值如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const Colors = &#123;</span><br><span class=\"line\">  &lt;!-- Flat UI 色表 --&gt;</span><br><span class=\"line\">  Turquoise:&apos;#1abc9c&apos;,</span><br><span class=\"line\">  GreenSea: &apos;#16a085&apos;</span><br><span class=\"line\">  Emerald: &apos;#2ecc71&apos;</span><br><span class=\"line\">  Nephritis: &apos;#27ae60&apos;</span><br><span class=\"line\">  PeterRiver: &apos;#3498db&apos;</span><br><span class=\"line\">  BelizeHole: &apos;#2980b9&apos;</span><br><span class=\"line\">  Amethyst: &apos;#9b59b6&apos;</span><br><span class=\"line\">  Wisteria: &apos;#8e44ad&apos;</span><br><span class=\"line\">  WetAsphalt: &apos;#34495e&apos;</span><br><span class=\"line\">  MidnightBlue: &apos;#2c3e50&apos;</span><br><span class=\"line\">  SunFlower: &apos;#f1c40f&apos;</span><br><span class=\"line\">  Orange: &apos;#f39c12&apos;</span><br><span class=\"line\">  Carrot: &apos;#e67e22&apos;</span><br><span class=\"line\">  Pumpkin: &apos;#d35400&apos;</span><br><span class=\"line\">  Alizarin: &apos;#e74c3c&apos;</span><br><span class=\"line\">  Pomegranate: &apos;#c0392b&apos;</span><br><span class=\"line\">  Clouds: &apos;#ecf0f1&apos;</span><br><span class=\"line\">  Silver: &apos;#bdc3c7&apos;</span><br><span class=\"line\">  Concrete: &apos;#95a5a6&apos;</span><br><span class=\"line\">  Asbestos: &apos;#7f8c8d&apos;</span><br><span class=\"line\">  &lt;!-- 经验配色法则 --&gt;</span><br><span class=\"line\">  &lt;!-- 主题深:cf69 --&gt;</span><br><span class=\"line\">  Purple: &apos;#9966ff&apos;</span><br><span class=\"line\">  DarkBlue: &apos;#6666ff&apos;</span><br><span class=\"line\">  Green:&apos;#66ff99&apos;</span><br><span class=\"line\">  LightBlue: &apos;#6699ff&apos;</span><br><span class=\"line\">  &lt;!-- 主题浅:cf69 --&gt;</span><br><span class=\"line\">  Yellow: &apos;#ffff66&apos;</span><br><span class=\"line\">  LightOrange: &apos;#ffcc66&apos;</span><br><span class=\"line\">  DarkOrange: &apos;#ff9966&apos;</span><br><span class=\"line\">  Red: &apos;#ff6666&apos;</span><br><span class=\"line\">  &lt;!-- 主题灰:abcdef --&gt;</span><br><span class=\"line\">  GrayBlue: &apos;#abcdef&apos;</span><br><span class=\"line\">  GrayGreen: &apos;#bedcaf&apos;</span><br><span class=\"line\">  GrayEmerald: &apos;#cafedb&apos;</span><br><span class=\"line\">  GrayPurple: &apos;#decafb&apos;</span><br><span class=\"line\">  &lt;!-- 文字黑: 分级标题 --&gt;</span><br><span class=\"line\">  DarkerBlack: &apos;#1a2a3a&apos;</span><br><span class=\"line\">  DarkBlack: &apos;#2a3a4a&apos;</span><br><span class=\"line\">  Black: &apos;#333333&apos;</span><br><span class=\"line\">  LightBlack: &apos;#3a4a5a&apos;</span><br><span class=\"line\">  LighterBlack: &apos;#4a5a6a&apos;</span><br><span class=\"line\">  &lt;!-- 图层灰:背景, 列表项 --&gt;</span><br><span class=\"line\">  DarkerGray: &apos;#aaaaaa&apos;</span><br><span class=\"line\">  DarkGray: &apos;#bbbbbb&apos;</span><br><span class=\"line\">  Gray: &apos;#cccccc&apos;</span><br><span class=\"line\">  LightGray: &apos;#dddddd&apos;</span><br><span class=\"line\">  LighterGray: &apos;#eeeeee&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>收集整理常用样式,便于通用配置出简约大气的页面<br>参考网址:<br><a href=\"https://flatuicolors.com/palette/defo\" target=\"_blank\" rel=\"noopener\">Flat UI 色表</a>,<a href=\"https://metrocolor.live/index.html\" target=\"_blank\" rel=\"noopener\">香港地铁色</a>,<a href=\"https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers\" target=\"_blank\" rel=\"noopener\">经验配色法则</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>基于ES6语法配置常用颜色值如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const Colors = &#123;</span><br><span class=\"line\">  &lt;!-- Flat UI 色表 --&gt;</span><br><span class=\"line\">  Turquoise:&apos;#1abc9c&apos;,</span><br><span class=\"line\">  GreenSea: &apos;#16a085&apos;</span><br><span class=\"line\">  Emerald: &apos;#2ecc71&apos;</span><br><span class=\"line\">  Nephritis: &apos;#27ae60&apos;</span><br><span class=\"line\">  PeterRiver: &apos;#3498db&apos;</span><br><span class=\"line\">  BelizeHole: &apos;#2980b9&apos;</span><br><span class=\"line\">  Amethyst: &apos;#9b59b6&apos;</span><br><span class=\"line\">  Wisteria: &apos;#8e44ad&apos;</span><br><span class=\"line\">  WetAsphalt: &apos;#34495e&apos;</span><br><span class=\"line\">  MidnightBlue: &apos;#2c3e50&apos;</span><br><span class=\"line\">  SunFlower: &apos;#f1c40f&apos;</span><br><span class=\"line\">  Orange: &apos;#f39c12&apos;</span><br><span class=\"line\">  Carrot: &apos;#e67e22&apos;</span><br><span class=\"line\">  Pumpkin: &apos;#d35400&apos;</span><br><span class=\"line\">  Alizarin: &apos;#e74c3c&apos;</span><br><span class=\"line\">  Pomegranate: &apos;#c0392b&apos;</span><br><span class=\"line\">  Clouds: &apos;#ecf0f1&apos;</span><br><span class=\"line\">  Silver: &apos;#bdc3c7&apos;</span><br><span class=\"line\">  Concrete: &apos;#95a5a6&apos;</span><br><span class=\"line\">  Asbestos: &apos;#7f8c8d&apos;</span><br><span class=\"line\">  &lt;!-- 经验配色法则 --&gt;</span><br><span class=\"line\">  &lt;!-- 主题深:cf69 --&gt;</span><br><span class=\"line\">  Purple: &apos;#9966ff&apos;</span><br><span class=\"line\">  DarkBlue: &apos;#6666ff&apos;</span><br><span class=\"line\">  Green:&apos;#66ff99&apos;</span><br><span class=\"line\">  LightBlue: &apos;#6699ff&apos;</span><br><span class=\"line\">  &lt;!-- 主题浅:cf69 --&gt;</span><br><span class=\"line\">  Yellow: &apos;#ffff66&apos;</span><br><span class=\"line\">  LightOrange: &apos;#ffcc66&apos;</span><br><span class=\"line\">  DarkOrange: &apos;#ff9966&apos;</span><br><span class=\"line\">  Red: &apos;#ff6666&apos;</span><br><span class=\"line\">  &lt;!-- 主题灰:abcdef --&gt;</span><br><span class=\"line\">  GrayBlue: &apos;#abcdef&apos;</span><br><span class=\"line\">  GrayGreen: &apos;#bedcaf&apos;</span><br><span class=\"line\">  GrayEmerald: &apos;#cafedb&apos;</span><br><span class=\"line\">  GrayPurple: &apos;#decafb&apos;</span><br><span class=\"line\">  &lt;!-- 文字黑: 分级标题 --&gt;</span><br><span class=\"line\">  DarkerBlack: &apos;#1a2a3a&apos;</span><br><span class=\"line\">  DarkBlack: &apos;#2a3a4a&apos;</span><br><span class=\"line\">  Black: &apos;#333333&apos;</span><br><span class=\"line\">  LightBlack: &apos;#3a4a5a&apos;</span><br><span class=\"line\">  LighterBlack: &apos;#4a5a6a&apos;</span><br><span class=\"line\">  &lt;!-- 图层灰:背景, 列表项 --&gt;</span><br><span class=\"line\">  DarkerGray: &apos;#aaaaaa&apos;</span><br><span class=\"line\">  DarkGray: &apos;#bbbbbb&apos;</span><br><span class=\"line\">  Gray: &apos;#cccccc&apos;</span><br><span class=\"line\">  LightGray: &apos;#dddddd&apos;</span><br><span class=\"line\">  LighterGray: &apos;#eeeeee&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"React+Redux模式","date":"2018-12-25T22:15:26.000Z","_content":"## 1.文档目的\n学习并理解React+Redux模式\n参考网址：[慕课网:在React中使用Redux数据流](https://www.imooc.com/learn/744)\n## 2.概念笔记\n1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），\n需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）\n2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，\n实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state\n","source":"_posts/2018-12-26-react1.md","raw":"---\ntitle: React+Redux模式\ndate: 2018-12-26 06:15:26\ntags: React\n---\n## 1.文档目的\n学习并理解React+Redux模式\n参考网址：[慕课网:在React中使用Redux数据流](https://www.imooc.com/learn/744)\n## 2.概念笔记\n1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），\n需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）\n2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，\n实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state\n","slug":"react1","published":1,"updated":"2019-02-02T04:35:57.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwo000xhkuz4nwqwl9n","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>学习并理解React+Redux模式<br>参考网址：<a href=\"https://www.imooc.com/learn/744\" target=\"_blank\" rel=\"noopener\">慕课网:在React中使用Redux数据流</a></p>\n<h2 id=\"2-概念笔记\"><a href=\"#2-概念笔记\" class=\"headerlink\" title=\"2.概念笔记\"></a>2.概念笔记</h2><p>1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），<br>需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）<br>2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，<br>实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>学习并理解React+Redux模式<br>参考网址：<a href=\"https://www.imooc.com/learn/744\" target=\"_blank\" rel=\"noopener\">慕课网:在React中使用Redux数据流</a></p>\n<h2 id=\"2-概念笔记\"><a href=\"#2-概念笔记\" class=\"headerlink\" title=\"2.概念笔记\"></a>2.概念笔记</h2><p>1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），<br>需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）<br>2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，<br>实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state</p>\n"},{"title":"serve静态资源服务器","date":"2019-03-14T04:36:57.000Z","_content":"## 1.文档目的\n前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用\n\n## 2.内容梳理\n全局安装\n```\nyarn global add serve\n```\n查看版本信息\n```\nserve --version\n```\n进入需要开启服务的文件夹,启动服务\n```\nserve .\n```","source":"_posts/2019-03-14-serve.md","raw":"---\ntitle: serve静态资源服务器\ndate: 2019-03-14 12:36:57\ntags: Serve\n---\n## 1.文档目的\n前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用\n\n## 2.内容梳理\n全局安装\n```\nyarn global add serve\n```\n查看版本信息\n```\nserve --version\n```\n进入需要开启服务的文件夹,启动服务\n```\nserve .\n```","slug":"serve","published":1,"updated":"2019-04-21T08:04:47.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwr000zhkuzw9xvz284","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add serve</span><br></pre></td></tr></table></figure></p>\n<p>查看版本信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve --version</span><br></pre></td></tr></table></figure></p>\n<p>进入需要开启服务的文件夹,启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve .</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add serve</span><br></pre></td></tr></table></figure></p>\n<p>查看版本信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve --version</span><br></pre></td></tr></table></figure></p>\n<p>进入需要开启服务的文件夹,启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve .</span><br></pre></td></tr></table></figure></p>\n"},{"title":"基于React Native的热更新","date":"2019-03-15T04:56:32.000Z","_content":"## 1.文档目的\n基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法\n参考网址: [react-native-code-push常用命令](https://www.jianshu.com/p/8f7ae770a5ac)\n\n## 2.发布热更新等常用命令\n查看服务器app部署情况\n```\ncode-push app list\n```\n查看发布信息\n```\ncode-push deployment ls Rasog-android -k\n```\n发布命令\n```\ncode-push release-react Rasog-android android --t 1.0.0 --d Staging --des \"1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除\" --m true\n```\n其他常用命令\n\n- `code-push app add` 在账号里面添加一个新的app\n- `code-push app remove` 或者 rm 在账号里移除一个app\n- `code-push app rename` 重命名一个存在app\n- `code-push app list` 或则 ls 列出账号下面的所有app\n- `code-push app transfer` 把app的所有权转移到另外一个账号\n- code-push app ls 查看已注册的应用\n- code-push deployment ls appName -k  查看应用key\n- code-push login 登陆 \n- code-push loout 注销\n- code-push access-key ls 列出登陆的token\n- code-push access-key rm <accessKye> 删除某个 access-key\n- code-push app add <appName> <platform> react-native  在账号里面添加一个新的app\n- code-push app remove 或者 rm 在账号里移除一个 app\n- code-push app rename 重命名一个存在 app\n- code-push app list 或则 ls 列出账号下面的所有 app\n- code-push app transfer 把app的所有权转移到另外一个账号\n- code-push deployment add <appName> 部署\n- code-push deployment rm <appName> 删除部署\n- code-push deployment rename <appName> 重命名\n- code-push deployment ls <appName> 列出应用的部署情况\n- code-push deployment ls <appName> -k 查看部署的key\n- code-push deployment history <appName> <deploymentName> 查看历史版本\n## 3.配置本地部署\n1. 登录本地服务\n\n   > `code-push login http://61.185.20.20:2312/ ` （公网地址）、\n   >\n   > 会自动打开浏览器  登录后 点击获取token，\n   >\n   > 在 `Enter your token from the browser:` 输入 获取的token\n   >\n   > `Successfully logged-in. Your session file was written to /Users/xxxx/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session. `\n\n2. 本地私有化部署方案参考：`https://www.cnblogs.com/shuoer/p/9581886.html`\n\n3. 在`CodePush`服务器注册app，为了让CodePush服务器知道你的app，我们需要向它注册app：\n\n   在终端输入`code-push app add <appName>`即可完成注册；私有化服务器要求的参数更多`code-push app add <appName> <os> <platform>`，并且`appName`要加`-android`或者`-ios`结尾，然后是平台，最后加上是`react-native`或者`Cordova`，因为`code-push`支持这两种应用,例如:\n\n   ```bash\n   code-push app add Rasog-android android react-native\n   ```\n\n   成功后：\n\n   ```bash\n   Successfully added the \"Rasog-android\" app, along with the following default deployments:\n   ┌────────────┬───────────────────────────────────────┐\n   │ Name       │ Deployment Key                        │\n   ├────────────┼───────────────────────────────────────┤\n   │ Production │ 4ZfN5udhhOftT2ND95gHZr98nmyA4ksvOXqog │\n   ├────────────┼───────────────────────────────────────┤\n   │ Staging    │ ZymGYYCM6PMwHlwDWef9zCXu8LbC4ksvOXqog │\n   └────────────┴───────────────────────────────────────┘\n   ```\n\n   \n\n4. 注册完成之后会返回一套`deployment key`，分为生成环境`Production`和`Staging`，该`key`在后面客户端集成sdk中会用到。\n\n### 集成CodePush SDK (for Android)\n\n1. 在项目中安装` react-native-code-push`插件\n\n   ```bash\n   yarn add react-native-code-push\n   react-native link react-native-code-push\n   ```\n\n   > 在终端运行此命令之后，终端会提示让你输入`deployment key`，这是你只需将你的`deployment Staging key`输入进去即可\n\n2. Link 完成后会自动添加一些代码。因为服务是私有部署，需要修改 更新地址。修改`android/app/src/main/java/MainApplication.java`文件\n\n   ```bash\n   @Override\n       protected List<ReactPackage> getPackages() {\n         return Arrays.<ReactPackage>asList(\n             new MainReactPackage(),\n               new CodePush(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey), getApplicationContext(), BuildConfig.DEBUG,\"http://61.185.20.20:2312\"),\n               .....\n         );\n       }\n   ```\n\n   在`new CodePush()`最后添加一个参数就是本地服务的地址。\n\n3. 修改rn工程的 入口文件。\n\n   ```javascript\n   // 导入code-push\n   import CodePush from 'react-native-code-push'\n   \n   const codePushOptions = { checkFrequency: CodePush.CheckFrequency.ON_APP_RESUME }\n   \n   // CodePush 是一个高阶组件  还包含一些方法。\n   // sync\n   componentDidMount () {\n       this._updateApp()\n       AppState.addEventListener('change', newState => {\n         newState === 'active' && this._updateApp()\n       })\n     }\n   \n     // code-push 热更新\n     _updateApp = () => {\n       CodePush.sync({\n         installMode: CodePush.InstallMode.IMMEDIATE, // 启动模式三种：ON_NEXT_RESUME、ON_NEXT_RESTART、IMMEDIATE\n         updateDialog: {\n           appendReleaseDescription: true, // 是否显示更新description，默认为false\n           descriptionPrefix: '更新内容：\\n', // 更新说明的前缀。 默认是” Description:\n           mandatoryContinueButtonLabel: '立即更新', // 强制更新的按钮文字，默认为continue\n           mandatoryUpdateMessage: '', // - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.\n           optionalIgnoreButtonLabel: '稍后', // 非强制更新时，取消按钮文字,默认是ignore\n           optionalInstallButtonLabel: '更新', // 非强制更新时，确认文字. Defaults to “Install”\n           optionalUpdateMessage: '有新版本了，是否更新？\\n', // 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.\n           title: '更新提示' // 要显示的更新通知的标题. Defaults to “Update available”.\n         }\n       })\n     }\n   \n   //最后导出组件时，需要被CodePush包裹\n   export default CodePush(codePushOptions)(App)\n   ```\n\n至此就完成了 code-push for android 的配置。\n\n```bash\ncode-push release-react MyAppAndroid android --t 1.0.0 --dev false --d Production --des \"更新测试\" --m true\n```\n","source":"_posts/2019-03-15-code-push.md","raw":"---\ntitle: 基于React Native的热更新\ndate: 2019-03-15 12:56:32\ntags: React\n---\n## 1.文档目的\n基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法\n参考网址: [react-native-code-push常用命令](https://www.jianshu.com/p/8f7ae770a5ac)\n\n## 2.发布热更新等常用命令\n查看服务器app部署情况\n```\ncode-push app list\n```\n查看发布信息\n```\ncode-push deployment ls Rasog-android -k\n```\n发布命令\n```\ncode-push release-react Rasog-android android --t 1.0.0 --d Staging --des \"1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除\" --m true\n```\n其他常用命令\n\n- `code-push app add` 在账号里面添加一个新的app\n- `code-push app remove` 或者 rm 在账号里移除一个app\n- `code-push app rename` 重命名一个存在app\n- `code-push app list` 或则 ls 列出账号下面的所有app\n- `code-push app transfer` 把app的所有权转移到另外一个账号\n- code-push app ls 查看已注册的应用\n- code-push deployment ls appName -k  查看应用key\n- code-push login 登陆 \n- code-push loout 注销\n- code-push access-key ls 列出登陆的token\n- code-push access-key rm <accessKye> 删除某个 access-key\n- code-push app add <appName> <platform> react-native  在账号里面添加一个新的app\n- code-push app remove 或者 rm 在账号里移除一个 app\n- code-push app rename 重命名一个存在 app\n- code-push app list 或则 ls 列出账号下面的所有 app\n- code-push app transfer 把app的所有权转移到另外一个账号\n- code-push deployment add <appName> 部署\n- code-push deployment rm <appName> 删除部署\n- code-push deployment rename <appName> 重命名\n- code-push deployment ls <appName> 列出应用的部署情况\n- code-push deployment ls <appName> -k 查看部署的key\n- code-push deployment history <appName> <deploymentName> 查看历史版本\n## 3.配置本地部署\n1. 登录本地服务\n\n   > `code-push login http://61.185.20.20:2312/ ` （公网地址）、\n   >\n   > 会自动打开浏览器  登录后 点击获取token，\n   >\n   > 在 `Enter your token from the browser:` 输入 获取的token\n   >\n   > `Successfully logged-in. Your session file was written to /Users/xxxx/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session. `\n\n2. 本地私有化部署方案参考：`https://www.cnblogs.com/shuoer/p/9581886.html`\n\n3. 在`CodePush`服务器注册app，为了让CodePush服务器知道你的app，我们需要向它注册app：\n\n   在终端输入`code-push app add <appName>`即可完成注册；私有化服务器要求的参数更多`code-push app add <appName> <os> <platform>`，并且`appName`要加`-android`或者`-ios`结尾，然后是平台，最后加上是`react-native`或者`Cordova`，因为`code-push`支持这两种应用,例如:\n\n   ```bash\n   code-push app add Rasog-android android react-native\n   ```\n\n   成功后：\n\n   ```bash\n   Successfully added the \"Rasog-android\" app, along with the following default deployments:\n   ┌────────────┬───────────────────────────────────────┐\n   │ Name       │ Deployment Key                        │\n   ├────────────┼───────────────────────────────────────┤\n   │ Production │ 4ZfN5udhhOftT2ND95gHZr98nmyA4ksvOXqog │\n   ├────────────┼───────────────────────────────────────┤\n   │ Staging    │ ZymGYYCM6PMwHlwDWef9zCXu8LbC4ksvOXqog │\n   └────────────┴───────────────────────────────────────┘\n   ```\n\n   \n\n4. 注册完成之后会返回一套`deployment key`，分为生成环境`Production`和`Staging`，该`key`在后面客户端集成sdk中会用到。\n\n### 集成CodePush SDK (for Android)\n\n1. 在项目中安装` react-native-code-push`插件\n\n   ```bash\n   yarn add react-native-code-push\n   react-native link react-native-code-push\n   ```\n\n   > 在终端运行此命令之后，终端会提示让你输入`deployment key`，这是你只需将你的`deployment Staging key`输入进去即可\n\n2. Link 完成后会自动添加一些代码。因为服务是私有部署，需要修改 更新地址。修改`android/app/src/main/java/MainApplication.java`文件\n\n   ```bash\n   @Override\n       protected List<ReactPackage> getPackages() {\n         return Arrays.<ReactPackage>asList(\n             new MainReactPackage(),\n               new CodePush(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey), getApplicationContext(), BuildConfig.DEBUG,\"http://61.185.20.20:2312\"),\n               .....\n         );\n       }\n   ```\n\n   在`new CodePush()`最后添加一个参数就是本地服务的地址。\n\n3. 修改rn工程的 入口文件。\n\n   ```javascript\n   // 导入code-push\n   import CodePush from 'react-native-code-push'\n   \n   const codePushOptions = { checkFrequency: CodePush.CheckFrequency.ON_APP_RESUME }\n   \n   // CodePush 是一个高阶组件  还包含一些方法。\n   // sync\n   componentDidMount () {\n       this._updateApp()\n       AppState.addEventListener('change', newState => {\n         newState === 'active' && this._updateApp()\n       })\n     }\n   \n     // code-push 热更新\n     _updateApp = () => {\n       CodePush.sync({\n         installMode: CodePush.InstallMode.IMMEDIATE, // 启动模式三种：ON_NEXT_RESUME、ON_NEXT_RESTART、IMMEDIATE\n         updateDialog: {\n           appendReleaseDescription: true, // 是否显示更新description，默认为false\n           descriptionPrefix: '更新内容：\\n', // 更新说明的前缀。 默认是” Description:\n           mandatoryContinueButtonLabel: '立即更新', // 强制更新的按钮文字，默认为continue\n           mandatoryUpdateMessage: '', // - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.\n           optionalIgnoreButtonLabel: '稍后', // 非强制更新时，取消按钮文字,默认是ignore\n           optionalInstallButtonLabel: '更新', // 非强制更新时，确认文字. Defaults to “Install”\n           optionalUpdateMessage: '有新版本了，是否更新？\\n', // 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.\n           title: '更新提示' // 要显示的更新通知的标题. Defaults to “Update available”.\n         }\n       })\n     }\n   \n   //最后导出组件时，需要被CodePush包裹\n   export default CodePush(codePushOptions)(App)\n   ```\n\n至此就完成了 code-push for android 的配置。\n\n```bash\ncode-push release-react MyAppAndroid android --t 1.0.0 --dev false --d Production --des \"更新测试\" --m true\n```\n","slug":"code-push","published":1,"updated":"2019-04-21T08:04:47.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwt0011hkuzunsrmue9","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法<br>参考网址: <a href=\"https://www.jianshu.com/p/8f7ae770a5ac\" target=\"_blank\" rel=\"noopener\">react-native-code-push常用命令</a></p>\n<h2 id=\"2-发布热更新等常用命令\"><a href=\"#2-发布热更新等常用命令\" class=\"headerlink\" title=\"2.发布热更新等常用命令\"></a>2.发布热更新等常用命令</h2><p>查看服务器app部署情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app list</span><br></pre></td></tr></table></figure></p>\n<p>查看发布信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push deployment ls Rasog-android -k</span><br></pre></td></tr></table></figure></p>\n<p>发布命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react Rasog-android android --t 1.0.0 --d Staging --des &quot;1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除&quot; --m true</span><br></pre></td></tr></table></figure></p>\n<p>其他常用命令</p>\n<ul>\n<li><code>code-push app add</code> 在账号里面添加一个新的app</li>\n<li><code>code-push app remove</code> 或者 rm 在账号里移除一个app</li>\n<li><code>code-push app rename</code> 重命名一个存在app</li>\n<li><code>code-push app list</code> 或则 ls 列出账号下面的所有app</li>\n<li><code>code-push app transfer</code> 把app的所有权转移到另外一个账号</li>\n<li>code-push app ls 查看已注册的应用</li>\n<li>code-push deployment ls appName -k  查看应用key</li>\n<li>code-push login 登陆 </li>\n<li>code-push loout 注销</li>\n<li>code-push access-key ls 列出登陆的token</li>\n<li>code-push access-key rm <accesskye> 删除某个 access-key</accesskye></li>\n<li>code-push app add <appname> <platform> react-native  在账号里面添加一个新的app</platform></appname></li>\n<li>code-push app remove 或者 rm 在账号里移除一个 app</li>\n<li>code-push app rename 重命名一个存在 app</li>\n<li>code-push app list 或则 ls 列出账号下面的所有 app</li>\n<li>code-push app transfer 把app的所有权转移到另外一个账号</li>\n<li>code-push deployment add <appname> 部署</appname></li>\n<li>code-push deployment rm <appname> 删除部署</appname></li>\n<li>code-push deployment rename <appname> 重命名</appname></li>\n<li>code-push deployment ls <appname> 列出应用的部署情况</appname></li>\n<li>code-push deployment ls <appname> -k 查看部署的key</appname></li>\n<li>code-push deployment history <appname> <deploymentname> 查看历史版本<h2 id=\"3-配置本地部署\"><a href=\"#3-配置本地部署\" class=\"headerlink\" title=\"3.配置本地部署\"></a>3.配置本地部署</h2></deploymentname></appname></li>\n</ul>\n<ol>\n<li><p>登录本地服务</p>\n<blockquote>\n<p><code>code-push login http://61.185.20.20:2312/</code> （公网地址）、</p>\n<p>会自动打开浏览器  登录后 点击获取token，</p>\n<p>在 <code>Enter your token from the browser:</code> 输入 获取的token</p>\n<p><code>Successfully logged-in. Your session file was written to /Users/xxxx/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session.</code></p>\n</blockquote>\n</li>\n<li><p>本地私有化部署方案参考：<code>https://www.cnblogs.com/shuoer/p/9581886.html</code></p>\n</li>\n<li><p>在<code>CodePush</code>服务器注册app，为了让CodePush服务器知道你的app，我们需要向它注册app：</p>\n<p>在终端输入<code>code-push app add &lt;appName&gt;</code>即可完成注册；私有化服务器要求的参数更多<code>code-push app add &lt;appName&gt; &lt;os&gt; &lt;platform&gt;</code>，并且<code>appName</code>要加<code>-android</code>或者<code>-ios</code>结尾，然后是平台，最后加上是<code>react-native</code>或者<code>Cordova</code>，因为<code>code-push</code>支持这两种应用,例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app add Rasog-android android react-native</span><br></pre></td></tr></table></figure>\n<p>成功后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Successfully added the <span class=\"string\">\"Rasog-android\"</span> app, along with the following default deployments:</span><br><span class=\"line\">┌────────────┬───────────────────────────────────────┐</span><br><span class=\"line\">│ Name       │ Deployment Key                        │</span><br><span class=\"line\">├────────────┼───────────────────────────────────────┤</span><br><span class=\"line\">│ Production │ 4ZfN5udhhOftT2ND95gHZr98nmyA4ksvOXqog │</span><br><span class=\"line\">├────────────┼───────────────────────────────────────┤</span><br><span class=\"line\">│ Staging    │ ZymGYYCM6PMwHlwDWef9zCXu8LbC4ksvOXqog │</span><br><span class=\"line\">└────────────┴───────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li>注册完成之后会返回一套<code>deployment key</code>，分为生成环境<code>Production</code>和<code>Staging</code>，该<code>key</code>在后面客户端集成sdk中会用到。</li>\n</ol>\n<h3 id=\"集成CodePush-SDK-for-Android\"><a href=\"#集成CodePush-SDK-for-Android\" class=\"headerlink\" title=\"集成CodePush SDK (for Android)\"></a>集成CodePush SDK (for Android)</h3><ol>\n<li><p>在项目中安装<code>react-native-code-push</code>插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-code-push</span><br><span class=\"line\">react-native link react-native-code-push</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在终端运行此命令之后，终端会提示让你输入<code>deployment key</code>，这是你只需将你的<code>deployment Staging key</code>输入进去即可</p>\n</blockquote>\n</li>\n<li><p>Link 完成后会自动添加一些代码。因为服务是私有部署，需要修改 更新地址。修改<code>android/app/src/main/java/MainApplication.java</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    protected List&lt;ReactPackage&gt; <span class=\"function\"><span class=\"title\">getPackages</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class=\"line\">          new MainReactPackage(),</span><br><span class=\"line\">            new CodePush(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey), getApplicationContext(), BuildConfig.DEBUG,<span class=\"string\">\"http://61.185.20.20:2312\"</span>),</span><br><span class=\"line\">            .....</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>new CodePush()</code>最后添加一个参数就是本地服务的地址。</p>\n</li>\n<li><p>修改rn工程的 入口文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入code-push</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CodePush <span class=\"keyword\">from</span> <span class=\"string\">'react-native-code-push'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> codePushOptions = &#123; <span class=\"attr\">checkFrequency</span>: CodePush.CheckFrequency.ON_APP_RESUME &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CodePush 是一个高阶组件  还包含一些方法。</span></span><br><span class=\"line\"><span class=\"comment\">// sync</span></span><br><span class=\"line\">componentDidMount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateApp()</span><br><span class=\"line\">    AppState.addEventListener(<span class=\"string\">'change'</span>, newState =&gt; &#123;</span><br><span class=\"line\">      newState === <span class=\"string\">'active'</span> &amp;&amp; <span class=\"keyword\">this</span>._updateApp()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// code-push 热更新</span></span><br><span class=\"line\">  _updateApp = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    CodePush.sync(&#123;</span><br><span class=\"line\">      installMode: CodePush.InstallMode.IMMEDIATE, <span class=\"comment\">// 启动模式三种：ON_NEXT_RESUME、ON_NEXT_RESTART、IMMEDIATE</span></span><br><span class=\"line\">      updateDialog: &#123;</span><br><span class=\"line\">        appendReleaseDescription: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否显示更新description，默认为false</span></span><br><span class=\"line\">        descriptionPrefix: <span class=\"string\">'更新内容：\\n'</span>, <span class=\"comment\">// 更新说明的前缀。 默认是” Description:</span></span><br><span class=\"line\">        mandatoryContinueButtonLabel: <span class=\"string\">'立即更新'</span>, <span class=\"comment\">// 强制更新的按钮文字，默认为continue</span></span><br><span class=\"line\">        mandatoryUpdateMessage: <span class=\"string\">''</span>, <span class=\"comment\">// - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.</span></span><br><span class=\"line\">        optionalIgnoreButtonLabel: <span class=\"string\">'稍后'</span>, <span class=\"comment\">// 非强制更新时，取消按钮文字,默认是ignore</span></span><br><span class=\"line\">        optionalInstallButtonLabel: <span class=\"string\">'更新'</span>, <span class=\"comment\">// 非强制更新时，确认文字. Defaults to “Install”</span></span><br><span class=\"line\">        optionalUpdateMessage: <span class=\"string\">'有新版本了，是否更新？\\n'</span>, <span class=\"comment\">// 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.</span></span><br><span class=\"line\">        title: <span class=\"string\">'更新提示'</span> <span class=\"comment\">// 要显示的更新通知的标题. Defaults to “Update available”.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后导出组件时，需要被CodePush包裹</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> CodePush(codePushOptions)(App)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此就完成了 code-push for android 的配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react MyAppAndroid android --t 1.0.0 --dev <span class=\"literal\">false</span> --d Production --des <span class=\"string\">\"更新测试\"</span> --m <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法<br>参考网址: <a href=\"https://www.jianshu.com/p/8f7ae770a5ac\" target=\"_blank\" rel=\"noopener\">react-native-code-push常用命令</a></p>\n<h2 id=\"2-发布热更新等常用命令\"><a href=\"#2-发布热更新等常用命令\" class=\"headerlink\" title=\"2.发布热更新等常用命令\"></a>2.发布热更新等常用命令</h2><p>查看服务器app部署情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app list</span><br></pre></td></tr></table></figure></p>\n<p>查看发布信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push deployment ls Rasog-android -k</span><br></pre></td></tr></table></figure></p>\n<p>发布命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react Rasog-android android --t 1.0.0 --d Staging --des &quot;1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除&quot; --m true</span><br></pre></td></tr></table></figure></p>\n<p>其他常用命令</p>\n<ul>\n<li><code>code-push app add</code> 在账号里面添加一个新的app</li>\n<li><code>code-push app remove</code> 或者 rm 在账号里移除一个app</li>\n<li><code>code-push app rename</code> 重命名一个存在app</li>\n<li><code>code-push app list</code> 或则 ls 列出账号下面的所有app</li>\n<li><code>code-push app transfer</code> 把app的所有权转移到另外一个账号</li>\n<li>code-push app ls 查看已注册的应用</li>\n<li>code-push deployment ls appName -k  查看应用key</li>\n<li>code-push login 登陆 </li>\n<li>code-push loout 注销</li>\n<li>code-push access-key ls 列出登陆的token</li>\n<li>code-push access-key rm <accesskye> 删除某个 access-key</accesskye></li>\n<li>code-push app add <appname> <platform> react-native  在账号里面添加一个新的app</platform></appname></li>\n<li>code-push app remove 或者 rm 在账号里移除一个 app</li>\n<li>code-push app rename 重命名一个存在 app</li>\n<li>code-push app list 或则 ls 列出账号下面的所有 app</li>\n<li>code-push app transfer 把app的所有权转移到另外一个账号</li>\n<li>code-push deployment add <appname> 部署</appname></li>\n<li>code-push deployment rm <appname> 删除部署</appname></li>\n<li>code-push deployment rename <appname> 重命名</appname></li>\n<li>code-push deployment ls <appname> 列出应用的部署情况</appname></li>\n<li>code-push deployment ls <appname> -k 查看部署的key</appname></li>\n<li>code-push deployment history <appname> <deploymentname> 查看历史版本<h2 id=\"3-配置本地部署\"><a href=\"#3-配置本地部署\" class=\"headerlink\" title=\"3.配置本地部署\"></a>3.配置本地部署</h2></deploymentname></appname></li>\n</ul>\n<ol>\n<li><p>登录本地服务</p>\n<blockquote>\n<p><code>code-push login http://61.185.20.20:2312/</code> （公网地址）、</p>\n<p>会自动打开浏览器  登录后 点击获取token，</p>\n<p>在 <code>Enter your token from the browser:</code> 输入 获取的token</p>\n<p><code>Successfully logged-in. Your session file was written to /Users/xxxx/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session.</code></p>\n</blockquote>\n</li>\n<li><p>本地私有化部署方案参考：<code>https://www.cnblogs.com/shuoer/p/9581886.html</code></p>\n</li>\n<li><p>在<code>CodePush</code>服务器注册app，为了让CodePush服务器知道你的app，我们需要向它注册app：</p>\n<p>在终端输入<code>code-push app add &lt;appName&gt;</code>即可完成注册；私有化服务器要求的参数更多<code>code-push app add &lt;appName&gt; &lt;os&gt; &lt;platform&gt;</code>，并且<code>appName</code>要加<code>-android</code>或者<code>-ios</code>结尾，然后是平台，最后加上是<code>react-native</code>或者<code>Cordova</code>，因为<code>code-push</code>支持这两种应用,例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app add Rasog-android android react-native</span><br></pre></td></tr></table></figure>\n<p>成功后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Successfully added the <span class=\"string\">\"Rasog-android\"</span> app, along with the following default deployments:</span><br><span class=\"line\">┌────────────┬───────────────────────────────────────┐</span><br><span class=\"line\">│ Name       │ Deployment Key                        │</span><br><span class=\"line\">├────────────┼───────────────────────────────────────┤</span><br><span class=\"line\">│ Production │ 4ZfN5udhhOftT2ND95gHZr98nmyA4ksvOXqog │</span><br><span class=\"line\">├────────────┼───────────────────────────────────────┤</span><br><span class=\"line\">│ Staging    │ ZymGYYCM6PMwHlwDWef9zCXu8LbC4ksvOXqog │</span><br><span class=\"line\">└────────────┴───────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li>注册完成之后会返回一套<code>deployment key</code>，分为生成环境<code>Production</code>和<code>Staging</code>，该<code>key</code>在后面客户端集成sdk中会用到。</li>\n</ol>\n<h3 id=\"集成CodePush-SDK-for-Android\"><a href=\"#集成CodePush-SDK-for-Android\" class=\"headerlink\" title=\"集成CodePush SDK (for Android)\"></a>集成CodePush SDK (for Android)</h3><ol>\n<li><p>在项目中安装<code>react-native-code-push</code>插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-code-push</span><br><span class=\"line\">react-native link react-native-code-push</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在终端运行此命令之后，终端会提示让你输入<code>deployment key</code>，这是你只需将你的<code>deployment Staging key</code>输入进去即可</p>\n</blockquote>\n</li>\n<li><p>Link 完成后会自动添加一些代码。因为服务是私有部署，需要修改 更新地址。修改<code>android/app/src/main/java/MainApplication.java</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    protected List&lt;ReactPackage&gt; <span class=\"function\"><span class=\"title\">getPackages</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class=\"line\">          new MainReactPackage(),</span><br><span class=\"line\">            new CodePush(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey), getApplicationContext(), BuildConfig.DEBUG,<span class=\"string\">\"http://61.185.20.20:2312\"</span>),</span><br><span class=\"line\">            .....</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>new CodePush()</code>最后添加一个参数就是本地服务的地址。</p>\n</li>\n<li><p>修改rn工程的 入口文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入code-push</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CodePush <span class=\"keyword\">from</span> <span class=\"string\">'react-native-code-push'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> codePushOptions = &#123; <span class=\"attr\">checkFrequency</span>: CodePush.CheckFrequency.ON_APP_RESUME &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CodePush 是一个高阶组件  还包含一些方法。</span></span><br><span class=\"line\"><span class=\"comment\">// sync</span></span><br><span class=\"line\">componentDidMount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateApp()</span><br><span class=\"line\">    AppState.addEventListener(<span class=\"string\">'change'</span>, newState =&gt; &#123;</span><br><span class=\"line\">      newState === <span class=\"string\">'active'</span> &amp;&amp; <span class=\"keyword\">this</span>._updateApp()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// code-push 热更新</span></span><br><span class=\"line\">  _updateApp = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    CodePush.sync(&#123;</span><br><span class=\"line\">      installMode: CodePush.InstallMode.IMMEDIATE, <span class=\"comment\">// 启动模式三种：ON_NEXT_RESUME、ON_NEXT_RESTART、IMMEDIATE</span></span><br><span class=\"line\">      updateDialog: &#123;</span><br><span class=\"line\">        appendReleaseDescription: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否显示更新description，默认为false</span></span><br><span class=\"line\">        descriptionPrefix: <span class=\"string\">'更新内容：\\n'</span>, <span class=\"comment\">// 更新说明的前缀。 默认是” Description:</span></span><br><span class=\"line\">        mandatoryContinueButtonLabel: <span class=\"string\">'立即更新'</span>, <span class=\"comment\">// 强制更新的按钮文字，默认为continue</span></span><br><span class=\"line\">        mandatoryUpdateMessage: <span class=\"string\">''</span>, <span class=\"comment\">// - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.</span></span><br><span class=\"line\">        optionalIgnoreButtonLabel: <span class=\"string\">'稍后'</span>, <span class=\"comment\">// 非强制更新时，取消按钮文字,默认是ignore</span></span><br><span class=\"line\">        optionalInstallButtonLabel: <span class=\"string\">'更新'</span>, <span class=\"comment\">// 非强制更新时，确认文字. Defaults to “Install”</span></span><br><span class=\"line\">        optionalUpdateMessage: <span class=\"string\">'有新版本了，是否更新？\\n'</span>, <span class=\"comment\">// 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.</span></span><br><span class=\"line\">        title: <span class=\"string\">'更新提示'</span> <span class=\"comment\">// 要显示的更新通知的标题. Defaults to “Update available”.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后导出组件时，需要被CodePush包裹</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> CodePush(codePushOptions)(App)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此就完成了 code-push for android 的配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react MyAppAndroid android --t 1.0.0 --dev <span class=\"literal\">false</span> --d Production --des <span class=\"string\">\"更新测试\"</span> --m <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"echarts","date":"2019-03-27T04:23:39.000Z","_content":"## 1.文档目的\n维护一个简单的图表模板,积累常用参数,便于快速配置图表\n参考网址:[echarts门户网站](https://echarts.baidu.com/)\n\n## 2.内容梳理\n图表基础模板(基于vue):\n```\n<!DOCTYPE html>\n<html lang=\"zh-cmn-Hans\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>chart demo</title>\n    <link rel=\"stylesheet\" href=\"../../styles/mint-ui.css\" />\n    <link rel=\"stylesheet\" href=\"../../styles/global.css\" />\n  </head>\n  <body>\n    <div id=\"chart\" class=\"container\">\n      <!-- chart1 条形图 -->\n      <div ref=\"chart1\" style=\"width: 100%;height:300px;\"></div>\n      <!-- chart2 饼状图 -->\n      <div ref=\"chart2\" style=\"width: 100%; height: 270px;\"></div>\n    </div>\n\n    <script src=\"../../script/vue.min.js\"></script>\n    <script src=\"../../script/axios.min.js\"></script>\n    <script src=\"../../script/echarts.min.js\"></script>\n    <script src=\"../../script/httpRequest.js\"></script>\n    <script src=\"../../script/constants.js\"></script>\n\n    <script>\n      window.onload = () => {\n        document.addEventListener('message', ({ data }) => {\n          const { token, areaId } = JSON.parse(data)\n          if (window.postMessage) {\n            let message = { loadFinish: true }\n            window.postMessage(JSON.stringify(message))\n          }\n        })\n      }\n\n      let indexVue = new Vue({\n        el: '#chart',\n        data() {\n          return {}\n        },\n        methods: {\n          initChart() {\n            // 条形图\n            let chart1 = echarts.init(this.$refs['chart1'])\n            let chartOptions1 = {\n              title: {\n                text: '大国人口',\n                textStyle: { color: '#39a3d5', fontSize: 14 }\n              },\n              color: [\n                '#7199D6',\n                '#DB7D36',\n                '#82AB4E',\n                '#9CABE1',\n                '#F0B885',\n                '#739BD6',\n                '#72C4CC',\n                '#B1A3DE',\n                '#78B0ED',\n                '#E0A1B6',\n                '#F1C026'\n              ],\n               // 对点击时显示的tip就行配置\n               tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b}:{c}'\n              },\n              // 配置图例边距留白距离,是否包含坐标轴刻度\n              grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\n              xAxis: {\n                axisLabel: { rotate: 0, interval: 0 }\n              },\n              yAxis: {\n                data: ['巴西', '印尼', '美国', '印度', '中国'],\n                // 对y坐标轴显示的刻度进行配置\n                axisLabel: { rotate: 0, interval: 0 }\n              },\n              series: [\n                {\n                  name: '人数',\n                  type: 'bar',\n                  data: [18203, 23489, 29034, 104970, 131744]\n                }\n              ]\n            }\n            chart1.setOption(chartOptions1)\n\n            // 饼状图\n            let chart2 = echarts.init(this.$refs['chart2'])\n            let chartOptions2 = {\n              title: {\n                text: '社会资源分布',\n                textStyle: { color: '#39a3d5', fontSize: 14 }\n              },\n              color: [\n                '#7199D6',\n                '#DB7D36',\n                '#82AB4E',\n                '#9CABE1',\n                '#F0B885',\n                '#739BD6',\n                '#72C4CC',\n                '#B1A3DE',\n                '#78B0ED',\n                '#E0A1B6',\n                '#F1C026'\n              ],\n              // 对点击时显示的tip就行配置\n              tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b}:{c} ({d}%)'\n              },\n              // 对图例的显示位置等内容进行配置\n              legend: {\n                // horizontal, vertical\n                orient: 'horizontal',\n                bottom: '5%'\n              },\n              series: [\n                {\n                  name: '占比',\n                  type: 'pie',\n                  radius: '50%',\n                  center: ['50%', '40%'],\n                  data: [\n                    { value: 335, name: '直接访问' },\n                    { value: 310, name: '邮件营销' },\n                    { value: 234, name: '联盟广告' },\n                    { value: 135, name: '视频广告' },\n                    { value: 1548, name: '搜索引擎' }\n                  ],\n                  label: {\n                    normal: {\n                      // 是否显示每个扇形指示\n                      show: false,\n                      // 若显示,则对过长内容格式化处理\n                      formatter(v) {\n                        let text = v.name\n                        return text.length < 4 ? text : `${text.slice(0, 4)}\\n${text.slice(4)}`\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n            chart2.setOption(chartOptions2)\n          }\n        },\n        mounted() {\n          this.initChart()\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n","source":"_posts/2019-03-27-echarts.md","raw":"---\ntitle: echarts\ndate: 2019-03-27 12:23:39\ntags: echarts\n---\n## 1.文档目的\n维护一个简单的图表模板,积累常用参数,便于快速配置图表\n参考网址:[echarts门户网站](https://echarts.baidu.com/)\n\n## 2.内容梳理\n图表基础模板(基于vue):\n```\n<!DOCTYPE html>\n<html lang=\"zh-cmn-Hans\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>chart demo</title>\n    <link rel=\"stylesheet\" href=\"../../styles/mint-ui.css\" />\n    <link rel=\"stylesheet\" href=\"../../styles/global.css\" />\n  </head>\n  <body>\n    <div id=\"chart\" class=\"container\">\n      <!-- chart1 条形图 -->\n      <div ref=\"chart1\" style=\"width: 100%;height:300px;\"></div>\n      <!-- chart2 饼状图 -->\n      <div ref=\"chart2\" style=\"width: 100%; height: 270px;\"></div>\n    </div>\n\n    <script src=\"../../script/vue.min.js\"></script>\n    <script src=\"../../script/axios.min.js\"></script>\n    <script src=\"../../script/echarts.min.js\"></script>\n    <script src=\"../../script/httpRequest.js\"></script>\n    <script src=\"../../script/constants.js\"></script>\n\n    <script>\n      window.onload = () => {\n        document.addEventListener('message', ({ data }) => {\n          const { token, areaId } = JSON.parse(data)\n          if (window.postMessage) {\n            let message = { loadFinish: true }\n            window.postMessage(JSON.stringify(message))\n          }\n        })\n      }\n\n      let indexVue = new Vue({\n        el: '#chart',\n        data() {\n          return {}\n        },\n        methods: {\n          initChart() {\n            // 条形图\n            let chart1 = echarts.init(this.$refs['chart1'])\n            let chartOptions1 = {\n              title: {\n                text: '大国人口',\n                textStyle: { color: '#39a3d5', fontSize: 14 }\n              },\n              color: [\n                '#7199D6',\n                '#DB7D36',\n                '#82AB4E',\n                '#9CABE1',\n                '#F0B885',\n                '#739BD6',\n                '#72C4CC',\n                '#B1A3DE',\n                '#78B0ED',\n                '#E0A1B6',\n                '#F1C026'\n              ],\n               // 对点击时显示的tip就行配置\n               tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b}:{c}'\n              },\n              // 配置图例边距留白距离,是否包含坐标轴刻度\n              grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\n              xAxis: {\n                axisLabel: { rotate: 0, interval: 0 }\n              },\n              yAxis: {\n                data: ['巴西', '印尼', '美国', '印度', '中国'],\n                // 对y坐标轴显示的刻度进行配置\n                axisLabel: { rotate: 0, interval: 0 }\n              },\n              series: [\n                {\n                  name: '人数',\n                  type: 'bar',\n                  data: [18203, 23489, 29034, 104970, 131744]\n                }\n              ]\n            }\n            chart1.setOption(chartOptions1)\n\n            // 饼状图\n            let chart2 = echarts.init(this.$refs['chart2'])\n            let chartOptions2 = {\n              title: {\n                text: '社会资源分布',\n                textStyle: { color: '#39a3d5', fontSize: 14 }\n              },\n              color: [\n                '#7199D6',\n                '#DB7D36',\n                '#82AB4E',\n                '#9CABE1',\n                '#F0B885',\n                '#739BD6',\n                '#72C4CC',\n                '#B1A3DE',\n                '#78B0ED',\n                '#E0A1B6',\n                '#F1C026'\n              ],\n              // 对点击时显示的tip就行配置\n              tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b}:{c} ({d}%)'\n              },\n              // 对图例的显示位置等内容进行配置\n              legend: {\n                // horizontal, vertical\n                orient: 'horizontal',\n                bottom: '5%'\n              },\n              series: [\n                {\n                  name: '占比',\n                  type: 'pie',\n                  radius: '50%',\n                  center: ['50%', '40%'],\n                  data: [\n                    { value: 335, name: '直接访问' },\n                    { value: 310, name: '邮件营销' },\n                    { value: 234, name: '联盟广告' },\n                    { value: 135, name: '视频广告' },\n                    { value: 1548, name: '搜索引擎' }\n                  ],\n                  label: {\n                    normal: {\n                      // 是否显示每个扇形指示\n                      show: false,\n                      // 若显示,则对过长内容格式化处理\n                      formatter(v) {\n                        let text = v.name\n                        return text.length < 4 ? text : `${text.slice(0, 4)}\\n${text.slice(4)}`\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n            chart2.setOption(chartOptions2)\n          }\n        },\n        mounted() {\n          this.initChart()\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n","slug":"echarts","published":1,"updated":"2019-04-21T08:04:47.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iww0013hkuzgmikslpa","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>维护一个简单的图表模板,积累常用参数,便于快速配置图表<br>参考网址:<a href=\"https://echarts.baidu.com/\" target=\"_blank\" rel=\"noopener\">echarts门户网站</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>图表基础模板(基于vue):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;chart demo&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/mint-ui.css&quot; /&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/global.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;chart&quot; class=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;!-- chart1 条形图 --&gt;</span><br><span class=\"line\">      &lt;div ref=&quot;chart1&quot; style=&quot;width: 100%;height:300px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;!-- chart2 饼状图 --&gt;</span><br><span class=\"line\">      &lt;div ref=&quot;chart2&quot; style=&quot;width: 100%; height: 270px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;../../script/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/httpRequest.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/constants.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      window.onload = () =&gt; &#123;</span><br><span class=\"line\">        document.addEventListener(&apos;message&apos;, (&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">          const &#123; token, areaId &#125; = JSON.parse(data)</span><br><span class=\"line\">          if (window.postMessage) &#123;</span><br><span class=\"line\">            let message = &#123; loadFinish: true &#125;</span><br><span class=\"line\">            window.postMessage(JSON.stringify(message))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      let indexVue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#chart&apos;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          return &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          initChart() &#123;</span><br><span class=\"line\">            // 条形图</span><br><span class=\"line\">            let chart1 = echarts.init(this.$refs[&apos;chart1&apos;])</span><br><span class=\"line\">            let chartOptions1 = &#123;</span><br><span class=\"line\">              title: &#123;</span><br><span class=\"line\">                text: &apos;大国人口&apos;,</span><br><span class=\"line\">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              color: [</span><br><span class=\"line\">                &apos;#7199D6&apos;,</span><br><span class=\"line\">                &apos;#DB7D36&apos;,</span><br><span class=\"line\">                &apos;#82AB4E&apos;,</span><br><span class=\"line\">                &apos;#9CABE1&apos;,</span><br><span class=\"line\">                &apos;#F0B885&apos;,</span><br><span class=\"line\">                &apos;#739BD6&apos;,</span><br><span class=\"line\">                &apos;#72C4CC&apos;,</span><br><span class=\"line\">                &apos;#B1A3DE&apos;,</span><br><span class=\"line\">                &apos;#78B0ED&apos;,</span><br><span class=\"line\">                &apos;#E0A1B6&apos;,</span><br><span class=\"line\">                &apos;#F1C026&apos;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">               // 对点击时显示的tip就行配置</span><br><span class=\"line\">               tooltip: &#123;</span><br><span class=\"line\">                trigger: &apos;item&apos;,</span><br><span class=\"line\">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125;&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              // 配置图例边距留白距离,是否包含坐标轴刻度</span><br><span class=\"line\">              grid: &#123; left: &apos;3%&apos;, right: &apos;4%&apos;, bottom: &apos;3%&apos;, containLabel: true &#125;,</span><br><span class=\"line\">              xAxis: &#123;</span><br><span class=\"line\">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              yAxis: &#123;</span><br><span class=\"line\">                data: [&apos;巴西&apos;, &apos;印尼&apos;, &apos;美国&apos;, &apos;印度&apos;, &apos;中国&apos;],</span><br><span class=\"line\">                // 对y坐标轴显示的刻度进行配置</span><br><span class=\"line\">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              series: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  name: &apos;人数&apos;,</span><br><span class=\"line\">                  type: &apos;bar&apos;,</span><br><span class=\"line\">                  data: [18203, 23489, 29034, 104970, 131744]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chart1.setOption(chartOptions1)</span><br><span class=\"line\"></span><br><span class=\"line\">            // 饼状图</span><br><span class=\"line\">            let chart2 = echarts.init(this.$refs[&apos;chart2&apos;])</span><br><span class=\"line\">            let chartOptions2 = &#123;</span><br><span class=\"line\">              title: &#123;</span><br><span class=\"line\">                text: &apos;社会资源分布&apos;,</span><br><span class=\"line\">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              color: [</span><br><span class=\"line\">                &apos;#7199D6&apos;,</span><br><span class=\"line\">                &apos;#DB7D36&apos;,</span><br><span class=\"line\">                &apos;#82AB4E&apos;,</span><br><span class=\"line\">                &apos;#9CABE1&apos;,</span><br><span class=\"line\">                &apos;#F0B885&apos;,</span><br><span class=\"line\">                &apos;#739BD6&apos;,</span><br><span class=\"line\">                &apos;#72C4CC&apos;,</span><br><span class=\"line\">                &apos;#B1A3DE&apos;,</span><br><span class=\"line\">                &apos;#78B0ED&apos;,</span><br><span class=\"line\">                &apos;#E0A1B6&apos;,</span><br><span class=\"line\">                &apos;#F1C026&apos;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">              // 对点击时显示的tip就行配置</span><br><span class=\"line\">              tooltip: &#123;</span><br><span class=\"line\">                trigger: &apos;item&apos;,</span><br><span class=\"line\">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              // 对图例的显示位置等内容进行配置</span><br><span class=\"line\">              legend: &#123;</span><br><span class=\"line\">                // horizontal, vertical</span><br><span class=\"line\">                orient: &apos;horizontal&apos;,</span><br><span class=\"line\">                bottom: &apos;5%&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              series: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  name: &apos;占比&apos;,</span><br><span class=\"line\">                  type: &apos;pie&apos;,</span><br><span class=\"line\">                  radius: &apos;50%&apos;,</span><br><span class=\"line\">                  center: [&apos;50%&apos;, &apos;40%&apos;],</span><br><span class=\"line\">                  data: [</span><br><span class=\"line\">                    &#123; value: 335, name: &apos;直接访问&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 310, name: &apos;邮件营销&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 234, name: &apos;联盟广告&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 135, name: &apos;视频广告&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 1548, name: &apos;搜索引擎&apos; &#125;</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                  label: &#123;</span><br><span class=\"line\">                    normal: &#123;</span><br><span class=\"line\">                      // 是否显示每个扇形指示</span><br><span class=\"line\">                      show: false,</span><br><span class=\"line\">                      // 若显示,则对过长内容格式化处理</span><br><span class=\"line\">                      formatter(v) &#123;</span><br><span class=\"line\">                        let text = v.name</span><br><span class=\"line\">                        return text.length &lt; 4 ? text : `$&#123;text.slice(0, 4)&#125;\\n$&#123;text.slice(4)&#125;`</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chart2.setOption(chartOptions2)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mounted() &#123;</span><br><span class=\"line\">          this.initChart()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>维护一个简单的图表模板,积累常用参数,便于快速配置图表<br>参考网址:<a href=\"https://echarts.baidu.com/\" target=\"_blank\" rel=\"noopener\">echarts门户网站</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>图表基础模板(基于vue):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;chart demo&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/mint-ui.css&quot; /&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/global.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;chart&quot; class=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;!-- chart1 条形图 --&gt;</span><br><span class=\"line\">      &lt;div ref=&quot;chart1&quot; style=&quot;width: 100%;height:300px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;!-- chart2 饼状图 --&gt;</span><br><span class=\"line\">      &lt;div ref=&quot;chart2&quot; style=&quot;width: 100%; height: 270px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;../../script/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/httpRequest.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/constants.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      window.onload = () =&gt; &#123;</span><br><span class=\"line\">        document.addEventListener(&apos;message&apos;, (&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">          const &#123; token, areaId &#125; = JSON.parse(data)</span><br><span class=\"line\">          if (window.postMessage) &#123;</span><br><span class=\"line\">            let message = &#123; loadFinish: true &#125;</span><br><span class=\"line\">            window.postMessage(JSON.stringify(message))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      let indexVue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#chart&apos;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          return &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          initChart() &#123;</span><br><span class=\"line\">            // 条形图</span><br><span class=\"line\">            let chart1 = echarts.init(this.$refs[&apos;chart1&apos;])</span><br><span class=\"line\">            let chartOptions1 = &#123;</span><br><span class=\"line\">              title: &#123;</span><br><span class=\"line\">                text: &apos;大国人口&apos;,</span><br><span class=\"line\">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              color: [</span><br><span class=\"line\">                &apos;#7199D6&apos;,</span><br><span class=\"line\">                &apos;#DB7D36&apos;,</span><br><span class=\"line\">                &apos;#82AB4E&apos;,</span><br><span class=\"line\">                &apos;#9CABE1&apos;,</span><br><span class=\"line\">                &apos;#F0B885&apos;,</span><br><span class=\"line\">                &apos;#739BD6&apos;,</span><br><span class=\"line\">                &apos;#72C4CC&apos;,</span><br><span class=\"line\">                &apos;#B1A3DE&apos;,</span><br><span class=\"line\">                &apos;#78B0ED&apos;,</span><br><span class=\"line\">                &apos;#E0A1B6&apos;,</span><br><span class=\"line\">                &apos;#F1C026&apos;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">               // 对点击时显示的tip就行配置</span><br><span class=\"line\">               tooltip: &#123;</span><br><span class=\"line\">                trigger: &apos;item&apos;,</span><br><span class=\"line\">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125;&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              // 配置图例边距留白距离,是否包含坐标轴刻度</span><br><span class=\"line\">              grid: &#123; left: &apos;3%&apos;, right: &apos;4%&apos;, bottom: &apos;3%&apos;, containLabel: true &#125;,</span><br><span class=\"line\">              xAxis: &#123;</span><br><span class=\"line\">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              yAxis: &#123;</span><br><span class=\"line\">                data: [&apos;巴西&apos;, &apos;印尼&apos;, &apos;美国&apos;, &apos;印度&apos;, &apos;中国&apos;],</span><br><span class=\"line\">                // 对y坐标轴显示的刻度进行配置</span><br><span class=\"line\">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              series: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  name: &apos;人数&apos;,</span><br><span class=\"line\">                  type: &apos;bar&apos;,</span><br><span class=\"line\">                  data: [18203, 23489, 29034, 104970, 131744]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chart1.setOption(chartOptions1)</span><br><span class=\"line\"></span><br><span class=\"line\">            // 饼状图</span><br><span class=\"line\">            let chart2 = echarts.init(this.$refs[&apos;chart2&apos;])</span><br><span class=\"line\">            let chartOptions2 = &#123;</span><br><span class=\"line\">              title: &#123;</span><br><span class=\"line\">                text: &apos;社会资源分布&apos;,</span><br><span class=\"line\">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              color: [</span><br><span class=\"line\">                &apos;#7199D6&apos;,</span><br><span class=\"line\">                &apos;#DB7D36&apos;,</span><br><span class=\"line\">                &apos;#82AB4E&apos;,</span><br><span class=\"line\">                &apos;#9CABE1&apos;,</span><br><span class=\"line\">                &apos;#F0B885&apos;,</span><br><span class=\"line\">                &apos;#739BD6&apos;,</span><br><span class=\"line\">                &apos;#72C4CC&apos;,</span><br><span class=\"line\">                &apos;#B1A3DE&apos;,</span><br><span class=\"line\">                &apos;#78B0ED&apos;,</span><br><span class=\"line\">                &apos;#E0A1B6&apos;,</span><br><span class=\"line\">                &apos;#F1C026&apos;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">              // 对点击时显示的tip就行配置</span><br><span class=\"line\">              tooltip: &#123;</span><br><span class=\"line\">                trigger: &apos;item&apos;,</span><br><span class=\"line\">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              // 对图例的显示位置等内容进行配置</span><br><span class=\"line\">              legend: &#123;</span><br><span class=\"line\">                // horizontal, vertical</span><br><span class=\"line\">                orient: &apos;horizontal&apos;,</span><br><span class=\"line\">                bottom: &apos;5%&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              series: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  name: &apos;占比&apos;,</span><br><span class=\"line\">                  type: &apos;pie&apos;,</span><br><span class=\"line\">                  radius: &apos;50%&apos;,</span><br><span class=\"line\">                  center: [&apos;50%&apos;, &apos;40%&apos;],</span><br><span class=\"line\">                  data: [</span><br><span class=\"line\">                    &#123; value: 335, name: &apos;直接访问&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 310, name: &apos;邮件营销&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 234, name: &apos;联盟广告&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 135, name: &apos;视频广告&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 1548, name: &apos;搜索引擎&apos; &#125;</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                  label: &#123;</span><br><span class=\"line\">                    normal: &#123;</span><br><span class=\"line\">                      // 是否显示每个扇形指示</span><br><span class=\"line\">                      show: false,</span><br><span class=\"line\">                      // 若显示,则对过长内容格式化处理</span><br><span class=\"line\">                      formatter(v) &#123;</span><br><span class=\"line\">                        let text = v.name</span><br><span class=\"line\">                        return text.length &lt; 4 ? text : `$&#123;text.slice(0, 4)&#125;\\n$&#123;text.slice(4)&#125;`</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chart2.setOption(chartOptions2)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mounted() &#123;</span><br><span class=\"line\">          this.initChart()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"基于RN的安卓权限配置","date":"2019-03-25T04:26:09.000Z","_content":"## 1.文档目的\n基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑\n\n## 2.内容梳理\n权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:\n```\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:\n```\n _getCurrentLocation = async () => {\n    navigator.geolocation.getCurrentPosition(location => {\n      console.log(location)\n    })\n  }\n```\n","source":"_posts/2019-03-25-android-manifest.md","raw":"---\ntitle: 基于RN的安卓权限配置\ndate: 2019-03-25 12:26:09\ntags: React\n---\n## 1.文档目的\n基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑\n\n## 2.内容梳理\n权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:\n```\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:\n```\n _getCurrentLocation = async () => {\n    navigator.geolocation.getCurrentPosition(location => {\n      console.log(location)\n    })\n  }\n```\n","slug":"android-manifest","published":1,"updated":"2019-04-21T08:04:47.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7iwy0014hkuz7toe1f9w","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_getCurrentLocation = async () =&gt; &#123;</span><br><span class=\"line\">   navigator.geolocation.getCurrentPosition(location =&gt; &#123;</span><br><span class=\"line\">     console.log(location)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_getCurrentLocation = async () =&gt; &#123;</span><br><span class=\"line\">   navigator.geolocation.getCurrentPosition(location =&gt; &#123;</span><br><span class=\"line\">     console.log(location)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"基于React Native在应用中查看PDF文档","date":"2019-04-04T04:30:06.000Z","_content":"## 1.文档目的\n记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.\n[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]\n参考网址: [react-native-fs文件下载](https://www.jianshu.com/p/acf5a502f999),[react-native-pdf PDF查看](https://www.npmjs.com/package/react-native-pdf)\n\n## 2.实践过程\n安装依赖\n```\nyarn add react-native-fs\n```\n挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试\n```\nreact-native link react-native-fs\n```\n然后即可在项目中引入使用\n```\nimport RNFS from 'react-native-fs';\n```\n下载文档\n```\n/*下载文件*/\n    downloadFile() {\n        // On Android, use \"RNFS.DocumentDirectoryPath\" (MainBundlePath is not defined)\n\n        // 图片\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.jpg`;\n        // const formUrl = 'http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg';\n\n        // 文件\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.zip`;\n        // const formUrl = 'http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip';\n\n        // 视频\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.mp4`;\n        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&\n        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&\n        // const formUrl = 'https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&';\n\n        // 音频\n        const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.mp3`;\n        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3\n        const formUrl = 'http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3';\n\n        const options = {\n            fromUrl: formUrl,\n            toFile: downloadDest,\n            background: true,\n            begin: (res) => {\n                console.log('begin', res);\n                console.log('contentLength:', res.contentLength / 1024 / 1024, 'M');\n            },\n            progress: (res) => {\n\n                let pro = res.bytesWritten / res.contentLength;\n\n                this.setState({\n                    progressNum: pro,\n                });\n            }\n        };\n        try {\n            const ret = RNFS.downloadFile(options);\n            ret.promise.then(res => {\n                console.log('success', res);\n\n                console.log('file://' + downloadDest)\n\n                // 例如保存图片\n                CameraRoll.saveToCameraRoll(downloadDest)\n                    .then(()=>{\n                        Toast.showShortCenter('图片已保存到相册')\n                    }).catch(()=>{\n                        Toast.showShortCenter('图片保存失败')\n                    })\n\n            }).catch(err => {\n                console.log('err', err);\n            });\n        }\n        catch (e) {\n            console.log(error);\n        }\n\n    }\n```\nPDF文档的查看,首先也要安装依赖\n```\nyarn add rn-fetch-blob\nyarn add react-native-pdf\n\nreact-native link rn-fetch-blob\nreact-native link react-native-pdf\n```\n然后就可以尝试显示PDF资源\n```\nimport React from 'react';\nimport { StyleSheet, Dimensions, View } from 'react-native';\n \nimport Pdf from 'react-native-pdf';\n \nexport default class PDFExample extends React.Component {\n    render() {\n        const source = {uri:'http://samples.leanpub.com/thereactnativebook-sample.pdf',cache:true};\n        //const source = require('./test.pdf');  // ios only\n        //const source = {uri:'bundle-assets://test.pdf'};\n \n        //const source = {uri:'file:///sdcard/test.pdf'};\n        //const source = {uri:\"data:application/pdf;base64,...\"};\n \n        return (\n            <View style={styles.container}>\n                <Pdf\n                    source={source}\n                    onLoadComplete={(numberOfPages,filePath)=>{\n                        console.log(`number of pages: ${numberOfPages}`);\n                    }}\n                    onPageChanged={(page,numberOfPages)=>{\n                        console.log(`current page: ${page}`);\n                    }}\n                    onError={(error)=>{\n                        console.log(error);\n                    }}\n                    style={styles.pdf}/>\n            </View>\n        )\n  }\n}\n \nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        marginTop: 25,\n    },\n    pdf: {\n        flex:1,\n        width:Dimensions.get('window').width,\n    }\n});\n```","source":"_posts/2019-04-04-pdf-view.md","raw":"---\ntitle: 基于React Native在应用中查看PDF文档\ndate: 2019-04-04 12:30:06\ntags: React\n---\n## 1.文档目的\n记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.\n[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]\n参考网址: [react-native-fs文件下载](https://www.jianshu.com/p/acf5a502f999),[react-native-pdf PDF查看](https://www.npmjs.com/package/react-native-pdf)\n\n## 2.实践过程\n安装依赖\n```\nyarn add react-native-fs\n```\n挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试\n```\nreact-native link react-native-fs\n```\n然后即可在项目中引入使用\n```\nimport RNFS from 'react-native-fs';\n```\n下载文档\n```\n/*下载文件*/\n    downloadFile() {\n        // On Android, use \"RNFS.DocumentDirectoryPath\" (MainBundlePath is not defined)\n\n        // 图片\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.jpg`;\n        // const formUrl = 'http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg';\n\n        // 文件\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.zip`;\n        // const formUrl = 'http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip';\n\n        // 视频\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.mp4`;\n        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&\n        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&\n        // const formUrl = 'https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&';\n\n        // 音频\n        const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.mp3`;\n        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3\n        const formUrl = 'http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3';\n\n        const options = {\n            fromUrl: formUrl,\n            toFile: downloadDest,\n            background: true,\n            begin: (res) => {\n                console.log('begin', res);\n                console.log('contentLength:', res.contentLength / 1024 / 1024, 'M');\n            },\n            progress: (res) => {\n\n                let pro = res.bytesWritten / res.contentLength;\n\n                this.setState({\n                    progressNum: pro,\n                });\n            }\n        };\n        try {\n            const ret = RNFS.downloadFile(options);\n            ret.promise.then(res => {\n                console.log('success', res);\n\n                console.log('file://' + downloadDest)\n\n                // 例如保存图片\n                CameraRoll.saveToCameraRoll(downloadDest)\n                    .then(()=>{\n                        Toast.showShortCenter('图片已保存到相册')\n                    }).catch(()=>{\n                        Toast.showShortCenter('图片保存失败')\n                    })\n\n            }).catch(err => {\n                console.log('err', err);\n            });\n        }\n        catch (e) {\n            console.log(error);\n        }\n\n    }\n```\nPDF文档的查看,首先也要安装依赖\n```\nyarn add rn-fetch-blob\nyarn add react-native-pdf\n\nreact-native link rn-fetch-blob\nreact-native link react-native-pdf\n```\n然后就可以尝试显示PDF资源\n```\nimport React from 'react';\nimport { StyleSheet, Dimensions, View } from 'react-native';\n \nimport Pdf from 'react-native-pdf';\n \nexport default class PDFExample extends React.Component {\n    render() {\n        const source = {uri:'http://samples.leanpub.com/thereactnativebook-sample.pdf',cache:true};\n        //const source = require('./test.pdf');  // ios only\n        //const source = {uri:'bundle-assets://test.pdf'};\n \n        //const source = {uri:'file:///sdcard/test.pdf'};\n        //const source = {uri:\"data:application/pdf;base64,...\"};\n \n        return (\n            <View style={styles.container}>\n                <Pdf\n                    source={source}\n                    onLoadComplete={(numberOfPages,filePath)=>{\n                        console.log(`number of pages: ${numberOfPages}`);\n                    }}\n                    onPageChanged={(page,numberOfPages)=>{\n                        console.log(`current page: ${page}`);\n                    }}\n                    onError={(error)=>{\n                        console.log(error);\n                    }}\n                    style={styles.pdf}/>\n            </View>\n        )\n  }\n}\n \nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        marginTop: 25,\n    },\n    pdf: {\n        flex:1,\n        width:Dimensions.get('window').width,\n    }\n});\n```","slug":"pdf-view","published":1,"updated":"2019-04-21T08:04:47.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7ix00017hkuzsmi65dnt","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.<br>[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]<br>参考网址: <a href=\"https://www.jianshu.com/p/acf5a502f999\" target=\"_blank\" rel=\"noopener\">react-native-fs文件下载</a>,<a href=\"https://www.npmjs.com/package/react-native-pdf\" target=\"_blank\" rel=\"noopener\">react-native-pdf PDF查看</a></p>\n<h2 id=\"2-实践过程\"><a href=\"#2-实践过程\" class=\"headerlink\" title=\"2.实践过程\"></a>2.实践过程</h2><p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-fs</span><br></pre></td></tr></table></figure></p>\n<p>挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native link react-native-fs</span><br></pre></td></tr></table></figure></p>\n<p>然后即可在项目中引入使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import RNFS from &apos;react-native-fs&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>下载文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*下载文件*/</span><br><span class=\"line\">    downloadFile() &#123;</span><br><span class=\"line\">        // On Android, use &quot;RNFS.DocumentDirectoryPath&quot; (MainBundlePath is not defined)</span><br><span class=\"line\"></span><br><span class=\"line\">        // 图片</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.jpg`;</span><br><span class=\"line\">        // const formUrl = &apos;http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 文件</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.zip`;</span><br><span class=\"line\">        // const formUrl = &apos;http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 视频</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp4`;</span><br><span class=\"line\">        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&amp;</span><br><span class=\"line\">        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&amp;</span><br><span class=\"line\">        // const formUrl = &apos;https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&amp;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 音频</span><br><span class=\"line\">        const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp3`;</span><br><span class=\"line\">        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3</span><br><span class=\"line\">        const formUrl = &apos;http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        const options = &#123;</span><br><span class=\"line\">            fromUrl: formUrl,</span><br><span class=\"line\">            toFile: downloadDest,</span><br><span class=\"line\">            background: true,</span><br><span class=\"line\">            begin: (res) =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;begin&apos;, res);</span><br><span class=\"line\">                console.log(&apos;contentLength:&apos;, res.contentLength / 1024 / 1024, &apos;M&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            progress: (res) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                let pro = res.bytesWritten / res.contentLength;</span><br><span class=\"line\"></span><br><span class=\"line\">                this.setState(&#123;</span><br><span class=\"line\">                    progressNum: pro,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            const ret = RNFS.downloadFile(options);</span><br><span class=\"line\">            ret.promise.then(res =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;success&apos;, res);</span><br><span class=\"line\"></span><br><span class=\"line\">                console.log(&apos;file://&apos; + downloadDest)</span><br><span class=\"line\"></span><br><span class=\"line\">                // 例如保存图片</span><br><span class=\"line\">                CameraRoll.saveToCameraRoll(downloadDest)</span><br><span class=\"line\">                    .then(()=&gt;&#123;</span><br><span class=\"line\">                        Toast.showShortCenter(&apos;图片已保存到相册&apos;)</span><br><span class=\"line\">                    &#125;).catch(()=&gt;&#123;</span><br><span class=\"line\">                        Toast.showShortCenter(&apos;图片保存失败&apos;)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;err&apos;, err);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (e) &#123;</span><br><span class=\"line\">            console.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>PDF文档的查看,首先也要安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add rn-fetch-blob</span><br><span class=\"line\">yarn add react-native-pdf</span><br><span class=\"line\"></span><br><span class=\"line\">react-native link rn-fetch-blob</span><br><span class=\"line\">react-native link react-native-pdf</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以尝试显示PDF资源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123; StyleSheet, Dimensions, View &#125; from &apos;react-native&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">import Pdf from &apos;react-native-pdf&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">export default class PDFExample extends React.Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        const source = &#123;uri:&apos;http://samples.leanpub.com/thereactnativebook-sample.pdf&apos;,cache:true&#125;;</span><br><span class=\"line\">        //const source = require(&apos;./test.pdf&apos;);  // ios only</span><br><span class=\"line\">        //const source = &#123;uri:&apos;bundle-assets://test.pdf&apos;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        //const source = &#123;uri:&apos;file:///sdcard/test.pdf&apos;&#125;;</span><br><span class=\"line\">        //const source = &#123;uri:&quot;data:application/pdf;base64,...&quot;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">                &lt;Pdf</span><br><span class=\"line\">                    source=&#123;source&#125;</span><br><span class=\"line\">                    onLoadComplete=&#123;(numberOfPages,filePath)=&gt;&#123;</span><br><span class=\"line\">                        console.log(`number of pages: $&#123;numberOfPages&#125;`);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    onPageChanged=&#123;(page,numberOfPages)=&gt;&#123;</span><br><span class=\"line\">                        console.log(`current page: $&#123;page&#125;`);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    onError=&#123;(error)=&gt;&#123;</span><br><span class=\"line\">                        console.log(error);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    style=&#123;styles.pdf&#125;/&gt;</span><br><span class=\"line\">            &lt;/View&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">    container: &#123;</span><br><span class=\"line\">        flex: 1,</span><br><span class=\"line\">        justifyContent: &apos;flex-start&apos;,</span><br><span class=\"line\">        alignItems: &apos;center&apos;,</span><br><span class=\"line\">        marginTop: 25,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pdf: &#123;</span><br><span class=\"line\">        flex:1,</span><br><span class=\"line\">        width:Dimensions.get(&apos;window&apos;).width,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.<br>[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]<br>参考网址: <a href=\"https://www.jianshu.com/p/acf5a502f999\" target=\"_blank\" rel=\"noopener\">react-native-fs文件下载</a>,<a href=\"https://www.npmjs.com/package/react-native-pdf\" target=\"_blank\" rel=\"noopener\">react-native-pdf PDF查看</a></p>\n<h2 id=\"2-实践过程\"><a href=\"#2-实践过程\" class=\"headerlink\" title=\"2.实践过程\"></a>2.实践过程</h2><p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-fs</span><br></pre></td></tr></table></figure></p>\n<p>挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native link react-native-fs</span><br></pre></td></tr></table></figure></p>\n<p>然后即可在项目中引入使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import RNFS from &apos;react-native-fs&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>下载文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*下载文件*/</span><br><span class=\"line\">    downloadFile() &#123;</span><br><span class=\"line\">        // On Android, use &quot;RNFS.DocumentDirectoryPath&quot; (MainBundlePath is not defined)</span><br><span class=\"line\"></span><br><span class=\"line\">        // 图片</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.jpg`;</span><br><span class=\"line\">        // const formUrl = &apos;http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 文件</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.zip`;</span><br><span class=\"line\">        // const formUrl = &apos;http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 视频</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp4`;</span><br><span class=\"line\">        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&amp;</span><br><span class=\"line\">        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&amp;</span><br><span class=\"line\">        // const formUrl = &apos;https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&amp;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 音频</span><br><span class=\"line\">        const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp3`;</span><br><span class=\"line\">        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3</span><br><span class=\"line\">        const formUrl = &apos;http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        const options = &#123;</span><br><span class=\"line\">            fromUrl: formUrl,</span><br><span class=\"line\">            toFile: downloadDest,</span><br><span class=\"line\">            background: true,</span><br><span class=\"line\">            begin: (res) =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;begin&apos;, res);</span><br><span class=\"line\">                console.log(&apos;contentLength:&apos;, res.contentLength / 1024 / 1024, &apos;M&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            progress: (res) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                let pro = res.bytesWritten / res.contentLength;</span><br><span class=\"line\"></span><br><span class=\"line\">                this.setState(&#123;</span><br><span class=\"line\">                    progressNum: pro,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            const ret = RNFS.downloadFile(options);</span><br><span class=\"line\">            ret.promise.then(res =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;success&apos;, res);</span><br><span class=\"line\"></span><br><span class=\"line\">                console.log(&apos;file://&apos; + downloadDest)</span><br><span class=\"line\"></span><br><span class=\"line\">                // 例如保存图片</span><br><span class=\"line\">                CameraRoll.saveToCameraRoll(downloadDest)</span><br><span class=\"line\">                    .then(()=&gt;&#123;</span><br><span class=\"line\">                        Toast.showShortCenter(&apos;图片已保存到相册&apos;)</span><br><span class=\"line\">                    &#125;).catch(()=&gt;&#123;</span><br><span class=\"line\">                        Toast.showShortCenter(&apos;图片保存失败&apos;)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;err&apos;, err);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (e) &#123;</span><br><span class=\"line\">            console.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>PDF文档的查看,首先也要安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add rn-fetch-blob</span><br><span class=\"line\">yarn add react-native-pdf</span><br><span class=\"line\"></span><br><span class=\"line\">react-native link rn-fetch-blob</span><br><span class=\"line\">react-native link react-native-pdf</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以尝试显示PDF资源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123; StyleSheet, Dimensions, View &#125; from &apos;react-native&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">import Pdf from &apos;react-native-pdf&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">export default class PDFExample extends React.Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        const source = &#123;uri:&apos;http://samples.leanpub.com/thereactnativebook-sample.pdf&apos;,cache:true&#125;;</span><br><span class=\"line\">        //const source = require(&apos;./test.pdf&apos;);  // ios only</span><br><span class=\"line\">        //const source = &#123;uri:&apos;bundle-assets://test.pdf&apos;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        //const source = &#123;uri:&apos;file:///sdcard/test.pdf&apos;&#125;;</span><br><span class=\"line\">        //const source = &#123;uri:&quot;data:application/pdf;base64,...&quot;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">                &lt;Pdf</span><br><span class=\"line\">                    source=&#123;source&#125;</span><br><span class=\"line\">                    onLoadComplete=&#123;(numberOfPages,filePath)=&gt;&#123;</span><br><span class=\"line\">                        console.log(`number of pages: $&#123;numberOfPages&#125;`);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    onPageChanged=&#123;(page,numberOfPages)=&gt;&#123;</span><br><span class=\"line\">                        console.log(`current page: $&#123;page&#125;`);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    onError=&#123;(error)=&gt;&#123;</span><br><span class=\"line\">                        console.log(error);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    style=&#123;styles.pdf&#125;/&gt;</span><br><span class=\"line\">            &lt;/View&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">    container: &#123;</span><br><span class=\"line\">        flex: 1,</span><br><span class=\"line\">        justifyContent: &apos;flex-start&apos;,</span><br><span class=\"line\">        alignItems: &apos;center&apos;,</span><br><span class=\"line\">        marginTop: 25,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pdf: &#123;</span><br><span class=\"line\">        flex:1,</span><br><span class=\"line\">        width:Dimensions.get(&apos;window&apos;).width,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"json","date":"2019-04-11T04:14:03.000Z","_content":"## 1.文档目的\n汇总前端JSON数据模拟技术,本文介绍三种技术:**json server, Easy mock, github api v3**.\njson server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求\nEasy Mock: 在线json模拟数据生成管理平台\ngithub api v3:获取并操作github账号下个人相关信息的接口服务\n实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.\n参考网址: [json-server的使用](https://blog.csdn.net/weixin_40817115/article/details/81237128),[Easy Mock官网](http://easymock.xys12345.cn/login),[github api讲解](https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0),[github api官方文档](https://developer.github.com/)\n\n## 2.实践过程\n### 2.1 json server\n安装依赖\n```\nnpm install -g json-server\n```\n查看版本\n```\njson-server -v\n```\n创建db.json\n```\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ],\n  \"profile\": { \"name\": \"typicode\" }\n}\n```\n启动服务\n```\njson-server db.json\n```\n在postman或浏览器中访问接口,比如:\n```\nhttp://localhost:3000\n```\n### 2.2 East Mock\n只需要打开[East Mock官网](http://easymock.xys12345.cn/login),登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可\n\n### 2.3 github api\n该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用\n**用户信息[详情信息]**\n```\nhttps://api.github.com/users/ruanyf\n```\n**列表信息[分页/不分页]** \n```\nhttps://api.github.com/users/ruanyf/followers?page=1&per_page=10\n```\n**占位图**\n```\nhttp://temp.im/288x288\n```","source":"_posts/2019-04-11-json-server.md","raw":"---\ntitle: json\ndate: 2019-04-11 12:14:03\ntags: JSON\n---\n## 1.文档目的\n汇总前端JSON数据模拟技术,本文介绍三种技术:**json server, Easy mock, github api v3**.\njson server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求\nEasy Mock: 在线json模拟数据生成管理平台\ngithub api v3:获取并操作github账号下个人相关信息的接口服务\n实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.\n参考网址: [json-server的使用](https://blog.csdn.net/weixin_40817115/article/details/81237128),[Easy Mock官网](http://easymock.xys12345.cn/login),[github api讲解](https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0),[github api官方文档](https://developer.github.com/)\n\n## 2.实践过程\n### 2.1 json server\n安装依赖\n```\nnpm install -g json-server\n```\n查看版本\n```\njson-server -v\n```\n创建db.json\n```\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ],\n  \"profile\": { \"name\": \"typicode\" }\n}\n```\n启动服务\n```\njson-server db.json\n```\n在postman或浏览器中访问接口,比如:\n```\nhttp://localhost:3000\n```\n### 2.2 East Mock\n只需要打开[East Mock官网](http://easymock.xys12345.cn/login),登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可\n\n### 2.3 github api\n该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用\n**用户信息[详情信息]**\n```\nhttps://api.github.com/users/ruanyf\n```\n**列表信息[分页/不分页]** \n```\nhttps://api.github.com/users/ruanyf/followers?page=1&per_page=10\n```\n**占位图**\n```\nhttp://temp.im/288x288\n```","slug":"json-server","published":1,"updated":"2019-04-21T08:04:47.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7ix20018hkuzie4njokd","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>汇总前端JSON数据模拟技术,本文介绍三种技术:<strong>json server, Easy mock, github api v3</strong>.<br>json server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求<br>Easy Mock: 在线json模拟数据生成管理平台<br>github api v3:获取并操作github账号下个人相关信息的接口服务<br>实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.<br>参考网址: <a href=\"https://blog.csdn.net/weixin_40817115/article/details/81237128\" target=\"_blank\" rel=\"noopener\">json-server的使用</a>,<a href=\"http://easymock.xys12345.cn/login\" target=\"_blank\" rel=\"noopener\">Easy Mock官网</a>,<a href=\"https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0\" target=\"_blank\" rel=\"noopener\">github api讲解</a>,<a href=\"https://developer.github.com/\" target=\"_blank\" rel=\"noopener\">github api官方文档</a></p>\n<h2 id=\"2-实践过程\"><a href=\"#2-实践过程\" class=\"headerlink\" title=\"2.实践过程\"></a>2.实践过程</h2><h3 id=\"2-1-json-server\"><a href=\"#2-1-json-server\" class=\"headerlink\" title=\"2.1 json server\"></a>2.1 json server</h3><p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g json-server</span><br></pre></td></tr></table></figure></p>\n<p>查看版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server -v</span><br></pre></td></tr></table></figure></p>\n<p>创建db.json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;posts&quot;: [</span><br><span class=\"line\">    &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;comments&quot;: [</span><br><span class=\"line\">    &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server db.json</span><br></pre></td></tr></table></figure></p>\n<p>在postman或浏览器中访问接口,比如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-East-Mock\"><a href=\"#2-2-East-Mock\" class=\"headerlink\" title=\"2.2 East Mock\"></a>2.2 East Mock</h3><p>只需要打开<a href=\"http://easymock.xys12345.cn/login\" target=\"_blank\" rel=\"noopener\">East Mock官网</a>,登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可</p>\n<h3 id=\"2-3-github-api\"><a href=\"#2-3-github-api\" class=\"headerlink\" title=\"2.3 github api\"></a>2.3 github api</h3><p>该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用<br><strong>用户信息[详情信息]</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.github.com/users/ruanyf</span><br></pre></td></tr></table></figure></p>\n<p><strong>列表信息[分页/不分页]</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.github.com/users/ruanyf/followers?page=1&amp;per_page=10</span><br></pre></td></tr></table></figure></p>\n<p><strong>占位图</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://temp.im/288x288</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>汇总前端JSON数据模拟技术,本文介绍三种技术:<strong>json server, Easy mock, github api v3</strong>.<br>json server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求<br>Easy Mock: 在线json模拟数据生成管理平台<br>github api v3:获取并操作github账号下个人相关信息的接口服务<br>实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.<br>参考网址: <a href=\"https://blog.csdn.net/weixin_40817115/article/details/81237128\" target=\"_blank\" rel=\"noopener\">json-server的使用</a>,<a href=\"http://easymock.xys12345.cn/login\" target=\"_blank\" rel=\"noopener\">Easy Mock官网</a>,<a href=\"https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0\" target=\"_blank\" rel=\"noopener\">github api讲解</a>,<a href=\"https://developer.github.com/\" target=\"_blank\" rel=\"noopener\">github api官方文档</a></p>\n<h2 id=\"2-实践过程\"><a href=\"#2-实践过程\" class=\"headerlink\" title=\"2.实践过程\"></a>2.实践过程</h2><h3 id=\"2-1-json-server\"><a href=\"#2-1-json-server\" class=\"headerlink\" title=\"2.1 json server\"></a>2.1 json server</h3><p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g json-server</span><br></pre></td></tr></table></figure></p>\n<p>查看版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server -v</span><br></pre></td></tr></table></figure></p>\n<p>创建db.json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;posts&quot;: [</span><br><span class=\"line\">    &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;comments&quot;: [</span><br><span class=\"line\">    &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server db.json</span><br></pre></td></tr></table></figure></p>\n<p>在postman或浏览器中访问接口,比如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-East-Mock\"><a href=\"#2-2-East-Mock\" class=\"headerlink\" title=\"2.2 East Mock\"></a>2.2 East Mock</h3><p>只需要打开<a href=\"http://easymock.xys12345.cn/login\" target=\"_blank\" rel=\"noopener\">East Mock官网</a>,登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可</p>\n<h3 id=\"2-3-github-api\"><a href=\"#2-3-github-api\" class=\"headerlink\" title=\"2.3 github api\"></a>2.3 github api</h3><p>该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用<br><strong>用户信息[详情信息]</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.github.com/users/ruanyf</span><br></pre></td></tr></table></figure></p>\n<p><strong>列表信息[分页/不分页]</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.github.com/users/ruanyf/followers?page=1&amp;per_page=10</span><br></pre></td></tr></table></figure></p>\n<p><strong>占位图</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://temp.im/288x288</span><br></pre></td></tr></table></figure></p>\n"},{"_content":".color {\n    /* 主题深:cf69 */\n    /* Purple */\n  color: #9966ff,\n  /* DarkBluer */\n  color: #6666ff,\n  Green:#66ff99\n  LightBlue: '#6699ff'\n  <!-- 主题浅:cf69 -->\n  Yellow: '#ffff66'\n  LightOrange: '#ffcc66'\n  DarkOrange: '#ff9966'\n  Red: '#ff6666'\n  <!-- 主题灰:abcdef -->\n  GrayBlue: '#abcdef'\n  GrayGreen: '#bedcaf'\n  GrayEmerald: '#cafedb'\n  GrayPurple: '#decafb'\n  <!-- 文字黑: 分级标题 -->\n  DarkerBlack: '#1a2a3a'\n  DarkBlack: '#2a3a4a'\n  Black: '#333333'\n  LightBlack: '#3a4a5a'\n  LighterBlack: '#4a5a6a'\n  <!-- 图层灰:背景, 列表项 -->\n  DarkerGray: '#aaaaaa'\n  DarkGray: '#bbbbbb'\n  Gray: '#cccccc'\n  LightGray: '#dddddd'\n  LighterGray: '#eeeeee'\n}","source":"_posts/temp.css","raw":".color {\n    /* 主题深:cf69 */\n    /* Purple */\n  color: #9966ff,\n  /* DarkBluer */\n  color: #6666ff,\n  Green:#66ff99\n  LightBlue: '#6699ff'\n  <!-- 主题浅:cf69 -->\n  Yellow: '#ffff66'\n  LightOrange: '#ffcc66'\n  DarkOrange: '#ff9966'\n  Red: '#ff6666'\n  <!-- 主题灰:abcdef -->\n  GrayBlue: '#abcdef'\n  GrayGreen: '#bedcaf'\n  GrayEmerald: '#cafedb'\n  GrayPurple: '#decafb'\n  <!-- 文字黑: 分级标题 -->\n  DarkerBlack: '#1a2a3a'\n  DarkBlack: '#2a3a4a'\n  Black: '#333333'\n  LightBlack: '#3a4a5a'\n  LighterBlack: '#4a5a6a'\n  <!-- 图层灰:背景, 列表项 -->\n  DarkerGray: '#aaaaaa'\n  DarkGray: '#bbbbbb'\n  Gray: '#cccccc'\n  LightGray: '#dddddd'\n  LighterGray: '#eeeeee'\n}","slug":"temp","published":1,"date":"2019-05-04T01:25:49.525Z","updated":"2019-05-04T01:30:53.027Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7ix3001ahkuzzz5am39w","content":".color {\n    /* 主题深:cf69 */\n    /* Purple */\n  color: #9966ff,\n  /* DarkBluer */\n  color: #6666ff,\n  Green:#66ff99\n  LightBlue: '#6699ff'\n  <!-- 主题浅:cf69 -->\n  Yellow: '#ffff66'\n  LightOrange: '#ffcc66'\n  DarkOrange: '#ff9966'\n  Red: '#ff6666'\n  <!-- 主题灰:abcdef -->\n  GrayBlue: '#abcdef'\n  GrayGreen: '#bedcaf'\n  GrayEmerald: '#cafedb'\n  GrayPurple: '#decafb'\n  <!-- 文字黑: 分级标题 -->\n  DarkerBlack: '#1a2a3a'\n  DarkBlack: '#2a3a4a'\n  Black: '#333333'\n  LightBlack: '#3a4a5a'\n  LighterBlack: '#4a5a6a'\n  <!-- 图层灰:背景, 列表项 -->\n  DarkerGray: '#aaaaaa'\n  DarkGray: '#bbbbbb'\n  Gray: '#cccccc'\n  LightGray: '#dddddd'\n  LighterGray: '#eeeeee'\n}","site":{"data":{}},"excerpt":"","more":".color {\n    /* 主题深:cf69 */\n    /* Purple */\n  color: #9966ff,\n  /* DarkBluer */\n  color: #6666ff,\n  Green:#66ff99\n  LightBlue: '#6699ff'\n  <!-- 主题浅:cf69 -->\n  Yellow: '#ffff66'\n  LightOrange: '#ffcc66'\n  DarkOrange: '#ff9966'\n  Red: '#ff6666'\n  <!-- 主题灰:abcdef -->\n  GrayBlue: '#abcdef'\n  GrayGreen: '#bedcaf'\n  GrayEmerald: '#cafedb'\n  GrayPurple: '#decafb'\n  <!-- 文字黑: 分级标题 -->\n  DarkerBlack: '#1a2a3a'\n  DarkBlack: '#2a3a4a'\n  Black: '#333333'\n  LightBlack: '#3a4a5a'\n  LighterBlack: '#4a5a6a'\n  <!-- 图层灰:背景, 列表项 -->\n  DarkerGray: '#aaaaaa'\n  DarkGray: '#bbbbbb'\n  Gray: '#cccccc'\n  LightGray: '#dddddd'\n  LighterGray: '#eeeeee'\n}"},{"title":"style","date":"2019-04-21T08:08:26.000Z","_content":"## 1.文档目的\n本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。\n官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等\n参考网址:\n[BootStrap全局css样式](https://v3.bootcss.com/css/)，[bootstrap.min.css 提取码：he9a](https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw)，[bootstrap.css 提取码：khav](https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew)\n\n## 2.内容梳理\n提取通用样式类如下:\n···\n    .container {\n        min-width: 992px !important;\n    }\n\n    .form-row {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n        margin-right: -5px;\n        margin-left: -5px;\n    }\n\n    .btn {\n        display: inline-block;\n        font-weight: 400;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: middle;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        border: 1px solid transparent;\n        padding: 0.375rem 0.75rem;\n        font-size: 1rem;\n        line-height: 1.5;\n        border-radius: 0.25rem;\n        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    }\n\n    .btn:hover, .btn:focus {\n        text-decoration: none;\n    }\n\n    .btn:focus, .btn.focus {\n        outline: 0;\n        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    }\n\n    .btn.disabled, .btn:disabled {\n        opacity: 0.65;\n    }\n\n    .btn:not(:disabled):not(.disabled) {\n        cursor: pointer;\n    }\n\n    .font-weight-light {\n        font-weight: 300 !important;\n    }\n\n    .font-weight-normal {\n        font-weight: 400 !important;\n    }\n\n    .font-weight-bold {\n        font-weight: 700 !important;\n    }\n\n    .font-italic {\n        font-style: italic !important;\n    }\n\n    .text-primary {\n        color: #007bff !important;\n    }\n\n    a.text-primary:hover, a.text-primary:focus {\n        color: #0062cc !important;\n    }\n\n    .text-secondary {\n        color: #6c757d !important;\n    }\n\n    a.text-secondary:hover, a.text-secondary:focus {\n        color: #545b62 !important;\n    }\n\n    .text-success {\n        color: #28a745 !important;\n    }\n\n    a.text-success:hover, a.text-success:focus {\n        color: #1e7e34 !important;\n    }\n\n    .text-info {\n        color: #17a2b8 !important;\n    }\n\n    a.text-info:hover, a.text-info:focus {\n        color: #117a8b !important;\n    }\n\n    .text-warning {\n        color: #ffc107 !important;\n    }\n\n    a.text-warning:hover, a.text-warning:focus {\n        color: #d39e00 !important;\n    }\n\n    .text-danger {\n        color: #dc3545 !important;\n    }\n\n    a.text-danger:hover, a.text-danger:focus {\n        color: #bd2130 !important;\n    }\n\n    .text-light {\n        color: #f8f9fa !important;\n    }\n\n    a.text-light:hover, a.text-light:focus {\n        color: #dae0e5 !important;\n    }\n\n    .text-dark {\n        color: #343a40 !important;\n    }\n\n    a.text-dark:hover, a.text-dark:focus {\n        color: #1d2124 !important;\n    }\n···","source":"_posts/2019-04-21-style.md","raw":"---\ntitle: style\ndate: 2019-04-21 16:08:26\ntags: css\n---\n## 1.文档目的\n本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。\n官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等\n参考网址:\n[BootStrap全局css样式](https://v3.bootcss.com/css/)，[bootstrap.min.css 提取码：he9a](https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw)，[bootstrap.css 提取码：khav](https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew)\n\n## 2.内容梳理\n提取通用样式类如下:\n···\n    .container {\n        min-width: 992px !important;\n    }\n\n    .form-row {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -ms-flex-wrap: wrap;\n        flex-wrap: wrap;\n        margin-right: -5px;\n        margin-left: -5px;\n    }\n\n    .btn {\n        display: inline-block;\n        font-weight: 400;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: middle;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        border: 1px solid transparent;\n        padding: 0.375rem 0.75rem;\n        font-size: 1rem;\n        line-height: 1.5;\n        border-radius: 0.25rem;\n        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    }\n\n    .btn:hover, .btn:focus {\n        text-decoration: none;\n    }\n\n    .btn:focus, .btn.focus {\n        outline: 0;\n        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    }\n\n    .btn.disabled, .btn:disabled {\n        opacity: 0.65;\n    }\n\n    .btn:not(:disabled):not(.disabled) {\n        cursor: pointer;\n    }\n\n    .font-weight-light {\n        font-weight: 300 !important;\n    }\n\n    .font-weight-normal {\n        font-weight: 400 !important;\n    }\n\n    .font-weight-bold {\n        font-weight: 700 !important;\n    }\n\n    .font-italic {\n        font-style: italic !important;\n    }\n\n    .text-primary {\n        color: #007bff !important;\n    }\n\n    a.text-primary:hover, a.text-primary:focus {\n        color: #0062cc !important;\n    }\n\n    .text-secondary {\n        color: #6c757d !important;\n    }\n\n    a.text-secondary:hover, a.text-secondary:focus {\n        color: #545b62 !important;\n    }\n\n    .text-success {\n        color: #28a745 !important;\n    }\n\n    a.text-success:hover, a.text-success:focus {\n        color: #1e7e34 !important;\n    }\n\n    .text-info {\n        color: #17a2b8 !important;\n    }\n\n    a.text-info:hover, a.text-info:focus {\n        color: #117a8b !important;\n    }\n\n    .text-warning {\n        color: #ffc107 !important;\n    }\n\n    a.text-warning:hover, a.text-warning:focus {\n        color: #d39e00 !important;\n    }\n\n    .text-danger {\n        color: #dc3545 !important;\n    }\n\n    a.text-danger:hover, a.text-danger:focus {\n        color: #bd2130 !important;\n    }\n\n    .text-light {\n        color: #f8f9fa !important;\n    }\n\n    a.text-light:hover, a.text-light:focus {\n        color: #dae0e5 !important;\n    }\n\n    .text-dark {\n        color: #343a40 !important;\n    }\n\n    a.text-dark:hover, a.text-dark:focus {\n        color: #1d2124 !important;\n    }\n···","slug":"style","published":1,"updated":"2019-04-21T09:06:45.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7ix5001chkuz8t8757vc","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。<br>官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等<br>参考网址:<br><a href=\"https://v3.bootcss.com/css/\" target=\"_blank\" rel=\"noopener\">BootStrap全局css样式</a>，<a href=\"https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw\" target=\"_blank\" rel=\"noopener\">bootstrap.min.css 提取码：he9a</a>，<a href=\"https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew\" target=\"_blank\" rel=\"noopener\">bootstrap.css 提取码：khav</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>提取通用样式类如下:<br>···<br>    .container {<br>        min-width: 992px !important;<br>    }</p>\n<pre><code>.form-row {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    margin-right: -5px;\n    margin-left: -5px;\n}\n\n.btn {\n    display: inline-block;\n    font-weight: 400;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    border: 1px solid transparent;\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    line-height: 1.5;\n    border-radius: 0.25rem;\n    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.btn:hover, .btn:focus {\n    text-decoration: none;\n}\n\n.btn:focus, .btn.focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.btn.disabled, .btn:disabled {\n    opacity: 0.65;\n}\n\n.btn:not(:disabled):not(.disabled) {\n    cursor: pointer;\n}\n\n.font-weight-light {\n    font-weight: 300 !important;\n}\n\n.font-weight-normal {\n    font-weight: 400 !important;\n}\n\n.font-weight-bold {\n    font-weight: 700 !important;\n}\n\n.font-italic {\n    font-style: italic !important;\n}\n\n.text-primary {\n    color: #007bff !important;\n}\n\na.text-primary:hover, a.text-primary:focus {\n    color: #0062cc !important;\n}\n\n.text-secondary {\n    color: #6c757d !important;\n}\n\na.text-secondary:hover, a.text-secondary:focus {\n    color: #545b62 !important;\n}\n\n.text-success {\n    color: #28a745 !important;\n}\n\na.text-success:hover, a.text-success:focus {\n    color: #1e7e34 !important;\n}\n\n.text-info {\n    color: #17a2b8 !important;\n}\n\na.text-info:hover, a.text-info:focus {\n    color: #117a8b !important;\n}\n\n.text-warning {\n    color: #ffc107 !important;\n}\n\na.text-warning:hover, a.text-warning:focus {\n    color: #d39e00 !important;\n}\n\n.text-danger {\n    color: #dc3545 !important;\n}\n\na.text-danger:hover, a.text-danger:focus {\n    color: #bd2130 !important;\n}\n\n.text-light {\n    color: #f8f9fa !important;\n}\n\na.text-light:hover, a.text-light:focus {\n    color: #dae0e5 !important;\n}\n\n.text-dark {\n    color: #343a40 !important;\n}\n\na.text-dark:hover, a.text-dark:focus {\n    color: #1d2124 !important;\n}\n</code></pre><p>···</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。<br>官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等<br>参考网址:<br><a href=\"https://v3.bootcss.com/css/\" target=\"_blank\" rel=\"noopener\">BootStrap全局css样式</a>，<a href=\"https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw\" target=\"_blank\" rel=\"noopener\">bootstrap.min.css 提取码：he9a</a>，<a href=\"https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew\" target=\"_blank\" rel=\"noopener\">bootstrap.css 提取码：khav</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>提取通用样式类如下:<br>···<br>    .container {<br>        min-width: 992px !important;<br>    }</p>\n<pre><code>.form-row {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n    margin-right: -5px;\n    margin-left: -5px;\n}\n\n.btn {\n    display: inline-block;\n    font-weight: 400;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    border: 1px solid transparent;\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    line-height: 1.5;\n    border-radius: 0.25rem;\n    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.btn:hover, .btn:focus {\n    text-decoration: none;\n}\n\n.btn:focus, .btn.focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.btn.disabled, .btn:disabled {\n    opacity: 0.65;\n}\n\n.btn:not(:disabled):not(.disabled) {\n    cursor: pointer;\n}\n\n.font-weight-light {\n    font-weight: 300 !important;\n}\n\n.font-weight-normal {\n    font-weight: 400 !important;\n}\n\n.font-weight-bold {\n    font-weight: 700 !important;\n}\n\n.font-italic {\n    font-style: italic !important;\n}\n\n.text-primary {\n    color: #007bff !important;\n}\n\na.text-primary:hover, a.text-primary:focus {\n    color: #0062cc !important;\n}\n\n.text-secondary {\n    color: #6c757d !important;\n}\n\na.text-secondary:hover, a.text-secondary:focus {\n    color: #545b62 !important;\n}\n\n.text-success {\n    color: #28a745 !important;\n}\n\na.text-success:hover, a.text-success:focus {\n    color: #1e7e34 !important;\n}\n\n.text-info {\n    color: #17a2b8 !important;\n}\n\na.text-info:hover, a.text-info:focus {\n    color: #117a8b !important;\n}\n\n.text-warning {\n    color: #ffc107 !important;\n}\n\na.text-warning:hover, a.text-warning:focus {\n    color: #d39e00 !important;\n}\n\n.text-danger {\n    color: #dc3545 !important;\n}\n\na.text-danger:hover, a.text-danger:focus {\n    color: #bd2130 !important;\n}\n\n.text-light {\n    color: #f8f9fa !important;\n}\n\na.text-light:hover, a.text-light:focus {\n    color: #dae0e5 !important;\n}\n\n.text-dark {\n    color: #343a40 !important;\n}\n\na.text-dark:hover, a.text-dark:focus {\n    color: #1d2124 !important;\n}\n</code></pre><p>···</p>\n"},{"title":"icon","date":"2019-04-21T09:10:14.000Z","_content":"## 1.文档目的\n网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。\n参考网址:\n[阿里图标库iconfont](https://www.iconfont.cn/)\n\n## 2.内容梳理\n使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：\n···\n<link href=\"http://at.alicdn.com/t/font_803606_60a86mpe3nt.css\" rel=\"stylesheet\">\n···\n在项目中使用图标如下（可通过css改变图标大小和颜色）：\n···\n<i class=\"iconfont icon-jiazheng\" style=\"color:red;font-size: 55px;\"></i>\n···\n","source":"_posts/2019-04-21-icon.md","raw":"---\ntitle: icon\ndate: 2019-04-21 17:10:14\ntags: css\n---\n## 1.文档目的\n网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。\n参考网址:\n[阿里图标库iconfont](https://www.iconfont.cn/)\n\n## 2.内容梳理\n使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：\n···\n<link href=\"http://at.alicdn.com/t/font_803606_60a86mpe3nt.css\" rel=\"stylesheet\">\n···\n在项目中使用图标如下（可通过css改变图标大小和颜色）：\n···\n<i class=\"iconfont icon-jiazheng\" style=\"color:red;font-size: 55px;\"></i>\n···\n","slug":"icon","published":1,"updated":"2019-04-21T09:25:57.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7ix7001ehkuzt51j8iuv","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。<br>参考网址:<br><a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">阿里图标库iconfont</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：<br>···</p>\n<p><link href=\"http://at.alicdn.com/t/font_803606_60a86mpe3nt.css\" rel=\"stylesheet\"><br>···<br>在项目中使用图标如下（可通过css改变图标大小和颜色）：<br>···<br><i class=\"iconfont icon-jiazheng\" style=\"color:red;font-size: 55px;\"></i><br>···</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。<br>参考网址:<br><a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">阿里图标库iconfont</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：<br>···</p>\n<p><link href=\"http://at.alicdn.com/t/font_803606_60a86mpe3nt.css\" rel=\"stylesheet\"><br>···<br>在项目中使用图标如下（可通过css改变图标大小和颜色）：<br>···<br><i class=\"iconfont icon-jiazheng\" style=\"color:red;font-size: 55px;\"></i><br>···</p>\n"},{"title":"基于React Native的android打包","date":"2019-03-19T04:39:12.000Z","_content":"## 1.文档目的\n打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.\n打包IOS，需要有打包证书支持,这里先不做探究.\n打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。\n\n## 2.内容梳理\n步骤一:配置android/app/build.gradle文件,如图一所示\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n```\n signingConfigs {\n        release {\n            storeFile file(MYAPP_RELEASE_STORE_FILE)\n            storePassword MYAPP_RELEASE_STORE_PASSWORD\n            keyAlias MYAPP_RELEASE_KEY_ALIAS\n            keyPassword MYAPP_RELEASE_KEY_PASSWORD\n        }\n }\n\nsigningConfig signingConfigs.release\n```\n步骤二:配置android/gradle.properties文件,如图二所示\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n```\nMYAPP_RELEASE_STORE_FILE=my-release-key.keystore\n\nMYAPP_RELEASE_KEY_ALIAS=my-key-alias\n\nMYAPP_RELEASE_STORE_PASSWORD=123456789\n\nMYAPP_RELEASE_KEY_PASSWORD=123456789\n```\n步骤三:在android/app/文件夹下添加key文件\n[my-release-key.keystore 提取码: ncpe](https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA)\n","source":"_posts/2019-03-19-android-apk.md","raw":"---\ntitle: 基于React Native的android打包\ndate: 2019-03-19 12:39:12\ntags: React\n---\n## 1.文档目的\n打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.\n打包IOS，需要有打包证书支持,这里先不做探究.\n打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。\n\n## 2.内容梳理\n步骤一:配置android/app/build.gradle文件,如图一所示\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n```\n signingConfigs {\n        release {\n            storeFile file(MYAPP_RELEASE_STORE_FILE)\n            storePassword MYAPP_RELEASE_STORE_PASSWORD\n            keyAlias MYAPP_RELEASE_KEY_ALIAS\n            keyPassword MYAPP_RELEASE_KEY_PASSWORD\n        }\n }\n\nsigningConfig signingConfigs.release\n```\n步骤二:配置android/gradle.properties文件,如图二所示\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n```\nMYAPP_RELEASE_STORE_FILE=my-release-key.keystore\n\nMYAPP_RELEASE_KEY_ALIAS=my-key-alias\n\nMYAPP_RELEASE_STORE_PASSWORD=123456789\n\nMYAPP_RELEASE_KEY_PASSWORD=123456789\n```\n步骤三:在android/app/文件夹下添加key文件\n[my-release-key.keystore 提取码: ncpe](https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA)\n","slug":"android-apk","published":1,"updated":"2019-04-21T08:04:47.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv8v7ix8001ghkuzx5cewg1m","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.<br>打包IOS，需要有打包证书支持,这里先不做探究.<br>打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>步骤一:配置android/app/build.gradle文件,如图一所示<br><img src=\"/2019/03/19/android-apk/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class=\"line\">            storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class=\"line\">            keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class=\"line\">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signingConfig signingConfigs.release</span><br></pre></td></tr></table></figure></p>\n<p>步骤二:配置android/gradle.properties文件,如图二所示<br><img src=\"/2019/03/19/android-apk/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_STORE_PASSWORD=123456789</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_PASSWORD=123456789</span><br></pre></td></tr></table></figure></p>\n<p>步骤三:在android/app/文件夹下添加key文件<br><a href=\"https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA\" target=\"_blank\" rel=\"noopener\">my-release-key.keystore 提取码: ncpe</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.<br>打包IOS，需要有打包证书支持,这里先不做探究.<br>打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>步骤一:配置android/app/build.gradle文件,如图一所示<br><img src=\"/2019/03/19/android-apk/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class=\"line\">            storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class=\"line\">            keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class=\"line\">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signingConfig signingConfigs.release</span><br></pre></td></tr></table></figure></p>\n<p>步骤二:配置android/gradle.properties文件,如图二所示<br><img src=\"/2019/03/19/android-apk/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_STORE_PASSWORD=123456789</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_PASSWORD=123456789</span><br></pre></td></tr></table></figure></p>\n<p>步骤三:在android/app/文件夹下添加key文件<br><a href=\"https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA\" target=\"_blank\" rel=\"noopener\">my-release-key.keystore 提取码: ncpe</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/2018-06-13-git1/image001.png","slug":"image001.png","post":"cjv8v7hwm0000hkuz9mbzpfp0","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image002.png","slug":"image002.png","post":"cjv8v7hwm0000hkuz9mbzpfp0","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image003.png","slug":"image003.png","post":"cjv8v7hwm0000hkuz9mbzpfp0","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image004.png","slug":"image004.png","post":"cjv8v7hwm0000hkuz9mbzpfp0","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image005.png","slug":"image005.png","post":"cjv8v7hwm0000hkuz9mbzpfp0","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image006.png","slug":"image006.png","post":"cjv8v7hwm0000hkuz9mbzpfp0","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image007.png","slug":"image007.png","post":"cjv8v7hwm0000hkuz9mbzpfp0","modified":0,"renderable":0},{"_id":"source/_posts/2019-03-19-android-apk/image001.png","slug":"image001.png","post":"cjv8v7ix8001ghkuzx5cewg1m","modified":0,"renderable":0},{"_id":"source/_posts/2019-03-26-theme/image001.png","slug":"image001.png","post":"cjv8v7iwm000vhkuzmdw6dr2h","modified":0,"renderable":0},{"_id":"source/_posts/2019-03-19-android-apk/image002.png","slug":"image002.png","post":"cjv8v7ix8001ghkuzx5cewg1m","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git4/image001.png","slug":"image001.png","post":"cjv8v7ivj0007hkuzhg749lxg","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git4/image002.png","slug":"image002.png","post":"cjv8v7ivj0007hkuzhg749lxg","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git4/image003.png","slug":"image003.png","post":"cjv8v7ivj0007hkuzhg749lxg","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git3/image001.png","slug":"image001.png","post":"cjv8v7ive0005hkuzzwisc9m8","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git3/image002.png","slug":"image002.png","post":"cjv8v7ive0005hkuzzwisc9m8","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git3/image003.png","slug":"image003.png","post":"cjv8v7ive0005hkuzzwisc9m8","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image001.png","slug":"image001.png","post":"cjv8v7iv70003hkuzick4i3ph","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image002.png","slug":"image002.png","post":"cjv8v7iv70003hkuzick4i3ph","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image003.png","slug":"image003.png","post":"cjv8v7iv70003hkuzick4i3ph","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image004.png","slug":"image004.png","post":"cjv8v7iv70003hkuzick4i3ph","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image001.png","slug":"image001.png","post":"cjv8v7iw1000bhkuzkqt388xa","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image002.png","slug":"image002.png","post":"cjv8v7iw1000bhkuzkqt388xa","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image003.png","slug":"image003.png","post":"cjv8v7iw1000bhkuzkqt388xa","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image004.png","slug":"image004.png","post":"cjv8v7iw1000bhkuzkqt388xa","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image005.png","slug":"image005.png","post":"cjv8v7iw1000bhkuzkqt388xa","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image006.png","slug":"image006.png","post":"cjv8v7iw1000bhkuzkqt388xa","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjv8v7hwm0000hkuz9mbzpfp0","tag_id":"cjv8v7hx10001hkuz2ehu1qsy","_id":"cjv8v7hx50002hkuz7ygcvxfa"},{"post_id":"cjv8v7iv70003hkuzick4i3ph","tag_id":"cjv8v7hx10001hkuz2ehu1qsy","_id":"cjv8v7ivi0006hkuz7vermfz1"},{"post_id":"cjv8v7ive0005hkuzzwisc9m8","tag_id":"cjv8v7hx10001hkuz2ehu1qsy","_id":"cjv8v7ivw0008hkuzt61elh6b"},{"post_id":"cjv8v7ivj0007hkuzhg749lxg","tag_id":"cjv8v7hx10001hkuz2ehu1qsy","_id":"cjv8v7iw1000ahkuzu7vrj3fx"},{"post_id":"cjv8v7ivw0009hkuzmp6gh8ma","tag_id":"cjv8v7hx10001hkuz2ehu1qsy","_id":"cjv8v7iw3000chkuzcgy86ux0"},{"post_id":"cjv8v7iw1000bhkuzkqt388xa","tag_id":"cjv8v7hx10001hkuz2ehu1qsy","_id":"cjv8v7iw5000ehkuzp55fc9h4"},{"post_id":"cjv8v7iw3000dhkuzlqwsoyr6","tag_id":"cjv8v7iw8000ghkuz7oqeb5r2","_id":"cjv8v7iwe000lhkuz1qp8m68d"},{"post_id":"cjv8v7iw6000fhkuz1j7erx9d","tag_id":"cjv8v7iwd000khkuzao22ka7m","_id":"cjv8v7iwj000qhkuzteyavn1b"},{"post_id":"cjv8v7iw9000hhkuzmtmflzew","tag_id":"cjv8v7iwh000ohkuzy304lyiq","_id":"cjv8v7iwm000uhkuzkhjxgufr"},{"post_id":"cjv8v7iwb000ihkuzv1ryelwj","tag_id":"cjv8v7iwk000shkuzvq8xrbyv","_id":"cjv8v7iwr000yhkuzmb8md1zj"},{"post_id":"cjv8v7iwc000jhkuzjhinga48","tag_id":"cjv8v7iwk000shkuzvq8xrbyv","_id":"cjv8v7iwv0012hkuzpjb4q9n5"},{"post_id":"cjv8v7iwe000mhkuz9l77hmr6","tag_id":"cjv8v7iwt0010hkuz8d7a2nkf","_id":"cjv8v7ix00016hkuzv0zzlzsw"},{"post_id":"cjv8v7iwg000nhkuz5cks7q67","tag_id":"cjv8v7iwz0015hkuzyk4y94rf","_id":"cjv8v7ix4001bhkuzlsenr10f"},{"post_id":"cjv8v7iwi000phkuz2us8buvf","tag_id":"cjv8v7ix30019hkuztb802x8s","_id":"cjv8v7ix8001fhkuzztzbd7cb"},{"post_id":"cjv8v7iwj000rhkuz9ijjp84s","tag_id":"cjv8v7ix6001dhkuz8laquf37","_id":"cjv8v7ixa001ihkuzz4mfqj9t"},{"post_id":"cjv8v7iwl000thkuzap4wyrqq","tag_id":"cjv8v7ixa001hhkuz17vad491","_id":"cjv8v7ixc001khkuzeudwbgsg"},{"post_id":"cjv8v7iwm000vhkuzmdw6dr2h","tag_id":"cjv8v7ixb001jhkuzazqwbd0c","_id":"cjv8v7ixd001mhkuzfwtabczg"},{"post_id":"cjv8v7iwo000xhkuz4nwqwl9n","tag_id":"cjv8v7ixc001lhkuzhpavtbal","_id":"cjv8v7ixe001ohkuz1yphc0fh"},{"post_id":"cjv8v7iwr000zhkuzw9xvz284","tag_id":"cjv8v7ixd001nhkuz3qcrsg89","_id":"cjv8v7ixf001qhkuzbb2mu2xy"},{"post_id":"cjv8v7iwt0011hkuzunsrmue9","tag_id":"cjv8v7ixc001lhkuzhpavtbal","_id":"cjv8v7ixg001shkuz8tki93k5"},{"post_id":"cjv8v7iww0013hkuzgmikslpa","tag_id":"cjv8v7ixf001rhkuza2bw7h90","_id":"cjv8v7ixh001uhkuzdgermcac"},{"post_id":"cjv8v7iwy0014hkuz7toe1f9w","tag_id":"cjv8v7ixc001lhkuzhpavtbal","_id":"cjv8v7ixi001whkuzheeqbxwl"},{"post_id":"cjv8v7ix00017hkuzsmi65dnt","tag_id":"cjv8v7ixc001lhkuzhpavtbal","_id":"cjv8v7ixj001yhkuzbss0wyk6"},{"post_id":"cjv8v7ix20018hkuzie4njokd","tag_id":"cjv8v7ixi001xhkuzfhvllsqr","_id":"cjv8v7ixk0020hkuzd6f4rf2g"},{"post_id":"cjv8v7ix5001chkuz8t8757vc","tag_id":"cjv8v7ixb001jhkuzazqwbd0c","_id":"cjv8v7ixl0022hkuz1qjcg7h2"},{"post_id":"cjv8v7ix7001ehkuzt51j8iuv","tag_id":"cjv8v7ixb001jhkuzazqwbd0c","_id":"cjv8v7ixm0024hkuz4l1ea2y2"},{"post_id":"cjv8v7ix8001ghkuzx5cewg1m","tag_id":"cjv8v7ixc001lhkuzhpavtbal","_id":"cjv8v7ixm0025hkuzx09kc9w7"}],"Tag":[{"name":"Git","_id":"cjv8v7hx10001hkuz2ehu1qsy"},{"name":"GoogleDev","_id":"cjv8v7iw8000ghkuz7oqeb5r2"},{"name":"keymap","_id":"cjv8v7iwd000khkuzao22ka7m"},{"name":"Hexo","_id":"cjv8v7iwh000ohkuzy304lyiq"},{"name":"JS","_id":"cjv8v7iwk000shkuzvq8xrbyv"},{"name":"CodingQuality","_id":"cjv8v7iwt0010hkuz8d7a2nkf"},{"name":"Npm","_id":"cjv8v7iwz0015hkuzyk4y94rf"},{"name":"life","_id":"cjv8v7ix30019hkuztb802x8s"},{"name":"VueServe","_id":"cjv8v7ix6001dhkuz8laquf37"},{"name":"Axios","_id":"cjv8v7ixa001hhkuz17vad491"},{"name":"css","_id":"cjv8v7ixb001jhkuzazqwbd0c"},{"name":"React","_id":"cjv8v7ixc001lhkuzhpavtbal"},{"name":"Serve","_id":"cjv8v7ixd001nhkuz3qcrsg89"},{"name":"echarts","_id":"cjv8v7ixf001rhkuza2bw7h90"},{"name":"JSON","_id":"cjv8v7ixi001xhkuzfhvllsqr"}]}}