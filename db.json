{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1562549127661},{"_id":"themes/BlueLake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1562549127661},{"_id":"themes/BlueLake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1562549127661},{"_id":"themes/BlueLake/_config.yml","hash":"2d50b1f6a441721d6ea9ce6ffff905b3075fd349","modified":1562549127662},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1562549127675},{"_id":"source/_posts/2018-06-13-git1.md","hash":"a0377db90cdc8fef23860468c2949b6c07f488ef","modified":1562549127627},{"_id":"source/_posts/2018-06-14-git2.md","hash":"a833eea3b55ebac2987542c7f04a671067f123db","modified":1562549127629},{"_id":"source/_posts/2018-06-14-git3.md","hash":"555c6389876839676d1373dd3941f7a57b5e0d79","modified":1562549127630},{"_id":"source/_posts/2018-06-14-git4.md","hash":"a34903006b4965cefee1f3dd936b9fb1cbb3dbd8","modified":1562549127634},{"_id":"source/_posts/2018-06-14-git5.md","hash":"cfb77d3f25a792dd8d22a9799baef5c1d48a9ae5","modified":1562549127637},{"_id":"source/_posts/2018-06-25-git6.md","hash":"e441cbe743c6591ab4a8e50df464d01caa3c0028","modified":1562549127643},{"_id":"source/_posts/2018-06-29-googledev.md","hash":"b3132f15c7c01cf02233d0a5aa9f3013987ab9fc","modified":1570515512083},{"_id":"source/_posts/2018-11-15-hexo.md","hash":"8109e9a3a752b523cb1a859401e88b54fc9bbd3f","modified":1570515518577},{"_id":"source/_posts/2018-11-15-npm.md","hash":"2e8c037378b5d201cf408988ec9400d337974058","modified":1570515528831},{"_id":"source/_posts/2018-11-15-keymap.md","hash":"544662c69bf7498903f9fb6310fd6345ab52c50c","modified":1570515523786},{"_id":"source/_posts/2018-11-15-vueserve.md","hash":"6b61c37abb37790deea7ce82863300381ce07b42","modified":1570515487986},{"_id":"source/_posts/2018-11-19-array.md","hash":"faa2335c343485481fa3af4eceee165818bfcb33","modified":1562549127646},{"_id":"source/_posts/2018-11-19-string.md","hash":"0d8bfbbf0597973e71fd96a0c46cacef34940d70","modified":1562549127646},{"_id":"source/_posts/2018-12-21-axios.md","hash":"1a210445a3ad6acf6254915f054d4f0685ae43a5","modified":1565944604916},{"_id":"source/_posts/2018-12-19-coding-quality.md","hash":"35a63bacedf121ac50233a743ac11625a9fb20af","modified":1568514526482},{"_id":"source/_posts/2018-12-19-sleep-quality.md","hash":"a02a6b3cc139b49f4870d1f1a559cece5fe5adff","modified":1562549127647},{"_id":"source/_posts/2018-12-26-redux.md","hash":"03a2fe1e769e3b29a55f058b2e34c4023ef216f2","modified":1562549127648},{"_id":"source/_posts/2019-03-15-code-push.md","hash":"05cf49cc77fba8d518220a06077cedaac99dba28","modified":1562549127648},{"_id":"source/_posts/2019-03-26-theme.md","hash":"66af39c0fdf7e09f4c4e5aaebade3cb9f6efa680","modified":1562549127652},{"_id":"source/_posts/2019-03-19-android-apk.md","hash":"45899e9444c56ff526bece7449177a66cc6ae7ee","modified":1562549127649},{"_id":"source/_posts/2019-03-14-serve.md","hash":"11f57ab1f0419257bed5aa82e3f069dcbaded055","modified":1570515547235},{"_id":"source/_posts/2019-03-25-android-manifest.md","hash":"e6b6b7be9412e1b9bdd1dff69451e5cf28a9ea9a","modified":1562549127652},{"_id":"source/_posts/2019-03-27-echarts.md","hash":"4bc00e259f9d23ba02d7919eaf6386186084393c","modified":1565944672265},{"_id":"source/_posts/2019-04-11-json-server.md","hash":"64f5fe42856950b5fbbfa8acedb4ae3173ff1eef","modified":1570515431597},{"_id":"source/_posts/2019-04-04-pdf-view.md","hash":"aee295c86fdfcf89f3f1cd11ee270bc298fe07f9","modified":1562549127654},{"_id":"source/_posts/2019-04-21-icon.md","hash":"b143cf2c59248a65fc2253e75b3a61d25e4daa7a","modified":1562549127654},{"_id":"source/_posts/2019-04-21-style.md","hash":"94053c451f2a4cca0078c985e25b853192be40c0","modified":1562549127654},{"_id":"source/_posts/2019-05-04-layout.md","hash":"46b4b98b3bc5f38dc4c09be6cb5a85c3e67a0b16","modified":1562549127655},{"_id":"source/_posts/2019-06-11-module.md","hash":"eff40f03ab62648f6cfb6ee2facc977aeca29f68","modified":1562549127655},{"_id":"source/_posts/2019-05-27-px.md","hash":"112196eab6b10f531cc7f0e770e9da72a02fa950","modified":1562549127655},{"_id":"source/_posts/2019-06-12-class.md","hash":"86c95f97f70a44c1332387a1360f7da6163083a7","modified":1562549127656},{"_id":"source/_posts/2019-06-12-ios.md","hash":"0d130dcc74b88143be44fa16cc7dc94e2a21fb7d","modified":1562549127656},{"_id":"source/_posts/2019-06-15-design.md","hash":"ea2f4233b0ffea906eb1031e9436471fb766872d","modified":1568537452834},{"_id":"source/_posts/2019-06-15-prototype.md","hash":"92457d9be2af416f358eb9453b80681e819a8035","modified":1562549127657},{"_id":"source/_posts/2019-06-14-this.md","hash":"11fe018024a488a91ad006fe5b99a38915120ebc","modified":1562549127656},{"_id":"source/_posts/2019-06-30-native.md","hash":"4c36dd40c443cef8fc825b73678487b325ddc320","modified":1562549127659},{"_id":"source/_posts/2019-06-30-react.md","hash":"cae26c73b8edcfbc81c07ed88de4bca459bcdf65","modified":1562549127659},{"_id":"source/_posts/2019-07-08-util.md","hash":"ce62d252388e7cb279a1d47883f9f5b1fac861fa","modified":1570524604644},{"_id":"source/_posts/2019-07-13-ts-vue.md","hash":"5aed1f9641617a7ad006e3b143778fe7eb952b23","modified":1563010300816},{"_id":"source/_posts/2019-07-17-postMessage.md","hash":"c632a62b20800a476dcecdcb0aa2969392cd3a04","modified":1563345278837},{"_id":"source/_posts/2019-07-31-h5plus-app.md","hash":"e747801a7750d6857842c2d8a6139e7b2dbb9a86","modified":1564560130347},{"_id":"source/_posts/2019-09-29-es6.md","hash":"25004c7c87ce7eecd27ed41295ce19f2b3f73386","modified":1569755190888},{"_id":"source/_posts/2019-10-15-vuex.md","hash":"8f18c3378388a9d86dd75ec872285ad0c54153e0","modified":1571107744659},{"_id":"source/about/index.md","hash":"3346367d518f2658d26f0fb1256d9359f10656be","modified":1562549127659},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1562549127663},{"_id":"themes/BlueLake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1562549127663},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1562549127663},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1562549127664},{"_id":"themes/BlueLake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1562549127664},{"_id":"themes/BlueLake/languages/tr.yml","hash":"1c623122f1ff7878595de6783bd83afc3a746373","modified":1562549127665},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1562549127665},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1562549127665},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1562549127673},{"_id":"themes/BlueLake/layout/base.jade","hash":"e767f8150f8ce04f6f78924afa1ec68788ab37ed","modified":1562549127673},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1562549127674},{"_id":"themes/BlueLake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1562549127674},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1562549127674},{"_id":"themes/BlueLake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1562549127674},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1562549127674},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1562549127675},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1562549127677},{"_id":"source/_posts/2018-06-13-git1/image001.png","hash":"baa3b692db921bb9f105672c981696fcfafbeb45","modified":1562549127627},{"_id":"source/_posts/2018-06-13-git1/image002.png","hash":"550aae4a89e803e0f1e912046c572fff5953bb0c","modified":1562549127627},{"_id":"source/_posts/2018-06-13-git1/image004.png","hash":"523977f61f23680a7f748ece3615aa363fcdcf39","modified":1562549127628},{"_id":"source/_posts/2018-06-13-git1/image003.png","hash":"761a48be3e08f4d2d899988be4bcb62288a0d4c5","modified":1562549127627},{"_id":"source/_posts/2018-06-14-git2/image001.png","hash":"a4ed947935e12ddb4b0657f40eaa0fb3a0d96a00","modified":1562549127629},{"_id":"source/_posts/2018-06-13-git1/image005.png","hash":"61b8412368821f4918985ff229acad1721607572","modified":1562549127628},{"_id":"source/_posts/2018-06-13-git1/image006.png","hash":"5e141416ccf588f2e4f659bcea479759dde7f44e","modified":1562549127628},{"_id":"source/_posts/2018-06-13-git1/image007.png","hash":"f4d3ee4c3a46d3b0df84c2a0389909918e042138","modified":1562549127629},{"_id":"source/_posts/2018-06-14-git2/image002.png","hash":"d614a6eb9a137020b1e48cd9a7afd724202631cf","modified":1562549127629},{"_id":"source/_posts/2018-06-14-git2/image003.png","hash":"bd7e01b97b3e97317e0b38c34f84896a34ec14b7","modified":1562549127630},{"_id":"source/_posts/2018-06-14-git2/image004.png","hash":"a28338d5a190cfd74620ece82d1bbc8a26be421a","modified":1562549127630},{"_id":"source/_posts/2018-06-14-git4/image001.png","hash":"c13c931d9f4f8da4bd5d2660c78017424a8ff763","modified":1562549127635},{"_id":"source/_posts/2018-06-14-git3/image001.png","hash":"ebbb2ced73ccf66011eaee06a3320d311802983f","modified":1562549127631},{"_id":"source/_posts/2018-06-14-git3/image002.png","hash":"b4f43ef3de4a0e280f4518911345c07c3dd710c4","modified":1562549127631},{"_id":"source/_posts/2018-06-14-git3/image003.png","hash":"3cc9b01960c9e1fc1384fe580683e850275b121a","modified":1562549127632},{"_id":"source/_posts/2018-06-14-git4/image002.png","hash":"4d380a6a85930bd55506072725548354caf451a9","modified":1562549127635},{"_id":"source/_posts/2018-06-14-git4/image003.png","hash":"16f4b08f8c13bbb044b9d7d6b4321e7bc27a0bf4","modified":1562549127636},{"_id":"source/_posts/2018-06-14-git5/image004.png","hash":"c526c42059557e5427edca61d273fbddb32b9605","modified":1562549127642},{"_id":"source/_posts/2018-06-14-git5/image002.png","hash":"22deb8ebb9b54a7f9c5daabbbaade22e0370c295","modified":1562549127639},{"_id":"source/_posts/2018-06-14-git5/image003.png","hash":"a56d29f945d270d72709fcedda6e89cab5c01693","modified":1562549127640},{"_id":"source/_posts/2018-06-14-git5/image005.png","hash":"4fb5dbc44fa2ead3dbb263baefc149c570611c9d","modified":1562549127643},{"_id":"source/_posts/2018-06-14-git5/image006.png","hash":"8085395d91e4032d111d5466890ca3d9893e53ef","modified":1562549127643},{"_id":"source/_posts/2019-03-26-theme/image001.png","hash":"192ec29acf1a9d30c21ca498a5c36fec1bcb7204","modified":1562549127653},{"_id":"source/_posts/2019-06-15-prototype/image001.jpg","hash":"7a75891477164b13ea4bac15236b3798c05c5465","modified":1562549127657},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"0f0623140f7bf72319dc58f402fc84970a7cf370","modified":1562549127666},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1562549127667},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1562549127667},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1562549127668},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"dbc5c401f4d8aa80fe9e73423aadb8b8969f0b62","modified":1562549127668},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1562549127668},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1562549127668},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1562549127669},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1562549127669},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1562549127669},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1562549127669},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1562549127670},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1562549127670},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1562549127670},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1562549127671},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1562549127671},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1562549127671},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1562549127672},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1562549127672},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1562549127673},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1562549127673},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1562549127677},{"_id":"themes/BlueLake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1562549127677},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1562549127678},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1562549127678},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1562549127679},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1562549127679},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1562549127682},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1562549127683},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1562549127683},{"_id":"source/_posts/2018-06-14-git5/image001.png","hash":"a9a1e414edd6147833aa5c4b1dd0b075a8e33254","modified":1562549127639},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1562549127680},{"_id":"source/_posts/2019-03-19-android-apk/image002.png","hash":"1749af03cd6a617dbef6851b0a9f802bc7e95d07","modified":1562549127651},{"_id":"source/_posts/2019-03-19-android-apk/image001.png","hash":"b1d655d655278a6b9c0a1186255601fc31838564","modified":1562549127651},{"_id":"public/baidusitemap.xml","hash":"a87719754acfda3d8068b51bbd2cdc58dc298829","modified":1571106789467},{"_id":"public/atom.xml","hash":"159afb3c856930ac57ae2c799bfd3d7faf8bb323","modified":1571107949071},{"_id":"public/sitemap.xml","hash":"744fe56f2e81104481a36dea5c929a8f9bb36b65","modified":1571107949093},{"_id":"public/content.json","hash":"bbedd293a9d6eaad95954b08fee274ea3f188626","modified":1571107949073},{"_id":"public/about/index.html","hash":"8d6c6dac54623ffeab7f4b4e3e96b316a6f81416","modified":1571106789523},{"_id":"public/2019/07/31/h5plus-app/index.html","hash":"5b5c7731735677ceadac583f4a66454d7d9ee0e9","modified":1571106789523},{"_id":"public/2019/07/17/postMessage/index.html","hash":"24c611d7e8b117cf153b304c96bd1362ab32e710","modified":1571106789523},{"_id":"public/2019/07/13/ts-vue/index.html","hash":"6c154ef3410b4b4459b497769e8e05d694c7d7dc","modified":1571106789524},{"_id":"public/2019/06/15/prototype/index.html","hash":"b0c8f65364879a275499b3dd67e0b55efa9e5dd1","modified":1571106789524},{"_id":"public/2019/06/12/ios/index.html","hash":"d5e6d5abff14cc0356874d00ca2076c04aa188ce","modified":1571106789524},{"_id":"public/2019/06/11/module/index.html","hash":"50ace1c623f000551d9bdfd57b7e3bebe5a5edb8","modified":1571106789524},{"_id":"public/2019/05/27/px/index.html","hash":"949e1becbaf48e314dd3d9fdef240b2885be2027","modified":1571106789524},{"_id":"public/2019/04/21/icon/index.html","hash":"834013849339d68674bb3db00278b62f787a3cd0","modified":1571106789524},{"_id":"public/2019/04/11/json-server/index.html","hash":"445e01a8f5744c589fa865d50da8608c1e53524b","modified":1571106789524},{"_id":"public/2019/03/26/theme/index.html","hash":"974d5fe7abe76290d035a2da39601ce257813d66","modified":1571106789524},{"_id":"public/2019/03/25/android-manifest/index.html","hash":"65e2088533b746be36b3644573349b075e477091","modified":1571106789524},{"_id":"public/2019/03/19/android-apk/index.html","hash":"210cb3ca831908f07af08c371f9ea09529bcd7f9","modified":1571106789524},{"_id":"public/2019/03/14/serve/index.html","hash":"4348996719b3d1c0a9282c66e6486d12cb5599e6","modified":1571106789524},{"_id":"public/2018/12/26/redux/index.html","hash":"766376773cf05681b5d3a1da23bf425abd9a4018","modified":1571106789525},{"_id":"public/2018/12/21/axios/index.html","hash":"a0b5b4dc7237cb87a6555ef29d16e72944f4e642","modified":1571106789525},{"_id":"public/2018/12/19/coding-quality/index.html","hash":"fa5b933c4301813afc7cde06a12ad8fd7f25aa6d","modified":1571106789525},{"_id":"public/2018/12/19/sleep-quality/index.html","hash":"1fe96c9faa84b5db2d5b45a2bb0d3ee49eb72509","modified":1571106789525},{"_id":"public/2018/11/19/string/index.html","hash":"25e23548f4baa890fc596c46a4aa3bfd4c7af68e","modified":1571106789525},{"_id":"public/2018/11/19/array/index.html","hash":"0223c68deaf8368e16e31a22d21eb62d6214bee3","modified":1571106789525},{"_id":"public/2018/11/15/npm/index.html","hash":"eb9f88d0d0a5883d27015ae99b69da95210c1292","modified":1571106789525},{"_id":"public/2018/11/15/vueserve/index.html","hash":"45495a776dfdf2525e1afd27dca539e75c931b3c","modified":1571106789525},{"_id":"public/2018/11/15/keymap/index.html","hash":"44c40a4e1fb7206c8c81e6cb171c7c85cbb05ab4","modified":1571106789525},{"_id":"public/2018/11/15/hexo/index.html","hash":"7a47c2e59c99276c50c75dad736675a525f4c14f","modified":1571106789525},{"_id":"public/2018/06/29/googledev/index.html","hash":"f50bfd6e40c318fca92aba93e021754247d04c9c","modified":1571106789525},{"_id":"public/2018/06/25/git6/index.html","hash":"7ed7791377ec96250fdeb23259ef34c213a1d35e","modified":1571106789525},{"_id":"public/2018/06/14/git5/index.html","hash":"30f34f3994b8325112da3bcb2d5edbb4a99d2f6b","modified":1571106789526},{"_id":"public/2018/06/14/git4/index.html","hash":"8d38dd6c0a99b4aa7428258426f04f49a99fe188","modified":1571106789526},{"_id":"public/2018/06/14/git3/index.html","hash":"808af14a333b83a963270dcd16967033ff7bb4f8","modified":1571106789526},{"_id":"public/2018/06/14/git2/index.html","hash":"04bfdda808724c849ea2407b44b9719751a02276","modified":1571106789526},{"_id":"public/2018/06/13/git1/index.html","hash":"f30b9c2b24c69cc736a63a454682e4cd6765905b","modified":1571106789526},{"_id":"public/archives/index.html","hash":"01216af54797ffbd236e99d061f85242d3eefd72","modified":1571106789526},{"_id":"public/archives/page/2/index.html","hash":"93decf781efffc73a0fc5976c824d1b75f511e57","modified":1571106789526},{"_id":"public/archives/page/3/index.html","hash":"98fd60693314e5384400e6d53d3378ba99145094","modified":1571106789526},{"_id":"public/archives/page/4/index.html","hash":"6b86f04e69aff0509e2bdc4d7c57eb89284a7141","modified":1571106789526},{"_id":"public/archives/page/5/index.html","hash":"ba91557196adc400a3bcf0c39762974bd4d2571a","modified":1571106789526},{"_id":"public/archives/2018/index.html","hash":"79b62118520ab5c2f66f9fa33e0aaf21f2cb780b","modified":1571106789526},{"_id":"public/archives/2018/page/2/index.html","hash":"f2a9e8fb62f1b11e43d3d26ac6b2b1ce4215d6b6","modified":1571106789526},{"_id":"public/archives/2018/06/index.html","hash":"38bebac2d9d2166b656dce9d2e5082f0e575bb03","modified":1571106789526},{"_id":"public/archives/2018/11/index.html","hash":"6074d898cb4d381b2dec4c58454c74dd787f839a","modified":1571106789527},{"_id":"public/archives/2018/12/index.html","hash":"e3fc4c6b8880d6b8e19fd640f4b57a7b05b36c03","modified":1571106789527},{"_id":"public/archives/2019/index.html","hash":"455eeb6ef97298dfa9805a20cee2f866bc852024","modified":1571106789527},{"_id":"public/archives/2019/page/2/index.html","hash":"25045f8dba65ae90b046976a9c4e0f5dced608f2","modified":1571106789527},{"_id":"public/archives/2019/page/3/index.html","hash":"1a944c538d40a6ff53d24f478ebff8a69f8ce3b3","modified":1571106789527},{"_id":"public/archives/2019/03/index.html","hash":"67202640f86d44d13da3a3d8ff213b1366f78005","modified":1571106789527},{"_id":"public/archives/2019/04/index.html","hash":"830c8f8fe91c616d1b6bdd07f426d1827dbb8dc8","modified":1571106789527},{"_id":"public/archives/2019/05/index.html","hash":"929c5d653b0530ebafead3f714a521dc04f48cc4","modified":1571106789527},{"_id":"public/archives/2019/06/index.html","hash":"9a7eade27053afecb27ff9a0c2f87b71f5d637ae","modified":1571106789527},{"_id":"public/archives/2019/07/index.html","hash":"1a6ae35135c1fe492e55d737825a03b61160005e","modified":1571106789527},{"_id":"public/archives/2019/09/index.html","hash":"3a8f0b7dcdbebc0cf59aaf8c15cb6f8e4f3ca83d","modified":1571106789527},{"_id":"public/index.html","hash":"66f79c6ca021af3b6157459b77e1640eb3c29e0a","modified":1571106789528},{"_id":"public/page/2/index.html","hash":"ea906ec6f760b4e56fa42d02130694c97dde7f98","modified":1571106789528},{"_id":"public/page/3/index.html","hash":"8420cc1ab772d9377076cc02669093a17c49e82e","modified":1571106789528},{"_id":"public/page/4/index.html","hash":"28f5a821b797f33cd82b372f9cf0f6240d6dd491","modified":1571106789528},{"_id":"public/page/5/index.html","hash":"e053a88b5447b8e18a03b907b293690de07a5adc","modified":1571106789528},{"_id":"public/tags/Git/index.html","hash":"a95b1a49196738fa2f87e14d75fefe09e6ba29a7","modified":1571106789528},{"_id":"public/tags/JS/index.html","hash":"03a1c4e0cd1c3a87aab66f1c9c87795cc6740073","modified":1571106789528},{"_id":"public/tags/JS/page/2/index.html","hash":"166388c57142ae01c728b3fc4b9a0ed264619493","modified":1571106789528},{"_id":"public/tags/life/index.html","hash":"e771401e0c3452c300c9adb2e233dee38515be3c","modified":1571106789528},{"_id":"public/tags/React/index.html","hash":"ac4c18eb1d196edf1e5da5ee6cb9c584bb4783ff","modified":1571106789528},{"_id":"public/tags/css/index.html","hash":"39623fdafac379e39522421dc78e68ad89988640","modified":1571106789528},{"_id":"public/tags/Vue/index.html","hash":"c176795dac89f657db242c52eca94983bd088127","modified":1571106789528},{"_id":"public/2019/09/29/es6/index.html","hash":"ec05c5202fef7ae0b5ebae88493cb1bfcbae2de4","modified":1571106789528},{"_id":"public/2019/07/08/util/index.html","hash":"0846c9ca9583a3c6e35d0e5374a4d59fb539e0f8","modified":1571106789528},{"_id":"public/2019/06/30/react/index.html","hash":"e420f4c2517fabce492ca02f7e26d16e68a6a289","modified":1571106789528},{"_id":"public/2019/06/30/native/index.html","hash":"f029447def423abbb02905aec8a9a1265b7c32cb","modified":1571106789529},{"_id":"public/2019/06/15/design/index.html","hash":"5c96604f24ce0bd0c379411fc5171d81ecc87fad","modified":1571106789529},{"_id":"public/2019/06/14/this/index.html","hash":"7a799d28974dd9e6954ad65348aaca989694c401","modified":1571106789529},{"_id":"public/2019/06/12/class/index.html","hash":"5e74af619ac7c7de06b0f0d3dad7bdfe20d16d6a","modified":1571106789529},{"_id":"public/2019/05/04/layout/index.html","hash":"e216de346dba0c6e76c4293c15e64b9825030c23","modified":1571106789529},{"_id":"public/2019/04/21/style/index.html","hash":"75ff4812b352eb65782bda68b9892023b03e4389","modified":1571106789529},{"_id":"public/2019/04/04/pdf-view/index.html","hash":"b80a14a92010b731a55dd34bd673415c130228bb","modified":1571106789529},{"_id":"public/2019/03/27/echarts/index.html","hash":"2b0f60509dba2f22eb9351ddcbb65351a27445f8","modified":1571106789529},{"_id":"public/2019/03/15/code-push/index.html","hash":"05a1bf502af9e3c2c35252936e415476e0a852e6","modified":1571106789529},{"_id":"public/archives/2019/10/index.html","hash":"08209cd47eac2d79980a78f9022a58954cc0b79a","modified":1571106789545},{"_id":"public/2019/10/15/vuex/index.html","hash":"9d4c2f18c6d980c37cc2618be7519649dce310e7","modified":1571107949105},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1571106789554},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1571106789554},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1571106789555},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1571106789555},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1571106789555},{"_id":"public/2019/03/26/theme/image001.png","hash":"192ec29acf1a9d30c21ca498a5c36fec1bcb7204","modified":1571106789555},{"_id":"public/2019/06/15/prototype/image001.jpg","hash":"7a75891477164b13ea4bac15236b3798c05c5465","modified":1571106789555},{"_id":"public/2018/06/14/git3/image001.png","hash":"ebbb2ced73ccf66011eaee06a3320d311802983f","modified":1571106789555},{"_id":"public/2018/06/14/git3/image002.png","hash":"b4f43ef3de4a0e280f4518911345c07c3dd710c4","modified":1571106789555},{"_id":"public/2018/06/14/git3/image003.png","hash":"3cc9b01960c9e1fc1384fe580683e850275b121a","modified":1571106789555},{"_id":"public/2018/06/14/git4/image001.png","hash":"c13c931d9f4f8da4bd5d2660c78017424a8ff763","modified":1571106789555},{"_id":"public/2018/06/14/git4/image002.png","hash":"4d380a6a85930bd55506072725548354caf451a9","modified":1571106789555},{"_id":"public/2018/06/14/git4/image003.png","hash":"16f4b08f8c13bbb044b9d7d6b4321e7bc27a0bf4","modified":1571106789555},{"_id":"public/2018/06/14/git2/image001.png","hash":"a4ed947935e12ddb4b0657f40eaa0fb3a0d96a00","modified":1571106789555},{"_id":"public/2018/06/14/git2/image002.png","hash":"d614a6eb9a137020b1e48cd9a7afd724202631cf","modified":1571106789555},{"_id":"public/2018/06/14/git2/image003.png","hash":"bd7e01b97b3e97317e0b38c34f84896a34ec14b7","modified":1571106789556},{"_id":"public/2018/06/14/git2/image004.png","hash":"a28338d5a190cfd74620ece82d1bbc8a26be421a","modified":1571106789556},{"_id":"public/2018/06/14/git5/image003.png","hash":"a56d29f945d270d72709fcedda6e89cab5c01693","modified":1571106789556},{"_id":"public/2018/06/14/git5/image004.png","hash":"c526c42059557e5427edca61d273fbddb32b9605","modified":1571106789556},{"_id":"public/2018/06/14/git5/image005.png","hash":"4fb5dbc44fa2ead3dbb263baefc149c570611c9d","modified":1571106789556},{"_id":"public/2018/06/14/git5/image006.png","hash":"8085395d91e4032d111d5466890ca3d9893e53ef","modified":1571106789556},{"_id":"public/2018/06/13/git1/image001.png","hash":"baa3b692db921bb9f105672c981696fcfafbeb45","modified":1571106789556},{"_id":"public/2018/06/13/git1/image002.png","hash":"550aae4a89e803e0f1e912046c572fff5953bb0c","modified":1571106789556},{"_id":"public/2018/06/13/git1/image003.png","hash":"761a48be3e08f4d2d899988be4bcb62288a0d4c5","modified":1571106789556},{"_id":"public/2018/06/13/git1/image006.png","hash":"5e141416ccf588f2e4f659bcea479759dde7f44e","modified":1571106789556},{"_id":"public/2018/06/13/git1/image007.png","hash":"f4d3ee4c3a46d3b0df84c2a0389909918e042138","modified":1571106789556},{"_id":"public/2018/06/14/git5/image001.png","hash":"a9a1e414edd6147833aa5c4b1dd0b075a8e33254","modified":1571106789801},{"_id":"public/2018/06/14/git5/image002.png","hash":"22deb8ebb9b54a7f9c5daabbbaade22e0370c295","modified":1571106789801},{"_id":"public/2018/06/13/git1/image004.png","hash":"523977f61f23680a7f748ece3615aa363fcdcf39","modified":1571106789801},{"_id":"public/2018/06/13/git1/image005.png","hash":"61b8412368821f4918985ff229acad1721607572","modified":1571106789801},{"_id":"public/css/highlight.css","hash":"932879716cbce6f9a1b830070ed514082398f1ca","modified":1571106789824},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1571106789824},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1571106789824},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1571106789825},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1571106789825},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1571106789825},{"_id":"public/2019/03/19/android-apk/image002.png","hash":"1749af03cd6a617dbef6851b0a9f802bc7e95d07","modified":1571106789989},{"_id":"public/css/style.css","hash":"45a02c24123d7107ed700c695506d5ef7c274fc1","modified":1571106789993},{"_id":"public/2019/03/19/android-apk/image001.png","hash":"b1d655d655278a6b9c0a1186255601fc31838564","modified":1571106789995}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-06-12T13:24:05.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-12 21:24:05\n---\n","updated":"2019-07-08T01:25:27.659Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck1r8ezve0001xijkvs9vcnzi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git系列之环境配置与github代码托管","date":"2018-06-13T14:35:54.000Z","_content":"## 1.名词解释\n**Git**: 一个免费的开源分布式版本控制系统\n**github**: 一个面向开源及私有软件项目的托管平台\n## 2.Git下载安装与配置\n从[git官网](https://git-scm.com/)上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\ngit基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入**git config –help**查看。\n{% asset_img image002.png this is second image %}\n<center>**图（2）**</center>\n配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator\\.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。\n{% asset_img image003.png this is second image %}\n<center>**图（3）**</center>\n\n## 3.github配置并新建托管项目\n访问[github官网](https://github.com/)，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。\nTitle名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。\n{% asset_img image004.png this is second image %}\n<center>**图（4）**</center>\n回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。\n{% asset_img image005.png this is second image %}\n<center>**图（5）**</center>\n创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。\n{% asset_img image006.png this is second image %}\n<center>**图（6）**</center>\n在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。\n{% asset_img image007.png this is second image %}\n<center>**图（7）**</center>\n","source":"_posts/2018-06-13-git1.md","raw":"---\ntitle: Git系列之环境配置与github代码托管\ndate: 2018-06-13 22:35:54\ntags: Git\n---\n## 1.名词解释\n**Git**: 一个免费的开源分布式版本控制系统\n**github**: 一个面向开源及私有软件项目的托管平台\n## 2.Git下载安装与配置\n从[git官网](https://git-scm.com/)上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\ngit基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入**git config –help**查看。\n{% asset_img image002.png this is second image %}\n<center>**图（2）**</center>\n配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator\\.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。\n{% asset_img image003.png this is second image %}\n<center>**图（3）**</center>\n\n## 3.github配置并新建托管项目\n访问[github官网](https://github.com/)，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。\nTitle名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。\n{% asset_img image004.png this is second image %}\n<center>**图（4）**</center>\n回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。\n{% asset_img image005.png this is second image %}\n<center>**图（5）**</center>\n创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。\n{% asset_img image006.png this is second image %}\n<center>**图（6）**</center>\n在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。\n{% asset_img image007.png this is second image %}\n<center>**图（7）**</center>\n","slug":"git1","published":1,"updated":"2019-07-08T01:25:27.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezv80000xijkdbtehwie","content":"<h2 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1.名词解释\"></a>1.名词解释</h2><p><strong>Git</strong>: 一个免费的开源分布式版本控制系统<br><strong>github</strong>: 一个面向开源及私有软件项目的托管平台</p>\n<h2 id=\"2-Git下载安装与配置\"><a href=\"#2-Git下载安装与配置\" class=\"headerlink\" title=\"2.Git下载安装与配置\"></a>2.Git下载安装与配置</h2><p>从<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git官网</a>上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。<br><img src=\"/2018/06/13/git1/image001.png\" title=\"this is first image\"></p>\n<center><strong>图（1）</strong></center><br>git基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入<strong>git config –help</strong>查看。<br><img src=\"/2018/06/13/git1/image002.png\" title=\"this is second image\"><br><center><strong>图（2）</strong></center><br>配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。<br><img src=\"/2018/06/13/git1/image003.png\" title=\"this is second image\"><br><center><strong>图（3）</strong></center>\n\n<h2 id=\"3-github配置并新建托管项目\"><a href=\"#3-github配置并新建托管项目\" class=\"headerlink\" title=\"3.github配置并新建托管项目\"></a>3.github配置并新建托管项目</h2><p>访问<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github官网</a>，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。<br>Title名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。<br><img src=\"/2018/06/13/git1/image004.png\" title=\"this is second image\"></p>\n<center><strong>图（4）</strong></center><br>回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。<br><img src=\"/2018/06/13/git1/image005.png\" title=\"this is second image\"><br><center><strong>图（5）</strong></center><br>创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。<br><img src=\"/2018/06/13/git1/image006.png\" title=\"this is second image\"><br><center><strong>图（6）</strong></center><br>在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。<br><img src=\"/2018/06/13/git1/image007.png\" title=\"this is second image\"><br><center><strong>图（7）</strong></center>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-名词解释\"><a href=\"#1-名词解释\" class=\"headerlink\" title=\"1.名词解释\"></a>1.名词解释</h2><p><strong>Git</strong>: 一个免费的开源分布式版本控制系统<br><strong>github</strong>: 一个面向开源及私有软件项目的托管平台</p>\n<h2 id=\"2-Git下载安装与配置\"><a href=\"#2-Git下载安装与配置\" class=\"headerlink\" title=\"2.Git下载安装与配置\"></a>2.Git下载安装与配置</h2><p>从<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git官网</a>上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。<br><img src=\"/2018/06/13/git1/image001.png\" title=\"this is first image\"></p>\n<center><strong>图（1）</strong></center><br>git基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入<strong>git config –help</strong>查看。<br><img src=\"/2018/06/13/git1/image002.png\" title=\"this is second image\"><br><center><strong>图（2）</strong></center><br>配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。<br><img src=\"/2018/06/13/git1/image003.png\" title=\"this is second image\"><br><center><strong>图（3）</strong></center>\n\n<h2 id=\"3-github配置并新建托管项目\"><a href=\"#3-github配置并新建托管项目\" class=\"headerlink\" title=\"3.github配置并新建托管项目\"></a>3.github配置并新建托管项目</h2><p>访问<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github官网</a>，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。<br>Title名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。<br><img src=\"/2018/06/13/git1/image004.png\" title=\"this is second image\"></p>\n<center><strong>图（4）</strong></center><br>回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。<br><img src=\"/2018/06/13/git1/image005.png\" title=\"this is second image\"><br><center><strong>图（5）</strong></center><br>创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。<br><img src=\"/2018/06/13/git1/image006.png\" title=\"this is second image\"><br><center><strong>图（6）</strong></center><br>在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。<br><img src=\"/2018/06/13/git1/image007.png\" title=\"this is second image\"><br><center><strong>图（7）</strong></center>\n"},{"title":"Git系列之本地仓库","date":"2018-06-14T13:48:30.000Z","_content":"## 1.初始化本地仓库\n本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。\n{% asset_img image003.png this is first image %}\n<center>**图（3）**</center>\n## 2.推送本地仓库至github\n先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。\n复制项目的git地址（如：git@github.com:zhuxiaobotongxue/test.git）。\n在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。\n{% asset_img image004.png this is first image %}\n<center>**图（4）**</center>\n此时刷新github仓库，就可以看到内容提交成功了。","source":"_posts/2018-06-14-git2.md","raw":"---\ntitle: Git系列之本地仓库\ndate: 2018-06-14 21:48:30\ntags: Git\n---\n## 1.初始化本地仓库\n本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。\n{% asset_img image003.png this is first image %}\n<center>**图（3）**</center>\n## 2.推送本地仓库至github\n先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。\n复制项目的git地址（如：git@github.com:zhuxiaobotongxue/test.git）。\n在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。\n{% asset_img image004.png this is first image %}\n<center>**图（4）**</center>\n此时刷新github仓库，就可以看到内容提交成功了。","slug":"git2","published":1,"updated":"2019-07-08T01:25:27.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezvg0002xijktfg1jpz9","content":"<h2 id=\"1-初始化本地仓库\"><a href=\"#1-初始化本地仓库\" class=\"headerlink\" title=\"1.初始化本地仓库\"></a>1.初始化本地仓库</h2><p>本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。<br><img src=\"/2018/06/14/git2/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】<br><img src=\"/2018/06/14/git2/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br>本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。<br><img src=\"/2018/06/14/git2/image003.png\" title=\"this is first image\"></p>\n<p><center><strong>图（3）</strong></center></p>\n<h2 id=\"2-推送本地仓库至github\"><a href=\"#2-推送本地仓库至github\" class=\"headerlink\" title=\"2.推送本地仓库至github\"></a>2.推送本地仓库至github</h2><p>先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。<br>复制项目的git地址（如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zhuxiaobotongxue/test.git）。<br>在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。<br><img src=\"/2018/06/14/git2/image004.png\" title=\"this is first image\"></p>\n<p><center><strong>图（4）</strong></center><br>此时刷新github仓库，就可以看到内容提交成功了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-初始化本地仓库\"><a href=\"#1-初始化本地仓库\" class=\"headerlink\" title=\"1.初始化本地仓库\"></a>1.初始化本地仓库</h2><p>本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。<br><img src=\"/2018/06/14/git2/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】<br><img src=\"/2018/06/14/git2/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br>本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。<br><img src=\"/2018/06/14/git2/image003.png\" title=\"this is first image\"></p>\n<p><center><strong>图（3）</strong></center></p>\n<h2 id=\"2-推送本地仓库至github\"><a href=\"#2-推送本地仓库至github\" class=\"headerlink\" title=\"2.推送本地仓库至github\"></a>2.推送本地仓库至github</h2><p>先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。<br>复制项目的git地址（如：<a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zhuxiaobotongxue/test.git）。<br>在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。<br><img src=\"/2018/06/14/git2/image004.png\" title=\"this is first image\"></p>\n<p><center><strong>图（4）</strong></center><br>此时刷新github仓库，就可以看到内容提交成功了。</p>\n"},{"title":"Git系列之撤销","date":"2018-06-14T14:05:42.000Z","_content":"## 1.工作流的状态\n要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】\n**工作区**，修改文档尚未添加至版本控制\n**暂存区**，修改文档已添加至版本控制，但尚未提交至版本库\n**版本库**，修改文档提交至版本库，文档状态变化\n远程环境只有一种状态：\n**远程分支**，修改文档被提交至远程代码仓库\n【名词辨识】\nmaster/branch : 分支，master为项目默认分支，也叫主分支\nhead : 本地当前版本库的指针，指向最新的提交\norigin : 默认的远程版本库名称\n## 2.工作区撤销修改\n该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。\n撤销执行命令git checkout .即可。\n## 3.暂存区撤销修改\n该状态已添加至版本控制，即已执行git add，修改内容处于暂存区\n撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留\n## 4.版本库撤销修改\n该状态已添加至版本库，即已执行git commit,修改内容处于版本库。\n撤销命令如下：\ngit reset --hard HEAD~1\t撤销提交并删除修改\ngit reset --soft HEAD~1\t撤销提交并将修改恢复至**暂存区**\ngit reset HEAD~1\t\t撤销提交并就修改恢复至**工作区**\n## 5.远程分支撤销修改\n思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。\n{% asset_img image002.png this is first image %}\n也可以用--soft保持修改内容至暂存区，如下图所示。\n{% asset_img image003.png this is first image %}\n","source":"_posts/2018-06-14-git3.md","raw":"---\ntitle: Git系列之撤销\ndate: 2018-06-14 22:05:42\ntags: Git\n---\n## 1.工作流的状态\n要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】\n**工作区**，修改文档尚未添加至版本控制\n**暂存区**，修改文档已添加至版本控制，但尚未提交至版本库\n**版本库**，修改文档提交至版本库，文档状态变化\n远程环境只有一种状态：\n**远程分支**，修改文档被提交至远程代码仓库\n【名词辨识】\nmaster/branch : 分支，master为项目默认分支，也叫主分支\nhead : 本地当前版本库的指针，指向最新的提交\norigin : 默认的远程版本库名称\n## 2.工作区撤销修改\n该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。\n撤销执行命令git checkout .即可。\n## 3.暂存区撤销修改\n该状态已添加至版本控制，即已执行git add，修改内容处于暂存区\n撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留\n## 4.版本库撤销修改\n该状态已添加至版本库，即已执行git commit,修改内容处于版本库。\n撤销命令如下：\ngit reset --hard HEAD~1\t撤销提交并删除修改\ngit reset --soft HEAD~1\t撤销提交并将修改恢复至**暂存区**\ngit reset HEAD~1\t\t撤销提交并就修改恢复至**工作区**\n## 5.远程分支撤销修改\n思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。\n{% asset_img image002.png this is first image %}\n也可以用--soft保持修改内容至暂存区，如下图所示。\n{% asset_img image003.png this is first image %}\n","slug":"git3","published":1,"updated":"2019-07-08T01:25:27.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezvl0004xijkxozuxbrm","content":"<h2 id=\"1-工作流的状态\"><a href=\"#1-工作流的状态\" class=\"headerlink\" title=\"1.工作流的状态\"></a>1.工作流的状态</h2><p>要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。<br><img src=\"/2018/06/14/git3/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】<br><strong>工作区</strong>，修改文档尚未添加至版本控制<br><strong>暂存区</strong>，修改文档已添加至版本控制，但尚未提交至版本库<br><strong>版本库</strong>，修改文档提交至版本库，文档状态变化<br>远程环境只有一种状态：<br><strong>远程分支</strong>，修改文档被提交至远程代码仓库<br>【名词辨识】<br>master/branch : 分支，master为项目默认分支，也叫主分支<br>head : 本地当前版本库的指针，指向最新的提交<br>origin : 默认的远程版本库名称</p>\n<h2 id=\"2-工作区撤销修改\"><a href=\"#2-工作区撤销修改\" class=\"headerlink\" title=\"2.工作区撤销修改\"></a>2.工作区撤销修改</h2><p>该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。<br>撤销执行命令git checkout .即可。</p>\n<h2 id=\"3-暂存区撤销修改\"><a href=\"#3-暂存区撤销修改\" class=\"headerlink\" title=\"3.暂存区撤销修改\"></a>3.暂存区撤销修改</h2><p>该状态已添加至版本控制，即已执行git add，修改内容处于暂存区<br>撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留</p>\n<h2 id=\"4-版本库撤销修改\"><a href=\"#4-版本库撤销修改\" class=\"headerlink\" title=\"4.版本库撤销修改\"></a>4.版本库撤销修改</h2><p>该状态已添加至版本库，即已执行git commit,修改内容处于版本库。<br>撤销命令如下：<br>git reset –hard HEAD~1    撤销提交并删除修改<br>git reset –soft HEAD~1    撤销提交并将修改恢复至<strong>暂存区</strong><br>git reset HEAD~1        撤销提交并就修改恢复至<strong>工作区</strong></p>\n<h2 id=\"5-远程分支撤销修改\"><a href=\"#5-远程分支撤销修改\" class=\"headerlink\" title=\"5.远程分支撤销修改\"></a>5.远程分支撤销修改</h2><p>思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。<br><img src=\"/2018/06/14/git3/image002.png\" title=\"this is first image\"><br>也可以用–soft保持修改内容至暂存区，如下图所示。<br><img src=\"/2018/06/14/git3/image003.png\" title=\"this is first image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-工作流的状态\"><a href=\"#1-工作流的状态\" class=\"headerlink\" title=\"1.工作流的状态\"></a>1.工作流的状态</h2><p>要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。<br><img src=\"/2018/06/14/git3/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】<br><strong>工作区</strong>，修改文档尚未添加至版本控制<br><strong>暂存区</strong>，修改文档已添加至版本控制，但尚未提交至版本库<br><strong>版本库</strong>，修改文档提交至版本库，文档状态变化<br>远程环境只有一种状态：<br><strong>远程分支</strong>，修改文档被提交至远程代码仓库<br>【名词辨识】<br>master/branch : 分支，master为项目默认分支，也叫主分支<br>head : 本地当前版本库的指针，指向最新的提交<br>origin : 默认的远程版本库名称</p>\n<h2 id=\"2-工作区撤销修改\"><a href=\"#2-工作区撤销修改\" class=\"headerlink\" title=\"2.工作区撤销修改\"></a>2.工作区撤销修改</h2><p>该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。<br>撤销执行命令git checkout .即可。</p>\n<h2 id=\"3-暂存区撤销修改\"><a href=\"#3-暂存区撤销修改\" class=\"headerlink\" title=\"3.暂存区撤销修改\"></a>3.暂存区撤销修改</h2><p>该状态已添加至版本控制，即已执行git add，修改内容处于暂存区<br>撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留</p>\n<h2 id=\"4-版本库撤销修改\"><a href=\"#4-版本库撤销修改\" class=\"headerlink\" title=\"4.版本库撤销修改\"></a>4.版本库撤销修改</h2><p>该状态已添加至版本库，即已执行git commit,修改内容处于版本库。<br>撤销命令如下：<br>git reset –hard HEAD~1    撤销提交并删除修改<br>git reset –soft HEAD~1    撤销提交并将修改恢复至<strong>暂存区</strong><br>git reset HEAD~1        撤销提交并就修改恢复至<strong>工作区</strong></p>\n<h2 id=\"5-远程分支撤销修改\"><a href=\"#5-远程分支撤销修改\" class=\"headerlink\" title=\"5.远程分支撤销修改\"></a>5.远程分支撤销修改</h2><p>思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。<br><img src=\"/2018/06/14/git3/image002.png\" title=\"this is first image\"><br>也可以用–soft保持修改内容至暂存区，如下图所示。<br><img src=\"/2018/06/14/git3/image003.png\" title=\"this is first image\"></p>\n"},{"title":"Git系列之分支","date":"2018-06-14T14:21:52.000Z","_content":"## 1.创建本地分支并推送至github\n从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n推送该分支至github，并查看所有分支，如图（2）所示。\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n## 2.合并分支\n首先切换至master分支，将test_branch分支上所做的修改合并至master分支。\n推送合并后的提交至远程，如下图所示。\n【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】\n【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】\n{% asset_img image003.png this is first image %}\n","source":"_posts/2018-06-14-git4.md","raw":"---\ntitle: Git系列之分支\ndate: 2018-06-14 22:21:52\ntags: Git\n---\n## 1.创建本地分支并推送至github\n从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n推送该分支至github，并查看所有分支，如图（2）所示。\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n## 2.合并分支\n首先切换至master分支，将test_branch分支上所做的修改合并至master分支。\n推送合并后的提交至远程，如下图所示。\n【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】\n【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】\n{% asset_img image003.png this is first image %}\n","slug":"git4","published":1,"updated":"2019-07-08T01:25:27.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezvn0005xijkuzx5ry9s","content":"<h2 id=\"1-创建本地分支并推送至github\"><a href=\"#1-创建本地分支并推送至github\" class=\"headerlink\" title=\"1.创建本地分支并推送至github\"></a>1.创建本地分支并推送至github</h2><p>从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。<br><img src=\"/2018/06/14/git4/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>推送该分支至github，并查看所有分支，如图（2）所示。<br><img src=\"/2018/06/14/git4/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center></p>\n<h2 id=\"2-合并分支\"><a href=\"#2-合并分支\" class=\"headerlink\" title=\"2.合并分支\"></a>2.合并分支</h2><p>首先切换至master分支，将test_branch分支上所做的修改合并至master分支。<br>推送合并后的提交至远程，如下图所示。<br>【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】<br>【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】<br><img src=\"/2018/06/14/git4/image003.png\" title=\"this is first image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-创建本地分支并推送至github\"><a href=\"#1-创建本地分支并推送至github\" class=\"headerlink\" title=\"1.创建本地分支并推送至github\"></a>1.创建本地分支并推送至github</h2><p>从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。<br><img src=\"/2018/06/14/git4/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br>推送该分支至github，并查看所有分支，如图（2）所示。<br><img src=\"/2018/06/14/git4/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center></p>\n<h2 id=\"2-合并分支\"><a href=\"#2-合并分支\" class=\"headerlink\" title=\"2.合并分支\"></a>2.合并分支</h2><p>首先切换至master分支，将test_branch分支上所做的修改合并至master分支。<br>推送合并后的提交至远程，如下图所示。<br>【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】<br>【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】<br><img src=\"/2018/06/14/git4/image003.png\" title=\"this is first image\"></p>\n"},{"title":"Git系列之冲突详解","date":"2018-06-14T15:52:59.000Z","_content":"## 1.冲突产生的原因\n针对某个合并操作,**HEAD仓库中被修改过的部分**与**工作目录中将被合并的修改部分**为同一代码片段,此时git不知如何取舍,便会产生冲突.\n## 2.演示冲突的产生\n从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。\n{% asset_img image001.png this is first image %}\n我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。\n{% asset_img image002.png this is first image %}\n此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。\n【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是**直接从暂存区取出至缓存区**】\n{% asset_img image003.png this is first image %}\n## 3.冲突解决的原理\n人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。\n## 4.演示冲突的解决\n冲突文件中冲突区域如下图所示。\n{% asset_img image004.png this is first image %}\n我们调整冲突后，如下图所示。\n【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】\n{% asset_img image005.png this is first image %}\n然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。\n{% asset_img image006.png this is first image %}\n","source":"_posts/2018-06-14-git5.md","raw":"---\ntitle: Git系列之冲突详解\ndate: 2018-06-14 23:52:59\ntags: Git\n---\n## 1.冲突产生的原因\n针对某个合并操作,**HEAD仓库中被修改过的部分**与**工作目录中将被合并的修改部分**为同一代码片段,此时git不知如何取舍,便会产生冲突.\n## 2.演示冲突的产生\n从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。\n{% asset_img image001.png this is first image %}\n我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。\n{% asset_img image002.png this is first image %}\n此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。\n【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是**直接从暂存区取出至缓存区**】\n{% asset_img image003.png this is first image %}\n## 3.冲突解决的原理\n人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。\n## 4.演示冲突的解决\n冲突文件中冲突区域如下图所示。\n{% asset_img image004.png this is first image %}\n我们调整冲突后，如下图所示。\n【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】\n{% asset_img image005.png this is first image %}\n然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。\n{% asset_img image006.png this is first image %}\n","slug":"git5","published":1,"updated":"2019-07-08T01:25:27.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezvq0006xijko1vcpo4d","content":"<h2 id=\"1-冲突产生的原因\"><a href=\"#1-冲突产生的原因\" class=\"headerlink\" title=\"1.冲突产生的原因\"></a>1.冲突产生的原因</h2><p>针对某个合并操作,<strong>HEAD仓库中被修改过的部分</strong>与<strong>工作目录中将被合并的修改部分</strong>为同一代码片段,此时git不知如何取舍,便会产生冲突.</p>\n<h2 id=\"2-演示冲突的产生\"><a href=\"#2-演示冲突的产生\" class=\"headerlink\" title=\"2.演示冲突的产生\"></a>2.演示冲突的产生</h2><p>从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。<br><img src=\"/2018/06/14/git5/image001.png\" title=\"this is first image\"><br>我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。<br><img src=\"/2018/06/14/git5/image002.png\" title=\"this is first image\"><br>此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。<br>【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是<strong>直接从暂存区取出至缓存区</strong>】<br><img src=\"/2018/06/14/git5/image003.png\" title=\"this is first image\"></p>\n<h2 id=\"3-冲突解决的原理\"><a href=\"#3-冲突解决的原理\" class=\"headerlink\" title=\"3.冲突解决的原理\"></a>3.冲突解决的原理</h2><p>人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。</p>\n<h2 id=\"4-演示冲突的解决\"><a href=\"#4-演示冲突的解决\" class=\"headerlink\" title=\"4.演示冲突的解决\"></a>4.演示冲突的解决</h2><p>冲突文件中冲突区域如下图所示。<br><img src=\"/2018/06/14/git5/image004.png\" title=\"this is first image\"><br>我们调整冲突后，如下图所示。<br>【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】<br><img src=\"/2018/06/14/git5/image005.png\" title=\"this is first image\"><br>然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。<br><img src=\"/2018/06/14/git5/image006.png\" title=\"this is first image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-冲突产生的原因\"><a href=\"#1-冲突产生的原因\" class=\"headerlink\" title=\"1.冲突产生的原因\"></a>1.冲突产生的原因</h2><p>针对某个合并操作,<strong>HEAD仓库中被修改过的部分</strong>与<strong>工作目录中将被合并的修改部分</strong>为同一代码片段,此时git不知如何取舍,便会产生冲突.</p>\n<h2 id=\"2-演示冲突的产生\"><a href=\"#2-演示冲突的产生\" class=\"headerlink\" title=\"2.演示冲突的产生\"></a>2.演示冲突的产生</h2><p>从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。<br><img src=\"/2018/06/14/git5/image001.png\" title=\"this is first image\"><br>我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。<br><img src=\"/2018/06/14/git5/image002.png\" title=\"this is first image\"><br>此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。<br>【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是<strong>直接从暂存区取出至缓存区</strong>】<br><img src=\"/2018/06/14/git5/image003.png\" title=\"this is first image\"></p>\n<h2 id=\"3-冲突解决的原理\"><a href=\"#3-冲突解决的原理\" class=\"headerlink\" title=\"3.冲突解决的原理\"></a>3.冲突解决的原理</h2><p>人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。</p>\n<h2 id=\"4-演示冲突的解决\"><a href=\"#4-演示冲突的解决\" class=\"headerlink\" title=\"4.演示冲突的解决\"></a>4.演示冲突的解决</h2><p>冲突文件中冲突区域如下图所示。<br><img src=\"/2018/06/14/git5/image004.png\" title=\"this is first image\"><br>我们调整冲突后，如下图所示。<br>【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】<br><img src=\"/2018/06/14/git5/image005.png\" title=\"this is first image\"><br>然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。<br><img src=\"/2018/06/14/git5/image006.png\" title=\"this is first image\"></p>\n"},{"title":"Git系列之命令一览","date":"2018-06-25T12:30:27.000Z","_content":"## 1.配置/初始化/常规操作\ngit --version\ngit help\ngit config --help\ngit config --list --global\ngit config --global --add user.name zhuxiaobotongxue\ngit init\ngit clone\ngit add .\ngit commit –m “this is a commit”\ngit push origin master\ngit pull origin self_branch\ngit fetch origin master  //拉取远程分支\ngit merge self_branch  //合并本地分支self_branch至当前分支\ngit checkout .  //撤销所有工作空间修改\ngit reset HEAD a.html  //撤销暂存区修改\ngit revert <commit>\t\t//撤销指定的提交\ngit checkout self_branch  //切换分支\ngit checkout –d self_branch  //删除本地分支\ngit log –p fileName  \t\t//查看指定文件提交历史\ngit log --oneline --decorate --graph --all\ngit diff --cached\ngit mv oldName newName   //文件改名\ngit rm fileName  \t\t\t//删除文件\ngit branch –a           //查看所有分支\n## 2.非频繁实用操作\ngit clone -b self_branch http://mall-service.git  //克隆指定分支\ngit reset --hard resetVersionHash\t//将工作空间强制恢复至指定提交\ngit push -f origin currentBranch\t//将本地分支强制推送至远程\ngit stash list\ngit stash pop stash@{0}\ngit remote add origin https://github.com/Test.git \t//将本地项目与远程建立联系\ngit push -u origin master\t//首次推送项目至远程，指定origin为默认\ngit push –delete origin self_branch //删除远程分支\ngit update-index --assume-unchanged FILENAME //已入库文件不再监听\ngit update-index --no-assume-unchanged FILENAME //恢复已入库文件监听\ngit gui  //调出图形界面\nssh-keygen -t rsa -C ”zhuxiaobotongxue@gmail.com” //生成秘钥\n## 3.小专题探究\n**拉取分支**\ngit pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支\n等同于\ngit fetch origin online\ngit checkout online\ngit merge origin/self_branch\t //将远程self_branch分支合并至当前分支\n**创建本地分支并提交至远程**\ngit checkout –b self_branch  \t//从当前分支创建本地分支并切换\ngit push origin selft_branch\t\t//将新分支提交至远程\n**忽略文件**\n.gitignore  //创建未入库文件忽略配置\n*.[oa]  表示忽略以o或者a结尾的文件\n*~ 表示忽略以~结尾的文件\n*.pyc 表示忽略以.pyc结尾的文件\n！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc\n\\!test.py 同上，不忽略以！开头的！test.py文件\nfoo/ 意思是忽略foo文件夹\n**/res 表示忽略顶层和任何层次的res文件夹\na 表示忽略a文件","source":"_posts/2018-06-25-git6.md","raw":"---\ntitle: Git系列之命令一览\ndate: 2018-06-25 20:30:27\ntags: Git\n---\n## 1.配置/初始化/常规操作\ngit --version\ngit help\ngit config --help\ngit config --list --global\ngit config --global --add user.name zhuxiaobotongxue\ngit init\ngit clone\ngit add .\ngit commit –m “this is a commit”\ngit push origin master\ngit pull origin self_branch\ngit fetch origin master  //拉取远程分支\ngit merge self_branch  //合并本地分支self_branch至当前分支\ngit checkout .  //撤销所有工作空间修改\ngit reset HEAD a.html  //撤销暂存区修改\ngit revert <commit>\t\t//撤销指定的提交\ngit checkout self_branch  //切换分支\ngit checkout –d self_branch  //删除本地分支\ngit log –p fileName  \t\t//查看指定文件提交历史\ngit log --oneline --decorate --graph --all\ngit diff --cached\ngit mv oldName newName   //文件改名\ngit rm fileName  \t\t\t//删除文件\ngit branch –a           //查看所有分支\n## 2.非频繁实用操作\ngit clone -b self_branch http://mall-service.git  //克隆指定分支\ngit reset --hard resetVersionHash\t//将工作空间强制恢复至指定提交\ngit push -f origin currentBranch\t//将本地分支强制推送至远程\ngit stash list\ngit stash pop stash@{0}\ngit remote add origin https://github.com/Test.git \t//将本地项目与远程建立联系\ngit push -u origin master\t//首次推送项目至远程，指定origin为默认\ngit push –delete origin self_branch //删除远程分支\ngit update-index --assume-unchanged FILENAME //已入库文件不再监听\ngit update-index --no-assume-unchanged FILENAME //恢复已入库文件监听\ngit gui  //调出图形界面\nssh-keygen -t rsa -C ”zhuxiaobotongxue@gmail.com” //生成秘钥\n## 3.小专题探究\n**拉取分支**\ngit pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支\n等同于\ngit fetch origin online\ngit checkout online\ngit merge origin/self_branch\t //将远程self_branch分支合并至当前分支\n**创建本地分支并提交至远程**\ngit checkout –b self_branch  \t//从当前分支创建本地分支并切换\ngit push origin selft_branch\t\t//将新分支提交至远程\n**忽略文件**\n.gitignore  //创建未入库文件忽略配置\n*.[oa]  表示忽略以o或者a结尾的文件\n*~ 表示忽略以~结尾的文件\n*.pyc 表示忽略以.pyc结尾的文件\n！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc\n\\!test.py 同上，不忽略以！开头的！test.py文件\nfoo/ 意思是忽略foo文件夹\n**/res 表示忽略顶层和任何层次的res文件夹\na 表示忽略a文件","slug":"git6","published":1,"updated":"2019-07-08T01:25:27.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezvt0009xijkpwpqoafw","content":"<h2 id=\"1-配置-初始化-常规操作\"><a href=\"#1-配置-初始化-常规操作\" class=\"headerlink\" title=\"1.配置/初始化/常规操作\"></a>1.配置/初始化/常规操作</h2><p>git –version<br>git help<br>git config –help<br>git config –list –global<br>git config –global –add user.name zhuxiaobotongxue<br>git init<br>git clone<br>git add .<br>git commit –m “this is a commit”<br>git push origin master<br>git pull origin self_branch<br>git fetch origin master  //拉取远程分支<br>git merge self_branch  //合并本地分支self_branch至当前分支<br>git checkout .  //撤销所有工作空间修改<br>git reset HEAD a.html  //撤销暂存区修改<br>git revert <commit>        //撤销指定的提交<br>git checkout self_branch  //切换分支<br>git checkout –d self_branch  //删除本地分支<br>git log –p fileName          //查看指定文件提交历史<br>git log –oneline –decorate –graph –all<br>git diff –cached<br>git mv oldName newName   //文件改名<br>git rm fileName              //删除文件<br>git branch –a           //查看所有分支</commit></p>\n<h2 id=\"2-非频繁实用操作\"><a href=\"#2-非频繁实用操作\" class=\"headerlink\" title=\"2.非频繁实用操作\"></a>2.非频繁实用操作</h2><p>git clone -b self_branch <a href=\"http://mall-service.git\" target=\"_blank\" rel=\"noopener\">http://mall-service.git</a>  //克隆指定分支<br>git reset –hard resetVersionHash    //将工作空间强制恢复至指定提交<br>git push -f origin currentBranch    //将本地分支强制推送至远程<br>git stash list<br>git stash pop stash@{0}<br>git remote add origin <a href=\"https://github.com/Test.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Test.git</a>     //将本地项目与远程建立联系<br>git push -u origin master    //首次推送项目至远程，指定origin为默认<br>git push –delete origin self_branch //删除远程分支<br>git update-index –assume-unchanged FILENAME //已入库文件不再监听<br>git update-index –no-assume-unchanged FILENAME //恢复已入库文件监听<br>git gui  //调出图形界面<br>ssh-keygen -t rsa -C ”<a href=\"mailto:zhuxiaobotongxue@gmail.com\" target=\"_blank\" rel=\"noopener\">zhuxiaobotongxue@gmail.com</a>” //生成秘钥</p>\n<h2 id=\"3-小专题探究\"><a href=\"#3-小专题探究\" class=\"headerlink\" title=\"3.小专题探究\"></a>3.小专题探究</h2><p><strong>拉取分支</strong><br>git pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支<br>等同于<br>git fetch origin online<br>git checkout online<br>git merge origin/self_branch     //将远程self_branch分支合并至当前分支<br><strong>创建本地分支并提交至远程</strong><br>git checkout –b self_branch      //从当前分支创建本地分支并切换<br>git push origin selft_branch        //将新分支提交至远程<br><strong>忽略文件</strong><br>.gitignore  //创建未入库文件忽略配置<br><em>.[oa]  表示忽略以o或者a结尾的文件\n</em>~ 表示忽略以~结尾的文件<br>*.pyc 表示忽略以.pyc结尾的文件<br>！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc<br>!test.py 同上，不忽略以！开头的！test.py文件<br>foo/ 意思是忽略foo文件夹<br>**/res 表示忽略顶层和任何层次的res文件夹<br>a 表示忽略a文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-配置-初始化-常规操作\"><a href=\"#1-配置-初始化-常规操作\" class=\"headerlink\" title=\"1.配置/初始化/常规操作\"></a>1.配置/初始化/常规操作</h2><p>git –version<br>git help<br>git config –help<br>git config –list –global<br>git config –global –add user.name zhuxiaobotongxue<br>git init<br>git clone<br>git add .<br>git commit –m “this is a commit”<br>git push origin master<br>git pull origin self_branch<br>git fetch origin master  //拉取远程分支<br>git merge self_branch  //合并本地分支self_branch至当前分支<br>git checkout .  //撤销所有工作空间修改<br>git reset HEAD a.html  //撤销暂存区修改<br>git revert <commit>        //撤销指定的提交<br>git checkout self_branch  //切换分支<br>git checkout –d self_branch  //删除本地分支<br>git log –p fileName          //查看指定文件提交历史<br>git log –oneline –decorate –graph –all<br>git diff –cached<br>git mv oldName newName   //文件改名<br>git rm fileName              //删除文件<br>git branch –a           //查看所有分支</commit></p>\n<h2 id=\"2-非频繁实用操作\"><a href=\"#2-非频繁实用操作\" class=\"headerlink\" title=\"2.非频繁实用操作\"></a>2.非频繁实用操作</h2><p>git clone -b self_branch <a href=\"http://mall-service.git\" target=\"_blank\" rel=\"noopener\">http://mall-service.git</a>  //克隆指定分支<br>git reset –hard resetVersionHash    //将工作空间强制恢复至指定提交<br>git push -f origin currentBranch    //将本地分支强制推送至远程<br>git stash list<br>git stash pop stash@{0}<br>git remote add origin <a href=\"https://github.com/Test.git\" target=\"_blank\" rel=\"noopener\">https://github.com/Test.git</a>     //将本地项目与远程建立联系<br>git push -u origin master    //首次推送项目至远程，指定origin为默认<br>git push –delete origin self_branch //删除远程分支<br>git update-index –assume-unchanged FILENAME //已入库文件不再监听<br>git update-index –no-assume-unchanged FILENAME //恢复已入库文件监听<br>git gui  //调出图形界面<br>ssh-keygen -t rsa -C ”<a href=\"mailto:zhuxiaobotongxue@gmail.com\" target=\"_blank\" rel=\"noopener\">zhuxiaobotongxue@gmail.com</a>” //生成秘钥</p>\n<h2 id=\"3-小专题探究\"><a href=\"#3-小专题探究\" class=\"headerlink\" title=\"3.小专题探究\"></a>3.小专题探究</h2><p><strong>拉取分支</strong><br>git pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支<br>等同于<br>git fetch origin online<br>git checkout online<br>git merge origin/self_branch     //将远程self_branch分支合并至当前分支<br><strong>创建本地分支并提交至远程</strong><br>git checkout –b self_branch      //从当前分支创建本地分支并切换<br>git push origin selft_branch        //将新分支提交至远程<br><strong>忽略文件</strong><br>.gitignore  //创建未入库文件忽略配置<br><em>.[oa]  表示忽略以o或者a结尾的文件\n</em>~ 表示忽略以~结尾的文件<br>*.pyc 表示忽略以.pyc结尾的文件<br>！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc<br>!test.py 同上，不忽略以！开头的！test.py文件<br>foo/ 意思是忽略foo文件夹<br>**/res 表示忽略顶层和任何层次的res文件夹<br>a 表示忽略a文件</p>\n"},{"title":"开发者工具","date":"2018-06-29T12:49:28.000Z","_content":"## 1.Elements\nctrl+shift+c\t\t选取dom元素\nESC\t\t\t\t在Elements面板可以用打开Console\n在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,\n同时面包屑导航会给出层级结构,\n按住并拖动节点可以移动节点位置,\n查看元素事件侦听器,选中对应元素,打开Elements->Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,\n单击节点,右键Break on可以为节点添加Dom事件监听,在Elements->DOM Breakpoints面板可以查看详情,\n鼠标悬停在Elements->Styles面板对应css名称上可以查看受影响的Dom,\n在对应css右下角有小图标可以调整颜色和阴影,\n编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,\nCtrl+点击任何css属性可以直接跳转至对应文件相应行\n## 2.Console\n提供了一个命令行接口，用来与网页代码互动。\nF12\t\t\t\t打开DevTools\nctrl+shift+J\t\t打开控制台并定位光标\nctrl+L\t\t\t清空控制台\nconsole.log('aaa');\nconsole.info('aaa');\nconsole.error('aaa');\nconsole.warn('aaa');\n分组日志\nconsole.group('aaa');\nconsole.log('我是aaa小组的日志');\nconsole.groupEnd();\n断言日志\nconsole.assert(false,'当第一个参数为false时输出该条消息');\n统计执行次数日志\nfunction myFun(){\n\tconsole.count('myFun被执行的次数');\n}\nmyFun();\nmyFun();\n输出对象的属性和方法\nconsole.dir(document.body);\n统计代码执行时间\nconsole.time(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\");\n查看代码执行对cpu的使用情况\nconsole.profile(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.profileEnd(\"Array initialize\");\n执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息\n复制选中的DOM结构至剪切板\ncopy(document.body);\n输出对象的键或值对\nvar myObj = {name:'xiaoming',sex:'female'};\nkeys(myObj);\nvalues(myObj);\n用表格样式输出json格式数组\nvar myArray = [{\"name\":\"xiaoming\"},{\"sex\":\"12\"}];\nconsole.table(myArray);\n\nconsole.log('%c This text is styled!',\n  'color: red; background: yellow; font-size: 24px;'\n)\n\nvar number = 11 * 9;\nvar color = 'red';\nconsole.log('%d %s balloons', number, color);\n\n%s 字符串\n%d 整数\n%i 整数\n%f 浮点数\n%o 对象的链接\n%c CSS格式字符串\n\ndebugger\n","source":"_posts/2018-06-29-googledev.md","raw":"---\ntitle: 开发者工具\ndate: 2018-06-29 20:49:28\ntags: JS\n---\n## 1.Elements\nctrl+shift+c\t\t选取dom元素\nESC\t\t\t\t在Elements面板可以用打开Console\n在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,\n同时面包屑导航会给出层级结构,\n按住并拖动节点可以移动节点位置,\n查看元素事件侦听器,选中对应元素,打开Elements->Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,\n单击节点,右键Break on可以为节点添加Dom事件监听,在Elements->DOM Breakpoints面板可以查看详情,\n鼠标悬停在Elements->Styles面板对应css名称上可以查看受影响的Dom,\n在对应css右下角有小图标可以调整颜色和阴影,\n编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,\nCtrl+点击任何css属性可以直接跳转至对应文件相应行\n## 2.Console\n提供了一个命令行接口，用来与网页代码互动。\nF12\t\t\t\t打开DevTools\nctrl+shift+J\t\t打开控制台并定位光标\nctrl+L\t\t\t清空控制台\nconsole.log('aaa');\nconsole.info('aaa');\nconsole.error('aaa');\nconsole.warn('aaa');\n分组日志\nconsole.group('aaa');\nconsole.log('我是aaa小组的日志');\nconsole.groupEnd();\n断言日志\nconsole.assert(false,'当第一个参数为false时输出该条消息');\n统计执行次数日志\nfunction myFun(){\n\tconsole.count('myFun被执行的次数');\n}\nmyFun();\nmyFun();\n输出对象的属性和方法\nconsole.dir(document.body);\n统计代码执行时间\nconsole.time(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\");\n查看代码执行对cpu的使用情况\nconsole.profile(\"Array initialize\");\nvar array=new Array(1000000);\nfor(var i=array.length - 1;i>=0;i--){\n\tarray[i] = new Object();\n};\nconsole.profileEnd(\"Array initialize\");\n执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息\n复制选中的DOM结构至剪切板\ncopy(document.body);\n输出对象的键或值对\nvar myObj = {name:'xiaoming',sex:'female'};\nkeys(myObj);\nvalues(myObj);\n用表格样式输出json格式数组\nvar myArray = [{\"name\":\"xiaoming\"},{\"sex\":\"12\"}];\nconsole.table(myArray);\n\nconsole.log('%c This text is styled!',\n  'color: red; background: yellow; font-size: 24px;'\n)\n\nvar number = 11 * 9;\nvar color = 'red';\nconsole.log('%d %s balloons', number, color);\n\n%s 字符串\n%d 整数\n%i 整数\n%f 浮点数\n%o 对象的链接\n%c CSS格式字符串\n\ndebugger\n","slug":"googledev","published":1,"updated":"2019-10-08T06:18:32.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezvw000bxijkpgv9y7do","content":"<h2 id=\"1-Elements\"><a href=\"#1-Elements\" class=\"headerlink\" title=\"1.Elements\"></a>1.Elements</h2><p>ctrl+shift+c        选取dom元素<br>ESC                在Elements面板可以用打开Console<br>在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,<br>同时面包屑导航会给出层级结构,<br>按住并拖动节点可以移动节点位置,<br>查看元素事件侦听器,选中对应元素,打开Elements-&gt;Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,<br>单击节点,右键Break on可以为节点添加Dom事件监听,在Elements-&gt;DOM Breakpoints面板可以查看详情,<br>鼠标悬停在Elements-&gt;Styles面板对应css名称上可以查看受影响的Dom,<br>在对应css右下角有小图标可以调整颜色和阴影,<br>编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,<br>Ctrl+点击任何css属性可以直接跳转至对应文件相应行</p>\n<h2 id=\"2-Console\"><a href=\"#2-Console\" class=\"headerlink\" title=\"2.Console\"></a>2.Console</h2><p>提供了一个命令行接口，用来与网页代码互动。<br>F12                打开DevTools<br>ctrl+shift+J        打开控制台并定位光标<br>ctrl+L            清空控制台<br>console.log(‘aaa’);<br>console.info(‘aaa’);<br>console.error(‘aaa’);<br>console.warn(‘aaa’);<br>分组日志<br>console.group(‘aaa’);<br>console.log(‘我是aaa小组的日志’);<br>console.groupEnd();<br>断言日志<br>console.assert(false,’当第一个参数为false时输出该条消息’);<br>统计执行次数日志<br>function myFun(){<br>    console.count(‘myFun被执行的次数’);<br>}<br>myFun();<br>myFun();<br>输出对象的属性和方法<br>console.dir(document.body);<br>统计代码执行时间<br>console.time(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.timeEnd(“Array initialize”);<br>查看代码执行对cpu的使用情况<br>console.profile(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.profileEnd(“Array initialize”);<br>执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息<br>复制选中的DOM结构至剪切板<br>copy(document.body);<br>输出对象的键或值对<br>var myObj = {name:’xiaoming’,sex:’female’};<br>keys(myObj);<br>values(myObj);<br>用表格样式输出json格式数组<br>var myArray = [{“name”:”xiaoming”},{“sex”:”12”}];<br>console.table(myArray);</p>\n<p>console.log(‘%c This text is styled!’,<br>  ‘color: red; background: yellow; font-size: 24px;’<br>)</p>\n<p>var number = 11 * 9;<br>var color = ‘red’;<br>console.log(‘%d %s balloons’, number, color);</p>\n<p>%s 字符串<br>%d 整数<br>%i 整数<br>%f 浮点数<br>%o 对象的链接<br>%c CSS格式字符串</p>\n<p>debugger</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Elements\"><a href=\"#1-Elements\" class=\"headerlink\" title=\"1.Elements\"></a>1.Elements</h2><p>ctrl+shift+c        选取dom元素<br>ESC                在Elements面板可以用打开Console<br>在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,<br>同时面包屑导航会给出层级结构,<br>按住并拖动节点可以移动节点位置,<br>查看元素事件侦听器,选中对应元素,打开Elements-&gt;Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,<br>单击节点,右键Break on可以为节点添加Dom事件监听,在Elements-&gt;DOM Breakpoints面板可以查看详情,<br>鼠标悬停在Elements-&gt;Styles面板对应css名称上可以查看受影响的Dom,<br>在对应css右下角有小图标可以调整颜色和阴影,<br>编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,<br>Ctrl+点击任何css属性可以直接跳转至对应文件相应行</p>\n<h2 id=\"2-Console\"><a href=\"#2-Console\" class=\"headerlink\" title=\"2.Console\"></a>2.Console</h2><p>提供了一个命令行接口，用来与网页代码互动。<br>F12                打开DevTools<br>ctrl+shift+J        打开控制台并定位光标<br>ctrl+L            清空控制台<br>console.log(‘aaa’);<br>console.info(‘aaa’);<br>console.error(‘aaa’);<br>console.warn(‘aaa’);<br>分组日志<br>console.group(‘aaa’);<br>console.log(‘我是aaa小组的日志’);<br>console.groupEnd();<br>断言日志<br>console.assert(false,’当第一个参数为false时输出该条消息’);<br>统计执行次数日志<br>function myFun(){<br>    console.count(‘myFun被执行的次数’);<br>}<br>myFun();<br>myFun();<br>输出对象的属性和方法<br>console.dir(document.body);<br>统计代码执行时间<br>console.time(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.timeEnd(“Array initialize”);<br>查看代码执行对cpu的使用情况<br>console.profile(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.profileEnd(“Array initialize”);<br>执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息<br>复制选中的DOM结构至剪切板<br>copy(document.body);<br>输出对象的键或值对<br>var myObj = {name:’xiaoming’,sex:’female’};<br>keys(myObj);<br>values(myObj);<br>用表格样式输出json格式数组<br>var myArray = [{“name”:”xiaoming”},{“sex”:”12”}];<br>console.table(myArray);</p>\n<p>console.log(‘%c This text is styled!’,<br>  ‘color: red; background: yellow; font-size: 24px;’<br>)</p>\n<p>var number = 11 * 9;<br>var color = ‘red’;<br>console.log(‘%d %s balloons’, number, color);</p>\n<p>%s 字符串<br>%d 整数<br>%i 整数<br>%f 浮点数<br>%o 对象的链接<br>%c CSS格式字符串</p>\n<p>debugger</p>\n"},{"title":"hexo使用笔记","date":"2018-11-15T11:44:41.000Z","_content":"## 1.文档目的\n该文档用于自己及时查看，并快速上手继续写博客\n参考网址：[hexo官方文挡](https://hexo.io/zh-cn/docs/commands)\n## 2.快速编写博客\n1.查看自己远程博客：https://zhuxiaobotongxue.github.io/\n2.本地化启动服务：**hexo s**\n3.如何生成一篇博客(如：git1)：**hexo new post git1**\n4.打开source文件夹并编辑博客，[markdown语法](https://www.jianshu.com/p/191d1e21f7ed)\n5.编译博客： **hexo g**\n6.部署至远程：**hexo d**\n7.备份原代码：**git add ./git commit -m ''/git push**\n","source":"_posts/2018-11-15-hexo.md","raw":"---\ntitle: hexo使用笔记\ndate: 2018-11-15 19:44:41\ntags: JS\n---\n## 1.文档目的\n该文档用于自己及时查看，并快速上手继续写博客\n参考网址：[hexo官方文挡](https://hexo.io/zh-cn/docs/commands)\n## 2.快速编写博客\n1.查看自己远程博客：https://zhuxiaobotongxue.github.io/\n2.本地化启动服务：**hexo s**\n3.如何生成一篇博客(如：git1)：**hexo new post git1**\n4.打开source文件夹并编辑博客，[markdown语法](https://www.jianshu.com/p/191d1e21f7ed)\n5.编译博客： **hexo g**\n6.部署至远程：**hexo d**\n7.备份原代码：**git add ./git commit -m ''/git push**\n","slug":"hexo","published":1,"updated":"2019-10-08T06:18:38.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezvy000exijk751ltf2d","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于自己及时查看，并快速上手继续写博客<br>参考网址：<a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">hexo官方文挡</a></p>\n<h2 id=\"2-快速编写博客\"><a href=\"#2-快速编写博客\" class=\"headerlink\" title=\"2.快速编写博客\"></a>2.快速编写博客</h2><p>1.查看自己远程博客：<a href=\"https://zhuxiaobotongxue.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhuxiaobotongxue.github.io/</a><br>2.本地化启动服务：<strong>hexo s</strong><br>3.如何生成一篇博客(如：git1)：<strong>hexo new post git1</strong><br>4.打开source文件夹并编辑博客，<a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">markdown语法</a><br>5.编译博客： <strong>hexo g</strong><br>6.部署至远程：<strong>hexo d</strong><br>7.备份原代码：<strong>git add ./git commit -m ‘’/git push</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于自己及时查看，并快速上手继续写博客<br>参考网址：<a href=\"https://hexo.io/zh-cn/docs/commands\" target=\"_blank\" rel=\"noopener\">hexo官方文挡</a></p>\n<h2 id=\"2-快速编写博客\"><a href=\"#2-快速编写博客\" class=\"headerlink\" title=\"2.快速编写博客\"></a>2.快速编写博客</h2><p>1.查看自己远程博客：<a href=\"https://zhuxiaobotongxue.github.io/\" target=\"_blank\" rel=\"noopener\">https://zhuxiaobotongxue.github.io/</a><br>2.本地化启动服务：<strong>hexo s</strong><br>3.如何生成一篇博客(如：git1)：<strong>hexo new post git1</strong><br>4.打开source文件夹并编辑博客，<a href=\"https://www.jianshu.com/p/191d1e21f7ed\" target=\"_blank\" rel=\"noopener\">markdown语法</a><br>5.编译博客： <strong>hexo g</strong><br>6.部署至远程：<strong>hexo d</strong><br>7.备份原代码：<strong>git add ./git commit -m ‘’/git push</strong></p>\n"},{"title":"npm淘宝镜像","date":"2018-11-15T13:18:51.000Z","_content":"## 1.文档目的\n该文档用于解释说明npm淘宝镜像的使用\n参考网址：[淘宝npm镜像](http://npm.taobao.org/)、[react native环境搭建](https://reactnative.cn/docs/getting-started/)、[淘宝镜像说明](https://blog.csdn.net/quuqu/article/details/64121812)\n\n## 2.内容梳理\n淘宝镜像使用目的：加快访问速度\n使用方式及其对比：\n* npm切换镜像源（加快访问速度）：\n**npm config set registry https://registry.npm.taobao.org --global**\n**npm config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**npm config list**\n**npm config get registry**\n**npm config get disturl**\n* yarn方式[推荐]\nyarn安装：\n**npm install -g yarn**\nyarn配置镜像源：\n**yarn config set registry https://registry.npm.taobao.org --global**\n**yarn config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**yarn config list**\n**yarn config get registry**\n**yarn config get disturl**\n* cnpm方式[不推荐：安装的模块路径比较奇怪]\n**npm install -g cnpm --registry=https://registry.npm.taobao.org**\n\n## 3.扩展\n查看npm全局安装默认路径（打开则可以看到具体安装的模块）：\n**npm config get prefix**\n全局安装模块：\n**npm install -g @vue/cli**或**yarn global add @vue/cli**\n全局卸载已安装模块：\n**npm uninstall vue-cli -g**或**yarn global remove vue-cli**\n","source":"_posts/2018-11-15-npm.md","raw":"---\ntitle: npm淘宝镜像\ndate: 2018-11-15 21:18:51\ntags: JS\n---\n## 1.文档目的\n该文档用于解释说明npm淘宝镜像的使用\n参考网址：[淘宝npm镜像](http://npm.taobao.org/)、[react native环境搭建](https://reactnative.cn/docs/getting-started/)、[淘宝镜像说明](https://blog.csdn.net/quuqu/article/details/64121812)\n\n## 2.内容梳理\n淘宝镜像使用目的：加快访问速度\n使用方式及其对比：\n* npm切换镜像源（加快访问速度）：\n**npm config set registry https://registry.npm.taobao.org --global**\n**npm config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**npm config list**\n**npm config get registry**\n**npm config get disturl**\n* yarn方式[推荐]\nyarn安装：\n**npm install -g yarn**\nyarn配置镜像源：\n**yarn config set registry https://registry.npm.taobao.org --global**\n**yarn config set disturl https://npm.taobao.org/dist --global**\n验证查看镜像源：\n**yarn config list**\n**yarn config get registry**\n**yarn config get disturl**\n* cnpm方式[不推荐：安装的模块路径比较奇怪]\n**npm install -g cnpm --registry=https://registry.npm.taobao.org**\n\n## 3.扩展\n查看npm全局安装默认路径（打开则可以看到具体安装的模块）：\n**npm config get prefix**\n全局安装模块：\n**npm install -g @vue/cli**或**yarn global add @vue/cli**\n全局卸载已安装模块：\n**npm uninstall vue-cli -g**或**yarn global remove vue-cli**\n","slug":"npm","published":1,"updated":"2019-10-08T06:18:48.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezw0000gxijk3t61yk0a","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于解释说明npm淘宝镜像的使用<br>参考网址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a>、<a href=\"https://reactnative.cn/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">react native环境搭建</a>、<a href=\"https://blog.csdn.net/quuqu/article/details/64121812\" target=\"_blank\" rel=\"noopener\">淘宝镜像说明</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>淘宝镜像使用目的：加快访问速度<br>使用方式及其对比：</p>\n<ul>\n<li>npm切换镜像源（加快访问速度）：<br><strong>npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>npm config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>npm config list</strong><br><strong>npm config get registry</strong><br><strong>npm config get disturl</strong></li>\n<li>yarn方式[推荐]<br>yarn安装：<br><strong>npm install -g yarn</strong><br>yarn配置镜像源：<br><strong>yarn config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>yarn config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>yarn config list</strong><br><strong>yarn config get registry</strong><br><strong>yarn config get disturl</strong></li>\n<li>cnpm方式[不推荐：安装的模块路径比较奇怪]<br><strong>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></strong></li>\n</ul>\n<h2 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3.扩展\"></a>3.扩展</h2><p>查看npm全局安装默认路径（打开则可以看到具体安装的模块）：<br><strong>npm config get prefix</strong><br>全局安装模块：<br><strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>全局卸载已安装模块：<br><strong>npm uninstall vue-cli -g</strong>或<strong>yarn global remove vue-cli</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于解释说明npm淘宝镜像的使用<br>参考网址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝npm镜像</a>、<a href=\"https://reactnative.cn/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">react native环境搭建</a>、<a href=\"https://blog.csdn.net/quuqu/article/details/64121812\" target=\"_blank\" rel=\"noopener\">淘宝镜像说明</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>淘宝镜像使用目的：加快访问速度<br>使用方式及其对比：</p>\n<ul>\n<li>npm切换镜像源（加快访问速度）：<br><strong>npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>npm config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>npm config list</strong><br><strong>npm config get registry</strong><br><strong>npm config get disturl</strong></li>\n<li>yarn方式[推荐]<br>yarn安装：<br><strong>npm install -g yarn</strong><br>yarn配置镜像源：<br><strong>yarn config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a> –global</strong><br><strong>yarn config set disturl <a href=\"https://npm.taobao.org/dist\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>yarn config list</strong><br><strong>yarn config get registry</strong><br><strong>yarn config get disturl</strong></li>\n<li>cnpm方式[不推荐：安装的模块路径比较奇怪]<br><strong>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></strong></li>\n</ul>\n<h2 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3.扩展\"></a>3.扩展</h2><p>查看npm全局安装默认路径（打开则可以看到具体安装的模块）：<br><strong>npm config get prefix</strong><br>全局安装模块：<br><strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>全局卸载已安装模块：<br><strong>npm uninstall vue-cli -g</strong>或<strong>yarn global remove vue-cli</strong></p>\n"},{"title":"keymap","date":"2018-11-15T12:12:21.000Z","_content":"## 1.windows平台常用快捷键\n\n**【win系统】**\n无鼠标快捷操作电脑[win7]\n[1]开启键盘操作鼠标\n控制面板->轻松访问->鼠标更易用->设置鼠标键...\nAlt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动\n[2]常用系统快捷键\nWIN 打开搜素程序和文件\nWIN+E 我的电脑\nWIN+T 切换任务栏\nWIN+L 锁定计算机\nWIN+D 显示桌面\nWIN+M 最小化所有窗口\nWIN+R 打开运行对话框\nWIN+Tab 3D切换任务栏程序\nWIN+空格键 预览桌面\nWIN+方向键 最大/小化窗口/左右移动窗口\n关闭活动应用程序:Alt+F4\n\n**【Webstorm快捷键】**\n多处编辑：Alt+左键单击\n控制台：Alt+F12\n打开任何文件：Double Shift\n打开最近文件：Ctrl+E\n全局搜索字符串：Ctrl+H\nSettings:Ctrl+Alt+S\nFormat code:Ctrl+Alt+L\n删除一行： Ctrl+X\n复制行：Ctrl+D\n查找行：Ctrl+G\n折叠代码块： Ctrl+加减号\n注释：Ctrl+/ 或 Ctrl+Shift+/\n向上/下移动代码行：Shift+Alt+Up/Down\n向上/下移动代码块：Ctrl+Shift+Up/Down\n方法追踪：Ctrl+B或Ctrl+左键单击\n跳转到变量实现处：Ctrl+B\n跳转到方法实现处：Ctrl + Alt + B\n打开定义快速查看：Ctrl + Shift + I\n跳转到当前页面的上/下一个方法块：Alt + Up/Down\n高亮错误或警告快速定位：F2\n格式化代码：Ctrl+Alt+L\n自动修正：Alt+Enter\n查找文本：Ctrl+F\n查找下/上一个：F3/Shift + F3\n高亮显示选中文本：Ctrl+Shift+F7\n替换文本：Ctrl+R\n方法参数提示：Ctrl+P\n显示方法注释：Ctrl+Q\n打开配置窗口：Ctrl+Alt+S\n文件名查找文件：Ctrl+Shift+N\n通过字符快速查找：Ctrl+Shift+Alt+N\n重新开始一行（无论光标在哪里）：Shift+Enter\nsurround with代码块：Ctrl+Alt+T\n大小写转换：Ctrl+Shift+U\n输出模板：Ctrl+J\n匹配代码块括号：Ctrl+[\n显示当前文件的结构：Ctrl+F12\n折叠/展开代码块：Ctrl+\"-\"/\"+\"\n返回至上次浏览的位置 Ctrl+Alt+ left/right\n逐级向上选中代码：Ctrl+W\n\n**【浏览器】**\n打开新窗口:Ctrl+T\n切换导航栏窗口:Ctrl+Tab\n关闭活动页面:Ctrl+W\n上下浏览网页:方向键和Page Up和Page Down\n\n## 2.mac平台常用快捷键\n\n**【mac系统】**\nCommand + Shift + c 打开我的电脑\nCommand + Shift + h 打开当前用户文件夹\nCommand + 向上箭头 打开包含当前文件夹的文件夹\nCommand + [ / ] 打开上一个文件夹/下一个文件夹\nCommand + w 关闭最前tab\nCommand + m  最小化当前应用窗口\nCommand + q 关闭当前应用\nCommand + T 打开多个tab 【eg:浏览器，Terminal】\nCommand + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】\ncontrol + tab 转向下一个标签页【eg:webStorm多个编辑窗口】\ncontrol + shift + tab 转向上一个标签页\nControl + 向上向下 查看所有打开窗口\n**【两个手指向下滑：向下滚动】**\n\nCommand + shift + n 新建文件夹\nCommand + N 新建文件【eg:sublime新文件，webStorm新文件】\nCommand + delete 删除\nReturn 重命名选中的文件或文件夹\n\nShift 搜狗输入法中英文切换\nCommand + , 当前应用的偏好设置\n\n**【文件处理快捷键】**\nCommand + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾\nCommand + 左右 将光标移动到行首/行尾\nCommand + L 将光标移动到指定行\nCommand + shift + 上下左右 选中文本\nalt + 上下 选取代码块\nShift + 上下左右 扩展选择区域\nCommand + f 查找 \nCommand + r 替换 \nDelete 删除光标左边的字符\nFn + delete 删除光标右边的字符\nOption + delete 删除光标左边的word\n\n**【截图快捷键】**\nCommand + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件\nCommand + shift + 4                 截取选中屏幕区域到文件\nCommand + shift + control + 3  截取全屏到剪贴板\nCommand + shift + control + 4  截取选中屏幕区域到剪贴板\n\n**【Mac下浏览器快捷键】**\nCommand + L 光标直接跳至地址栏\nChrome 开发者模式  Command + alt + j\n刷新 Command + r\n\n**【Mac下webStorm快捷键】**\n全局查找 Command + shift + f\n格式整理 Command + alt + L\n注释：Command + /\n调整缩进 Shift +  tab\n复制当前行 Command + d\n删除当前行 Command + delete\n快速换行 Shift + Enter\n清除缩进变成单行 Command + Shift + J\n光标在多处定位 Alt + 单击\n大小写转换 Command + Shift + U\n\n## 3.其他工具\n\n**【sublime】**\nsublime修炼：一款得心应手的开发软件\n1.sublime官网下载，安装时勾选右键打开文件\n2.快捷键设置Preferences->Key Bindings-User\n打开浏览器：ctrl+alt+f\n3.命令模式ctrl+shift+p，输入install package，安装命令包\n\n**【VIM】**\n【命令模式】\n左下上右:HJKL\n向右向下跳一个词:w/b\n下/上一个句子/段落 （）/{}\n跳转到行首/行尾：0/shift+$\n跳转到最后一行/第一行：shift+G/gg\n跳转到上一次编辑的地方：\n跳转到上一次编辑的文件：ctrl+o/ctrl+i\n整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行\n非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行\n删除选中内容:X\n删除某行：DD / dl (L字符) /dw (w单词)\n替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw\n复制当前行：YY /yl /yw\n复制一个词：YW\n复制任意选中内容：先选中，再按Y\n粘贴：P\n撤销：U/u\n代码格式化 选中，按=\n\n【编辑模式】\n进入/退出 :i/a/0/shift+o esc\n自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）\n\n【扩展模式】\n：! 命令 （叹号后面有个空格）\n搜索：/searchText /搜索文本 回车确认 然后按N查找下一个\n向前搜索：？searchText\n退出搜索高亮：nohl\n[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局\n[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText\n横屏分屏：sp 上下横屏切换ctrl+ww\n竖屏分屏：vs 左右竖屏切换ctrl+ww\n退出分屏：q\n显示行号：set number","source":"_posts/2018-11-15-keymap.md","raw":"---\ntitle: keymap\ndate: 2018-11-15 20:12:21\ntags: JS\n---\n## 1.windows平台常用快捷键\n\n**【win系统】**\n无鼠标快捷操作电脑[win7]\n[1]开启键盘操作鼠标\n控制面板->轻松访问->鼠标更易用->设置鼠标键...\nAlt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动\n[2]常用系统快捷键\nWIN 打开搜素程序和文件\nWIN+E 我的电脑\nWIN+T 切换任务栏\nWIN+L 锁定计算机\nWIN+D 显示桌面\nWIN+M 最小化所有窗口\nWIN+R 打开运行对话框\nWIN+Tab 3D切换任务栏程序\nWIN+空格键 预览桌面\nWIN+方向键 最大/小化窗口/左右移动窗口\n关闭活动应用程序:Alt+F4\n\n**【Webstorm快捷键】**\n多处编辑：Alt+左键单击\n控制台：Alt+F12\n打开任何文件：Double Shift\n打开最近文件：Ctrl+E\n全局搜索字符串：Ctrl+H\nSettings:Ctrl+Alt+S\nFormat code:Ctrl+Alt+L\n删除一行： Ctrl+X\n复制行：Ctrl+D\n查找行：Ctrl+G\n折叠代码块： Ctrl+加减号\n注释：Ctrl+/ 或 Ctrl+Shift+/\n向上/下移动代码行：Shift+Alt+Up/Down\n向上/下移动代码块：Ctrl+Shift+Up/Down\n方法追踪：Ctrl+B或Ctrl+左键单击\n跳转到变量实现处：Ctrl+B\n跳转到方法实现处：Ctrl + Alt + B\n打开定义快速查看：Ctrl + Shift + I\n跳转到当前页面的上/下一个方法块：Alt + Up/Down\n高亮错误或警告快速定位：F2\n格式化代码：Ctrl+Alt+L\n自动修正：Alt+Enter\n查找文本：Ctrl+F\n查找下/上一个：F3/Shift + F3\n高亮显示选中文本：Ctrl+Shift+F7\n替换文本：Ctrl+R\n方法参数提示：Ctrl+P\n显示方法注释：Ctrl+Q\n打开配置窗口：Ctrl+Alt+S\n文件名查找文件：Ctrl+Shift+N\n通过字符快速查找：Ctrl+Shift+Alt+N\n重新开始一行（无论光标在哪里）：Shift+Enter\nsurround with代码块：Ctrl+Alt+T\n大小写转换：Ctrl+Shift+U\n输出模板：Ctrl+J\n匹配代码块括号：Ctrl+[\n显示当前文件的结构：Ctrl+F12\n折叠/展开代码块：Ctrl+\"-\"/\"+\"\n返回至上次浏览的位置 Ctrl+Alt+ left/right\n逐级向上选中代码：Ctrl+W\n\n**【浏览器】**\n打开新窗口:Ctrl+T\n切换导航栏窗口:Ctrl+Tab\n关闭活动页面:Ctrl+W\n上下浏览网页:方向键和Page Up和Page Down\n\n## 2.mac平台常用快捷键\n\n**【mac系统】**\nCommand + Shift + c 打开我的电脑\nCommand + Shift + h 打开当前用户文件夹\nCommand + 向上箭头 打开包含当前文件夹的文件夹\nCommand + [ / ] 打开上一个文件夹/下一个文件夹\nCommand + w 关闭最前tab\nCommand + m  最小化当前应用窗口\nCommand + q 关闭当前应用\nCommand + T 打开多个tab 【eg:浏览器，Terminal】\nCommand + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】\ncontrol + tab 转向下一个标签页【eg:webStorm多个编辑窗口】\ncontrol + shift + tab 转向上一个标签页\nControl + 向上向下 查看所有打开窗口\n**【两个手指向下滑：向下滚动】**\n\nCommand + shift + n 新建文件夹\nCommand + N 新建文件【eg:sublime新文件，webStorm新文件】\nCommand + delete 删除\nReturn 重命名选中的文件或文件夹\n\nShift 搜狗输入法中英文切换\nCommand + , 当前应用的偏好设置\n\n**【文件处理快捷键】**\nCommand + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾\nCommand + 左右 将光标移动到行首/行尾\nCommand + L 将光标移动到指定行\nCommand + shift + 上下左右 选中文本\nalt + 上下 选取代码块\nShift + 上下左右 扩展选择区域\nCommand + f 查找 \nCommand + r 替换 \nDelete 删除光标左边的字符\nFn + delete 删除光标右边的字符\nOption + delete 删除光标左边的word\n\n**【截图快捷键】**\nCommand + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件\nCommand + shift + 4                 截取选中屏幕区域到文件\nCommand + shift + control + 3  截取全屏到剪贴板\nCommand + shift + control + 4  截取选中屏幕区域到剪贴板\n\n**【Mac下浏览器快捷键】**\nCommand + L 光标直接跳至地址栏\nChrome 开发者模式  Command + alt + j\n刷新 Command + r\n\n**【Mac下webStorm快捷键】**\n全局查找 Command + shift + f\n格式整理 Command + alt + L\n注释：Command + /\n调整缩进 Shift +  tab\n复制当前行 Command + d\n删除当前行 Command + delete\n快速换行 Shift + Enter\n清除缩进变成单行 Command + Shift + J\n光标在多处定位 Alt + 单击\n大小写转换 Command + Shift + U\n\n## 3.其他工具\n\n**【sublime】**\nsublime修炼：一款得心应手的开发软件\n1.sublime官网下载，安装时勾选右键打开文件\n2.快捷键设置Preferences->Key Bindings-User\n打开浏览器：ctrl+alt+f\n3.命令模式ctrl+shift+p，输入install package，安装命令包\n\n**【VIM】**\n【命令模式】\n左下上右:HJKL\n向右向下跳一个词:w/b\n下/上一个句子/段落 （）/{}\n跳转到行首/行尾：0/shift+$\n跳转到最后一行/第一行：shift+G/gg\n跳转到上一次编辑的地方：\n跳转到上一次编辑的文件：ctrl+o/ctrl+i\n整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行\n非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行\n删除选中内容:X\n删除某行：DD / dl (L字符) /dw (w单词)\n替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw\n复制当前行：YY /yl /yw\n复制一个词：YW\n复制任意选中内容：先选中，再按Y\n粘贴：P\n撤销：U/u\n代码格式化 选中，按=\n\n【编辑模式】\n进入/退出 :i/a/0/shift+o esc\n自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）\n\n【扩展模式】\n：! 命令 （叹号后面有个空格）\n搜索：/searchText /搜索文本 回车确认 然后按N查找下一个\n向前搜索：？searchText\n退出搜索高亮：nohl\n[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局\n[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText\n横屏分屏：sp 上下横屏切换ctrl+ww\n竖屏分屏：vs 左右竖屏切换ctrl+ww\n退出分屏：q\n显示行号：set number","slug":"keymap","published":1,"updated":"2019-10-08T06:18:43.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezw1000jxijk3pwifqj2","content":"<h2 id=\"1-windows平台常用快捷键\"><a href=\"#1-windows平台常用快捷键\" class=\"headerlink\" title=\"1.windows平台常用快捷键\"></a>1.windows平台常用快捷键</h2><p><strong>【win系统】</strong><br>无鼠标快捷操作电脑[win7]<br>[1]开启键盘操作鼠标<br>控制面板-&gt;轻松访问-&gt;鼠标更易用-&gt;设置鼠标键…<br>Alt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动<br>[2]常用系统快捷键<br>WIN 打开搜素程序和文件<br>WIN+E 我的电脑<br>WIN+T 切换任务栏<br>WIN+L 锁定计算机<br>WIN+D 显示桌面<br>WIN+M 最小化所有窗口<br>WIN+R 打开运行对话框<br>WIN+Tab 3D切换任务栏程序<br>WIN+空格键 预览桌面<br>WIN+方向键 最大/小化窗口/左右移动窗口<br>关闭活动应用程序:Alt+F4</p>\n<p><strong>【Webstorm快捷键】</strong><br>多处编辑：Alt+左键单击<br>控制台：Alt+F12<br>打开任何文件：Double Shift<br>打开最近文件：Ctrl+E<br>全局搜索字符串：Ctrl+H<br>Settings:Ctrl+Alt+S<br>Format code:Ctrl+Alt+L<br>删除一行： Ctrl+X<br>复制行：Ctrl+D<br>查找行：Ctrl+G<br>折叠代码块： Ctrl+加减号<br>注释：Ctrl+/ 或 Ctrl+Shift+/<br>向上/下移动代码行：Shift+Alt+Up/Down<br>向上/下移动代码块：Ctrl+Shift+Up/Down<br>方法追踪：Ctrl+B或Ctrl+左键单击<br>跳转到变量实现处：Ctrl+B<br>跳转到方法实现处：Ctrl + Alt + B<br>打开定义快速查看：Ctrl + Shift + I<br>跳转到当前页面的上/下一个方法块：Alt + Up/Down<br>高亮错误或警告快速定位：F2<br>格式化代码：Ctrl+Alt+L<br>自动修正：Alt+Enter<br>查找文本：Ctrl+F<br>查找下/上一个：F3/Shift + F3<br>高亮显示选中文本：Ctrl+Shift+F7<br>替换文本：Ctrl+R<br>方法参数提示：Ctrl+P<br>显示方法注释：Ctrl+Q<br>打开配置窗口：Ctrl+Alt+S<br>文件名查找文件：Ctrl+Shift+N<br>通过字符快速查找：Ctrl+Shift+Alt+N<br>重新开始一行（无论光标在哪里）：Shift+Enter<br>surround with代码块：Ctrl+Alt+T<br>大小写转换：Ctrl+Shift+U<br>输出模板：Ctrl+J<br>匹配代码块括号：Ctrl+[<br>显示当前文件的结构：Ctrl+F12<br>折叠/展开代码块：Ctrl+”-“/“+”<br>返回至上次浏览的位置 Ctrl+Alt+ left/right<br>逐级向上选中代码：Ctrl+W</p>\n<p><strong>【浏览器】</strong><br>打开新窗口:Ctrl+T<br>切换导航栏窗口:Ctrl+Tab<br>关闭活动页面:Ctrl+W<br>上下浏览网页:方向键和Page Up和Page Down</p>\n<h2 id=\"2-mac平台常用快捷键\"><a href=\"#2-mac平台常用快捷键\" class=\"headerlink\" title=\"2.mac平台常用快捷键\"></a>2.mac平台常用快捷键</h2><p><strong>【mac系统】</strong><br>Command + Shift + c 打开我的电脑<br>Command + Shift + h 打开当前用户文件夹<br>Command + 向上箭头 打开包含当前文件夹的文件夹<br>Command + [ / ] 打开上一个文件夹/下一个文件夹<br>Command + w 关闭最前tab<br>Command + m  最小化当前应用窗口<br>Command + q 关闭当前应用<br>Command + T 打开多个tab 【eg:浏览器，Terminal】<br>Command + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】<br>control + tab 转向下一个标签页【eg:webStorm多个编辑窗口】<br>control + shift + tab 转向上一个标签页<br>Control + 向上向下 查看所有打开窗口<br><strong>【两个手指向下滑：向下滚动】</strong></p>\n<p>Command + shift + n 新建文件夹<br>Command + N 新建文件【eg:sublime新文件，webStorm新文件】<br>Command + delete 删除<br>Return 重命名选中的文件或文件夹</p>\n<p>Shift 搜狗输入法中英文切换<br>Command + , 当前应用的偏好设置</p>\n<p><strong>【文件处理快捷键】</strong><br>Command + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾<br>Command + 左右 将光标移动到行首/行尾<br>Command + L 将光标移动到指定行<br>Command + shift + 上下左右 选中文本<br>alt + 上下 选取代码块<br>Shift + 上下左右 扩展选择区域<br>Command + f 查找<br>Command + r 替换<br>Delete 删除光标左边的字符<br>Fn + delete 删除光标右边的字符<br>Option + delete 删除光标左边的word</p>\n<p><strong>【截图快捷键】</strong><br>Command + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件<br>Command + shift + 4                 截取选中屏幕区域到文件<br>Command + shift + control + 3  截取全屏到剪贴板<br>Command + shift + control + 4  截取选中屏幕区域到剪贴板</p>\n<p><strong>【Mac下浏览器快捷键】</strong><br>Command + L 光标直接跳至地址栏<br>Chrome 开发者模式  Command + alt + j<br>刷新 Command + r</p>\n<p><strong>【Mac下webStorm快捷键】</strong><br>全局查找 Command + shift + f<br>格式整理 Command + alt + L<br>注释：Command + /<br>调整缩进 Shift +  tab<br>复制当前行 Command + d<br>删除当前行 Command + delete<br>快速换行 Shift + Enter<br>清除缩进变成单行 Command + Shift + J<br>光标在多处定位 Alt + 单击<br>大小写转换 Command + Shift + U</p>\n<h2 id=\"3-其他工具\"><a href=\"#3-其他工具\" class=\"headerlink\" title=\"3.其他工具\"></a>3.其他工具</h2><p><strong>【sublime】</strong><br>sublime修炼：一款得心应手的开发软件<br>1.sublime官网下载，安装时勾选右键打开文件<br>2.快捷键设置Preferences-&gt;Key Bindings-User<br>打开浏览器：ctrl+alt+f<br>3.命令模式ctrl+shift+p，输入install package，安装命令包</p>\n<p><strong>【VIM】</strong><br>【命令模式】<br>左下上右:HJKL<br>向右向下跳一个词:w/b<br>下/上一个句子/段落 （）/{}<br>跳转到行首/行尾：0/shift+$<br>跳转到最后一行/第一行：shift+G/gg<br>跳转到上一次编辑的地方：<br>跳转到上一次编辑的文件：ctrl+o/ctrl+i<br>整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行<br>非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行<br>删除选中内容:X<br>删除某行：DD / dl (L字符) /dw (w单词)<br>替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw<br>复制当前行：YY /yl /yw<br>复制一个词：YW<br>复制任意选中内容：先选中，再按Y<br>粘贴：P<br>撤销：U/u<br>代码格式化 选中，按=</p>\n<p>【编辑模式】<br>进入/退出 :i/a/0/shift+o esc<br>自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）</p>\n<p>【扩展模式】<br>：! 命令 （叹号后面有个空格）<br>搜索：/searchText /搜索文本 回车确认 然后按N查找下一个<br>向前搜索：？searchText<br>退出搜索高亮：nohl<br>[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局<br>[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText<br>横屏分屏：sp 上下横屏切换ctrl+ww<br>竖屏分屏：vs 左右竖屏切换ctrl+ww<br>退出分屏：q<br>显示行号：set number</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-windows平台常用快捷键\"><a href=\"#1-windows平台常用快捷键\" class=\"headerlink\" title=\"1.windows平台常用快捷键\"></a>1.windows平台常用快捷键</h2><p><strong>【win系统】</strong><br>无鼠标快捷操作电脑[win7]<br>[1]开启键盘操作鼠标<br>控制面板-&gt;轻松访问-&gt;鼠标更易用-&gt;设置鼠标键…<br>Alt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动<br>[2]常用系统快捷键<br>WIN 打开搜素程序和文件<br>WIN+E 我的电脑<br>WIN+T 切换任务栏<br>WIN+L 锁定计算机<br>WIN+D 显示桌面<br>WIN+M 最小化所有窗口<br>WIN+R 打开运行对话框<br>WIN+Tab 3D切换任务栏程序<br>WIN+空格键 预览桌面<br>WIN+方向键 最大/小化窗口/左右移动窗口<br>关闭活动应用程序:Alt+F4</p>\n<p><strong>【Webstorm快捷键】</strong><br>多处编辑：Alt+左键单击<br>控制台：Alt+F12<br>打开任何文件：Double Shift<br>打开最近文件：Ctrl+E<br>全局搜索字符串：Ctrl+H<br>Settings:Ctrl+Alt+S<br>Format code:Ctrl+Alt+L<br>删除一行： Ctrl+X<br>复制行：Ctrl+D<br>查找行：Ctrl+G<br>折叠代码块： Ctrl+加减号<br>注释：Ctrl+/ 或 Ctrl+Shift+/<br>向上/下移动代码行：Shift+Alt+Up/Down<br>向上/下移动代码块：Ctrl+Shift+Up/Down<br>方法追踪：Ctrl+B或Ctrl+左键单击<br>跳转到变量实现处：Ctrl+B<br>跳转到方法实现处：Ctrl + Alt + B<br>打开定义快速查看：Ctrl + Shift + I<br>跳转到当前页面的上/下一个方法块：Alt + Up/Down<br>高亮错误或警告快速定位：F2<br>格式化代码：Ctrl+Alt+L<br>自动修正：Alt+Enter<br>查找文本：Ctrl+F<br>查找下/上一个：F3/Shift + F3<br>高亮显示选中文本：Ctrl+Shift+F7<br>替换文本：Ctrl+R<br>方法参数提示：Ctrl+P<br>显示方法注释：Ctrl+Q<br>打开配置窗口：Ctrl+Alt+S<br>文件名查找文件：Ctrl+Shift+N<br>通过字符快速查找：Ctrl+Shift+Alt+N<br>重新开始一行（无论光标在哪里）：Shift+Enter<br>surround with代码块：Ctrl+Alt+T<br>大小写转换：Ctrl+Shift+U<br>输出模板：Ctrl+J<br>匹配代码块括号：Ctrl+[<br>显示当前文件的结构：Ctrl+F12<br>折叠/展开代码块：Ctrl+”-“/“+”<br>返回至上次浏览的位置 Ctrl+Alt+ left/right<br>逐级向上选中代码：Ctrl+W</p>\n<p><strong>【浏览器】</strong><br>打开新窗口:Ctrl+T<br>切换导航栏窗口:Ctrl+Tab<br>关闭活动页面:Ctrl+W<br>上下浏览网页:方向键和Page Up和Page Down</p>\n<h2 id=\"2-mac平台常用快捷键\"><a href=\"#2-mac平台常用快捷键\" class=\"headerlink\" title=\"2.mac平台常用快捷键\"></a>2.mac平台常用快捷键</h2><p><strong>【mac系统】</strong><br>Command + Shift + c 打开我的电脑<br>Command + Shift + h 打开当前用户文件夹<br>Command + 向上箭头 打开包含当前文件夹的文件夹<br>Command + [ / ] 打开上一个文件夹/下一个文件夹<br>Command + w 关闭最前tab<br>Command + m  最小化当前应用窗口<br>Command + q 关闭当前应用<br>Command + T 打开多个tab 【eg:浏览器，Terminal】<br>Command + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】<br>control + tab 转向下一个标签页【eg:webStorm多个编辑窗口】<br>control + shift + tab 转向上一个标签页<br>Control + 向上向下 查看所有打开窗口<br><strong>【两个手指向下滑：向下滚动】</strong></p>\n<p>Command + shift + n 新建文件夹<br>Command + N 新建文件【eg:sublime新文件，webStorm新文件】<br>Command + delete 删除<br>Return 重命名选中的文件或文件夹</p>\n<p>Shift 搜狗输入法中英文切换<br>Command + , 当前应用的偏好设置</p>\n<p><strong>【文件处理快捷键】</strong><br>Command + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾<br>Command + 左右 将光标移动到行首/行尾<br>Command + L 将光标移动到指定行<br>Command + shift + 上下左右 选中文本<br>alt + 上下 选取代码块<br>Shift + 上下左右 扩展选择区域<br>Command + f 查找<br>Command + r 替换<br>Delete 删除光标左边的字符<br>Fn + delete 删除光标右边的字符<br>Option + delete 删除光标左边的word</p>\n<p><strong>【截图快捷键】</strong><br>Command + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件<br>Command + shift + 4                 截取选中屏幕区域到文件<br>Command + shift + control + 3  截取全屏到剪贴板<br>Command + shift + control + 4  截取选中屏幕区域到剪贴板</p>\n<p><strong>【Mac下浏览器快捷键】</strong><br>Command + L 光标直接跳至地址栏<br>Chrome 开发者模式  Command + alt + j<br>刷新 Command + r</p>\n<p><strong>【Mac下webStorm快捷键】</strong><br>全局查找 Command + shift + f<br>格式整理 Command + alt + L<br>注释：Command + /<br>调整缩进 Shift +  tab<br>复制当前行 Command + d<br>删除当前行 Command + delete<br>快速换行 Shift + Enter<br>清除缩进变成单行 Command + Shift + J<br>光标在多处定位 Alt + 单击<br>大小写转换 Command + Shift + U</p>\n<h2 id=\"3-其他工具\"><a href=\"#3-其他工具\" class=\"headerlink\" title=\"3.其他工具\"></a>3.其他工具</h2><p><strong>【sublime】</strong><br>sublime修炼：一款得心应手的开发软件<br>1.sublime官网下载，安装时勾选右键打开文件<br>2.快捷键设置Preferences-&gt;Key Bindings-User<br>打开浏览器：ctrl+alt+f<br>3.命令模式ctrl+shift+p，输入install package，安装命令包</p>\n<p><strong>【VIM】</strong><br>【命令模式】<br>左下上右:HJKL<br>向右向下跳一个词:w/b<br>下/上一个句子/段落 （）/{}<br>跳转到行首/行尾：0/shift+$<br>跳转到最后一行/第一行：shift+G/gg<br>跳转到上一次编辑的地方：<br>跳转到上一次编辑的文件：ctrl+o/ctrl+i<br>整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行<br>非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行<br>删除选中内容:X<br>删除某行：DD / dl (L字符) /dw (w单词)<br>替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw<br>复制当前行：YY /yl /yw<br>复制一个词：YW<br>复制任意选中内容：先选中，再按Y<br>粘贴：P<br>撤销：U/u<br>代码格式化 选中，按=</p>\n<p>【编辑模式】<br>进入/退出 :i/a/0/shift+o esc<br>自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）</p>\n<p>【扩展模式】<br>：! 命令 （叹号后面有个空格）<br>搜索：/searchText /搜索文本 回车确认 然后按N查找下一个<br>向前搜索：？searchText<br>退出搜索高亮：nohl<br>[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局<br>[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText<br>横屏分屏：sp 上下横屏切换ctrl+ww<br>竖屏分屏：vs 左右竖屏切换ctrl+ww<br>退出分屏：q<br>显示行号：set number</p>\n"},{"title":"vue组件快速原型开发","date":"2018-11-15T12:56:20.000Z","_content":"## 1.文档目的\n该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件\n参考网址：基于[vue cli 3.0](https://cli.vuejs.org/zh/guide/)中快速[原型开发](https://cli.vuejs.org/zh/guide/prototyping.html)模块\n\n## 2.快速原型开发\n检查是否安装了vue cli 3.0开发环境： **vue --version**\n安装vue cli 3.0环境: **npm install -g @vue/cli**或**yarn global add @vue/cli**\n安装全局扩展： **npm install -g @vue/cli-service-global**\n编写App.vue组件：\n```\n  <template>\n    <h1>Hello!</h1>\n  </template>\n```\n运行组件： **vue serve**\n编译构建组件： **vue build**","source":"_posts/2018-11-15-vueserve.md","raw":"---\ntitle: vue组件快速原型开发\ndate: 2018-11-15 20:56:20\ntags: JS\n---\n## 1.文档目的\n该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件\n参考网址：基于[vue cli 3.0](https://cli.vuejs.org/zh/guide/)中快速[原型开发](https://cli.vuejs.org/zh/guide/prototyping.html)模块\n\n## 2.快速原型开发\n检查是否安装了vue cli 3.0开发环境： **vue --version**\n安装vue cli 3.0环境: **npm install -g @vue/cli**或**yarn global add @vue/cli**\n安装全局扩展： **npm install -g @vue/cli-service-global**\n编写App.vue组件：\n```\n  <template>\n    <h1>Hello!</h1>\n  </template>\n```\n运行组件： **vue serve**\n编译构建组件： **vue build**","slug":"vueserve","published":1,"updated":"2019-10-08T06:18:07.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezw2000lxijk2emxbxt5","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件<br>参考网址：基于<a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">vue cli 3.0</a>中快速<a href=\"https://cli.vuejs.org/zh/guide/prototyping.html\" target=\"_blank\" rel=\"noopener\">原型开发</a>模块</p>\n<h2 id=\"2-快速原型开发\"><a href=\"#2-快速原型开发\" class=\"headerlink\" title=\"2.快速原型开发\"></a>2.快速原型开发</h2><p>检查是否安装了vue cli 3.0开发环境： <strong>vue –version</strong><br>安装vue cli 3.0环境: <strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>安装全局扩展： <strong>npm install -g @vue/cli-service-global</strong><br>编写App.vue组件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行组件： <strong>vue serve</strong><br>编译构建组件： <strong>vue build</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件<br>参考网址：基于<a href=\"https://cli.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener\">vue cli 3.0</a>中快速<a href=\"https://cli.vuejs.org/zh/guide/prototyping.html\" target=\"_blank\" rel=\"noopener\">原型开发</a>模块</p>\n<h2 id=\"2-快速原型开发\"><a href=\"#2-快速原型开发\" class=\"headerlink\" title=\"2.快速原型开发\"></a>2.快速原型开发</h2><p>检查是否安装了vue cli 3.0开发环境： <strong>vue –version</strong><br>安装vue cli 3.0环境: <strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>安装全局扩展： <strong>npm install -g @vue/cli-service-global</strong><br>编写App.vue组件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行组件： <strong>vue serve</strong><br>编译构建组件： <strong>vue build</strong></p>\n"},{"title":"array","date":"2018-11-19T11:55:59.000Z","_content":"## 1.文档目的\n熟练掌握js数组属性和方法，熟能生巧\n参考文档：[MDN Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\n## 2.Array一览\narray    数组 【联想记忆法:部署兵力，我就是将军】\n【方法的分类方法，是否改变数组自身，是否是判断类型的】\nArray.length\nArray.prototype\n【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象\n【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例\n【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型\n\n**修改器方法**\n会改变调用它们的对象自身的值：\nArray.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素\nArray.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素\nArray.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。\nArray.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素\nArray.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。\nArray.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值\nArray.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序\n\n**访问方法**\n不会改变调用它们的对象的值\n【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。\n【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1\n【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。\n【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。\nArray.prototype.toString() 返回一个由所有数组元素组合而成的字符串\nArray.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串\nArray.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。\n\n**迭代方法**\n【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined\n【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改\n【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。\n【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。\nArray.prototype.forEach() 为数组中的每个元素执行一次回调函数。\n【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。\n【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回\nArray.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。\nArray.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键\nArray.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值\nArray.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值\nArray.prototype.reduceRight() 从右到左，同上\n\n\n小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮\nconsole.table(values)\n\n思考：【数组，字符串，对象 相互转化】\n\n// 字符串转数组 split\n// 数组转字符串 toString/join\n\n字符串可以当做数组直接用查看某个位置字符","source":"_posts/2018-11-19-array.md","raw":"---\ntitle: array\ndate: 2018-11-19 19:55:59\ntags: JS\n---\n## 1.文档目的\n熟练掌握js数组属性和方法，熟能生巧\n参考文档：[MDN Array](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n\n## 2.Array一览\narray    数组 【联想记忆法:部署兵力，我就是将军】\n【方法的分类方法，是否改变数组自身，是否是判断类型的】\nArray.length\nArray.prototype\n【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象\n【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例\n【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型\n\n**修改器方法**\n会改变调用它们的对象自身的值：\nArray.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素\nArray.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素\nArray.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。\nArray.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素\nArray.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。\nArray.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值\nArray.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序\n\n**访问方法**\n不会改变调用它们的对象的值\n【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。\n【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1\n【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。\n【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。\n【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。\nArray.prototype.toString() 返回一个由所有数组元素组合而成的字符串\nArray.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串\nArray.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。\n\n**迭代方法**\n【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined\n【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改\n【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。\n【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。\nArray.prototype.forEach() 为数组中的每个元素执行一次回调函数。\n【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。\n【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回\nArray.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。\nArray.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键\nArray.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值\nArray.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值\nArray.prototype.reduceRight() 从右到左，同上\n\n\n小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮\nconsole.table(values)\n\n思考：【数组，字符串，对象 相互转化】\n\n// 字符串转数组 split\n// 数组转字符串 toString/join\n\n字符串可以当做数组直接用查看某个位置字符","slug":"array","published":1,"updated":"2019-07-08T01:25:27.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezw4000oxijkqaslcxu3","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js数组属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">MDN Array</a></p>\n<h2 id=\"2-Array一览\"><a href=\"#2-Array一览\" class=\"headerlink\" title=\"2.Array一览\"></a>2.Array一览</h2><p>array    数组 【联想记忆法:部署兵力，我就是将军】<br>【方法的分类方法，是否改变数组自身，是否是判断类型的】<br>Array.length<br>Array.prototype<br>【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象<br>【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例<br>【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型</p>\n<p><strong>修改器方法</strong><br>会改变调用它们的对象自身的值：<br>Array.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素<br>Array.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素<br>Array.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。<br>Array.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素<br>Array.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br>Array.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值<br>Array.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序</p>\n<p><strong>访问方法</strong><br>不会改变调用它们的对象的值<br>【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。<br>【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1<br>【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。<br>【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。<br>【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。<br>Array.prototype.toString() 返回一个由所有数组元素组合而成的字符串<br>Array.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串<br>Array.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。</p>\n<p><strong>迭代方法</strong><br>【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined<br>【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改<br>【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。<br>【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。<br>Array.prototype.forEach() 为数组中的每个元素执行一次回调函数。<br>【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。<br>【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回<br>Array.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br>Array.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键<br>Array.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值<br>Array.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值<br>Array.prototype.reduceRight() 从右到左，同上</p>\n<p>小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮<br>console.table(values)</p>\n<p>思考：【数组，字符串，对象 相互转化】</p>\n<p>// 字符串转数组 split<br>// 数组转字符串 toString/join</p>\n<p>字符串可以当做数组直接用查看某个位置字符</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js数组属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">MDN Array</a></p>\n<h2 id=\"2-Array一览\"><a href=\"#2-Array一览\" class=\"headerlink\" title=\"2.Array一览\"></a>2.Array一览</h2><p>array    数组 【联想记忆法:部署兵力，我就是将军】<br>【方法的分类方法，是否改变数组自身，是否是判断类型的】<br>Array.length<br>Array.prototype<br>【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象<br>【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例<br>【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型</p>\n<p><strong>修改器方法</strong><br>会改变调用它们的对象自身的值：<br>Array.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素<br>Array.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素<br>Array.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。<br>Array.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素<br>Array.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br>Array.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值<br>Array.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序</p>\n<p><strong>访问方法</strong><br>不会改变调用它们的对象的值<br>【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。<br>【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1<br>【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。<br>【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。<br>【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。<br>Array.prototype.toString() 返回一个由所有数组元素组合而成的字符串<br>Array.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串<br>Array.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。</p>\n<p><strong>迭代方法</strong><br>【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined<br>【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改<br>【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。<br>【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。<br>Array.prototype.forEach() 为数组中的每个元素执行一次回调函数。<br>【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。<br>【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回<br>Array.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br>Array.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键<br>Array.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值<br>Array.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值<br>Array.prototype.reduceRight() 从右到左，同上</p>\n<p>小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮<br>console.table(values)</p>\n<p>思考：【数组，字符串，对象 相互转化】</p>\n<p>// 字符串转数组 split<br>// 数组转字符串 toString/join</p>\n<p>字符串可以当做数组直接用查看某个位置字符</p>\n"},{"title":"string","date":"2018-11-19T12:04:20.000Z","_content":"## 1.文档目的\n熟练掌握js字符串属性和方法，熟能生巧\n参考文档：[MDN String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n## 2.String一览\nString.prototype.constructor\nString.prototype.length  返回了字符串的长度\nN  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）\nString()   将其它对象转化为字符串\n\n【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串\n【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。\n【布尔类型】String.prototype.lastIndexOf() 同上，相反\n【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符\n【布尔类型】String.prototype.endsWith()  同上，相反\n【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较\n【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。\n【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。\n【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。\n【新字符串】String.prototype.padEnd()  同上，相反\n【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。\n【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。\n【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符\n【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。\n【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。\nString.prototype.charAt()  返回特定位置的字符。\nString.prototype.split()  将字符串对象分割成字符串数组。\n\nString.prototype.toLowerCase() 转化为小写\nString.prototype.toLocaleLowerCase() 转为本地化小写\nString.prototype.toUpperCase() 同上，相反\nString.prototype.toLocaleUpperCase() 同上，相反\nString.prototype.trim()  从字符串的开始和结尾去除空格。\nString.prototype.trimLeft()   从字符串的左侧去除空格\nString.prototype.trimRight()   从字符串的右侧去除空格\n\nString.prototype.toString()  返回用字符串对象的字符串值\nString.prototype.valueOf()  返回特定对象的原始值（同toString()）\n\nString是基本类型，Array是引用类型\n\n**总结:**\n1.一些列布尔类型的方法\n2.一些列对值的增删改查及遍历\n3.数组和字符串可以相互转化\ntoString join 和 split\n有空多看看，熟能生巧\n\n扩展学习:splice 和 sort\n\nforEach() 遍历数组\nfor .. in  遍历obj的key\nfor... of  遍历obj的value","source":"_posts/2018-11-19-string.md","raw":"---\ntitle: string\ndate: 2018-11-19 20:04:20\ntags: JS\n---\n## 1.文档目的\n熟练掌握js字符串属性和方法，熟能生巧\n参考文档：[MDN String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n## 2.String一览\nString.prototype.constructor\nString.prototype.length  返回了字符串的长度\nN  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）\nString()   将其它对象转化为字符串\n\n【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串\n【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。\n【布尔类型】String.prototype.lastIndexOf() 同上，相反\n【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符\n【布尔类型】String.prototype.endsWith()  同上，相反\n【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较\n【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。\n【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。\n【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。\n【新字符串】String.prototype.padEnd()  同上，相反\n【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。\n【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。\n【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符\n【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。\n【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。\nString.prototype.charAt()  返回特定位置的字符。\nString.prototype.split()  将字符串对象分割成字符串数组。\n\nString.prototype.toLowerCase() 转化为小写\nString.prototype.toLocaleLowerCase() 转为本地化小写\nString.prototype.toUpperCase() 同上，相反\nString.prototype.toLocaleUpperCase() 同上，相反\nString.prototype.trim()  从字符串的开始和结尾去除空格。\nString.prototype.trimLeft()   从字符串的左侧去除空格\nString.prototype.trimRight()   从字符串的右侧去除空格\n\nString.prototype.toString()  返回用字符串对象的字符串值\nString.prototype.valueOf()  返回特定对象的原始值（同toString()）\n\nString是基本类型，Array是引用类型\n\n**总结:**\n1.一些列布尔类型的方法\n2.一些列对值的增删改查及遍历\n3.数组和字符串可以相互转化\ntoString join 和 split\n有空多看看，熟能生巧\n\n扩展学习:splice 和 sort\n\nforEach() 遍历数组\nfor .. in  遍历obj的key\nfor... of  遍历obj的value","slug":"string","published":1,"updated":"2019-07-08T01:25:27.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezw5000qxijkq435pqkw","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js字符串属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener\">MDN String</a></p>\n<h2 id=\"2-String一览\"><a href=\"#2-String一览\" class=\"headerlink\" title=\"2.String一览\"></a>2.String一览</h2><p>String.prototype.constructor<br>String.prototype.length  返回了字符串的长度<br>N  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）<br>String()   将其它对象转化为字符串</p>\n<p>【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串<br>【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。<br>【布尔类型】String.prototype.lastIndexOf() 同上，相反<br>【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符<br>【布尔类型】String.prototype.endsWith()  同上，相反<br>【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较<br>【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。<br>【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。<br>【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。<br>【新字符串】String.prototype.padEnd()  同上，相反<br>【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。<br>【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。<br>【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符<br>【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。<br>【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。<br>String.prototype.charAt()  返回特定位置的字符。<br>String.prototype.split()  将字符串对象分割成字符串数组。</p>\n<p>String.prototype.toLowerCase() 转化为小写<br>String.prototype.toLocaleLowerCase() 转为本地化小写<br>String.prototype.toUpperCase() 同上，相反<br>String.prototype.toLocaleUpperCase() 同上，相反<br>String.prototype.trim()  从字符串的开始和结尾去除空格。<br>String.prototype.trimLeft()   从字符串的左侧去除空格<br>String.prototype.trimRight()   从字符串的右侧去除空格</p>\n<p>String.prototype.toString()  返回用字符串对象的字符串值<br>String.prototype.valueOf()  返回特定对象的原始值（同toString()）</p>\n<p>String是基本类型，Array是引用类型</p>\n<p><strong>总结:</strong><br>1.一些列布尔类型的方法<br>2.一些列对值的增删改查及遍历<br>3.数组和字符串可以相互转化<br>toString join 和 split<br>有空多看看，熟能生巧</p>\n<p>扩展学习:splice 和 sort</p>\n<p>forEach() 遍历数组<br>for .. in  遍历obj的key<br>for… of  遍历obj的value</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>熟练掌握js字符串属性和方法，熟能生巧<br>参考文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener\">MDN String</a></p>\n<h2 id=\"2-String一览\"><a href=\"#2-String一览\" class=\"headerlink\" title=\"2.String一览\"></a>2.String一览</h2><p>String.prototype.constructor<br>String.prototype.length  返回了字符串的长度<br>N  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）<br>String()   将其它对象转化为字符串</p>\n<p>【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串<br>【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。<br>【布尔类型】String.prototype.lastIndexOf() 同上，相反<br>【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符<br>【布尔类型】String.prototype.endsWith()  同上，相反<br>【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较<br>【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。<br>【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。<br>【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。<br>【新字符串】String.prototype.padEnd()  同上，相反<br>【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。<br>【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。<br>【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符<br>【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。<br>【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。<br>String.prototype.charAt()  返回特定位置的字符。<br>String.prototype.split()  将字符串对象分割成字符串数组。</p>\n<p>String.prototype.toLowerCase() 转化为小写<br>String.prototype.toLocaleLowerCase() 转为本地化小写<br>String.prototype.toUpperCase() 同上，相反<br>String.prototype.toLocaleUpperCase() 同上，相反<br>String.prototype.trim()  从字符串的开始和结尾去除空格。<br>String.prototype.trimLeft()   从字符串的左侧去除空格<br>String.prototype.trimRight()   从字符串的右侧去除空格</p>\n<p>String.prototype.toString()  返回用字符串对象的字符串值<br>String.prototype.valueOf()  返回特定对象的原始值（同toString()）</p>\n<p>String是基本类型，Array是引用类型</p>\n<p><strong>总结:</strong><br>1.一些列布尔类型的方法<br>2.一些列对值的增删改查及遍历<br>3.数组和字符串可以相互转化<br>toString join 和 split<br>有空多看看，熟能生巧</p>\n<p>扩展学习:splice 和 sort</p>\n<p>forEach() 遍历数组<br>for .. in  遍历obj的key<br>for… of  遍历obj的value</p>\n"},{"title":"axios","date":"2018-12-20T23:11:54.000Z","_content":"## 1.文档目的\n通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作\n参考网址：[axios](https://www.kancloud.cn/yunye/axios/234845)\n## 2.实践要点分析\n1.get请求直接拼接动态数据\nget请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）\n例如在Swagger UI上看到的形式为：\n**【GET】   /resourceApply/get/{id}**\n**(Parameters)  id[required]  string**\n那么前端的请求方法声明就应该如下（即：将参数直接拼接）：\n```\ngetDepartById = id => this.get(`/resourceApply/get/${id}`)\n```\n对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：\n```\nDepartApi.getDepartById(rowId)\n```\n2.get等请求params参数形式\nparams参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中\n例如在Swagger UI上看到的get请求形式为：\n**【GET】   /role/findPermsByRoleId**\n**(Parameters)  roleId[required]  string**\n那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):\n```\nfindPermsByRoleId = (params) => this.get('dce-admin/role/findPermsByRoleId', params)\nDepartApi.findPermsByRoleId({roleId: this.$route.param.id})\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId: roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\npost请求也是可以有params参数的(data可以默认为{}，来占位)：\n```\nsubAudit = (data, params) => this.post('/dce-res/resourceDB/subAudit', data, params)\nDbRegisterApi.subAudit({}, { resourceDBId: params.row.id })\n```\n3.post等请求data参数形式\n`data` 是作为请求主体被发送的数据，只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n必须是以下类型之一：\n- string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n- 浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]\n- Node 专属： Stream\n例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：\n**【POST】   /dce-admin/depart**\n**(Parameters)  depart[required]  body**\n那么前端的请求方法声明和调用方法就应该如下：\n```\naddDepart = data => this.post('/dce-admin/depart', data)\nDepartApi.addDepart(this.formValidate)\n```\n当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变\n4.跨域等问题的处理\n跨域原因：\n浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据\n解决方案（在axios请求配置中加入如下配置）：\n```\n// 'proxy' 定义代理服务器的主机名称和端口\n// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n```","source":"_posts/2018-12-21-axios.md","raw":"---\ntitle: axios\ndate: 2018-12-21 07:11:54\ntags: JS\n---\n## 1.文档目的\n通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作\n参考网址：[axios](https://www.kancloud.cn/yunye/axios/234845)\n## 2.实践要点分析\n1.get请求直接拼接动态数据\nget请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）\n例如在Swagger UI上看到的形式为：\n**【GET】   /resourceApply/get/{id}**\n**(Parameters)  id[required]  string**\n那么前端的请求方法声明就应该如下（即：将参数直接拼接）：\n```\ngetDepartById = id => this.get(`/resourceApply/get/${id}`)\n```\n对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：\n```\nDepartApi.getDepartById(rowId)\n```\n2.get等请求params参数形式\nparams参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中\n例如在Swagger UI上看到的get请求形式为：\n**【GET】   /role/findPermsByRoleId**\n**(Parameters)  roleId[required]  string**\n那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):\n```\nfindPermsByRoleId = (params) => this.get('dce-admin/role/findPermsByRoleId', params)\nDepartApi.findPermsByRoleId({roleId: this.$route.param.id})\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\n或如下：\n```\nfindPermsByRoleId = (roleId) => this.get('dce-admin/role/findPermsByRoleId', { roleId: roleId })\nDepartApi.findPermsByRoleId(this.$route.param.id)\n```\npost请求也是可以有params参数的(data可以默认为{}，来占位)：\n```\nsubAudit = (data, params) => this.post('/dce-res/resourceDB/subAudit', data, params)\nDbRegisterApi.subAudit({}, { resourceDBId: params.row.id })\n```\n3.post等请求data参数形式\n`data` 是作为请求主体被发送的数据，只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n必须是以下类型之一：\n- string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n- 浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]\n- Node 专属： Stream\n例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：\n**【POST】   /dce-admin/depart**\n**(Parameters)  depart[required]  body**\n那么前端的请求方法声明和调用方法就应该如下：\n```\naddDepart = data => this.post('/dce-admin/depart', data)\nDepartApi.addDepart(this.formValidate)\n```\n当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变\n4.跨域等问题的处理\n跨域原因：\n浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据\n解决方案（在axios请求配置中加入如下配置）：\n```\n// 'proxy' 定义代理服务器的主机名称和端口\n// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n```","slug":"axios","published":1,"updated":"2019-08-16T08:36:44.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezw6000txijk9yrlt2mm","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作<br>参考网址：<a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">axios</a></p>\n<h2 id=\"2-实践要点分析\"><a href=\"#2-实践要点分析\" class=\"headerlink\" title=\"2.实践要点分析\"></a>2.实践要点分析</h2><p>1.get请求直接拼接动态数据<br>get请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）<br>例如在Swagger UI上看到的形式为：<br><strong>【GET】   /resourceApply/get/{id}</strong><br><strong>(Parameters)  id[required]  string</strong><br>那么前端的请求方法声明就应该如下（即：将参数直接拼接）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDepartById = id =&gt; this.get(`/resourceApply/get/$&#123;id&#125;`)</span><br></pre></td></tr></table></figure></p>\n<p>对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DepartApi.getDepartById(rowId)</span><br></pre></td></tr></table></figure></p>\n<p>2.get等请求params参数形式<br>params参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中<br>例如在Swagger UI上看到的get请求形式为：<br><strong>【GET】   /role/findPermsByRoleId</strong><br><strong>(Parameters)  roleId[required]  string</strong><br>那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (params) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, params)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(&#123;roleId: this.$route.param.id&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId: roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>post请求也是可以有params参数的(data可以默认为{}，来占位)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subAudit = (data, params) =&gt; this.post(&apos;/dce-res/resourceDB/subAudit&apos;, data, params)</span><br><span class=\"line\">DbRegisterApi.subAudit(&#123;&#125;, &#123; resourceDBId: params.row.id &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3.post等请求data参数形式<br><code>data</code> 是作为请求主体被发送的数据，只适用于这些请求方法 ‘PUT’, ‘POST’, 和 ‘PATCH’<br>必须是以下类型之一：</p>\n<ul>\n<li>string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</li>\n<li>浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]</li>\n<li>Node 专属： Stream<br>例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：<br><strong>【POST】   /dce-admin/depart</strong><br><strong>(Parameters)  depart[required]  body</strong><br>那么前端的请求方法声明和调用方法就应该如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addDepart = data =&gt; this.post(&apos;/dce-admin/depart&apos;, data)</span><br><span class=\"line\">DepartApi.addDepart(this.formValidate)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变<br>4.跨域等问题的处理<br>跨域原因：<br>浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据<br>解决方案（在axios请求配置中加入如下配置）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &apos;proxy&apos; 定义代理服务器的主机名称和端口</span><br><span class=\"line\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class=\"line\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">    port: 9000,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: &apos;mikeymike&apos;,</span><br><span class=\"line\">      password: &apos;rapunz3l&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作<br>参考网址：<a href=\"https://www.kancloud.cn/yunye/axios/234845\" target=\"_blank\" rel=\"noopener\">axios</a></p>\n<h2 id=\"2-实践要点分析\"><a href=\"#2-实践要点分析\" class=\"headerlink\" title=\"2.实践要点分析\"></a>2.实践要点分析</h2><p>1.get请求直接拼接动态数据<br>get请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）<br>例如在Swagger UI上看到的形式为：<br><strong>【GET】   /resourceApply/get/{id}</strong><br><strong>(Parameters)  id[required]  string</strong><br>那么前端的请求方法声明就应该如下（即：将参数直接拼接）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDepartById = id =&gt; this.get(`/resourceApply/get/$&#123;id&#125;`)</span><br></pre></td></tr></table></figure></p>\n<p>对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DepartApi.getDepartById(rowId)</span><br></pre></td></tr></table></figure></p>\n<p>2.get等请求params参数形式<br>params参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中<br>例如在Swagger UI上看到的get请求形式为：<br><strong>【GET】   /role/findPermsByRoleId</strong><br><strong>(Parameters)  roleId[required]  string</strong><br>那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (params) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, params)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(&#123;roleId: this.$route.param.id&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>或如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId: roleId &#125;)</span><br><span class=\"line\">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p>\n<p>post请求也是可以有params参数的(data可以默认为{}，来占位)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subAudit = (data, params) =&gt; this.post(&apos;/dce-res/resourceDB/subAudit&apos;, data, params)</span><br><span class=\"line\">DbRegisterApi.subAudit(&#123;&#125;, &#123; resourceDBId: params.row.id &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>3.post等请求data参数形式<br><code>data</code> 是作为请求主体被发送的数据，只适用于这些请求方法 ‘PUT’, ‘POST’, 和 ‘PATCH’<br>必须是以下类型之一：</p>\n<ul>\n<li>string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</li>\n<li>浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]</li>\n<li>Node 专属： Stream<br>例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：<br><strong>【POST】   /dce-admin/depart</strong><br><strong>(Parameters)  depart[required]  body</strong><br>那么前端的请求方法声明和调用方法就应该如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addDepart = data =&gt; this.post(&apos;/dce-admin/depart&apos;, data)</span><br><span class=\"line\">DepartApi.addDepart(this.formValidate)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变<br>4.跨域等问题的处理<br>跨域原因：<br>浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据<br>解决方案（在axios请求配置中加入如下配置）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// &apos;proxy&apos; 定义代理服务器的主机名称和端口</span><br><span class=\"line\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class=\"line\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">    port: 9000,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: &apos;mikeymike&apos;,</span><br><span class=\"line\">      password: &apos;rapunz3l&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n"},{"title":"coding-quality","date":"2018-12-18T22:43:00.000Z","_content":"## 1.文档目的\n一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助\n参考网址：\n[雅虎军规35条](https://www.jianshu.com/p/4cbcd202a591)、\n[Github编码规范](http://alloyteam.github.io/CodeGuide/)、\n[JavaScript 编码规范](https://github.com/yuche/javascript)、\n[eslint规则](http://eslint.cn/docs/rules/)、\n[js编码风格（阮一峰）](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n[ES6编程风格](http://es6.ruanyifeng.com/#docs/style)\n## 2.心得\n编程讲究章法，要心中有想法，才能动手编码，正所谓\"三思而后行\"，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5\n基于node开发环境转换：[Babel](https://www.jianshu.com/p/647950617a6d)\n在线转换：[Babel](https://babeljs.io/repl)、[Traceur](https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22)\n1、前端的发展讲究\"工程化\"，\"模块化\"和\"组件化\"，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，\n工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等\n模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写\n组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面\n2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等\n## 3.编程命名规则介绍\n驼峰命名法：如exampleName\n帕斯卡命名法：如ExampleName\n下划线命名法：如example_name\n中划线命名法：如example-name\n匈牙利命名法(体现类型)：如g_example_name或aExampleNames\n## 3.整理实用条款\n1、工程化，模块化，组件化的思想\n2、项目命名使用中划线命名法,比如twitter-bootstrap\n3、项目中文件夹命名使用中划线命名法：比如global-api\n3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js\n3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from './CheckBox'\n4、类名用帕斯卡命名法：比如AdminUser{}\n5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()\n6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法\n7、常量命名原则：全部大写且用下划线连接，如USER_TYPE\n## 4.代码开发和维护\n好的代码设计架构，是易于维护的（易于修改，易于扩展），\n首次开发新功能时就应该注重设计原则并写出高质量代码，及时做好注释必不可少\n\n代码维护原则：\n老业务不合理[在确保该代码模块在其他模块不受影响下，可以直接修改原代码，否则应按新需求原则进行]\n新需求[尽量不要改动原代码，做好注释]\n（1）尽量通过继承，适配器，桥接等模式，装饰者模式，外观模式，代理模式，组合模式，代码复用模式等方式扩展新需求\n（2）必须在源代码上修改：做好代码隔离if等\n","source":"_posts/2018-12-19-coding-quality.md","raw":"---\ntitle: coding-quality\ndate: 2018-12-19 06:43:00\ntags: JS\n---\n## 1.文档目的\n一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助\n参考网址：\n[雅虎军规35条](https://www.jianshu.com/p/4cbcd202a591)、\n[Github编码规范](http://alloyteam.github.io/CodeGuide/)、\n[JavaScript 编码规范](https://github.com/yuche/javascript)、\n[eslint规则](http://eslint.cn/docs/rules/)、\n[js编码风格（阮一峰）](http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html)\n[ES6编程风格](http://es6.ruanyifeng.com/#docs/style)\n## 2.心得\n编程讲究章法，要心中有想法，才能动手编码，正所谓\"三思而后行\"，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5\n基于node开发环境转换：[Babel](https://www.jianshu.com/p/647950617a6d)\n在线转换：[Babel](https://babeljs.io/repl)、[Traceur](https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22)\n1、前端的发展讲究\"工程化\"，\"模块化\"和\"组件化\"，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，\n工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等\n模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写\n组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面\n2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等\n## 3.编程命名规则介绍\n驼峰命名法：如exampleName\n帕斯卡命名法：如ExampleName\n下划线命名法：如example_name\n中划线命名法：如example-name\n匈牙利命名法(体现类型)：如g_example_name或aExampleNames\n## 3.整理实用条款\n1、工程化，模块化，组件化的思想\n2、项目命名使用中划线命名法,比如twitter-bootstrap\n3、项目中文件夹命名使用中划线命名法：比如global-api\n3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js\n3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from './CheckBox'\n4、类名用帕斯卡命名法：比如AdminUser{}\n5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()\n6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法\n7、常量命名原则：全部大写且用下划线连接，如USER_TYPE\n## 4.代码开发和维护\n好的代码设计架构，是易于维护的（易于修改，易于扩展），\n首次开发新功能时就应该注重设计原则并写出高质量代码，及时做好注释必不可少\n\n代码维护原则：\n老业务不合理[在确保该代码模块在其他模块不受影响下，可以直接修改原代码，否则应按新需求原则进行]\n新需求[尽量不要改动原代码，做好注释]\n（1）尽量通过继承，适配器，桥接等模式，装饰者模式，外观模式，代理模式，组合模式，代码复用模式等方式扩展新需求\n（2）必须在源代码上修改：做好代码隔离if等\n","slug":"coding-quality","published":1,"updated":"2019-09-15T02:28:46.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezw8000vxijkb2a10fyx","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助<br>参考网址：<br><a href=\"https://www.jianshu.com/p/4cbcd202a591\" target=\"_blank\" rel=\"noopener\">雅虎军规35条</a>、<br><a href=\"http://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"noopener\">Github编码规范</a>、<br><a href=\"https://github.com/yuche/javascript\" target=\"_blank\" rel=\"noopener\">JavaScript 编码规范</a>、<br><a href=\"http://eslint.cn/docs/rules/\" target=\"_blank\" rel=\"noopener\">eslint规则</a>、<br><a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">js编码风格（阮一峰）</a><br><a href=\"http://es6.ruanyifeng.com/#docs/style\" target=\"_blank\" rel=\"noopener\">ES6编程风格</a></p>\n<h2 id=\"2-心得\"><a href=\"#2-心得\" class=\"headerlink\" title=\"2.心得\"></a>2.心得</h2><p>编程讲究章法，要心中有想法，才能动手编码，正所谓”三思而后行”，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5<br>基于node开发环境转换：<a href=\"https://www.jianshu.com/p/647950617a6d\" target=\"_blank\" rel=\"noopener\">Babel</a><br>在线转换：<a href=\"https://babeljs.io/repl\" target=\"_blank\" rel=\"noopener\">Babel</a>、<a href=\"https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22\" target=\"_blank\" rel=\"noopener\">Traceur</a><br>1、前端的发展讲究”工程化”，”模块化”和”组件化”，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，<br>工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等<br>模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写<br>组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面<br>2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等</p>\n<h2 id=\"3-编程命名规则介绍\"><a href=\"#3-编程命名规则介绍\" class=\"headerlink\" title=\"3.编程命名规则介绍\"></a>3.编程命名规则介绍</h2><p>驼峰命名法：如exampleName<br>帕斯卡命名法：如ExampleName<br>下划线命名法：如example_name<br>中划线命名法：如example-name<br>匈牙利命名法(体现类型)：如g_example_name或aExampleNames</p>\n<h2 id=\"3-整理实用条款\"><a href=\"#3-整理实用条款\" class=\"headerlink\" title=\"3.整理实用条款\"></a>3.整理实用条款</h2><p>1、工程化，模块化，组件化的思想<br>2、项目命名使用中划线命名法,比如twitter-bootstrap<br>3、项目中文件夹命名使用中划线命名法：比如global-api<br>3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js<br>3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from ‘./CheckBox’<br>4、类名用帕斯卡命名法：比如AdminUser{}<br>5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()<br>6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法<br>7、常量命名原则：全部大写且用下划线连接，如USER_TYPE</p>\n<h2 id=\"4-代码开发和维护\"><a href=\"#4-代码开发和维护\" class=\"headerlink\" title=\"4.代码开发和维护\"></a>4.代码开发和维护</h2><p>好的代码设计架构，是易于维护的（易于修改，易于扩展），<br>首次开发新功能时就应该注重设计原则并写出高质量代码，及时做好注释必不可少</p>\n<p>代码维护原则：<br>老业务不合理[在确保该代码模块在其他模块不受影响下，可以直接修改原代码，否则应按新需求原则进行]<br>新需求[尽量不要改动原代码，做好注释]<br>（1）尽量通过继承，适配器，桥接等模式，装饰者模式，外观模式，代理模式，组合模式，代码复用模式等方式扩展新需求<br>（2）必须在源代码上修改：做好代码隔离if等</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助<br>参考网址：<br><a href=\"https://www.jianshu.com/p/4cbcd202a591\" target=\"_blank\" rel=\"noopener\">雅虎军规35条</a>、<br><a href=\"http://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"noopener\">Github编码规范</a>、<br><a href=\"https://github.com/yuche/javascript\" target=\"_blank\" rel=\"noopener\">JavaScript 编码规范</a>、<br><a href=\"http://eslint.cn/docs/rules/\" target=\"_blank\" rel=\"noopener\">eslint规则</a>、<br><a href=\"http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html\" target=\"_blank\" rel=\"noopener\">js编码风格（阮一峰）</a><br><a href=\"http://es6.ruanyifeng.com/#docs/style\" target=\"_blank\" rel=\"noopener\">ES6编程风格</a></p>\n<h2 id=\"2-心得\"><a href=\"#2-心得\" class=\"headerlink\" title=\"2.心得\"></a>2.心得</h2><p>编程讲究章法，要心中有想法，才能动手编码，正所谓”三思而后行”，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5<br>基于node开发环境转换：<a href=\"https://www.jianshu.com/p/647950617a6d\" target=\"_blank\" rel=\"noopener\">Babel</a><br>在线转换：<a href=\"https://babeljs.io/repl\" target=\"_blank\" rel=\"noopener\">Babel</a>、<a href=\"https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22\" target=\"_blank\" rel=\"noopener\">Traceur</a><br>1、前端的发展讲究”工程化”，”模块化”和”组件化”，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，<br>工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等<br>模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写<br>组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面<br>2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等</p>\n<h2 id=\"3-编程命名规则介绍\"><a href=\"#3-编程命名规则介绍\" class=\"headerlink\" title=\"3.编程命名规则介绍\"></a>3.编程命名规则介绍</h2><p>驼峰命名法：如exampleName<br>帕斯卡命名法：如ExampleName<br>下划线命名法：如example_name<br>中划线命名法：如example-name<br>匈牙利命名法(体现类型)：如g_example_name或aExampleNames</p>\n<h2 id=\"3-整理实用条款\"><a href=\"#3-整理实用条款\" class=\"headerlink\" title=\"3.整理实用条款\"></a>3.整理实用条款</h2><p>1、工程化，模块化，组件化的思想<br>2、项目命名使用中划线命名法,比如twitter-bootstrap<br>3、项目中文件夹命名使用中划线命名法：比如global-api<br>3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js<br>3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from ‘./CheckBox’<br>4、类名用帕斯卡命名法：比如AdminUser{}<br>5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()<br>6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法<br>7、常量命名原则：全部大写且用下划线连接，如USER_TYPE</p>\n<h2 id=\"4-代码开发和维护\"><a href=\"#4-代码开发和维护\" class=\"headerlink\" title=\"4.代码开发和维护\"></a>4.代码开发和维护</h2><p>好的代码设计架构，是易于维护的（易于修改，易于扩展），<br>首次开发新功能时就应该注重设计原则并写出高质量代码，及时做好注释必不可少</p>\n<p>代码维护原则：<br>老业务不合理[在确保该代码模块在其他模块不受影响下，可以直接修改原代码，否则应按新需求原则进行]<br>新需求[尽量不要改动原代码，做好注释]<br>（1）尽量通过继承，适配器，桥接等模式，装饰者模式，外观模式，代理模式，组合模式，代码复用模式等方式扩展新需求<br>（2）必须在源代码上修改：做好代码隔离if等</p>\n"},{"title":"sleep-quality","date":"2018-12-18T22:24:35.000Z","_content":"## 1.文档目的\n该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量\n参考网址：[乐哈健康:提升睡眠质量](https://m.leha.com/health/59359)\n## 2.提升睡眠质量九大原则\n1、改掉睡前吃东西的习惯\n2、调整睡眠环境\n3、改变睡姿\n4、睡前梳梳头\n5、睡前用热水泡泡脚\n6、蜂蜜加牛奶改善睡眠质量\n7、临睡前要注意放松心情\n8、睡前舒缓运动消除疲劳\n9、睡觉时枕头别垫太高\n","source":"_posts/2018-12-19-sleep-quality.md","raw":"---\ntitle: sleep-quality\ndate: 2018-12-19 06:24:35\ntags: life\n---\n## 1.文档目的\n该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量\n参考网址：[乐哈健康:提升睡眠质量](https://m.leha.com/health/59359)\n## 2.提升睡眠质量九大原则\n1、改掉睡前吃东西的习惯\n2、调整睡眠环境\n3、改变睡姿\n4、睡前梳梳头\n5、睡前用热水泡泡脚\n6、蜂蜜加牛奶改善睡眠质量\n7、临睡前要注意放松心情\n8、睡前舒缓运动消除疲劳\n9、睡觉时枕头别垫太高\n","slug":"sleep-quality","published":1,"updated":"2019-07-08T01:25:27.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezw9000xxijkgvzei3ie","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量<br>参考网址：<a href=\"https://m.leha.com/health/59359\" target=\"_blank\" rel=\"noopener\">乐哈健康:提升睡眠质量</a></p>\n<h2 id=\"2-提升睡眠质量九大原则\"><a href=\"#2-提升睡眠质量九大原则\" class=\"headerlink\" title=\"2.提升睡眠质量九大原则\"></a>2.提升睡眠质量九大原则</h2><p>1、改掉睡前吃东西的习惯<br>2、调整睡眠环境<br>3、改变睡姿<br>4、睡前梳梳头<br>5、睡前用热水泡泡脚<br>6、蜂蜜加牛奶改善睡眠质量<br>7、临睡前要注意放松心情<br>8、睡前舒缓运动消除疲劳<br>9、睡觉时枕头别垫太高</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量<br>参考网址：<a href=\"https://m.leha.com/health/59359\" target=\"_blank\" rel=\"noopener\">乐哈健康:提升睡眠质量</a></p>\n<h2 id=\"2-提升睡眠质量九大原则\"><a href=\"#2-提升睡眠质量九大原则\" class=\"headerlink\" title=\"2.提升睡眠质量九大原则\"></a>2.提升睡眠质量九大原则</h2><p>1、改掉睡前吃东西的习惯<br>2、调整睡眠环境<br>3、改变睡姿<br>4、睡前梳梳头<br>5、睡前用热水泡泡脚<br>6、蜂蜜加牛奶改善睡眠质量<br>7、临睡前要注意放松心情<br>8、睡前舒缓运动消除疲劳<br>9、睡觉时枕头别垫太高</p>\n"},{"title":"React+Redux模式","date":"2018-12-25T22:15:26.000Z","_content":"## 1.文档目的\n学习并理解React+Redux模式\n参考网址：[慕课网:在React中使用Redux数据流](https://www.imooc.com/learn/744)\n## 2.概念笔记\n1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），\n需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）\n2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，\n实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state\n","source":"_posts/2018-12-26-redux.md","raw":"---\ntitle: React+Redux模式\ndate: 2018-12-26 06:15:26\ntags: React\n---\n## 1.文档目的\n学习并理解React+Redux模式\n参考网址：[慕课网:在React中使用Redux数据流](https://www.imooc.com/learn/744)\n## 2.概念笔记\n1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），\n需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）\n2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，\n实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state\n","slug":"redux","published":1,"updated":"2019-07-08T01:25:27.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwb000zxijk12u0dz4b","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>学习并理解React+Redux模式<br>参考网址：<a href=\"https://www.imooc.com/learn/744\" target=\"_blank\" rel=\"noopener\">慕课网:在React中使用Redux数据流</a></p>\n<h2 id=\"2-概念笔记\"><a href=\"#2-概念笔记\" class=\"headerlink\" title=\"2.概念笔记\"></a>2.概念笔记</h2><p>1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），<br>需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）<br>2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，<br>实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>学习并理解React+Redux模式<br>参考网址：<a href=\"https://www.imooc.com/learn/744\" target=\"_blank\" rel=\"noopener\">慕课网:在React中使用Redux数据流</a></p>\n<h2 id=\"2-概念笔记\"><a href=\"#2-概念笔记\" class=\"headerlink\" title=\"2.概念笔记\"></a>2.概念笔记</h2><p>1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），<br>需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）<br>2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，<br>实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state</p>\n"},{"title":"基于React Native的热更新","date":"2019-03-15T04:56:32.000Z","_content":"## 1.文档目的\n基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法\n参考网址: [react-native-code-push常用命令](https://www.jianshu.com/p/8f7ae770a5ac)\n\n## 2.发布热更新等常用命令\n查看服务器app部署情况\n```\ncode-push app list\n```\n查看发布信息\n```\ncode-push deployment ls Rasog-android -k\n```\n发布命令\n```\ncode-push release-react Rasog-android android --t 1.0.0 --d Staging --des \"1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除\" --m true\n```\n其他常用命令\n\n- `code-push app add` 在账号里面添加一个新的app\n- `code-push app remove` 或者 rm 在账号里移除一个app\n- `code-push app rename` 重命名一个存在app\n- `code-push app list` 或则 ls 列出账号下面的所有app\n- `code-push app transfer` 把app的所有权转移到另外一个账号\n- code-push app ls 查看已注册的应用\n- code-push deployment ls appName -k  查看应用key\n- code-push login 登陆 \n- code-push loout 注销\n- code-push access-key ls 列出登陆的token\n- code-push access-key rm <accessKye> 删除某个 access-key\n- code-push app add <appName> <platform> react-native  在账号里面添加一个新的app\n- code-push app remove 或者 rm 在账号里移除一个 app\n- code-push app rename 重命名一个存在 app\n- code-push app list 或则 ls 列出账号下面的所有 app\n- code-push app transfer 把app的所有权转移到另外一个账号\n- code-push deployment add <appName> 部署\n- code-push deployment rm <appName> 删除部署\n- code-push deployment rename <appName> 重命名\n- code-push deployment ls <appName> 列出应用的部署情况\n- code-push deployment ls <appName> -k 查看部署的key\n- code-push deployment history <appName> <deploymentName> 查看历史版本\n## 3.配置本地部署\n1. 登录本地服务\n\n   > `code-push login http://61.185.20.20:2312/ ` （公网地址）、\n   >\n   > 会自动打开浏览器  登录后 点击获取token，\n   >\n   > 在 `Enter your token from the browser:` 输入 获取的token\n   >\n   > `Successfully logged-in. Your session file was written to /Users/xxxx/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session. `\n\n2. 本地私有化部署方案参考：`https://www.cnblogs.com/shuoer/p/9581886.html`\n\n3. 在`CodePush`服务器注册app，为了让CodePush服务器知道你的app，我们需要向它注册app：\n\n   在终端输入`code-push app add <appName>`即可完成注册；私有化服务器要求的参数更多`code-push app add <appName> <os> <platform>`，并且`appName`要加`-android`或者`-ios`结尾，然后是平台，最后加上是`react-native`或者`Cordova`，因为`code-push`支持这两种应用,例如:\n\n   ```bash\n   code-push app add Rasog-android android react-native\n   ```\n\n   成功后：\n\n   ```bash\n   Successfully added the \"Rasog-android\" app, along with the following default deployments:\n   ┌────────────┬───────────────────────────────────────┐\n   │ Name       │ Deployment Key                        │\n   ├────────────┼───────────────────────────────────────┤\n   │ Production │ 4ZfN5udhhOftT2ND95gHZr98nmyA4ksvOXqog │\n   ├────────────┼───────────────────────────────────────┤\n   │ Staging    │ ZymGYYCM6PMwHlwDWef9zCXu8LbC4ksvOXqog │\n   └────────────┴───────────────────────────────────────┘\n   ```\n\n   \n\n4. 注册完成之后会返回一套`deployment key`，分为生成环境`Production`和`Staging`，该`key`在后面客户端集成sdk中会用到。\n\n### 集成CodePush SDK (for Android)\n\n1. 在项目中安装` react-native-code-push`插件\n\n   ```bash\n   yarn add react-native-code-push\n   react-native link react-native-code-push\n   ```\n\n   > 在终端运行此命令之后，终端会提示让你输入`deployment key`，这是你只需将你的`deployment Staging key`输入进去即可\n\n2. Link 完成后会自动添加一些代码。因为服务是私有部署，需要修改 更新地址。修改`android/app/src/main/java/MainApplication.java`文件\n\n   ```bash\n   @Override\n       protected List<ReactPackage> getPackages() {\n         return Arrays.<ReactPackage>asList(\n             new MainReactPackage(),\n               new CodePush(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey), getApplicationContext(), BuildConfig.DEBUG,\"http://61.185.20.20:2312\"),\n               .....\n         );\n       }\n   ```\n\n   在`new CodePush()`最后添加一个参数就是本地服务的地址。\n\n3. 修改rn工程的 入口文件。\n\n   ```javascript\n   // 导入code-push\n   import CodePush from 'react-native-code-push'\n   \n   const codePushOptions = { checkFrequency: CodePush.CheckFrequency.ON_APP_RESUME }\n   \n   // CodePush 是一个高阶组件  还包含一些方法。\n   // sync\n   componentDidMount () {\n       this._updateApp()\n       AppState.addEventListener('change', newState => {\n         newState === 'active' && this._updateApp()\n       })\n     }\n   \n     // code-push 热更新\n     _updateApp = () => {\n       CodePush.sync({\n         installMode: CodePush.InstallMode.IMMEDIATE, // 启动模式三种：ON_NEXT_RESUME、ON_NEXT_RESTART、IMMEDIATE\n         updateDialog: {\n           appendReleaseDescription: true, // 是否显示更新description，默认为false\n           descriptionPrefix: '更新内容：\\n', // 更新说明的前缀。 默认是” Description:\n           mandatoryContinueButtonLabel: '立即更新', // 强制更新的按钮文字，默认为continue\n           mandatoryUpdateMessage: '', // - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.\n           optionalIgnoreButtonLabel: '稍后', // 非强制更新时，取消按钮文字,默认是ignore\n           optionalInstallButtonLabel: '更新', // 非强制更新时，确认文字. Defaults to “Install”\n           optionalUpdateMessage: '有新版本了，是否更新？\\n', // 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.\n           title: '更新提示' // 要显示的更新通知的标题. Defaults to “Update available”.\n         }\n       })\n     }\n   \n   //最后导出组件时，需要被CodePush包裹\n   export default CodePush(codePushOptions)(App)\n   ```\n\n至此就完成了 code-push for android 的配置。\n\n```bash\ncode-push release-react MyAppAndroid android --t 1.0.0 --dev false --d Production --des \"更新测试\" --m true\n```\n","source":"_posts/2019-03-15-code-push.md","raw":"---\ntitle: 基于React Native的热更新\ndate: 2019-03-15 12:56:32\ntags: React\n---\n## 1.文档目的\n基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法\n参考网址: [react-native-code-push常用命令](https://www.jianshu.com/p/8f7ae770a5ac)\n\n## 2.发布热更新等常用命令\n查看服务器app部署情况\n```\ncode-push app list\n```\n查看发布信息\n```\ncode-push deployment ls Rasog-android -k\n```\n发布命令\n```\ncode-push release-react Rasog-android android --t 1.0.0 --d Staging --des \"1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除\" --m true\n```\n其他常用命令\n\n- `code-push app add` 在账号里面添加一个新的app\n- `code-push app remove` 或者 rm 在账号里移除一个app\n- `code-push app rename` 重命名一个存在app\n- `code-push app list` 或则 ls 列出账号下面的所有app\n- `code-push app transfer` 把app的所有权转移到另外一个账号\n- code-push app ls 查看已注册的应用\n- code-push deployment ls appName -k  查看应用key\n- code-push login 登陆 \n- code-push loout 注销\n- code-push access-key ls 列出登陆的token\n- code-push access-key rm <accessKye> 删除某个 access-key\n- code-push app add <appName> <platform> react-native  在账号里面添加一个新的app\n- code-push app remove 或者 rm 在账号里移除一个 app\n- code-push app rename 重命名一个存在 app\n- code-push app list 或则 ls 列出账号下面的所有 app\n- code-push app transfer 把app的所有权转移到另外一个账号\n- code-push deployment add <appName> 部署\n- code-push deployment rm <appName> 删除部署\n- code-push deployment rename <appName> 重命名\n- code-push deployment ls <appName> 列出应用的部署情况\n- code-push deployment ls <appName> -k 查看部署的key\n- code-push deployment history <appName> <deploymentName> 查看历史版本\n## 3.配置本地部署\n1. 登录本地服务\n\n   > `code-push login http://61.185.20.20:2312/ ` （公网地址）、\n   >\n   > 会自动打开浏览器  登录后 点击获取token，\n   >\n   > 在 `Enter your token from the browser:` 输入 获取的token\n   >\n   > `Successfully logged-in. Your session file was written to /Users/xxxx/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session. `\n\n2. 本地私有化部署方案参考：`https://www.cnblogs.com/shuoer/p/9581886.html`\n\n3. 在`CodePush`服务器注册app，为了让CodePush服务器知道你的app，我们需要向它注册app：\n\n   在终端输入`code-push app add <appName>`即可完成注册；私有化服务器要求的参数更多`code-push app add <appName> <os> <platform>`，并且`appName`要加`-android`或者`-ios`结尾，然后是平台，最后加上是`react-native`或者`Cordova`，因为`code-push`支持这两种应用,例如:\n\n   ```bash\n   code-push app add Rasog-android android react-native\n   ```\n\n   成功后：\n\n   ```bash\n   Successfully added the \"Rasog-android\" app, along with the following default deployments:\n   ┌────────────┬───────────────────────────────────────┐\n   │ Name       │ Deployment Key                        │\n   ├────────────┼───────────────────────────────────────┤\n   │ Production │ 4ZfN5udhhOftT2ND95gHZr98nmyA4ksvOXqog │\n   ├────────────┼───────────────────────────────────────┤\n   │ Staging    │ ZymGYYCM6PMwHlwDWef9zCXu8LbC4ksvOXqog │\n   └────────────┴───────────────────────────────────────┘\n   ```\n\n   \n\n4. 注册完成之后会返回一套`deployment key`，分为生成环境`Production`和`Staging`，该`key`在后面客户端集成sdk中会用到。\n\n### 集成CodePush SDK (for Android)\n\n1. 在项目中安装` react-native-code-push`插件\n\n   ```bash\n   yarn add react-native-code-push\n   react-native link react-native-code-push\n   ```\n\n   > 在终端运行此命令之后，终端会提示让你输入`deployment key`，这是你只需将你的`deployment Staging key`输入进去即可\n\n2. Link 完成后会自动添加一些代码。因为服务是私有部署，需要修改 更新地址。修改`android/app/src/main/java/MainApplication.java`文件\n\n   ```bash\n   @Override\n       protected List<ReactPackage> getPackages() {\n         return Arrays.<ReactPackage>asList(\n             new MainReactPackage(),\n               new CodePush(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey), getApplicationContext(), BuildConfig.DEBUG,\"http://61.185.20.20:2312\"),\n               .....\n         );\n       }\n   ```\n\n   在`new CodePush()`最后添加一个参数就是本地服务的地址。\n\n3. 修改rn工程的 入口文件。\n\n   ```javascript\n   // 导入code-push\n   import CodePush from 'react-native-code-push'\n   \n   const codePushOptions = { checkFrequency: CodePush.CheckFrequency.ON_APP_RESUME }\n   \n   // CodePush 是一个高阶组件  还包含一些方法。\n   // sync\n   componentDidMount () {\n       this._updateApp()\n       AppState.addEventListener('change', newState => {\n         newState === 'active' && this._updateApp()\n       })\n     }\n   \n     // code-push 热更新\n     _updateApp = () => {\n       CodePush.sync({\n         installMode: CodePush.InstallMode.IMMEDIATE, // 启动模式三种：ON_NEXT_RESUME、ON_NEXT_RESTART、IMMEDIATE\n         updateDialog: {\n           appendReleaseDescription: true, // 是否显示更新description，默认为false\n           descriptionPrefix: '更新内容：\\n', // 更新说明的前缀。 默认是” Description:\n           mandatoryContinueButtonLabel: '立即更新', // 强制更新的按钮文字，默认为continue\n           mandatoryUpdateMessage: '', // - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.\n           optionalIgnoreButtonLabel: '稍后', // 非强制更新时，取消按钮文字,默认是ignore\n           optionalInstallButtonLabel: '更新', // 非强制更新时，确认文字. Defaults to “Install”\n           optionalUpdateMessage: '有新版本了，是否更新？\\n', // 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.\n           title: '更新提示' // 要显示的更新通知的标题. Defaults to “Update available”.\n         }\n       })\n     }\n   \n   //最后导出组件时，需要被CodePush包裹\n   export default CodePush(codePushOptions)(App)\n   ```\n\n至此就完成了 code-push for android 的配置。\n\n```bash\ncode-push release-react MyAppAndroid android --t 1.0.0 --dev false --d Production --des \"更新测试\" --m true\n```\n","slug":"code-push","published":1,"updated":"2019-07-08T01:25:27.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwd0012xijktf5yt8qn","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法<br>参考网址: <a href=\"https://www.jianshu.com/p/8f7ae770a5ac\" target=\"_blank\" rel=\"noopener\">react-native-code-push常用命令</a></p>\n<h2 id=\"2-发布热更新等常用命令\"><a href=\"#2-发布热更新等常用命令\" class=\"headerlink\" title=\"2.发布热更新等常用命令\"></a>2.发布热更新等常用命令</h2><p>查看服务器app部署情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app list</span><br></pre></td></tr></table></figure></p>\n<p>查看发布信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push deployment ls Rasog-android -k</span><br></pre></td></tr></table></figure></p>\n<p>发布命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react Rasog-android android --t 1.0.0 --d Staging --des &quot;1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除&quot; --m true</span><br></pre></td></tr></table></figure></p>\n<p>其他常用命令</p>\n<ul>\n<li><code>code-push app add</code> 在账号里面添加一个新的app</li>\n<li><code>code-push app remove</code> 或者 rm 在账号里移除一个app</li>\n<li><code>code-push app rename</code> 重命名一个存在app</li>\n<li><code>code-push app list</code> 或则 ls 列出账号下面的所有app</li>\n<li><code>code-push app transfer</code> 把app的所有权转移到另外一个账号</li>\n<li>code-push app ls 查看已注册的应用</li>\n<li>code-push deployment ls appName -k  查看应用key</li>\n<li>code-push login 登陆 </li>\n<li>code-push loout 注销</li>\n<li>code-push access-key ls 列出登陆的token</li>\n<li>code-push access-key rm <accesskye> 删除某个 access-key</accesskye></li>\n<li>code-push app add <appname> <platform> react-native  在账号里面添加一个新的app</platform></appname></li>\n<li>code-push app remove 或者 rm 在账号里移除一个 app</li>\n<li>code-push app rename 重命名一个存在 app</li>\n<li>code-push app list 或则 ls 列出账号下面的所有 app</li>\n<li>code-push app transfer 把app的所有权转移到另外一个账号</li>\n<li>code-push deployment add <appname> 部署</appname></li>\n<li>code-push deployment rm <appname> 删除部署</appname></li>\n<li>code-push deployment rename <appname> 重命名</appname></li>\n<li>code-push deployment ls <appname> 列出应用的部署情况</appname></li>\n<li>code-push deployment ls <appname> -k 查看部署的key</appname></li>\n<li>code-push deployment history <appname> <deploymentname> 查看历史版本<h2 id=\"3-配置本地部署\"><a href=\"#3-配置本地部署\" class=\"headerlink\" title=\"3.配置本地部署\"></a>3.配置本地部署</h2></deploymentname></appname></li>\n</ul>\n<ol>\n<li><p>登录本地服务</p>\n<blockquote>\n<p><code>code-push login http://61.185.20.20:2312/</code> （公网地址）、</p>\n<p>会自动打开浏览器  登录后 点击获取token，</p>\n<p>在 <code>Enter your token from the browser:</code> 输入 获取的token</p>\n<p><code>Successfully logged-in. Your session file was written to /Users/xxxx/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session.</code></p>\n</blockquote>\n</li>\n<li><p>本地私有化部署方案参考：<code>https://www.cnblogs.com/shuoer/p/9581886.html</code></p>\n</li>\n<li><p>在<code>CodePush</code>服务器注册app，为了让CodePush服务器知道你的app，我们需要向它注册app：</p>\n<p>在终端输入<code>code-push app add &lt;appName&gt;</code>即可完成注册；私有化服务器要求的参数更多<code>code-push app add &lt;appName&gt; &lt;os&gt; &lt;platform&gt;</code>，并且<code>appName</code>要加<code>-android</code>或者<code>-ios</code>结尾，然后是平台，最后加上是<code>react-native</code>或者<code>Cordova</code>，因为<code>code-push</code>支持这两种应用,例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app add Rasog-android android react-native</span><br></pre></td></tr></table></figure>\n<p>成功后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Successfully added the <span class=\"string\">\"Rasog-android\"</span> app, along with the following default deployments:</span><br><span class=\"line\">┌────────────┬───────────────────────────────────────┐</span><br><span class=\"line\">│ Name       │ Deployment Key                        │</span><br><span class=\"line\">├────────────┼───────────────────────────────────────┤</span><br><span class=\"line\">│ Production │ 4ZfN5udhhOftT2ND95gHZr98nmyA4ksvOXqog │</span><br><span class=\"line\">├────────────┼───────────────────────────────────────┤</span><br><span class=\"line\">│ Staging    │ ZymGYYCM6PMwHlwDWef9zCXu8LbC4ksvOXqog │</span><br><span class=\"line\">└────────────┴───────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li>注册完成之后会返回一套<code>deployment key</code>，分为生成环境<code>Production</code>和<code>Staging</code>，该<code>key</code>在后面客户端集成sdk中会用到。</li>\n</ol>\n<h3 id=\"集成CodePush-SDK-for-Android\"><a href=\"#集成CodePush-SDK-for-Android\" class=\"headerlink\" title=\"集成CodePush SDK (for Android)\"></a>集成CodePush SDK (for Android)</h3><ol>\n<li><p>在项目中安装<code>react-native-code-push</code>插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-code-push</span><br><span class=\"line\">react-native link react-native-code-push</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在终端运行此命令之后，终端会提示让你输入<code>deployment key</code>，这是你只需将你的<code>deployment Staging key</code>输入进去即可</p>\n</blockquote>\n</li>\n<li><p>Link 完成后会自动添加一些代码。因为服务是私有部署，需要修改 更新地址。修改<code>android/app/src/main/java/MainApplication.java</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    protected List&lt;ReactPackage&gt; <span class=\"function\"><span class=\"title\">getPackages</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class=\"line\">          new MainReactPackage(),</span><br><span class=\"line\">            new CodePush(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey), getApplicationContext(), BuildConfig.DEBUG,<span class=\"string\">\"http://61.185.20.20:2312\"</span>),</span><br><span class=\"line\">            .....</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>new CodePush()</code>最后添加一个参数就是本地服务的地址。</p>\n</li>\n<li><p>修改rn工程的 入口文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入code-push</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CodePush <span class=\"keyword\">from</span> <span class=\"string\">'react-native-code-push'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> codePushOptions = &#123; <span class=\"attr\">checkFrequency</span>: CodePush.CheckFrequency.ON_APP_RESUME &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CodePush 是一个高阶组件  还包含一些方法。</span></span><br><span class=\"line\"><span class=\"comment\">// sync</span></span><br><span class=\"line\">componentDidMount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateApp()</span><br><span class=\"line\">    AppState.addEventListener(<span class=\"string\">'change'</span>, newState =&gt; &#123;</span><br><span class=\"line\">      newState === <span class=\"string\">'active'</span> &amp;&amp; <span class=\"keyword\">this</span>._updateApp()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// code-push 热更新</span></span><br><span class=\"line\">  _updateApp = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    CodePush.sync(&#123;</span><br><span class=\"line\">      installMode: CodePush.InstallMode.IMMEDIATE, <span class=\"comment\">// 启动模式三种：ON_NEXT_RESUME、ON_NEXT_RESTART、IMMEDIATE</span></span><br><span class=\"line\">      updateDialog: &#123;</span><br><span class=\"line\">        appendReleaseDescription: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否显示更新description，默认为false</span></span><br><span class=\"line\">        descriptionPrefix: <span class=\"string\">'更新内容：\\n'</span>, <span class=\"comment\">// 更新说明的前缀。 默认是” Description:</span></span><br><span class=\"line\">        mandatoryContinueButtonLabel: <span class=\"string\">'立即更新'</span>, <span class=\"comment\">// 强制更新的按钮文字，默认为continue</span></span><br><span class=\"line\">        mandatoryUpdateMessage: <span class=\"string\">''</span>, <span class=\"comment\">// - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.</span></span><br><span class=\"line\">        optionalIgnoreButtonLabel: <span class=\"string\">'稍后'</span>, <span class=\"comment\">// 非强制更新时，取消按钮文字,默认是ignore</span></span><br><span class=\"line\">        optionalInstallButtonLabel: <span class=\"string\">'更新'</span>, <span class=\"comment\">// 非强制更新时，确认文字. Defaults to “Install”</span></span><br><span class=\"line\">        optionalUpdateMessage: <span class=\"string\">'有新版本了，是否更新？\\n'</span>, <span class=\"comment\">// 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.</span></span><br><span class=\"line\">        title: <span class=\"string\">'更新提示'</span> <span class=\"comment\">// 要显示的更新通知的标题. Defaults to “Update available”.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后导出组件时，需要被CodePush包裹</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> CodePush(codePushOptions)(App)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此就完成了 code-push for android 的配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react MyAppAndroid android --t 1.0.0 --dev <span class=\"literal\">false</span> --d Production --des <span class=\"string\">\"更新测试\"</span> --m <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法<br>参考网址: <a href=\"https://www.jianshu.com/p/8f7ae770a5ac\" target=\"_blank\" rel=\"noopener\">react-native-code-push常用命令</a></p>\n<h2 id=\"2-发布热更新等常用命令\"><a href=\"#2-发布热更新等常用命令\" class=\"headerlink\" title=\"2.发布热更新等常用命令\"></a>2.发布热更新等常用命令</h2><p>查看服务器app部署情况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app list</span><br></pre></td></tr></table></figure></p>\n<p>查看发布信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push deployment ls Rasog-android -k</span><br></pre></td></tr></table></figure></p>\n<p>发布命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react Rasog-android android --t 1.0.0 --d Staging --des &quot;1.调整新增整治清单字段\\n2.调整编辑整治清单时照片可删除&quot; --m true</span><br></pre></td></tr></table></figure></p>\n<p>其他常用命令</p>\n<ul>\n<li><code>code-push app add</code> 在账号里面添加一个新的app</li>\n<li><code>code-push app remove</code> 或者 rm 在账号里移除一个app</li>\n<li><code>code-push app rename</code> 重命名一个存在app</li>\n<li><code>code-push app list</code> 或则 ls 列出账号下面的所有app</li>\n<li><code>code-push app transfer</code> 把app的所有权转移到另外一个账号</li>\n<li>code-push app ls 查看已注册的应用</li>\n<li>code-push deployment ls appName -k  查看应用key</li>\n<li>code-push login 登陆 </li>\n<li>code-push loout 注销</li>\n<li>code-push access-key ls 列出登陆的token</li>\n<li>code-push access-key rm <accesskye> 删除某个 access-key</accesskye></li>\n<li>code-push app add <appname> <platform> react-native  在账号里面添加一个新的app</platform></appname></li>\n<li>code-push app remove 或者 rm 在账号里移除一个 app</li>\n<li>code-push app rename 重命名一个存在 app</li>\n<li>code-push app list 或则 ls 列出账号下面的所有 app</li>\n<li>code-push app transfer 把app的所有权转移到另外一个账号</li>\n<li>code-push deployment add <appname> 部署</appname></li>\n<li>code-push deployment rm <appname> 删除部署</appname></li>\n<li>code-push deployment rename <appname> 重命名</appname></li>\n<li>code-push deployment ls <appname> 列出应用的部署情况</appname></li>\n<li>code-push deployment ls <appname> -k 查看部署的key</appname></li>\n<li>code-push deployment history <appname> <deploymentname> 查看历史版本<h2 id=\"3-配置本地部署\"><a href=\"#3-配置本地部署\" class=\"headerlink\" title=\"3.配置本地部署\"></a>3.配置本地部署</h2></deploymentname></appname></li>\n</ul>\n<ol>\n<li><p>登录本地服务</p>\n<blockquote>\n<p><code>code-push login http://61.185.20.20:2312/</code> （公网地址）、</p>\n<p>会自动打开浏览器  登录后 点击获取token，</p>\n<p>在 <code>Enter your token from the browser:</code> 输入 获取的token</p>\n<p><code>Successfully logged-in. Your session file was written to /Users/xxxx/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session.</code></p>\n</blockquote>\n</li>\n<li><p>本地私有化部署方案参考：<code>https://www.cnblogs.com/shuoer/p/9581886.html</code></p>\n</li>\n<li><p>在<code>CodePush</code>服务器注册app，为了让CodePush服务器知道你的app，我们需要向它注册app：</p>\n<p>在终端输入<code>code-push app add &lt;appName&gt;</code>即可完成注册；私有化服务器要求的参数更多<code>code-push app add &lt;appName&gt; &lt;os&gt; &lt;platform&gt;</code>，并且<code>appName</code>要加<code>-android</code>或者<code>-ios</code>结尾，然后是平台，最后加上是<code>react-native</code>或者<code>Cordova</code>，因为<code>code-push</code>支持这两种应用,例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push app add Rasog-android android react-native</span><br></pre></td></tr></table></figure>\n<p>成功后：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Successfully added the <span class=\"string\">\"Rasog-android\"</span> app, along with the following default deployments:</span><br><span class=\"line\">┌────────────┬───────────────────────────────────────┐</span><br><span class=\"line\">│ Name       │ Deployment Key                        │</span><br><span class=\"line\">├────────────┼───────────────────────────────────────┤</span><br><span class=\"line\">│ Production │ 4ZfN5udhhOftT2ND95gHZr98nmyA4ksvOXqog │</span><br><span class=\"line\">├────────────┼───────────────────────────────────────┤</span><br><span class=\"line\">│ Staging    │ ZymGYYCM6PMwHlwDWef9zCXu8LbC4ksvOXqog │</span><br><span class=\"line\">└────────────┴───────────────────────────────────────┘</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li>注册完成之后会返回一套<code>deployment key</code>，分为生成环境<code>Production</code>和<code>Staging</code>，该<code>key</code>在后面客户端集成sdk中会用到。</li>\n</ol>\n<h3 id=\"集成CodePush-SDK-for-Android\"><a href=\"#集成CodePush-SDK-for-Android\" class=\"headerlink\" title=\"集成CodePush SDK (for Android)\"></a>集成CodePush SDK (for Android)</h3><ol>\n<li><p>在项目中安装<code>react-native-code-push</code>插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-code-push</span><br><span class=\"line\">react-native link react-native-code-push</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在终端运行此命令之后，终端会提示让你输入<code>deployment key</code>，这是你只需将你的<code>deployment Staging key</code>输入进去即可</p>\n</blockquote>\n</li>\n<li><p>Link 完成后会自动添加一些代码。因为服务是私有部署，需要修改 更新地址。修改<code>android/app/src/main/java/MainApplication.java</code>文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    protected List&lt;ReactPackage&gt; <span class=\"function\"><span class=\"title\">getPackages</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class=\"line\">          new MainReactPackage(),</span><br><span class=\"line\">            new CodePush(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey), getApplicationContext(), BuildConfig.DEBUG,<span class=\"string\">\"http://61.185.20.20:2312\"</span>),</span><br><span class=\"line\">            .....</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>new CodePush()</code>最后添加一个参数就是本地服务的地址。</p>\n</li>\n<li><p>修改rn工程的 入口文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入code-push</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> CodePush <span class=\"keyword\">from</span> <span class=\"string\">'react-native-code-push'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> codePushOptions = &#123; <span class=\"attr\">checkFrequency</span>: CodePush.CheckFrequency.ON_APP_RESUME &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CodePush 是一个高阶组件  还包含一些方法。</span></span><br><span class=\"line\"><span class=\"comment\">// sync</span></span><br><span class=\"line\">componentDidMount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._updateApp()</span><br><span class=\"line\">    AppState.addEventListener(<span class=\"string\">'change'</span>, newState =&gt; &#123;</span><br><span class=\"line\">      newState === <span class=\"string\">'active'</span> &amp;&amp; <span class=\"keyword\">this</span>._updateApp()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// code-push 热更新</span></span><br><span class=\"line\">  _updateApp = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    CodePush.sync(&#123;</span><br><span class=\"line\">      installMode: CodePush.InstallMode.IMMEDIATE, <span class=\"comment\">// 启动模式三种：ON_NEXT_RESUME、ON_NEXT_RESTART、IMMEDIATE</span></span><br><span class=\"line\">      updateDialog: &#123;</span><br><span class=\"line\">        appendReleaseDescription: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否显示更新description，默认为false</span></span><br><span class=\"line\">        descriptionPrefix: <span class=\"string\">'更新内容：\\n'</span>, <span class=\"comment\">// 更新说明的前缀。 默认是” Description:</span></span><br><span class=\"line\">        mandatoryContinueButtonLabel: <span class=\"string\">'立即更新'</span>, <span class=\"comment\">// 强制更新的按钮文字，默认为continue</span></span><br><span class=\"line\">        mandatoryUpdateMessage: <span class=\"string\">''</span>, <span class=\"comment\">// - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.</span></span><br><span class=\"line\">        optionalIgnoreButtonLabel: <span class=\"string\">'稍后'</span>, <span class=\"comment\">// 非强制更新时，取消按钮文字,默认是ignore</span></span><br><span class=\"line\">        optionalInstallButtonLabel: <span class=\"string\">'更新'</span>, <span class=\"comment\">// 非强制更新时，确认文字. Defaults to “Install”</span></span><br><span class=\"line\">        optionalUpdateMessage: <span class=\"string\">'有新版本了，是否更新？\\n'</span>, <span class=\"comment\">// 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.</span></span><br><span class=\"line\">        title: <span class=\"string\">'更新提示'</span> <span class=\"comment\">// 要显示的更新通知的标题. Defaults to “Update available”.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后导出组件时，需要被CodePush包裹</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> CodePush(codePushOptions)(App)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此就完成了 code-push for android 的配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-push release-react MyAppAndroid android --t 1.0.0 --dev <span class=\"literal\">false</span> --d Production --des <span class=\"string\">\"更新测试\"</span> --m <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"color","date":"2019-03-26T04:32:40.000Z","_content":"## 1.文档目的\n收集整理常用样式,便于通用配置出简约大气的页面，下面仅选取Flat UI库作为代表性的颜色值，举一反三，当前项目使用了什么UI库，那么自己也应该抽取该库中Colors文件中的颜色值，作为项目的全局颜色值，这样有利于保持项目色调的统一（例如BootStrap主题色）。\n参考网址:\n[Flat UI 色表](https://flatuicolors.com/palette/defo),[香港地铁色](https://metrocolor.live/index.html),[经验配色法则](https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers)\n\n## 2.内容梳理\n经验配色法效果图及其颜色值如下：\n{% asset_img image001.png this is first image %}\n```\n<h3>图层灰:背景, 列表项</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #aaaaaa\">aaaaaa</span>\n  <span style=\"background: #bbbbbb\">bbbbbb</span>\n  <span style=\"background: #cccccc\">cccccc</span>\n  <span style=\"background: #dddddd\">dddddd</span>\n  <span style=\"background: #eeeeee\">eeeeee</span>\n</div>\n<h3>文字黑: 分级标题</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #1a2a3a\">1a2a3a</span>\n  <span style=\"background: #2a3a4a\">2a3a4a</span>\n  <span style=\"background: #333333\">333333</span>\n  <span style=\"background: #3a4a5a\">3a4a5a</span>\n  <span style=\"background: #4a5a6a\">4a5a6a</span>\n</div>\n<h3>主题深:cf69</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #9966ff\">9966ff</span>\n  <span style=\"background: #6666ff\">6666ff</span>\n  <span style=\"background: #66ff99\">66ff99</span>\n  <span style=\"background: #6699ff\">6699ff</span>\n</div>\n<h3>主题浅:cf69</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #ffff66\">ffff66</span>\n  <span style=\"background: #ffcc66\">ffcc66</span>\n  <span style=\"background: #ff9966\">ff9966</span>\n  <span style=\"background: #ff6666\">ff6666</span>\n</div>\n<h3>主题灰:abcdef</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #abcdef\">abcdef</span>\n  <span style=\"background: #bedcaf\">bedcaf</span>\n  <span style=\"background: #cafedb\">cafedb</span>\n  <span style=\"background: #decafb\">decafb</span>\n</div>\n\n.flex-box {\n  display: flex;\n  margin-top: 10px;\n}\n.flex-box span{\n  margin-right: 5px;\n}\n```\n","source":"_posts/2019-03-26-theme.md","raw":"---\ntitle: color\ndate: 2019-03-26 12:32:40\ntags: css\n---\n## 1.文档目的\n收集整理常用样式,便于通用配置出简约大气的页面，下面仅选取Flat UI库作为代表性的颜色值，举一反三，当前项目使用了什么UI库，那么自己也应该抽取该库中Colors文件中的颜色值，作为项目的全局颜色值，这样有利于保持项目色调的统一（例如BootStrap主题色）。\n参考网址:\n[Flat UI 色表](https://flatuicolors.com/palette/defo),[香港地铁色](https://metrocolor.live/index.html),[经验配色法则](https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers)\n\n## 2.内容梳理\n经验配色法效果图及其颜色值如下：\n{% asset_img image001.png this is first image %}\n```\n<h3>图层灰:背景, 列表项</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #aaaaaa\">aaaaaa</span>\n  <span style=\"background: #bbbbbb\">bbbbbb</span>\n  <span style=\"background: #cccccc\">cccccc</span>\n  <span style=\"background: #dddddd\">dddddd</span>\n  <span style=\"background: #eeeeee\">eeeeee</span>\n</div>\n<h3>文字黑: 分级标题</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #1a2a3a\">1a2a3a</span>\n  <span style=\"background: #2a3a4a\">2a3a4a</span>\n  <span style=\"background: #333333\">333333</span>\n  <span style=\"background: #3a4a5a\">3a4a5a</span>\n  <span style=\"background: #4a5a6a\">4a5a6a</span>\n</div>\n<h3>主题深:cf69</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #9966ff\">9966ff</span>\n  <span style=\"background: #6666ff\">6666ff</span>\n  <span style=\"background: #66ff99\">66ff99</span>\n  <span style=\"background: #6699ff\">6699ff</span>\n</div>\n<h3>主题浅:cf69</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #ffff66\">ffff66</span>\n  <span style=\"background: #ffcc66\">ffcc66</span>\n  <span style=\"background: #ff9966\">ff9966</span>\n  <span style=\"background: #ff6666\">ff6666</span>\n</div>\n<h3>主题灰:abcdef</h3>\n<div class=\"flex-box\">\n  <span style=\"background: #abcdef\">abcdef</span>\n  <span style=\"background: #bedcaf\">bedcaf</span>\n  <span style=\"background: #cafedb\">cafedb</span>\n  <span style=\"background: #decafb\">decafb</span>\n</div>\n\n.flex-box {\n  display: flex;\n  margin-top: 10px;\n}\n.flex-box span{\n  margin-right: 5px;\n}\n```\n","slug":"theme","published":1,"updated":"2019-07-08T01:25:27.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwe0014xijktql0srr5","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>收集整理常用样式,便于通用配置出简约大气的页面，下面仅选取Flat UI库作为代表性的颜色值，举一反三，当前项目使用了什么UI库，那么自己也应该抽取该库中Colors文件中的颜色值，作为项目的全局颜色值，这样有利于保持项目色调的统一（例如BootStrap主题色）。<br>参考网址:<br><a href=\"https://flatuicolors.com/palette/defo\" target=\"_blank\" rel=\"noopener\">Flat UI 色表</a>,<a href=\"https://metrocolor.live/index.html\" target=\"_blank\" rel=\"noopener\">香港地铁色</a>,<a href=\"https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers\" target=\"_blank\" rel=\"noopener\">经验配色法则</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>经验配色法效果图及其颜色值如下：<br><img src=\"/2019/03/26/theme/image001.png\" title=\"this is first image\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;图层灰:背景, 列表项&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #aaaaaa&quot;&gt;aaaaaa&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #bbbbbb&quot;&gt;bbbbbb&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #cccccc&quot;&gt;cccccc&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #dddddd&quot;&gt;dddddd&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #eeeeee&quot;&gt;eeeeee&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;h3&gt;文字黑: 分级标题&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #1a2a3a&quot;&gt;1a2a3a&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #2a3a4a&quot;&gt;2a3a4a&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #333333&quot;&gt;333333&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #3a4a5a&quot;&gt;3a4a5a&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #4a5a6a&quot;&gt;4a5a6a&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;h3&gt;主题深:cf69&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #9966ff&quot;&gt;9966ff&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #6666ff&quot;&gt;6666ff&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #66ff99&quot;&gt;66ff99&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #6699ff&quot;&gt;6699ff&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;h3&gt;主题浅:cf69&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #ffff66&quot;&gt;ffff66&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #ffcc66&quot;&gt;ffcc66&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #ff9966&quot;&gt;ff9966&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #ff6666&quot;&gt;ff6666&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;h3&gt;主题灰:abcdef&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #abcdef&quot;&gt;abcdef&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #bedcaf&quot;&gt;bedcaf&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #cafedb&quot;&gt;cafedb&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #decafb&quot;&gt;decafb&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.flex-box &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  margin-top: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.flex-box span&#123;</span><br><span class=\"line\">  margin-right: 5px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>收集整理常用样式,便于通用配置出简约大气的页面，下面仅选取Flat UI库作为代表性的颜色值，举一反三，当前项目使用了什么UI库，那么自己也应该抽取该库中Colors文件中的颜色值，作为项目的全局颜色值，这样有利于保持项目色调的统一（例如BootStrap主题色）。<br>参考网址:<br><a href=\"https://flatuicolors.com/palette/defo\" target=\"_blank\" rel=\"noopener\">Flat UI 色表</a>,<a href=\"https://metrocolor.live/index.html\" target=\"_blank\" rel=\"noopener\">香港地铁色</a>,<a href=\"https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers\" target=\"_blank\" rel=\"noopener\">经验配色法则</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>经验配色法效果图及其颜色值如下：<br><img src=\"/2019/03/26/theme/image001.png\" title=\"this is first image\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;图层灰:背景, 列表项&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #aaaaaa&quot;&gt;aaaaaa&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #bbbbbb&quot;&gt;bbbbbb&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #cccccc&quot;&gt;cccccc&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #dddddd&quot;&gt;dddddd&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #eeeeee&quot;&gt;eeeeee&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;h3&gt;文字黑: 分级标题&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #1a2a3a&quot;&gt;1a2a3a&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #2a3a4a&quot;&gt;2a3a4a&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #333333&quot;&gt;333333&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #3a4a5a&quot;&gt;3a4a5a&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #4a5a6a&quot;&gt;4a5a6a&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;h3&gt;主题深:cf69&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #9966ff&quot;&gt;9966ff&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #6666ff&quot;&gt;6666ff&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #66ff99&quot;&gt;66ff99&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #6699ff&quot;&gt;6699ff&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;h3&gt;主题浅:cf69&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #ffff66&quot;&gt;ffff66&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #ffcc66&quot;&gt;ffcc66&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #ff9966&quot;&gt;ff9966&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #ff6666&quot;&gt;ff6666&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;h3&gt;主题灰:abcdef&lt;/h3&gt;</span><br><span class=\"line\">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #abcdef&quot;&gt;abcdef&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #bedcaf&quot;&gt;bedcaf&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #cafedb&quot;&gt;cafedb&lt;/span&gt;</span><br><span class=\"line\">  &lt;span style=&quot;background: #decafb&quot;&gt;decafb&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.flex-box &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  margin-top: 10px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.flex-box span&#123;</span><br><span class=\"line\">  margin-right: 5px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"基于React Native的android打包","date":"2019-03-19T04:39:12.000Z","_content":"## 1.文档目的\n打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.\n打包IOS，需要有打包证书支持,这里先不做探究.\n打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。\n\n## 2.内容梳理\n步骤一:配置android/app/build.gradle文件,如图一所示\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n```\n signingConfigs {\n        release {\n            storeFile file(MYAPP_RELEASE_STORE_FILE)\n            storePassword MYAPP_RELEASE_STORE_PASSWORD\n            keyAlias MYAPP_RELEASE_KEY_ALIAS\n            keyPassword MYAPP_RELEASE_KEY_PASSWORD\n        }\n }\n\nsigningConfig signingConfigs.release\n```\n步骤二:配置android/gradle.properties文件,如图二所示\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n```\nMYAPP_RELEASE_STORE_FILE=my-release-key.keystore\n\nMYAPP_RELEASE_KEY_ALIAS=my-key-alias\n\nMYAPP_RELEASE_STORE_PASSWORD=123456789\n\nMYAPP_RELEASE_KEY_PASSWORD=123456789\n```\n步骤三:在android/app/文件夹下添加key文件\n[my-release-key.keystore 提取码: ncpe](https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA)\n","source":"_posts/2019-03-19-android-apk.md","raw":"---\ntitle: 基于React Native的android打包\ndate: 2019-03-19 12:39:12\ntags: React\n---\n## 1.文档目的\n打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.\n打包IOS，需要有打包证书支持,这里先不做探究.\n打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。\n\n## 2.内容梳理\n步骤一:配置android/app/build.gradle文件,如图一所示\n{% asset_img image001.png this is first image %}\n<center>**图（1）**</center>\n```\n signingConfigs {\n        release {\n            storeFile file(MYAPP_RELEASE_STORE_FILE)\n            storePassword MYAPP_RELEASE_STORE_PASSWORD\n            keyAlias MYAPP_RELEASE_KEY_ALIAS\n            keyPassword MYAPP_RELEASE_KEY_PASSWORD\n        }\n }\n\nsigningConfig signingConfigs.release\n```\n步骤二:配置android/gradle.properties文件,如图二所示\n{% asset_img image002.png this is first image %}\n<center>**图（2）**</center>\n```\nMYAPP_RELEASE_STORE_FILE=my-release-key.keystore\n\nMYAPP_RELEASE_KEY_ALIAS=my-key-alias\n\nMYAPP_RELEASE_STORE_PASSWORD=123456789\n\nMYAPP_RELEASE_KEY_PASSWORD=123456789\n```\n步骤三:在android/app/文件夹下添加key文件\n[my-release-key.keystore 提取码: ncpe](https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA)\n","slug":"android-apk","published":1,"updated":"2019-07-08T01:25:27.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwf0016xijkonmwyqa2","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.<br>打包IOS，需要有打包证书支持,这里先不做探究.<br>打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>步骤一:配置android/app/build.gradle文件,如图一所示<br><img src=\"/2019/03/19/android-apk/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class=\"line\">            storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class=\"line\">            keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class=\"line\">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signingConfig signingConfigs.release</span><br></pre></td></tr></table></figure></p>\n<p>步骤二:配置android/gradle.properties文件,如图二所示<br><img src=\"/2019/03/19/android-apk/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_STORE_PASSWORD=123456789</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_PASSWORD=123456789</span><br></pre></td></tr></table></figure></p>\n<p>步骤三:在android/app/文件夹下添加key文件<br><a href=\"https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA\" target=\"_blank\" rel=\"noopener\">my-release-key.keystore 提取码: ncpe</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.<br>打包IOS，需要有打包证书支持,这里先不做探究.<br>打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>步骤一:配置android/app/build.gradle文件,如图一所示<br><img src=\"/2019/03/19/android-apk/image001.png\" title=\"this is first image\"></p>\n<p><center><strong>图（1）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class=\"line\">            storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class=\"line\">            keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class=\"line\">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signingConfig signingConfigs.release</span><br></pre></td></tr></table></figure></p>\n<p>步骤二:配置android/gradle.properties文件,如图二所示<br><img src=\"/2019/03/19/android-apk/image002.png\" title=\"this is first image\"></p>\n<p><center><strong>图（2）</strong></center><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_STORE_PASSWORD=123456789</span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP_RELEASE_KEY_PASSWORD=123456789</span><br></pre></td></tr></table></figure></p>\n<p>步骤三:在android/app/文件夹下添加key文件<br><a href=\"https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA\" target=\"_blank\" rel=\"noopener\">my-release-key.keystore 提取码: ncpe</a></p>\n"},{"title":"serve静态资源服务器","date":"2019-03-14T04:36:57.000Z","_content":"## 1.文档目的\n前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用\n\n## 2.内容梳理\n全局安装\n```\nyarn global add serve\n```\n查看版本信息\n```\nserve --version\n```\n进入需要开启服务的文件夹,启动服务\n```\nserve .\n```","source":"_posts/2019-03-14-serve.md","raw":"---\ntitle: serve静态资源服务器\ndate: 2019-03-14 12:36:57\ntags: JS\n---\n## 1.文档目的\n前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用\n\n## 2.内容梳理\n全局安装\n```\nyarn global add serve\n```\n查看版本信息\n```\nserve --version\n```\n进入需要开启服务的文件夹,启动服务\n```\nserve .\n```","slug":"serve","published":1,"updated":"2019-10-08T06:19:07.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwh0019xijkwnclldix","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add serve</span><br></pre></td></tr></table></figure></p>\n<p>查看版本信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve --version</span><br></pre></td></tr></table></figure></p>\n<p>进入需要开启服务的文件夹,启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve .</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add serve</span><br></pre></td></tr></table></figure></p>\n<p>查看版本信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve --version</span><br></pre></td></tr></table></figure></p>\n<p>进入需要开启服务的文件夹,启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serve .</span><br></pre></td></tr></table></figure></p>\n"},{"title":"基于RN的安卓权限配置","date":"2019-03-25T04:26:09.000Z","_content":"## 1.文档目的\n基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑\n\n## 2.内容梳理\n权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:\n```\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:\n```\n _getCurrentLocation = async () => {\n    navigator.geolocation.getCurrentPosition(location => {\n      console.log(location)\n    })\n  }\n```\n","source":"_posts/2019-03-25-android-manifest.md","raw":"---\ntitle: 基于RN的安卓权限配置\ndate: 2019-03-25 12:26:09\ntags: React\n---\n## 1.文档目的\n基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑\n\n## 2.内容梳理\n权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:\n```\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n```\n那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:\n```\n _getCurrentLocation = async () => {\n    navigator.geolocation.getCurrentPosition(location => {\n      console.log(location)\n    })\n  }\n```\n","slug":"android-manifest","published":1,"updated":"2019-07-08T01:25:27.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwi001axijk1miuz2m3","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_getCurrentLocation = async () =&gt; &#123;</span><br><span class=\"line\">   navigator.geolocation.getCurrentPosition(location =&gt; &#123;</span><br><span class=\"line\">     console.log(location)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑</p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_getCurrentLocation = async () =&gt; &#123;</span><br><span class=\"line\">   navigator.geolocation.getCurrentPosition(location =&gt; &#123;</span><br><span class=\"line\">     console.log(location)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"echarts","date":"2019-03-27T04:23:39.000Z","_content":"## 1.文档目的\n维护一个简单的图表模板,积累常用参数,便于快速配置图表\n参考网址:[echarts门户网站](https://echarts.baidu.com/)\n\n## 2.内容梳理\n图表基础模板(基于vue):\n```\n<!DOCTYPE html>\n<html lang=\"zh-cmn-Hans\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>chart demo</title>\n    <link rel=\"stylesheet\" href=\"../../styles/mint-ui.css\" />\n    <link rel=\"stylesheet\" href=\"../../styles/global.css\" />\n  </head>\n  <body>\n    <div id=\"chart\" class=\"container\">\n      <!-- chart1 条形图 -->\n      <div ref=\"chart1\" style=\"width: 100%;height:300px;\"></div>\n      <!-- chart2 饼状图 -->\n      <div ref=\"chart2\" style=\"width: 100%; height: 270px;\"></div>\n    </div>\n\n    <script src=\"../../script/vue.min.js\"></script>\n    <script src=\"../../script/axios.min.js\"></script>\n    <script src=\"../../script/echarts.min.js\"></script>\n    <script src=\"../../script/httpRequest.js\"></script>\n    <script src=\"../../script/constants.js\"></script>\n\n    <script>\n      window.onload = () => {\n        document.addEventListener('message', ({ data }) => {\n          const { token, areaId } = JSON.parse(data)\n          if (window.postMessage) {\n            let message = { loadFinish: true }\n            window.postMessage(JSON.stringify(message))\n          }\n        })\n      }\n\n      let indexVue = new Vue({\n        el: '#chart',\n        data() {\n          return {}\n        },\n        methods: {\n          initChart() {\n            // 条形图\n            let chart1 = echarts.init(this.$refs['chart1'])\n            let chartOptions1 = {\n              title: {\n                text: '大国人口',\n                textStyle: { color: '#39a3d5', fontSize: 14 }\n              },\n              color: [\n                '#7199D6',\n                '#DB7D36',\n                '#82AB4E',\n                '#9CABE1',\n                '#F0B885',\n                '#739BD6',\n                '#72C4CC',\n                '#B1A3DE',\n                '#78B0ED',\n                '#E0A1B6',\n                '#F1C026'\n              ],\n               // 对点击时显示的tip就行配置\n               tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b}:{c}'\n              },\n              // 配置图例边距留白距离,是否包含坐标轴刻度\n              grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\n              xAxis: {\n                axisLabel: { rotate: 0, interval: 0 }\n              },\n              yAxis: {\n                data: ['巴西', '印尼', '美国', '印度', '中国'],\n                // 对y坐标轴显示的刻度进行配置\n                axisLabel: { rotate: 0, interval: 0 }\n              },\n              series: [\n                {\n                  name: '人数',\n                  type: 'bar',\n                  data: [18203, 23489, 29034, 104970, 131744]\n                }\n              ]\n            }\n            chart1.setOption(chartOptions1)\n\n            // 饼状图\n            let chart2 = echarts.init(this.$refs['chart2'])\n            let chartOptions2 = {\n              title: {\n                text: '社会资源分布',\n                textStyle: { color: '#39a3d5', fontSize: 14 }\n              },\n              color: [\n                '#7199D6',\n                '#DB7D36',\n                '#82AB4E',\n                '#9CABE1',\n                '#F0B885',\n                '#739BD6',\n                '#72C4CC',\n                '#B1A3DE',\n                '#78B0ED',\n                '#E0A1B6',\n                '#F1C026'\n              ],\n              // 对点击时显示的tip就行配置\n              tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b}:{c} ({d}%)'\n              },\n              // 对图例的显示位置等内容进行配置\n              legend: {\n                // horizontal, vertical\n                orient: 'horizontal',\n                bottom: '5%'\n              },\n              series: [\n                {\n                  name: '占比',\n                  type: 'pie',\n                  radius: '50%',\n                  center: ['50%', '40%'],\n                  data: [\n                    { value: 335, name: '直接访问' },\n                    { value: 310, name: '邮件营销' },\n                    { value: 234, name: '联盟广告' },\n                    { value: 135, name: '视频广告' },\n                    { value: 1548, name: '搜索引擎' }\n                  ],\n                  label: {\n                    normal: {\n                      // 是否显示每个扇形指示\n                      show: false,\n                      // 若显示,则对过长内容格式化处理\n                      formatter(v) {\n                        let text = v.name\n                        return text.length < 4 ? text : `${text.slice(0, 4)}\\n${text.slice(4)}`\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n            chart2.setOption(chartOptions2)\n          }\n        },\n        mounted() {\n          this.initChart()\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n","source":"_posts/2019-03-27-echarts.md","raw":"---\ntitle: echarts\ndate: 2019-03-27 12:23:39\ntags: JS\n---\n## 1.文档目的\n维护一个简单的图表模板,积累常用参数,便于快速配置图表\n参考网址:[echarts门户网站](https://echarts.baidu.com/)\n\n## 2.内容梳理\n图表基础模板(基于vue):\n```\n<!DOCTYPE html>\n<html lang=\"zh-cmn-Hans\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>chart demo</title>\n    <link rel=\"stylesheet\" href=\"../../styles/mint-ui.css\" />\n    <link rel=\"stylesheet\" href=\"../../styles/global.css\" />\n  </head>\n  <body>\n    <div id=\"chart\" class=\"container\">\n      <!-- chart1 条形图 -->\n      <div ref=\"chart1\" style=\"width: 100%;height:300px;\"></div>\n      <!-- chart2 饼状图 -->\n      <div ref=\"chart2\" style=\"width: 100%; height: 270px;\"></div>\n    </div>\n\n    <script src=\"../../script/vue.min.js\"></script>\n    <script src=\"../../script/axios.min.js\"></script>\n    <script src=\"../../script/echarts.min.js\"></script>\n    <script src=\"../../script/httpRequest.js\"></script>\n    <script src=\"../../script/constants.js\"></script>\n\n    <script>\n      window.onload = () => {\n        document.addEventListener('message', ({ data }) => {\n          const { token, areaId } = JSON.parse(data)\n          if (window.postMessage) {\n            let message = { loadFinish: true }\n            window.postMessage(JSON.stringify(message))\n          }\n        })\n      }\n\n      let indexVue = new Vue({\n        el: '#chart',\n        data() {\n          return {}\n        },\n        methods: {\n          initChart() {\n            // 条形图\n            let chart1 = echarts.init(this.$refs['chart1'])\n            let chartOptions1 = {\n              title: {\n                text: '大国人口',\n                textStyle: { color: '#39a3d5', fontSize: 14 }\n              },\n              color: [\n                '#7199D6',\n                '#DB7D36',\n                '#82AB4E',\n                '#9CABE1',\n                '#F0B885',\n                '#739BD6',\n                '#72C4CC',\n                '#B1A3DE',\n                '#78B0ED',\n                '#E0A1B6',\n                '#F1C026'\n              ],\n               // 对点击时显示的tip就行配置\n               tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b}:{c}'\n              },\n              // 配置图例边距留白距离,是否包含坐标轴刻度\n              grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\n              xAxis: {\n                axisLabel: { rotate: 0, interval: 0 }\n              },\n              yAxis: {\n                data: ['巴西', '印尼', '美国', '印度', '中国'],\n                // 对y坐标轴显示的刻度进行配置\n                axisLabel: { rotate: 0, interval: 0 }\n              },\n              series: [\n                {\n                  name: '人数',\n                  type: 'bar',\n                  data: [18203, 23489, 29034, 104970, 131744]\n                }\n              ]\n            }\n            chart1.setOption(chartOptions1)\n\n            // 饼状图\n            let chart2 = echarts.init(this.$refs['chart2'])\n            let chartOptions2 = {\n              title: {\n                text: '社会资源分布',\n                textStyle: { color: '#39a3d5', fontSize: 14 }\n              },\n              color: [\n                '#7199D6',\n                '#DB7D36',\n                '#82AB4E',\n                '#9CABE1',\n                '#F0B885',\n                '#739BD6',\n                '#72C4CC',\n                '#B1A3DE',\n                '#78B0ED',\n                '#E0A1B6',\n                '#F1C026'\n              ],\n              // 对点击时显示的tip就行配置\n              tooltip: {\n                trigger: 'item',\n                formatter: '{a} <br/>{b}:{c} ({d}%)'\n              },\n              // 对图例的显示位置等内容进行配置\n              legend: {\n                // horizontal, vertical\n                orient: 'horizontal',\n                bottom: '5%'\n              },\n              series: [\n                {\n                  name: '占比',\n                  type: 'pie',\n                  radius: '50%',\n                  center: ['50%', '40%'],\n                  data: [\n                    { value: 335, name: '直接访问' },\n                    { value: 310, name: '邮件营销' },\n                    { value: 234, name: '联盟广告' },\n                    { value: 135, name: '视频广告' },\n                    { value: 1548, name: '搜索引擎' }\n                  ],\n                  label: {\n                    normal: {\n                      // 是否显示每个扇形指示\n                      show: false,\n                      // 若显示,则对过长内容格式化处理\n                      formatter(v) {\n                        let text = v.name\n                        return text.length < 4 ? text : `${text.slice(0, 4)}\\n${text.slice(4)}`\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n            chart2.setOption(chartOptions2)\n          }\n        },\n        mounted() {\n          this.initChart()\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n","slug":"echarts","published":1,"updated":"2019-08-16T08:37:52.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwk001dxijk0ge3i5wk","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>维护一个简单的图表模板,积累常用参数,便于快速配置图表<br>参考网址:<a href=\"https://echarts.baidu.com/\" target=\"_blank\" rel=\"noopener\">echarts门户网站</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>图表基础模板(基于vue):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;chart demo&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/mint-ui.css&quot; /&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/global.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;chart&quot; class=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;!-- chart1 条形图 --&gt;</span><br><span class=\"line\">      &lt;div ref=&quot;chart1&quot; style=&quot;width: 100%;height:300px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;!-- chart2 饼状图 --&gt;</span><br><span class=\"line\">      &lt;div ref=&quot;chart2&quot; style=&quot;width: 100%; height: 270px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;../../script/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/httpRequest.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/constants.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      window.onload = () =&gt; &#123;</span><br><span class=\"line\">        document.addEventListener(&apos;message&apos;, (&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">          const &#123; token, areaId &#125; = JSON.parse(data)</span><br><span class=\"line\">          if (window.postMessage) &#123;</span><br><span class=\"line\">            let message = &#123; loadFinish: true &#125;</span><br><span class=\"line\">            window.postMessage(JSON.stringify(message))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      let indexVue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#chart&apos;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          return &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          initChart() &#123;</span><br><span class=\"line\">            // 条形图</span><br><span class=\"line\">            let chart1 = echarts.init(this.$refs[&apos;chart1&apos;])</span><br><span class=\"line\">            let chartOptions1 = &#123;</span><br><span class=\"line\">              title: &#123;</span><br><span class=\"line\">                text: &apos;大国人口&apos;,</span><br><span class=\"line\">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              color: [</span><br><span class=\"line\">                &apos;#7199D6&apos;,</span><br><span class=\"line\">                &apos;#DB7D36&apos;,</span><br><span class=\"line\">                &apos;#82AB4E&apos;,</span><br><span class=\"line\">                &apos;#9CABE1&apos;,</span><br><span class=\"line\">                &apos;#F0B885&apos;,</span><br><span class=\"line\">                &apos;#739BD6&apos;,</span><br><span class=\"line\">                &apos;#72C4CC&apos;,</span><br><span class=\"line\">                &apos;#B1A3DE&apos;,</span><br><span class=\"line\">                &apos;#78B0ED&apos;,</span><br><span class=\"line\">                &apos;#E0A1B6&apos;,</span><br><span class=\"line\">                &apos;#F1C026&apos;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">               // 对点击时显示的tip就行配置</span><br><span class=\"line\">               tooltip: &#123;</span><br><span class=\"line\">                trigger: &apos;item&apos;,</span><br><span class=\"line\">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125;&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              // 配置图例边距留白距离,是否包含坐标轴刻度</span><br><span class=\"line\">              grid: &#123; left: &apos;3%&apos;, right: &apos;4%&apos;, bottom: &apos;3%&apos;, containLabel: true &#125;,</span><br><span class=\"line\">              xAxis: &#123;</span><br><span class=\"line\">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              yAxis: &#123;</span><br><span class=\"line\">                data: [&apos;巴西&apos;, &apos;印尼&apos;, &apos;美国&apos;, &apos;印度&apos;, &apos;中国&apos;],</span><br><span class=\"line\">                // 对y坐标轴显示的刻度进行配置</span><br><span class=\"line\">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              series: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  name: &apos;人数&apos;,</span><br><span class=\"line\">                  type: &apos;bar&apos;,</span><br><span class=\"line\">                  data: [18203, 23489, 29034, 104970, 131744]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chart1.setOption(chartOptions1)</span><br><span class=\"line\"></span><br><span class=\"line\">            // 饼状图</span><br><span class=\"line\">            let chart2 = echarts.init(this.$refs[&apos;chart2&apos;])</span><br><span class=\"line\">            let chartOptions2 = &#123;</span><br><span class=\"line\">              title: &#123;</span><br><span class=\"line\">                text: &apos;社会资源分布&apos;,</span><br><span class=\"line\">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              color: [</span><br><span class=\"line\">                &apos;#7199D6&apos;,</span><br><span class=\"line\">                &apos;#DB7D36&apos;,</span><br><span class=\"line\">                &apos;#82AB4E&apos;,</span><br><span class=\"line\">                &apos;#9CABE1&apos;,</span><br><span class=\"line\">                &apos;#F0B885&apos;,</span><br><span class=\"line\">                &apos;#739BD6&apos;,</span><br><span class=\"line\">                &apos;#72C4CC&apos;,</span><br><span class=\"line\">                &apos;#B1A3DE&apos;,</span><br><span class=\"line\">                &apos;#78B0ED&apos;,</span><br><span class=\"line\">                &apos;#E0A1B6&apos;,</span><br><span class=\"line\">                &apos;#F1C026&apos;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">              // 对点击时显示的tip就行配置</span><br><span class=\"line\">              tooltip: &#123;</span><br><span class=\"line\">                trigger: &apos;item&apos;,</span><br><span class=\"line\">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              // 对图例的显示位置等内容进行配置</span><br><span class=\"line\">              legend: &#123;</span><br><span class=\"line\">                // horizontal, vertical</span><br><span class=\"line\">                orient: &apos;horizontal&apos;,</span><br><span class=\"line\">                bottom: &apos;5%&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              series: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  name: &apos;占比&apos;,</span><br><span class=\"line\">                  type: &apos;pie&apos;,</span><br><span class=\"line\">                  radius: &apos;50%&apos;,</span><br><span class=\"line\">                  center: [&apos;50%&apos;, &apos;40%&apos;],</span><br><span class=\"line\">                  data: [</span><br><span class=\"line\">                    &#123; value: 335, name: &apos;直接访问&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 310, name: &apos;邮件营销&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 234, name: &apos;联盟广告&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 135, name: &apos;视频广告&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 1548, name: &apos;搜索引擎&apos; &#125;</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                  label: &#123;</span><br><span class=\"line\">                    normal: &#123;</span><br><span class=\"line\">                      // 是否显示每个扇形指示</span><br><span class=\"line\">                      show: false,</span><br><span class=\"line\">                      // 若显示,则对过长内容格式化处理</span><br><span class=\"line\">                      formatter(v) &#123;</span><br><span class=\"line\">                        let text = v.name</span><br><span class=\"line\">                        return text.length &lt; 4 ? text : `$&#123;text.slice(0, 4)&#125;\\n$&#123;text.slice(4)&#125;`</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chart2.setOption(chartOptions2)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mounted() &#123;</span><br><span class=\"line\">          this.initChart()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>维护一个简单的图表模板,积累常用参数,便于快速配置图表<br>参考网址:<a href=\"https://echarts.baidu.com/\" target=\"_blank\" rel=\"noopener\">echarts门户网站</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>图表基础模板(基于vue):<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;chart demo&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/mint-ui.css&quot; /&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/global.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;chart&quot; class=&quot;container&quot;&gt;</span><br><span class=\"line\">      &lt;!-- chart1 条形图 --&gt;</span><br><span class=\"line\">      &lt;div ref=&quot;chart1&quot; style=&quot;width: 100%;height:300px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;!-- chart2 饼状图 --&gt;</span><br><span class=\"line\">      &lt;div ref=&quot;chart2&quot; style=&quot;width: 100%; height: 270px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=&quot;../../script/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/httpRequest.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../script/constants.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      window.onload = () =&gt; &#123;</span><br><span class=\"line\">        document.addEventListener(&apos;message&apos;, (&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">          const &#123; token, areaId &#125; = JSON.parse(data)</span><br><span class=\"line\">          if (window.postMessage) &#123;</span><br><span class=\"line\">            let message = &#123; loadFinish: true &#125;</span><br><span class=\"line\">            window.postMessage(JSON.stringify(message))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      let indexVue = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#chart&apos;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">          return &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          initChart() &#123;</span><br><span class=\"line\">            // 条形图</span><br><span class=\"line\">            let chart1 = echarts.init(this.$refs[&apos;chart1&apos;])</span><br><span class=\"line\">            let chartOptions1 = &#123;</span><br><span class=\"line\">              title: &#123;</span><br><span class=\"line\">                text: &apos;大国人口&apos;,</span><br><span class=\"line\">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              color: [</span><br><span class=\"line\">                &apos;#7199D6&apos;,</span><br><span class=\"line\">                &apos;#DB7D36&apos;,</span><br><span class=\"line\">                &apos;#82AB4E&apos;,</span><br><span class=\"line\">                &apos;#9CABE1&apos;,</span><br><span class=\"line\">                &apos;#F0B885&apos;,</span><br><span class=\"line\">                &apos;#739BD6&apos;,</span><br><span class=\"line\">                &apos;#72C4CC&apos;,</span><br><span class=\"line\">                &apos;#B1A3DE&apos;,</span><br><span class=\"line\">                &apos;#78B0ED&apos;,</span><br><span class=\"line\">                &apos;#E0A1B6&apos;,</span><br><span class=\"line\">                &apos;#F1C026&apos;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">               // 对点击时显示的tip就行配置</span><br><span class=\"line\">               tooltip: &#123;</span><br><span class=\"line\">                trigger: &apos;item&apos;,</span><br><span class=\"line\">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125;&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              // 配置图例边距留白距离,是否包含坐标轴刻度</span><br><span class=\"line\">              grid: &#123; left: &apos;3%&apos;, right: &apos;4%&apos;, bottom: &apos;3%&apos;, containLabel: true &#125;,</span><br><span class=\"line\">              xAxis: &#123;</span><br><span class=\"line\">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              yAxis: &#123;</span><br><span class=\"line\">                data: [&apos;巴西&apos;, &apos;印尼&apos;, &apos;美国&apos;, &apos;印度&apos;, &apos;中国&apos;],</span><br><span class=\"line\">                // 对y坐标轴显示的刻度进行配置</span><br><span class=\"line\">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              series: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  name: &apos;人数&apos;,</span><br><span class=\"line\">                  type: &apos;bar&apos;,</span><br><span class=\"line\">                  data: [18203, 23489, 29034, 104970, 131744]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chart1.setOption(chartOptions1)</span><br><span class=\"line\"></span><br><span class=\"line\">            // 饼状图</span><br><span class=\"line\">            let chart2 = echarts.init(this.$refs[&apos;chart2&apos;])</span><br><span class=\"line\">            let chartOptions2 = &#123;</span><br><span class=\"line\">              title: &#123;</span><br><span class=\"line\">                text: &apos;社会资源分布&apos;,</span><br><span class=\"line\">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              color: [</span><br><span class=\"line\">                &apos;#7199D6&apos;,</span><br><span class=\"line\">                &apos;#DB7D36&apos;,</span><br><span class=\"line\">                &apos;#82AB4E&apos;,</span><br><span class=\"line\">                &apos;#9CABE1&apos;,</span><br><span class=\"line\">                &apos;#F0B885&apos;,</span><br><span class=\"line\">                &apos;#739BD6&apos;,</span><br><span class=\"line\">                &apos;#72C4CC&apos;,</span><br><span class=\"line\">                &apos;#B1A3DE&apos;,</span><br><span class=\"line\">                &apos;#78B0ED&apos;,</span><br><span class=\"line\">                &apos;#E0A1B6&apos;,</span><br><span class=\"line\">                &apos;#F1C026&apos;</span><br><span class=\"line\">              ],</span><br><span class=\"line\">              // 对点击时显示的tip就行配置</span><br><span class=\"line\">              tooltip: &#123;</span><br><span class=\"line\">                trigger: &apos;item&apos;,</span><br><span class=\"line\">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              // 对图例的显示位置等内容进行配置</span><br><span class=\"line\">              legend: &#123;</span><br><span class=\"line\">                // horizontal, vertical</span><br><span class=\"line\">                orient: &apos;horizontal&apos;,</span><br><span class=\"line\">                bottom: &apos;5%&apos;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              series: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  name: &apos;占比&apos;,</span><br><span class=\"line\">                  type: &apos;pie&apos;,</span><br><span class=\"line\">                  radius: &apos;50%&apos;,</span><br><span class=\"line\">                  center: [&apos;50%&apos;, &apos;40%&apos;],</span><br><span class=\"line\">                  data: [</span><br><span class=\"line\">                    &#123; value: 335, name: &apos;直接访问&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 310, name: &apos;邮件营销&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 234, name: &apos;联盟广告&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 135, name: &apos;视频广告&apos; &#125;,</span><br><span class=\"line\">                    &#123; value: 1548, name: &apos;搜索引擎&apos; &#125;</span><br><span class=\"line\">                  ],</span><br><span class=\"line\">                  label: &#123;</span><br><span class=\"line\">                    normal: &#123;</span><br><span class=\"line\">                      // 是否显示每个扇形指示</span><br><span class=\"line\">                      show: false,</span><br><span class=\"line\">                      // 若显示,则对过长内容格式化处理</span><br><span class=\"line\">                      formatter(v) &#123;</span><br><span class=\"line\">                        let text = v.name</span><br><span class=\"line\">                        return text.length &lt; 4 ? text : `$&#123;text.slice(0, 4)&#125;\\n$&#123;text.slice(4)&#125;`</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chart2.setOption(chartOptions2)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mounted() &#123;</span><br><span class=\"line\">          this.initChart()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"json","date":"2019-04-11T04:14:03.000Z","_content":"## 1.文档目的\n汇总前端JSON数据模拟技术,本文介绍三种技术:**json server, Easy mock, github api v3**.\njson server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求\nEasy Mock: 在线json模拟数据生成管理平台\ngithub api v3:获取并操作github账号下个人相关信息的接口服务\n实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.\n参考网址: [json-server的使用](https://blog.csdn.net/weixin_40817115/article/details/81237128),[Easy Mock官网](http://easymock.xys12345.cn/login),[github api讲解](https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0),[github api官方文档](https://developer.github.com/)\n\n## 2.实践过程\n### 2.1 json server\n安装依赖\n```\nnpm install -g json-server\n```\n查看版本\n```\njson-server -v\n```\n创建db.json\n```\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ],\n  \"profile\": { \"name\": \"typicode\" }\n}\n```\n启动服务\n```\njson-server db.json\n```\n在postman或浏览器中访问接口,比如:\n```\nhttp://localhost:3000\n```\n### 2.2 East Mock\n只需要打开[East Mock官网](http://easymock.xys12345.cn/login),登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可\n\n### 2.3 github api\n该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用\n**用户信息[详情信息]**\n```\nhttps://api.github.com/users/ruanyf\n```\n**列表信息[分页/不分页]** \n```\nhttps://api.github.com/users/ruanyf/followers?page=1&per_page=10\n```\n**占位图**\n```\nhttp://temp.im/288x288\n```","source":"_posts/2019-04-11-json-server.md","raw":"---\ntitle: json\ndate: 2019-04-11 12:14:03\ntags: JS\n---\n## 1.文档目的\n汇总前端JSON数据模拟技术,本文介绍三种技术:**json server, Easy mock, github api v3**.\njson server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求\nEasy Mock: 在线json模拟数据生成管理平台\ngithub api v3:获取并操作github账号下个人相关信息的接口服务\n实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.\n参考网址: [json-server的使用](https://blog.csdn.net/weixin_40817115/article/details/81237128),[Easy Mock官网](http://easymock.xys12345.cn/login),[github api讲解](https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0),[github api官方文档](https://developer.github.com/)\n\n## 2.实践过程\n### 2.1 json server\n安装依赖\n```\nnpm install -g json-server\n```\n查看版本\n```\njson-server -v\n```\n创建db.json\n```\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ],\n  \"profile\": { \"name\": \"typicode\" }\n}\n```\n启动服务\n```\njson-server db.json\n```\n在postman或浏览器中访问接口,比如:\n```\nhttp://localhost:3000\n```\n### 2.2 East Mock\n只需要打开[East Mock官网](http://easymock.xys12345.cn/login),登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可\n\n### 2.3 github api\n该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用\n**用户信息[详情信息]**\n```\nhttps://api.github.com/users/ruanyf\n```\n**列表信息[分页/不分页]** \n```\nhttps://api.github.com/users/ruanyf/followers?page=1&per_page=10\n```\n**占位图**\n```\nhttp://temp.im/288x288\n```","slug":"json-server","published":1,"updated":"2019-10-08T06:17:11.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwl001fxijkd8st90um","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>汇总前端JSON数据模拟技术,本文介绍三种技术:<strong>json server, Easy mock, github api v3</strong>.<br>json server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求<br>Easy Mock: 在线json模拟数据生成管理平台<br>github api v3:获取并操作github账号下个人相关信息的接口服务<br>实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.<br>参考网址: <a href=\"https://blog.csdn.net/weixin_40817115/article/details/81237128\" target=\"_blank\" rel=\"noopener\">json-server的使用</a>,<a href=\"http://easymock.xys12345.cn/login\" target=\"_blank\" rel=\"noopener\">Easy Mock官网</a>,<a href=\"https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0\" target=\"_blank\" rel=\"noopener\">github api讲解</a>,<a href=\"https://developer.github.com/\" target=\"_blank\" rel=\"noopener\">github api官方文档</a></p>\n<h2 id=\"2-实践过程\"><a href=\"#2-实践过程\" class=\"headerlink\" title=\"2.实践过程\"></a>2.实践过程</h2><h3 id=\"2-1-json-server\"><a href=\"#2-1-json-server\" class=\"headerlink\" title=\"2.1 json server\"></a>2.1 json server</h3><p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g json-server</span><br></pre></td></tr></table></figure></p>\n<p>查看版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server -v</span><br></pre></td></tr></table></figure></p>\n<p>创建db.json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;posts&quot;: [</span><br><span class=\"line\">    &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;comments&quot;: [</span><br><span class=\"line\">    &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server db.json</span><br></pre></td></tr></table></figure></p>\n<p>在postman或浏览器中访问接口,比如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-East-Mock\"><a href=\"#2-2-East-Mock\" class=\"headerlink\" title=\"2.2 East Mock\"></a>2.2 East Mock</h3><p>只需要打开<a href=\"http://easymock.xys12345.cn/login\" target=\"_blank\" rel=\"noopener\">East Mock官网</a>,登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可</p>\n<h3 id=\"2-3-github-api\"><a href=\"#2-3-github-api\" class=\"headerlink\" title=\"2.3 github api\"></a>2.3 github api</h3><p>该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用<br><strong>用户信息[详情信息]</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.github.com/users/ruanyf</span><br></pre></td></tr></table></figure></p>\n<p><strong>列表信息[分页/不分页]</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.github.com/users/ruanyf/followers?page=1&amp;per_page=10</span><br></pre></td></tr></table></figure></p>\n<p><strong>占位图</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://temp.im/288x288</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>汇总前端JSON数据模拟技术,本文介绍三种技术:<strong>json server, Easy mock, github api v3</strong>.<br>json server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求<br>Easy Mock: 在线json模拟数据生成管理平台<br>github api v3:获取并操作github账号下个人相关信息的接口服务<br>实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.<br>参考网址: <a href=\"https://blog.csdn.net/weixin_40817115/article/details/81237128\" target=\"_blank\" rel=\"noopener\">json-server的使用</a>,<a href=\"http://easymock.xys12345.cn/login\" target=\"_blank\" rel=\"noopener\">Easy Mock官网</a>,<a href=\"https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0\" target=\"_blank\" rel=\"noopener\">github api讲解</a>,<a href=\"https://developer.github.com/\" target=\"_blank\" rel=\"noopener\">github api官方文档</a></p>\n<h2 id=\"2-实践过程\"><a href=\"#2-实践过程\" class=\"headerlink\" title=\"2.实践过程\"></a>2.实践过程</h2><h3 id=\"2-1-json-server\"><a href=\"#2-1-json-server\" class=\"headerlink\" title=\"2.1 json server\"></a>2.1 json server</h3><p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g json-server</span><br></pre></td></tr></table></figure></p>\n<p>查看版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server -v</span><br></pre></td></tr></table></figure></p>\n<p>创建db.json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;posts&quot;: [</span><br><span class=\"line\">    &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;comments&quot;: [</span><br><span class=\"line\">    &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json-server db.json</span><br></pre></td></tr></table></figure></p>\n<p>在postman或浏览器中访问接口,比如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:3000</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-East-Mock\"><a href=\"#2-2-East-Mock\" class=\"headerlink\" title=\"2.2 East Mock\"></a>2.2 East Mock</h3><p>只需要打开<a href=\"http://easymock.xys12345.cn/login\" target=\"_blank\" rel=\"noopener\">East Mock官网</a>,登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可</p>\n<h3 id=\"2-3-github-api\"><a href=\"#2-3-github-api\" class=\"headerlink\" title=\"2.3 github api\"></a>2.3 github api</h3><p>该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用<br><strong>用户信息[详情信息]</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.github.com/users/ruanyf</span><br></pre></td></tr></table></figure></p>\n<p><strong>列表信息[分页/不分页]</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.github.com/users/ruanyf/followers?page=1&amp;per_page=10</span><br></pre></td></tr></table></figure></p>\n<p><strong>占位图</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://temp.im/288x288</span><br></pre></td></tr></table></figure></p>\n"},{"title":"基于React Native在应用中查看PDF文档","date":"2019-04-04T04:30:06.000Z","_content":"## 1.文档目的\n记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.\n[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]\n参考网址: [react-native-fs文件下载](https://www.jianshu.com/p/acf5a502f999),[react-native-pdf PDF查看](https://www.npmjs.com/package/react-native-pdf)\n\n## 2.实践过程\n安装依赖\n```\nyarn add react-native-fs\n```\n挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试\n```\nreact-native link react-native-fs\n```\n然后即可在项目中引入使用\n```\nimport RNFS from 'react-native-fs';\n```\n下载文档\n```\n/*下载文件*/\n    downloadFile() {\n        // On Android, use \"RNFS.DocumentDirectoryPath\" (MainBundlePath is not defined)\n\n        // 图片\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.jpg`;\n        // const formUrl = 'http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg';\n\n        // 文件\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.zip`;\n        // const formUrl = 'http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip';\n\n        // 视频\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.mp4`;\n        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&\n        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&\n        // const formUrl = 'https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&';\n\n        // 音频\n        const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.mp3`;\n        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3\n        const formUrl = 'http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3';\n\n        const options = {\n            fromUrl: formUrl,\n            toFile: downloadDest,\n            background: true,\n            begin: (res) => {\n                console.log('begin', res);\n                console.log('contentLength:', res.contentLength / 1024 / 1024, 'M');\n            },\n            progress: (res) => {\n\n                let pro = res.bytesWritten / res.contentLength;\n\n                this.setState({\n                    progressNum: pro,\n                });\n            }\n        };\n        try {\n            const ret = RNFS.downloadFile(options);\n            ret.promise.then(res => {\n                console.log('success', res);\n\n                console.log('file://' + downloadDest)\n\n                // 例如保存图片\n                CameraRoll.saveToCameraRoll(downloadDest)\n                    .then(()=>{\n                        Toast.showShortCenter('图片已保存到相册')\n                    }).catch(()=>{\n                        Toast.showShortCenter('图片保存失败')\n                    })\n\n            }).catch(err => {\n                console.log('err', err);\n            });\n        }\n        catch (e) {\n            console.log(error);\n        }\n\n    }\n```\nPDF文档的查看,首先也要安装依赖\n```\nyarn add rn-fetch-blob\nyarn add react-native-pdf\n\nreact-native link rn-fetch-blob\nreact-native link react-native-pdf\n```\n然后就可以尝试显示PDF资源\n```\nimport React from 'react';\nimport { StyleSheet, Dimensions, View } from 'react-native';\n \nimport Pdf from 'react-native-pdf';\n \nexport default class PDFExample extends React.Component {\n    render() {\n        const source = {uri:'http://samples.leanpub.com/thereactnativebook-sample.pdf',cache:true};\n        //const source = require('./test.pdf');  // ios only\n        //const source = {uri:'bundle-assets://test.pdf'};\n \n        //const source = {uri:'file:///sdcard/test.pdf'};\n        //const source = {uri:\"data:application/pdf;base64,...\"};\n \n        return (\n            <View style={styles.container}>\n                <Pdf\n                    source={source}\n                    onLoadComplete={(numberOfPages,filePath)=>{\n                        console.log(`number of pages: ${numberOfPages}`);\n                    }}\n                    onPageChanged={(page,numberOfPages)=>{\n                        console.log(`current page: ${page}`);\n                    }}\n                    onError={(error)=>{\n                        console.log(error);\n                    }}\n                    style={styles.pdf}/>\n            </View>\n        )\n  }\n}\n \nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        marginTop: 25,\n    },\n    pdf: {\n        flex:1,\n        width:Dimensions.get('window').width,\n    }\n});\n```","source":"_posts/2019-04-04-pdf-view.md","raw":"---\ntitle: 基于React Native在应用中查看PDF文档\ndate: 2019-04-04 12:30:06\ntags: React\n---\n## 1.文档目的\n记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.\n[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]\n参考网址: [react-native-fs文件下载](https://www.jianshu.com/p/acf5a502f999),[react-native-pdf PDF查看](https://www.npmjs.com/package/react-native-pdf)\n\n## 2.实践过程\n安装依赖\n```\nyarn add react-native-fs\n```\n挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试\n```\nreact-native link react-native-fs\n```\n然后即可在项目中引入使用\n```\nimport RNFS from 'react-native-fs';\n```\n下载文档\n```\n/*下载文件*/\n    downloadFile() {\n        // On Android, use \"RNFS.DocumentDirectoryPath\" (MainBundlePath is not defined)\n\n        // 图片\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.jpg`;\n        // const formUrl = 'http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg';\n\n        // 文件\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.zip`;\n        // const formUrl = 'http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip';\n\n        // 视频\n        // const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.mp4`;\n        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&\n        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&\n        // const formUrl = 'https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&';\n\n        // 音频\n        const downloadDest = `${RNFS.MainBundlePath}/${((Math.random() * 1000) | 0)}.mp3`;\n        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3\n        const formUrl = 'http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3';\n\n        const options = {\n            fromUrl: formUrl,\n            toFile: downloadDest,\n            background: true,\n            begin: (res) => {\n                console.log('begin', res);\n                console.log('contentLength:', res.contentLength / 1024 / 1024, 'M');\n            },\n            progress: (res) => {\n\n                let pro = res.bytesWritten / res.contentLength;\n\n                this.setState({\n                    progressNum: pro,\n                });\n            }\n        };\n        try {\n            const ret = RNFS.downloadFile(options);\n            ret.promise.then(res => {\n                console.log('success', res);\n\n                console.log('file://' + downloadDest)\n\n                // 例如保存图片\n                CameraRoll.saveToCameraRoll(downloadDest)\n                    .then(()=>{\n                        Toast.showShortCenter('图片已保存到相册')\n                    }).catch(()=>{\n                        Toast.showShortCenter('图片保存失败')\n                    })\n\n            }).catch(err => {\n                console.log('err', err);\n            });\n        }\n        catch (e) {\n            console.log(error);\n        }\n\n    }\n```\nPDF文档的查看,首先也要安装依赖\n```\nyarn add rn-fetch-blob\nyarn add react-native-pdf\n\nreact-native link rn-fetch-blob\nreact-native link react-native-pdf\n```\n然后就可以尝试显示PDF资源\n```\nimport React from 'react';\nimport { StyleSheet, Dimensions, View } from 'react-native';\n \nimport Pdf from 'react-native-pdf';\n \nexport default class PDFExample extends React.Component {\n    render() {\n        const source = {uri:'http://samples.leanpub.com/thereactnativebook-sample.pdf',cache:true};\n        //const source = require('./test.pdf');  // ios only\n        //const source = {uri:'bundle-assets://test.pdf'};\n \n        //const source = {uri:'file:///sdcard/test.pdf'};\n        //const source = {uri:\"data:application/pdf;base64,...\"};\n \n        return (\n            <View style={styles.container}>\n                <Pdf\n                    source={source}\n                    onLoadComplete={(numberOfPages,filePath)=>{\n                        console.log(`number of pages: ${numberOfPages}`);\n                    }}\n                    onPageChanged={(page,numberOfPages)=>{\n                        console.log(`current page: ${page}`);\n                    }}\n                    onError={(error)=>{\n                        console.log(error);\n                    }}\n                    style={styles.pdf}/>\n            </View>\n        )\n  }\n}\n \nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        marginTop: 25,\n    },\n    pdf: {\n        flex:1,\n        width:Dimensions.get('window').width,\n    }\n});\n```","slug":"pdf-view","published":1,"updated":"2019-07-08T01:25:27.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwn001ixijkiighq8x0","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.<br>[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]<br>参考网址: <a href=\"https://www.jianshu.com/p/acf5a502f999\" target=\"_blank\" rel=\"noopener\">react-native-fs文件下载</a>,<a href=\"https://www.npmjs.com/package/react-native-pdf\" target=\"_blank\" rel=\"noopener\">react-native-pdf PDF查看</a></p>\n<h2 id=\"2-实践过程\"><a href=\"#2-实践过程\" class=\"headerlink\" title=\"2.实践过程\"></a>2.实践过程</h2><p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-fs</span><br></pre></td></tr></table></figure></p>\n<p>挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native link react-native-fs</span><br></pre></td></tr></table></figure></p>\n<p>然后即可在项目中引入使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import RNFS from &apos;react-native-fs&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>下载文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*下载文件*/</span><br><span class=\"line\">    downloadFile() &#123;</span><br><span class=\"line\">        // On Android, use &quot;RNFS.DocumentDirectoryPath&quot; (MainBundlePath is not defined)</span><br><span class=\"line\"></span><br><span class=\"line\">        // 图片</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.jpg`;</span><br><span class=\"line\">        // const formUrl = &apos;http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 文件</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.zip`;</span><br><span class=\"line\">        // const formUrl = &apos;http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 视频</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp4`;</span><br><span class=\"line\">        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&amp;</span><br><span class=\"line\">        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&amp;</span><br><span class=\"line\">        // const formUrl = &apos;https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&amp;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 音频</span><br><span class=\"line\">        const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp3`;</span><br><span class=\"line\">        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3</span><br><span class=\"line\">        const formUrl = &apos;http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        const options = &#123;</span><br><span class=\"line\">            fromUrl: formUrl,</span><br><span class=\"line\">            toFile: downloadDest,</span><br><span class=\"line\">            background: true,</span><br><span class=\"line\">            begin: (res) =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;begin&apos;, res);</span><br><span class=\"line\">                console.log(&apos;contentLength:&apos;, res.contentLength / 1024 / 1024, &apos;M&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            progress: (res) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                let pro = res.bytesWritten / res.contentLength;</span><br><span class=\"line\"></span><br><span class=\"line\">                this.setState(&#123;</span><br><span class=\"line\">                    progressNum: pro,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            const ret = RNFS.downloadFile(options);</span><br><span class=\"line\">            ret.promise.then(res =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;success&apos;, res);</span><br><span class=\"line\"></span><br><span class=\"line\">                console.log(&apos;file://&apos; + downloadDest)</span><br><span class=\"line\"></span><br><span class=\"line\">                // 例如保存图片</span><br><span class=\"line\">                CameraRoll.saveToCameraRoll(downloadDest)</span><br><span class=\"line\">                    .then(()=&gt;&#123;</span><br><span class=\"line\">                        Toast.showShortCenter(&apos;图片已保存到相册&apos;)</span><br><span class=\"line\">                    &#125;).catch(()=&gt;&#123;</span><br><span class=\"line\">                        Toast.showShortCenter(&apos;图片保存失败&apos;)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;err&apos;, err);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (e) &#123;</span><br><span class=\"line\">            console.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>PDF文档的查看,首先也要安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add rn-fetch-blob</span><br><span class=\"line\">yarn add react-native-pdf</span><br><span class=\"line\"></span><br><span class=\"line\">react-native link rn-fetch-blob</span><br><span class=\"line\">react-native link react-native-pdf</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以尝试显示PDF资源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123; StyleSheet, Dimensions, View &#125; from &apos;react-native&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">import Pdf from &apos;react-native-pdf&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">export default class PDFExample extends React.Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        const source = &#123;uri:&apos;http://samples.leanpub.com/thereactnativebook-sample.pdf&apos;,cache:true&#125;;</span><br><span class=\"line\">        //const source = require(&apos;./test.pdf&apos;);  // ios only</span><br><span class=\"line\">        //const source = &#123;uri:&apos;bundle-assets://test.pdf&apos;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        //const source = &#123;uri:&apos;file:///sdcard/test.pdf&apos;&#125;;</span><br><span class=\"line\">        //const source = &#123;uri:&quot;data:application/pdf;base64,...&quot;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">                &lt;Pdf</span><br><span class=\"line\">                    source=&#123;source&#125;</span><br><span class=\"line\">                    onLoadComplete=&#123;(numberOfPages,filePath)=&gt;&#123;</span><br><span class=\"line\">                        console.log(`number of pages: $&#123;numberOfPages&#125;`);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    onPageChanged=&#123;(page,numberOfPages)=&gt;&#123;</span><br><span class=\"line\">                        console.log(`current page: $&#123;page&#125;`);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    onError=&#123;(error)=&gt;&#123;</span><br><span class=\"line\">                        console.log(error);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    style=&#123;styles.pdf&#125;/&gt;</span><br><span class=\"line\">            &lt;/View&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">    container: &#123;</span><br><span class=\"line\">        flex: 1,</span><br><span class=\"line\">        justifyContent: &apos;flex-start&apos;,</span><br><span class=\"line\">        alignItems: &apos;center&apos;,</span><br><span class=\"line\">        marginTop: 25,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pdf: &#123;</span><br><span class=\"line\">        flex:1,</span><br><span class=\"line\">        width:Dimensions.get(&apos;window&apos;).width,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.<br>[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]<br>参考网址: <a href=\"https://www.jianshu.com/p/acf5a502f999\" target=\"_blank\" rel=\"noopener\">react-native-fs文件下载</a>,<a href=\"https://www.npmjs.com/package/react-native-pdf\" target=\"_blank\" rel=\"noopener\">react-native-pdf PDF查看</a></p>\n<h2 id=\"2-实践过程\"><a href=\"#2-实践过程\" class=\"headerlink\" title=\"2.实践过程\"></a>2.实践过程</h2><p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-fs</span><br></pre></td></tr></table></figure></p>\n<p>挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native link react-native-fs</span><br></pre></td></tr></table></figure></p>\n<p>然后即可在项目中引入使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import RNFS from &apos;react-native-fs&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>下载文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*下载文件*/</span><br><span class=\"line\">    downloadFile() &#123;</span><br><span class=\"line\">        // On Android, use &quot;RNFS.DocumentDirectoryPath&quot; (MainBundlePath is not defined)</span><br><span class=\"line\"></span><br><span class=\"line\">        // 图片</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.jpg`;</span><br><span class=\"line\">        // const formUrl = &apos;http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 文件</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.zip`;</span><br><span class=\"line\">        // const formUrl = &apos;http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 视频</span><br><span class=\"line\">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp4`;</span><br><span class=\"line\">        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&amp;</span><br><span class=\"line\">        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&amp;</span><br><span class=\"line\">        // const formUrl = &apos;https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&amp;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 音频</span><br><span class=\"line\">        const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp3`;</span><br><span class=\"line\">        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3</span><br><span class=\"line\">        const formUrl = &apos;http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">        const options = &#123;</span><br><span class=\"line\">            fromUrl: formUrl,</span><br><span class=\"line\">            toFile: downloadDest,</span><br><span class=\"line\">            background: true,</span><br><span class=\"line\">            begin: (res) =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;begin&apos;, res);</span><br><span class=\"line\">                console.log(&apos;contentLength:&apos;, res.contentLength / 1024 / 1024, &apos;M&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            progress: (res) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                let pro = res.bytesWritten / res.contentLength;</span><br><span class=\"line\"></span><br><span class=\"line\">                this.setState(&#123;</span><br><span class=\"line\">                    progressNum: pro,</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            const ret = RNFS.downloadFile(options);</span><br><span class=\"line\">            ret.promise.then(res =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;success&apos;, res);</span><br><span class=\"line\"></span><br><span class=\"line\">                console.log(&apos;file://&apos; + downloadDest)</span><br><span class=\"line\"></span><br><span class=\"line\">                // 例如保存图片</span><br><span class=\"line\">                CameraRoll.saveToCameraRoll(downloadDest)</span><br><span class=\"line\">                    .then(()=&gt;&#123;</span><br><span class=\"line\">                        Toast.showShortCenter(&apos;图片已保存到相册&apos;)</span><br><span class=\"line\">                    &#125;).catch(()=&gt;&#123;</span><br><span class=\"line\">                        Toast.showShortCenter(&apos;图片保存失败&apos;)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">                console.log(&apos;err&apos;, err);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (e) &#123;</span><br><span class=\"line\">            console.log(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>PDF文档的查看,首先也要安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add rn-fetch-blob</span><br><span class=\"line\">yarn add react-native-pdf</span><br><span class=\"line\"></span><br><span class=\"line\">react-native link rn-fetch-blob</span><br><span class=\"line\">react-native link react-native-pdf</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以尝试显示PDF资源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123; StyleSheet, Dimensions, View &#125; from &apos;react-native&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">import Pdf from &apos;react-native-pdf&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">export default class PDFExample extends React.Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        const source = &#123;uri:&apos;http://samples.leanpub.com/thereactnativebook-sample.pdf&apos;,cache:true&#125;;</span><br><span class=\"line\">        //const source = require(&apos;./test.pdf&apos;);  // ios only</span><br><span class=\"line\">        //const source = &#123;uri:&apos;bundle-assets://test.pdf&apos;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        //const source = &#123;uri:&apos;file:///sdcard/test.pdf&apos;&#125;;</span><br><span class=\"line\">        //const source = &#123;uri:&quot;data:application/pdf;base64,...&quot;&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">                &lt;Pdf</span><br><span class=\"line\">                    source=&#123;source&#125;</span><br><span class=\"line\">                    onLoadComplete=&#123;(numberOfPages,filePath)=&gt;&#123;</span><br><span class=\"line\">                        console.log(`number of pages: $&#123;numberOfPages&#125;`);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    onPageChanged=&#123;(page,numberOfPages)=&gt;&#123;</span><br><span class=\"line\">                        console.log(`current page: $&#123;page&#125;`);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    onError=&#123;(error)=&gt;&#123;</span><br><span class=\"line\">                        console.log(error);</span><br><span class=\"line\">                    &#125;&#125;</span><br><span class=\"line\">                    style=&#123;styles.pdf&#125;/&gt;</span><br><span class=\"line\">            &lt;/View&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">    container: &#123;</span><br><span class=\"line\">        flex: 1,</span><br><span class=\"line\">        justifyContent: &apos;flex-start&apos;,</span><br><span class=\"line\">        alignItems: &apos;center&apos;,</span><br><span class=\"line\">        marginTop: 25,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pdf: &#123;</span><br><span class=\"line\">        flex:1,</span><br><span class=\"line\">        width:Dimensions.get(&apos;window&apos;).width,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"icon","date":"2019-04-21T09:10:14.000Z","_content":"## 1.文档目的\n网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。\n参考网址:\n[阿里图标库iconfont](https://www.iconfont.cn/)\n\n## 2.内容梳理\n使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：\n```\n<link href=\"http://at.alicdn.com/t/font_803606_60a86mpe3nt.css\" rel=\"stylesheet\">\n```\n在项目中使用图标如下（可通过css改变图标大小和颜色）：\n```\n<i class=\"iconfont icon-jiazheng\" style=\"color:red;font-size: 55px;\"></i>\n```\n","source":"_posts/2019-04-21-icon.md","raw":"---\ntitle: icon\ndate: 2019-04-21 17:10:14\ntags: css\n---\n## 1.文档目的\n网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。\n参考网址:\n[阿里图标库iconfont](https://www.iconfont.cn/)\n\n## 2.内容梳理\n使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：\n```\n<link href=\"http://at.alicdn.com/t/font_803606_60a86mpe3nt.css\" rel=\"stylesheet\">\n```\n在项目中使用图标如下（可通过css改变图标大小和颜色）：\n```\n<i class=\"iconfont icon-jiazheng\" style=\"color:red;font-size: 55px;\"></i>\n```\n","slug":"icon","published":1,"updated":"2019-07-08T01:25:27.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwo001kxijke9bto0zw","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。<br>参考网址:<br><a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">阿里图标库iconfont</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&quot;http://at.alicdn.com/t/font_803606_60a86mpe3nt.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在项目中使用图标如下（可通过css改变图标大小和颜色）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;i class=&quot;iconfont icon-jiazheng&quot; style=&quot;color:red;font-size: 55px;&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。<br>参考网址:<br><a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener\">阿里图标库iconfont</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&quot;http://at.alicdn.com/t/font_803606_60a86mpe3nt.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在项目中使用图标如下（可通过css改变图标大小和颜色）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;i class=&quot;iconfont icon-jiazheng&quot; style=&quot;color:red;font-size: 55px;&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"style","date":"2019-04-21T08:08:26.000Z","_content":"## 1.文档目的\n本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。\n官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等\n参考网址:\n[BootStrap全局css样式](https://v3.bootcss.com/css/)，[bootstrap.min.css 提取码：he9a](https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw)，[bootstrap.css 提取码：khav](https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew)\n\n## 2.内容梳理\n提取通用样式类如下:\n```\n    <!-- 容器 -->\n    .container {\n        min-width: 992px !important;\n    }\n    <!-- flex布局 -->\n    .flex-box {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: flex-start;\n        /*  副轴对齐方式  */\n        align-items: center;\n        /*  多行对齐方式  */\n        align-content: flex-start;\n    }\n    .flex-item {\n        /*  排序  */\n        order: 0;\n        /*   放大比例   */\n        flex-grow: 0;\n        /*   缩小比例   */\n        flex-shrink: 1;\n        /*  项目占据主轴空间 auto    */\n        flex-basis： 350px;\n        /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */\n        align-self: center;\n    }\n    <!-- 按钮 -->\n    .btn {\n        display: inline-block;\n        font-weight: 400;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: middle;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        border: 1px solid transparent;\n        padding: 0.375rem 0.75rem;\n        font-size: 1rem;\n        line-height: 1.5;\n        border-radius: 0.25rem;\n        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    }\n    .btn.focus .btn:focus, {\n        outline: 0;\n        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    }\n    .btn.disabled, .btn:disabled {\n        opacity: 0.65;\n    }\n    .btn:not(:disabled):not(.disabled) {\n        cursor: pointer;\n    }\n    .btn:hover, .btn:focus {\n        text-decoration: none;\n    }\n    .btn-default {\n        color: #333;\n        background-color: #fff;\n        border-color: #ccc;\n    }\n    .btn-primary {\n        color: #fff;\n        background-color: #337ab7;\n        border-color: #2e6da4;\n    }\n    <!-- 文本 -->\n     .text-primary {\n        color: #007bff !important;\n    }\n    .text-light {\n        color: #f8f9fa !important;\n    }\n    .text-dark {\n        color: #343a40 !important;\n    }\n    .font-weight-light {\n        font-weight: 300 !important;\n    }\n    .font-weight-normal {\n        font-weight: 400 !important;\n    }\n    .font-weight-bold {\n        font-weight: 700 !important;\n    }\n    .font-h1 {\n      font-size: 22px;\n    }\n     \n    .font-h2 {\n      font-size: 20px;\n    }\n     \n    .font-h3 {\n      font-size: 18px;\n    }\n     \n    .font-h4 {\n      font-size: 16px;\n    }\n     \n    .font-h5 {\n      font-size: 14px;\n    }\n     \n    .font-h6 {\n      font-size: 12px;\n    }\n    <!-- 超链接 -->\n    <!-- link 未被访问\n    visited 已被访问\n    hover  鼠标指针移动到链接上\n    active 正在被点击的链接\n    focus 元素获取焦点 -->\n    a.text-primary:link,\n    a.text-primary:visited,\n    a.text-primary:hover,\n    a.text-primary:active,\n    a.text-primary:focus {\n        color: #007bff !important;\n        text-decoration: none;\n    }\n    <!-- 1px边框 -->    \n    .border_1px:before{\n        content: '';\n        position: absolute;\n        top: 0;\n        height: 1px;\n        width: 100%;\n        background-color: #000;\n        transform-origin: 50% 0%;\n    }   \n    @media only screen and (-webkit-min-device-pixel-ratio:2){\n        .border_1px:before{\n            transform:scaleY(0.5);\n        }\n    }   \n    @media only screen and(-webkit-min-device-pixel-ratio:3){\n        .border_1px:before{\n            transform:scaleY(0.33);\n        }\n    }\n```","source":"_posts/2019-04-21-style.md","raw":"---\ntitle: style\ndate: 2019-04-21 16:08:26\ntags: css\n---\n## 1.文档目的\n本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。\n官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等\n参考网址:\n[BootStrap全局css样式](https://v3.bootcss.com/css/)，[bootstrap.min.css 提取码：he9a](https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw)，[bootstrap.css 提取码：khav](https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew)\n\n## 2.内容梳理\n提取通用样式类如下:\n```\n    <!-- 容器 -->\n    .container {\n        min-width: 992px !important;\n    }\n    <!-- flex布局 -->\n    .flex-box {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: flex-start;\n        /*  副轴对齐方式  */\n        align-items: center;\n        /*  多行对齐方式  */\n        align-content: flex-start;\n    }\n    .flex-item {\n        /*  排序  */\n        order: 0;\n        /*   放大比例   */\n        flex-grow: 0;\n        /*   缩小比例   */\n        flex-shrink: 1;\n        /*  项目占据主轴空间 auto    */\n        flex-basis： 350px;\n        /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */\n        align-self: center;\n    }\n    <!-- 按钮 -->\n    .btn {\n        display: inline-block;\n        font-weight: 400;\n        text-align: center;\n        white-space: nowrap;\n        vertical-align: middle;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        border: 1px solid transparent;\n        padding: 0.375rem 0.75rem;\n        font-size: 1rem;\n        line-height: 1.5;\n        border-radius: 0.25rem;\n        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    }\n    .btn.focus .btn:focus, {\n        outline: 0;\n        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n    }\n    .btn.disabled, .btn:disabled {\n        opacity: 0.65;\n    }\n    .btn:not(:disabled):not(.disabled) {\n        cursor: pointer;\n    }\n    .btn:hover, .btn:focus {\n        text-decoration: none;\n    }\n    .btn-default {\n        color: #333;\n        background-color: #fff;\n        border-color: #ccc;\n    }\n    .btn-primary {\n        color: #fff;\n        background-color: #337ab7;\n        border-color: #2e6da4;\n    }\n    <!-- 文本 -->\n     .text-primary {\n        color: #007bff !important;\n    }\n    .text-light {\n        color: #f8f9fa !important;\n    }\n    .text-dark {\n        color: #343a40 !important;\n    }\n    .font-weight-light {\n        font-weight: 300 !important;\n    }\n    .font-weight-normal {\n        font-weight: 400 !important;\n    }\n    .font-weight-bold {\n        font-weight: 700 !important;\n    }\n    .font-h1 {\n      font-size: 22px;\n    }\n     \n    .font-h2 {\n      font-size: 20px;\n    }\n     \n    .font-h3 {\n      font-size: 18px;\n    }\n     \n    .font-h4 {\n      font-size: 16px;\n    }\n     \n    .font-h5 {\n      font-size: 14px;\n    }\n     \n    .font-h6 {\n      font-size: 12px;\n    }\n    <!-- 超链接 -->\n    <!-- link 未被访问\n    visited 已被访问\n    hover  鼠标指针移动到链接上\n    active 正在被点击的链接\n    focus 元素获取焦点 -->\n    a.text-primary:link,\n    a.text-primary:visited,\n    a.text-primary:hover,\n    a.text-primary:active,\n    a.text-primary:focus {\n        color: #007bff !important;\n        text-decoration: none;\n    }\n    <!-- 1px边框 -->    \n    .border_1px:before{\n        content: '';\n        position: absolute;\n        top: 0;\n        height: 1px;\n        width: 100%;\n        background-color: #000;\n        transform-origin: 50% 0%;\n    }   \n    @media only screen and (-webkit-min-device-pixel-ratio:2){\n        .border_1px:before{\n            transform:scaleY(0.5);\n        }\n    }   \n    @media only screen and(-webkit-min-device-pixel-ratio:3){\n        .border_1px:before{\n            transform:scaleY(0.33);\n        }\n    }\n```","slug":"style","published":1,"updated":"2019-07-08T01:25:27.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwp001nxijka7devi79","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。<br>官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等<br>参考网址:<br><a href=\"https://v3.bootcss.com/css/\" target=\"_blank\" rel=\"noopener\">BootStrap全局css样式</a>，<a href=\"https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw\" target=\"_blank\" rel=\"noopener\">bootstrap.min.css 提取码：he9a</a>，<a href=\"https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew\" target=\"_blank\" rel=\"noopener\">bootstrap.css 提取码：khav</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>提取通用样式类如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 容器 --&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">    min-width: 992px !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- flex布局 --&gt;</span><br><span class=\"line\">.flex-box &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: row;</span><br><span class=\"line\">    flex-wrap: nowrap;</span><br><span class=\"line\">    justify-content: flex-start;</span><br><span class=\"line\">    /*  副轴对齐方式  */</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">    /*  多行对齐方式  */</span><br><span class=\"line\">    align-content: flex-start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.flex-item &#123;</span><br><span class=\"line\">    /*  排序  */</span><br><span class=\"line\">    order: 0;</span><br><span class=\"line\">    /*   放大比例   */</span><br><span class=\"line\">    flex-grow: 0;</span><br><span class=\"line\">    /*   缩小比例   */</span><br><span class=\"line\">    flex-shrink: 1;</span><br><span class=\"line\">    /*  项目占据主轴空间 auto    */</span><br><span class=\"line\">    flex-basis： 350px;</span><br><span class=\"line\">    /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 按钮 --&gt;</span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    font-weight: 400;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    -webkit-user-select: none;</span><br><span class=\"line\">    -moz-user-select: none;</span><br><span class=\"line\">    -ms-user-select: none;</span><br><span class=\"line\">    user-select: none;</span><br><span class=\"line\">    border: 1px solid transparent;</span><br><span class=\"line\">    padding: 0.375rem 0.75rem;</span><br><span class=\"line\">    font-size: 1rem;</span><br><span class=\"line\">    line-height: 1.5;</span><br><span class=\"line\">    border-radius: 0.25rem;</span><br><span class=\"line\">    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn.focus .btn:focus, &#123;</span><br><span class=\"line\">    outline: 0;</span><br><span class=\"line\">    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn.disabled, .btn:disabled &#123;</span><br><span class=\"line\">    opacity: 0.65;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn:not(:disabled):not(.disabled) &#123;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn:hover, .btn:focus &#123;</span><br><span class=\"line\">    text-decoration: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn-default &#123;</span><br><span class=\"line\">    color: #333;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">    border-color: #ccc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn-primary &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: #337ab7;</span><br><span class=\"line\">    border-color: #2e6da4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 文本 --&gt;</span><br><span class=\"line\"> .text-primary &#123;</span><br><span class=\"line\">    color: #007bff !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-light &#123;</span><br><span class=\"line\">    color: #f8f9fa !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-dark &#123;</span><br><span class=\"line\">    color: #343a40 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.font-weight-light &#123;</span><br><span class=\"line\">    font-weight: 300 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.font-weight-normal &#123;</span><br><span class=\"line\">    font-weight: 400 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.font-weight-bold &#123;</span><br><span class=\"line\">    font-weight: 700 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.font-h1 &#123;</span><br><span class=\"line\">  font-size: 22px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h2 &#123;</span><br><span class=\"line\">  font-size: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h3 &#123;</span><br><span class=\"line\">  font-size: 18px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h4 &#123;</span><br><span class=\"line\">  font-size: 16px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h5 &#123;</span><br><span class=\"line\">  font-size: 14px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h6 &#123;</span><br><span class=\"line\">  font-size: 12px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 超链接 --&gt;</span><br><span class=\"line\">&lt;!-- link 未被访问</span><br><span class=\"line\">visited 已被访问</span><br><span class=\"line\">hover  鼠标指针移动到链接上</span><br><span class=\"line\">active 正在被点击的链接</span><br><span class=\"line\">focus 元素获取焦点 --&gt;</span><br><span class=\"line\">a.text-primary:link,</span><br><span class=\"line\">a.text-primary:visited,</span><br><span class=\"line\">a.text-primary:hover,</span><br><span class=\"line\">a.text-primary:active,</span><br><span class=\"line\">a.text-primary:focus &#123;</span><br><span class=\"line\">    color: #007bff !important;</span><br><span class=\"line\">    text-decoration: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 1px边框 --&gt;    </span><br><span class=\"line\">.border_1px:before&#123;</span><br><span class=\"line\">    content: &apos;&apos;;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    height: 1px;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    background-color: #000;</span><br><span class=\"line\">    transform-origin: 50% 0%;</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">@media only screen and (-webkit-min-device-pixel-ratio:2)&#123;</span><br><span class=\"line\">    .border_1px:before&#123;</span><br><span class=\"line\">        transform:scaleY(0.5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">@media only screen and(-webkit-min-device-pixel-ratio:3)&#123;</span><br><span class=\"line\">    .border_1px:before&#123;</span><br><span class=\"line\">        transform:scaleY(0.33);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。<br>官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等<br>参考网址:<br><a href=\"https://v3.bootcss.com/css/\" target=\"_blank\" rel=\"noopener\">BootStrap全局css样式</a>，<a href=\"https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw\" target=\"_blank\" rel=\"noopener\">bootstrap.min.css 提取码：he9a</a>，<a href=\"https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew\" target=\"_blank\" rel=\"noopener\">bootstrap.css 提取码：khav</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>提取通用样式类如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 容器 --&gt;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">    min-width: 992px !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- flex布局 --&gt;</span><br><span class=\"line\">.flex-box &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: row;</span><br><span class=\"line\">    flex-wrap: nowrap;</span><br><span class=\"line\">    justify-content: flex-start;</span><br><span class=\"line\">    /*  副轴对齐方式  */</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">    /*  多行对齐方式  */</span><br><span class=\"line\">    align-content: flex-start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.flex-item &#123;</span><br><span class=\"line\">    /*  排序  */</span><br><span class=\"line\">    order: 0;</span><br><span class=\"line\">    /*   放大比例   */</span><br><span class=\"line\">    flex-grow: 0;</span><br><span class=\"line\">    /*   缩小比例   */</span><br><span class=\"line\">    flex-shrink: 1;</span><br><span class=\"line\">    /*  项目占据主轴空间 auto    */</span><br><span class=\"line\">    flex-basis： 350px;</span><br><span class=\"line\">    /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 按钮 --&gt;</span><br><span class=\"line\">.btn &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    font-weight: 400;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    white-space: nowrap;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    -webkit-user-select: none;</span><br><span class=\"line\">    -moz-user-select: none;</span><br><span class=\"line\">    -ms-user-select: none;</span><br><span class=\"line\">    user-select: none;</span><br><span class=\"line\">    border: 1px solid transparent;</span><br><span class=\"line\">    padding: 0.375rem 0.75rem;</span><br><span class=\"line\">    font-size: 1rem;</span><br><span class=\"line\">    line-height: 1.5;</span><br><span class=\"line\">    border-radius: 0.25rem;</span><br><span class=\"line\">    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn.focus .btn:focus, &#123;</span><br><span class=\"line\">    outline: 0;</span><br><span class=\"line\">    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn.disabled, .btn:disabled &#123;</span><br><span class=\"line\">    opacity: 0.65;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn:not(:disabled):not(.disabled) &#123;</span><br><span class=\"line\">    cursor: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn:hover, .btn:focus &#123;</span><br><span class=\"line\">    text-decoration: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn-default &#123;</span><br><span class=\"line\">    color: #333;</span><br><span class=\"line\">    background-color: #fff;</span><br><span class=\"line\">    border-color: #ccc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.btn-primary &#123;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">    background-color: #337ab7;</span><br><span class=\"line\">    border-color: #2e6da4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 文本 --&gt;</span><br><span class=\"line\"> .text-primary &#123;</span><br><span class=\"line\">    color: #007bff !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-light &#123;</span><br><span class=\"line\">    color: #f8f9fa !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.text-dark &#123;</span><br><span class=\"line\">    color: #343a40 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.font-weight-light &#123;</span><br><span class=\"line\">    font-weight: 300 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.font-weight-normal &#123;</span><br><span class=\"line\">    font-weight: 400 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.font-weight-bold &#123;</span><br><span class=\"line\">    font-weight: 700 !important;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.font-h1 &#123;</span><br><span class=\"line\">  font-size: 22px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h2 &#123;</span><br><span class=\"line\">  font-size: 20px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h3 &#123;</span><br><span class=\"line\">  font-size: 18px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h4 &#123;</span><br><span class=\"line\">  font-size: 16px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h5 &#123;</span><br><span class=\"line\">  font-size: 14px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.font-h6 &#123;</span><br><span class=\"line\">  font-size: 12px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 超链接 --&gt;</span><br><span class=\"line\">&lt;!-- link 未被访问</span><br><span class=\"line\">visited 已被访问</span><br><span class=\"line\">hover  鼠标指针移动到链接上</span><br><span class=\"line\">active 正在被点击的链接</span><br><span class=\"line\">focus 元素获取焦点 --&gt;</span><br><span class=\"line\">a.text-primary:link,</span><br><span class=\"line\">a.text-primary:visited,</span><br><span class=\"line\">a.text-primary:hover,</span><br><span class=\"line\">a.text-primary:active,</span><br><span class=\"line\">a.text-primary:focus &#123;</span><br><span class=\"line\">    color: #007bff !important;</span><br><span class=\"line\">    text-decoration: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 1px边框 --&gt;    </span><br><span class=\"line\">.border_1px:before&#123;</span><br><span class=\"line\">    content: &apos;&apos;;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    height: 1px;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    background-color: #000;</span><br><span class=\"line\">    transform-origin: 50% 0%;</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">@media only screen and (-webkit-min-device-pixel-ratio:2)&#123;</span><br><span class=\"line\">    .border_1px:before&#123;</span><br><span class=\"line\">        transform:scaleY(0.5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\">@media only screen and(-webkit-min-device-pixel-ratio:3)&#123;</span><br><span class=\"line\">    .border_1px:before&#123;</span><br><span class=\"line\">        transform:scaleY(0.33);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"layout","date":"2019-05-04T08:46:46.000Z","_content":"## 1.文档目的\n总结css布局规则,首先强调一点是布局由“定位”和“盒模型”两部分组成，这是两个不同的概念。\n本文首先阐述“定位”与“盒模型”两者之间的关系，然后分别梳理弹性盒子flex，网格布局grid,文档流和定位方式，浮动，盒子模型，媒体查询等主要技能点，不断总结，熟能生巧。\n参考网址:\n[弹性盒子Flex](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)，[网格布局Grid](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)，[文档流和定位方式](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D)，[盒子模型](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model)\n\n## 2.内容梳理\n### 2.1“定位”与“盒模型”\n“定位”和“盒模型”是两个完全不同的概念，但是两者共同作用决定了元素的最终布局。\n### 2.2关于“定位”的相关问题\n#### 2.2.1Flex布局\n阮一峰老师对[弹性盒子flex布局](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)的讲解很清楚，也很详细，这里不再赘述。下面仅列出通用代码：\n```\n    <!-- flex布局 -->\n    .flex-box {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: flex-start;\n        /*  副轴对齐方式  */\n        align-items: center;\n        /*  多行对齐方式  */\n        align-content: flex-start;\n    }\n    .flex-item {\n        /*  排序  */\n        order: 0;\n        /*   放大比例   */\n        flex-grow: 0;\n        /*   缩小比例   */\n        flex-shrink: 1;\n        /*  项目占据主轴空间 auto    */\n        flex-basis： 350px;\n        /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */\n        align-self: center;\n    }\n```\n#### 2.2.2Grid布局\n网格布局Grid也是非常常用的布局之一，这里主要强调它与弹性盒模型Flex布局的区别：\n**区别一**：弹性盒模型主要用于一维布局（按行或按列），网格布局更适用于二维布局（同时考虑行和列）\n**区别二**：弹性盒模型主要从内容出发（内容多少影响布局），网格布局从布局入手（一旦定义，布局确定）\n下面列出一个常见的基本用法：\n```\n    <div class=\"wrapper\">\n        <div class=\"box1\">One</div>\n        <div class=\"box2\">Two</div>\n        <div class=\"box3\">Three</div>\n        <div class=\"box4\">Four</div>\n        <div class=\"box5\">Five</div>\n    </div>\n    .wrapper { \n        display: grid; \n        grid-template-columns: repeat(3, 1fr); \n        grid-auto-rows: 100px; \n    } \n    .box1 { \n        grid-column-start: 1; \n        grid-column-end: 4; \n        grid-row-start: 1; \n        grid-row-end: 3; \n    } \n    .box2 { \n        grid-column-start: 1; \n        grid-row-start: 3; \n        grid-row-end: 5; \n    }\n```\n#### 2.2.3文档流和定位方式\n该内容是定位的基础，之所以放在第三个讨论的位置，是因为我觉得这个没有什么可讨论的，必须严格掌握。\n如果非要说点什么的话，那就是下面几种定位方式有着循序渐进的关系,z-index扩展到了三维空间。\n```\n    .positioned {\n        position: static;\n        position: absolute;\n        position: fixed;\n        z-index: 1;\n    }\n```\n### 2.3关于“盒模型”的相关问题\n盒子模型除了最基本的属性外，需要强调的是box-sizing对width的影响。当需要明确width便于计算时，建议设置box-sizing为border-box\n```\n    .box {\n        box-sizing: border-box;\n        width: 50px;\n        height: 50px;\n        padding: 10px;\n        margin: 10px;\n    }\n```","source":"_posts/2019-05-04-layout.md","raw":"---\ntitle: layout\ndate: 2019-05-04 16:46:46\ntags: css\n---\n## 1.文档目的\n总结css布局规则,首先强调一点是布局由“定位”和“盒模型”两部分组成，这是两个不同的概念。\n本文首先阐述“定位”与“盒模型”两者之间的关系，然后分别梳理弹性盒子flex，网格布局grid,文档流和定位方式，浮动，盒子模型，媒体查询等主要技能点，不断总结，熟能生巧。\n参考网址:\n[弹性盒子Flex](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)，[网格布局Grid](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)，[文档流和定位方式](https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D)，[盒子模型](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model)\n\n## 2.内容梳理\n### 2.1“定位”与“盒模型”\n“定位”和“盒模型”是两个完全不同的概念，但是两者共同作用决定了元素的最终布局。\n### 2.2关于“定位”的相关问题\n#### 2.2.1Flex布局\n阮一峰老师对[弹性盒子flex布局](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)的讲解很清楚，也很详细，这里不再赘述。下面仅列出通用代码：\n```\n    <!-- flex布局 -->\n    .flex-box {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: flex-start;\n        /*  副轴对齐方式  */\n        align-items: center;\n        /*  多行对齐方式  */\n        align-content: flex-start;\n    }\n    .flex-item {\n        /*  排序  */\n        order: 0;\n        /*   放大比例   */\n        flex-grow: 0;\n        /*   缩小比例   */\n        flex-shrink: 1;\n        /*  项目占据主轴空间 auto    */\n        flex-basis： 350px;\n        /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */\n        align-self: center;\n    }\n```\n#### 2.2.2Grid布局\n网格布局Grid也是非常常用的布局之一，这里主要强调它与弹性盒模型Flex布局的区别：\n**区别一**：弹性盒模型主要用于一维布局（按行或按列），网格布局更适用于二维布局（同时考虑行和列）\n**区别二**：弹性盒模型主要从内容出发（内容多少影响布局），网格布局从布局入手（一旦定义，布局确定）\n下面列出一个常见的基本用法：\n```\n    <div class=\"wrapper\">\n        <div class=\"box1\">One</div>\n        <div class=\"box2\">Two</div>\n        <div class=\"box3\">Three</div>\n        <div class=\"box4\">Four</div>\n        <div class=\"box5\">Five</div>\n    </div>\n    .wrapper { \n        display: grid; \n        grid-template-columns: repeat(3, 1fr); \n        grid-auto-rows: 100px; \n    } \n    .box1 { \n        grid-column-start: 1; \n        grid-column-end: 4; \n        grid-row-start: 1; \n        grid-row-end: 3; \n    } \n    .box2 { \n        grid-column-start: 1; \n        grid-row-start: 3; \n        grid-row-end: 5; \n    }\n```\n#### 2.2.3文档流和定位方式\n该内容是定位的基础，之所以放在第三个讨论的位置，是因为我觉得这个没有什么可讨论的，必须严格掌握。\n如果非要说点什么的话，那就是下面几种定位方式有着循序渐进的关系,z-index扩展到了三维空间。\n```\n    .positioned {\n        position: static;\n        position: absolute;\n        position: fixed;\n        z-index: 1;\n    }\n```\n### 2.3关于“盒模型”的相关问题\n盒子模型除了最基本的属性外，需要强调的是box-sizing对width的影响。当需要明确width便于计算时，建议设置box-sizing为border-box\n```\n    .box {\n        box-sizing: border-box;\n        width: 50px;\n        height: 50px;\n        padding: 10px;\n        margin: 10px;\n    }\n```","slug":"layout","published":1,"updated":"2019-07-08T01:25:27.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwq001pxijkph78i7iw","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>总结css布局规则,首先强调一点是布局由“定位”和“盒模型”两部分组成，这是两个不同的概念。<br>本文首先阐述“定位”与“盒模型”两者之间的关系，然后分别梳理弹性盒子flex，网格布局grid,文档流和定位方式，浮动，盒子模型，媒体查询等主要技能点，不断总结，熟能生巧。<br>参考网址:<br><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">弹性盒子Flex</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\" target=\"_blank\" rel=\"noopener\">网格布局Grid</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D\" target=\"_blank\" rel=\"noopener\">文档流和定位方式</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model\" target=\"_blank\" rel=\"noopener\">盒子模型</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><h3 id=\"2-1“定位”与“盒模型”\"><a href=\"#2-1“定位”与“盒模型”\" class=\"headerlink\" title=\"2.1“定位”与“盒模型”\"></a>2.1“定位”与“盒模型”</h3><p>“定位”和“盒模型”是两个完全不同的概念，但是两者共同作用决定了元素的最终布局。</p>\n<h3 id=\"2-2关于“定位”的相关问题\"><a href=\"#2-2关于“定位”的相关问题\" class=\"headerlink\" title=\"2.2关于“定位”的相关问题\"></a>2.2关于“定位”的相关问题</h3><h4 id=\"2-2-1Flex布局\"><a href=\"#2-2-1Flex布局\" class=\"headerlink\" title=\"2.2.1Flex布局\"></a>2.2.1Flex布局</h4><p>阮一峰老师对<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">弹性盒子flex布局</a>的讲解很清楚，也很详细，这里不再赘述。下面仅列出通用代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- flex布局 --&gt;</span><br><span class=\"line\">.flex-box &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: row;</span><br><span class=\"line\">    flex-wrap: nowrap;</span><br><span class=\"line\">    justify-content: flex-start;</span><br><span class=\"line\">    /*  副轴对齐方式  */</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">    /*  多行对齐方式  */</span><br><span class=\"line\">    align-content: flex-start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.flex-item &#123;</span><br><span class=\"line\">    /*  排序  */</span><br><span class=\"line\">    order: 0;</span><br><span class=\"line\">    /*   放大比例   */</span><br><span class=\"line\">    flex-grow: 0;</span><br><span class=\"line\">    /*   缩小比例   */</span><br><span class=\"line\">    flex-shrink: 1;</span><br><span class=\"line\">    /*  项目占据主轴空间 auto    */</span><br><span class=\"line\">    flex-basis： 350px;</span><br><span class=\"line\">    /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-2Grid布局\"><a href=\"#2-2-2Grid布局\" class=\"headerlink\" title=\"2.2.2Grid布局\"></a>2.2.2Grid布局</h4><p>网格布局Grid也是非常常用的布局之一，这里主要强调它与弹性盒模型Flex布局的区别：<br><strong>区别一</strong>：弹性盒模型主要用于一维布局（按行或按列），网格布局更适用于二维布局（同时考虑行和列）<br><strong>区别二</strong>：弹性盒模型主要从内容出发（内容多少影响布局），网格布局从布局入手（一旦定义，布局确定）<br>下面列出一个常见的基本用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box1&quot;&gt;One&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box2&quot;&gt;Two&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box3&quot;&gt;Three&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box4&quot;&gt;Four&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box5&quot;&gt;Five&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123; </span><br><span class=\"line\">    display: grid; </span><br><span class=\"line\">    grid-template-columns: repeat(3, 1fr); </span><br><span class=\"line\">    grid-auto-rows: 100px; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">.box1 &#123; </span><br><span class=\"line\">    grid-column-start: 1; </span><br><span class=\"line\">    grid-column-end: 4; </span><br><span class=\"line\">    grid-row-start: 1; </span><br><span class=\"line\">    grid-row-end: 3; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">.box2 &#123; </span><br><span class=\"line\">    grid-column-start: 1; </span><br><span class=\"line\">    grid-row-start: 3; </span><br><span class=\"line\">    grid-row-end: 5; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-3文档流和定位方式\"><a href=\"#2-2-3文档流和定位方式\" class=\"headerlink\" title=\"2.2.3文档流和定位方式\"></a>2.2.3文档流和定位方式</h4><p>该内容是定位的基础，之所以放在第三个讨论的位置，是因为我觉得这个没有什么可讨论的，必须严格掌握。<br>如果非要说点什么的话，那就是下面几种定位方式有着循序渐进的关系,z-index扩展到了三维空间。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.positioned &#123;</span><br><span class=\"line\">    position: static;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    position: fixed;</span><br><span class=\"line\">    z-index: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3关于“盒模型”的相关问题\"><a href=\"#2-3关于“盒模型”的相关问题\" class=\"headerlink\" title=\"2.3关于“盒模型”的相关问题\"></a>2.3关于“盒模型”的相关问题</h3><p>盒子模型除了最基本的属性外，需要强调的是box-sizing对width的影响。当需要明确width便于计算时，建议设置box-sizing为border-box<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    width: 50px;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">    padding: 10px;</span><br><span class=\"line\">    margin: 10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>总结css布局规则,首先强调一点是布局由“定位”和“盒模型”两部分组成，这是两个不同的概念。<br>本文首先阐述“定位”与“盒模型”两者之间的关系，然后分别梳理弹性盒子flex，网格布局grid,文档流和定位方式，浮动，盒子模型，媒体查询等主要技能点，不断总结，熟能生巧。<br>参考网址:<br><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">弹性盒子Flex</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\" target=\"_blank\" rel=\"noopener\">网格布局Grid</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D\" target=\"_blank\" rel=\"noopener\">文档流和定位方式</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model\" target=\"_blank\" rel=\"noopener\">盒子模型</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><h3 id=\"2-1“定位”与“盒模型”\"><a href=\"#2-1“定位”与“盒模型”\" class=\"headerlink\" title=\"2.1“定位”与“盒模型”\"></a>2.1“定位”与“盒模型”</h3><p>“定位”和“盒模型”是两个完全不同的概念，但是两者共同作用决定了元素的最终布局。</p>\n<h3 id=\"2-2关于“定位”的相关问题\"><a href=\"#2-2关于“定位”的相关问题\" class=\"headerlink\" title=\"2.2关于“定位”的相关问题\"></a>2.2关于“定位”的相关问题</h3><h4 id=\"2-2-1Flex布局\"><a href=\"#2-2-1Flex布局\" class=\"headerlink\" title=\"2.2.1Flex布局\"></a>2.2.1Flex布局</h4><p>阮一峰老师对<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"noopener\">弹性盒子flex布局</a>的讲解很清楚，也很详细，这里不再赘述。下面仅列出通用代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- flex布局 --&gt;</span><br><span class=\"line\">.flex-box &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: row;</span><br><span class=\"line\">    flex-wrap: nowrap;</span><br><span class=\"line\">    justify-content: flex-start;</span><br><span class=\"line\">    /*  副轴对齐方式  */</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">    /*  多行对齐方式  */</span><br><span class=\"line\">    align-content: flex-start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.flex-item &#123;</span><br><span class=\"line\">    /*  排序  */</span><br><span class=\"line\">    order: 0;</span><br><span class=\"line\">    /*   放大比例   */</span><br><span class=\"line\">    flex-grow: 0;</span><br><span class=\"line\">    /*   缩小比例   */</span><br><span class=\"line\">    flex-shrink: 1;</span><br><span class=\"line\">    /*  项目占据主轴空间 auto    */</span><br><span class=\"line\">    flex-basis： 350px;</span><br><span class=\"line\">    /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-2Grid布局\"><a href=\"#2-2-2Grid布局\" class=\"headerlink\" title=\"2.2.2Grid布局\"></a>2.2.2Grid布局</h4><p>网格布局Grid也是非常常用的布局之一，这里主要强调它与弹性盒模型Flex布局的区别：<br><strong>区别一</strong>：弹性盒模型主要用于一维布局（按行或按列），网格布局更适用于二维布局（同时考虑行和列）<br><strong>区别二</strong>：弹性盒模型主要从内容出发（内容多少影响布局），网格布局从布局入手（一旦定义，布局确定）<br>下面列出一个常见的基本用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box1&quot;&gt;One&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box2&quot;&gt;Two&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box3&quot;&gt;Three&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box4&quot;&gt;Four&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box5&quot;&gt;Five&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wrapper &#123; </span><br><span class=\"line\">    display: grid; </span><br><span class=\"line\">    grid-template-columns: repeat(3, 1fr); </span><br><span class=\"line\">    grid-auto-rows: 100px; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">.box1 &#123; </span><br><span class=\"line\">    grid-column-start: 1; </span><br><span class=\"line\">    grid-column-end: 4; </span><br><span class=\"line\">    grid-row-start: 1; </span><br><span class=\"line\">    grid-row-end: 3; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">.box2 &#123; </span><br><span class=\"line\">    grid-column-start: 1; </span><br><span class=\"line\">    grid-row-start: 3; </span><br><span class=\"line\">    grid-row-end: 5; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-3文档流和定位方式\"><a href=\"#2-2-3文档流和定位方式\" class=\"headerlink\" title=\"2.2.3文档流和定位方式\"></a>2.2.3文档流和定位方式</h4><p>该内容是定位的基础，之所以放在第三个讨论的位置，是因为我觉得这个没有什么可讨论的，必须严格掌握。<br>如果非要说点什么的话，那就是下面几种定位方式有着循序渐进的关系,z-index扩展到了三维空间。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.positioned &#123;</span><br><span class=\"line\">    position: static;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    position: fixed;</span><br><span class=\"line\">    z-index: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3关于“盒模型”的相关问题\"><a href=\"#2-3关于“盒模型”的相关问题\" class=\"headerlink\" title=\"2.3关于“盒模型”的相关问题\"></a>2.3关于“盒模型”的相关问题</h3><p>盒子模型除了最基本的属性外，需要强调的是box-sizing对width的影响。当需要明确width便于计算时，建议设置box-sizing为border-box<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box &#123;</span><br><span class=\"line\">    box-sizing: border-box;</span><br><span class=\"line\">    width: 50px;</span><br><span class=\"line\">    height: 50px;</span><br><span class=\"line\">    padding: 10px;</span><br><span class=\"line\">    margin: 10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"模块化","date":"2019-06-11T14:36:22.000Z","_content":"## 1.文档目的\n清楚了解模块化在js中的发展和技术更新，有利于对前端技术体系的整体把控。\n参考文档：[阮一峰：模块化编程](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)，[ES6模块标准化](http://es6.ruanyifeng.com/#docs/module)\n\n## 2.要点梳理\n问：什么是模块化？\n答：模块就是实现特定功能的一组方法(webpack将一切资源都视为模块）\n\n问：es5中如何模拟模块化？\n答：CommonJS(简称CMD)和AMD,cmd是同步方式，适用于服务器环境，AMD是异步模块定义，两者均采用require()语句加载模块\n\n问：ES6中如何支持模块化？\n答：export和import是专门为模块化而生的，区别于cmd和amd的运行时，export和import方案则选择了静态化，在编译时就能发现问题。\n","source":"_posts/2019-06-11-module.md","raw":"---\ntitle: 模块化\ndate: 2019-06-11 22:36:22\ntags: JS\n---\n## 1.文档目的\n清楚了解模块化在js中的发展和技术更新，有利于对前端技术体系的整体把控。\n参考文档：[阮一峰：模块化编程](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)，[ES6模块标准化](http://es6.ruanyifeng.com/#docs/module)\n\n## 2.要点梳理\n问：什么是模块化？\n答：模块就是实现特定功能的一组方法(webpack将一切资源都视为模块）\n\n问：es5中如何模拟模块化？\n答：CommonJS(简称CMD)和AMD,cmd是同步方式，适用于服务器环境，AMD是异步模块定义，两者均采用require()语句加载模块\n\n问：ES6中如何支持模块化？\n答：export和import是专门为模块化而生的，区别于cmd和amd的运行时，export和import方案则选择了静态化，在编译时就能发现问题。\n","slug":"module","published":1,"updated":"2019-07-08T01:25:27.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwr001rxijkivz3athd","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>清楚了解模块化在js中的发展和技术更新，有利于对前端技术体系的整体把控。<br>参考文档：<a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"noopener\">阮一峰：模块化编程</a>，<a href=\"http://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"noopener\">ES6模块标准化</a></p>\n<h2 id=\"2-要点梳理\"><a href=\"#2-要点梳理\" class=\"headerlink\" title=\"2.要点梳理\"></a>2.要点梳理</h2><p>问：什么是模块化？<br>答：模块就是实现特定功能的一组方法(webpack将一切资源都视为模块）</p>\n<p>问：es5中如何模拟模块化？<br>答：CommonJS(简称CMD)和AMD,cmd是同步方式，适用于服务器环境，AMD是异步模块定义，两者均采用require()语句加载模块</p>\n<p>问：ES6中如何支持模块化？<br>答：export和import是专门为模块化而生的，区别于cmd和amd的运行时，export和import方案则选择了静态化，在编译时就能发现问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>清楚了解模块化在js中的发展和技术更新，有利于对前端技术体系的整体把控。<br>参考文档：<a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"noopener\">阮一峰：模块化编程</a>，<a href=\"http://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"noopener\">ES6模块标准化</a></p>\n<h2 id=\"2-要点梳理\"><a href=\"#2-要点梳理\" class=\"headerlink\" title=\"2.要点梳理\"></a>2.要点梳理</h2><p>问：什么是模块化？<br>答：模块就是实现特定功能的一组方法(webpack将一切资源都视为模块）</p>\n<p>问：es5中如何模拟模块化？<br>答：CommonJS(简称CMD)和AMD,cmd是同步方式，适用于服务器环境，AMD是异步模块定义，两者均采用require()语句加载模块</p>\n<p>问：ES6中如何支持模块化？<br>答：export和import是专门为模块化而生的，区别于cmd和amd的运行时，export和import方案则选择了静态化，在编译时就能发现问题。</p>\n"},{"title":"像素级还原设计稿","date":"2019-05-27T05:24:47.000Z","_content":"## 1.文档目的\n精准清晰的理论基础有助于培养技术自信。\n参考网址:[像素理论详解](http://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&mid=2650589824&idx=1&sn=8e665900ff5ad912707e215a0bfedc3f&chksm=8891daa4bfe653b2891aab2bcfa4b51129a65ee0ade08a65545043feaea6813291320063b8d4&mpshare=1&scene=23&srcid=0602q4MMmCCe6pPUE1XNnYhH#rd),[rem](https://github.com/amfe/lib-flexible)\n\n## 2.内容梳理\n###2.1 核心概念解读:\n**英寸:**屏幕对角线的长度,1英寸=2.54厘米\n**分辨率:**表示对象在垂直和水平上像素(物理像素)点数的乘积(注:清晰度还与尺寸有关)\n**PPI:**表示每英寸包括的像素(物理像素)数,反映了清晰度\n**设备独立像素:**为保证新老设备显示效果基本一致,新设备在增大物理像素的同时,并不增加\"设备独立像素\",故1设备独立像素等于若干(@2x,@3x)物理像素.ReactNative开发中样式单位(dp)就是设备独立像素(ios尺寸单位pt,android尺寸单位dp同理),而UI设计的原型图一般是基于iphone6的物理像素,为了适配所有机型，我们在写样式时需要把物理像素转换为设备独立像素.浏览器开发者工具显示的移动端设备像素就是设备独立像素.web端开发中,当页面缩放比例为100%时,一个css像素就等于一个设备独立像素.\n**设备像素比(dpr):**物理像素和设备独立像素的比值\n**视口:**布局视口(css依赖的视口),视觉视口(通过屏幕可以看到的区域),理想视口(当页面缩放比例为100%时,理想视口=视觉视口,CSS像素=设备独立像素)\n**安全区域:**为圆角,刘海和小黑条设计的解决方案\n\n###2.2 H5适配手机主要有两个维度：\n（1）适配不同像素密度(1像素对应多少物理像素,比如3倍屏@3x, 即1px对应9个物理像素[3x3])\n（2）适配不同大小屏幕\n问题一：图片如何在3倍屏和2倍屏上显示不失真？\n答：1个图片像素对应1个物理像素，图片就不会失真[精准匹配需要借助媒体查询等手段]，简单粗暴的适配方案，就是针对所有屏幕，都只提供最高清图片,还有img标签的srcset等高级属性的应用。\n问题二：如何适配不同大小屏幕？\n答：原则是确保页面布局的度量与屏幕大小保持一定比例。例如通常设计稿是750像素，我们需要按比例还原（x / 750，eg: 75 / 750 = 10% ）。\n实践中不能直接用百分比，因为它总是需要一个参照量，而且边框不支持百分比等问题。\nrem:依赖根元素font-size属性的计算值\nvw/vh: 1vw= 1%屏幕宽度 完美方案。\n问题三：如何方便将px转换为vw?\n答：[postcss-px-to-viewport插件](https://www.npmjs.com/package/postcss-px-to-viewport)\n","source":"_posts/2019-05-27-px.md","raw":"---\ntitle: 像素级还原设计稿\ndate: 2019-05-27 13:24:47\ntags: css\n---\n## 1.文档目的\n精准清晰的理论基础有助于培养技术自信。\n参考网址:[像素理论详解](http://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&mid=2650589824&idx=1&sn=8e665900ff5ad912707e215a0bfedc3f&chksm=8891daa4bfe653b2891aab2bcfa4b51129a65ee0ade08a65545043feaea6813291320063b8d4&mpshare=1&scene=23&srcid=0602q4MMmCCe6pPUE1XNnYhH#rd),[rem](https://github.com/amfe/lib-flexible)\n\n## 2.内容梳理\n###2.1 核心概念解读:\n**英寸:**屏幕对角线的长度,1英寸=2.54厘米\n**分辨率:**表示对象在垂直和水平上像素(物理像素)点数的乘积(注:清晰度还与尺寸有关)\n**PPI:**表示每英寸包括的像素(物理像素)数,反映了清晰度\n**设备独立像素:**为保证新老设备显示效果基本一致,新设备在增大物理像素的同时,并不增加\"设备独立像素\",故1设备独立像素等于若干(@2x,@3x)物理像素.ReactNative开发中样式单位(dp)就是设备独立像素(ios尺寸单位pt,android尺寸单位dp同理),而UI设计的原型图一般是基于iphone6的物理像素,为了适配所有机型，我们在写样式时需要把物理像素转换为设备独立像素.浏览器开发者工具显示的移动端设备像素就是设备独立像素.web端开发中,当页面缩放比例为100%时,一个css像素就等于一个设备独立像素.\n**设备像素比(dpr):**物理像素和设备独立像素的比值\n**视口:**布局视口(css依赖的视口),视觉视口(通过屏幕可以看到的区域),理想视口(当页面缩放比例为100%时,理想视口=视觉视口,CSS像素=设备独立像素)\n**安全区域:**为圆角,刘海和小黑条设计的解决方案\n\n###2.2 H5适配手机主要有两个维度：\n（1）适配不同像素密度(1像素对应多少物理像素,比如3倍屏@3x, 即1px对应9个物理像素[3x3])\n（2）适配不同大小屏幕\n问题一：图片如何在3倍屏和2倍屏上显示不失真？\n答：1个图片像素对应1个物理像素，图片就不会失真[精准匹配需要借助媒体查询等手段]，简单粗暴的适配方案，就是针对所有屏幕，都只提供最高清图片,还有img标签的srcset等高级属性的应用。\n问题二：如何适配不同大小屏幕？\n答：原则是确保页面布局的度量与屏幕大小保持一定比例。例如通常设计稿是750像素，我们需要按比例还原（x / 750，eg: 75 / 750 = 10% ）。\n实践中不能直接用百分比，因为它总是需要一个参照量，而且边框不支持百分比等问题。\nrem:依赖根元素font-size属性的计算值\nvw/vh: 1vw= 1%屏幕宽度 完美方案。\n问题三：如何方便将px转换为vw?\n答：[postcss-px-to-viewport插件](https://www.npmjs.com/package/postcss-px-to-viewport)\n","slug":"px","published":1,"updated":"2019-07-08T01:25:27.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezws001txijk3i5zvbi1","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>精准清晰的理论基础有助于培养技术自信。<br>参考网址:<a href=\"http://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650589824&amp;idx=1&amp;sn=8e665900ff5ad912707e215a0bfedc3f&amp;chksm=8891daa4bfe653b2891aab2bcfa4b51129a65ee0ade08a65545043feaea6813291320063b8d4&amp;mpshare=1&amp;scene=23&amp;srcid=0602q4MMmCCe6pPUE1XNnYhH#rd\" target=\"_blank\" rel=\"noopener\">像素理论详解</a>,<a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"noopener\">rem</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>###2.1 核心概念解读:<br><strong>英寸:</strong>屏幕对角线的长度,1英寸=2.54厘米<br><strong>分辨率:</strong>表示对象在垂直和水平上像素(物理像素)点数的乘积(注:清晰度还与尺寸有关)<br><strong>PPI:</strong>表示每英寸包括的像素(物理像素)数,反映了清晰度<br><strong>设备独立像素:</strong>为保证新老设备显示效果基本一致,新设备在增大物理像素的同时,并不增加”设备独立像素”,故1设备独立像素等于若干(@2x,@3x)物理像素.ReactNative开发中样式单位(dp)就是设备独立像素(ios尺寸单位pt,android尺寸单位dp同理),而UI设计的原型图一般是基于iphone6的物理像素,为了适配所有机型，我们在写样式时需要把物理像素转换为设备独立像素.浏览器开发者工具显示的移动端设备像素就是设备独立像素.web端开发中,当页面缩放比例为100%时,一个css像素就等于一个设备独立像素.<br><strong>设备像素比(dpr):</strong>物理像素和设备独立像素的比值<br><strong>视口:</strong>布局视口(css依赖的视口),视觉视口(通过屏幕可以看到的区域),理想视口(当页面缩放比例为100%时,理想视口=视觉视口,CSS像素=设备独立像素)<br><strong>安全区域:</strong>为圆角,刘海和小黑条设计的解决方案</p>\n<p>###2.2 H5适配手机主要有两个维度：<br>（1）适配不同像素密度(1像素对应多少物理像素,比如3倍屏@3x, 即1px对应9个物理像素[3x3])<br>（2）适配不同大小屏幕<br>问题一：图片如何在3倍屏和2倍屏上显示不失真？<br>答：1个图片像素对应1个物理像素，图片就不会失真[精准匹配需要借助媒体查询等手段]，简单粗暴的适配方案，就是针对所有屏幕，都只提供最高清图片,还有img标签的srcset等高级属性的应用。<br>问题二：如何适配不同大小屏幕？<br>答：原则是确保页面布局的度量与屏幕大小保持一定比例。例如通常设计稿是750像素，我们需要按比例还原（x / 750，eg: 75 / 750 = 10% ）。<br>实践中不能直接用百分比，因为它总是需要一个参照量，而且边框不支持百分比等问题。<br>rem:依赖根元素font-size属性的计算值<br>vw/vh: 1vw= 1%屏幕宽度 完美方案。<br>问题三：如何方便将px转换为vw?<br>答：<a href=\"https://www.npmjs.com/package/postcss-px-to-viewport\" target=\"_blank\" rel=\"noopener\">postcss-px-to-viewport插件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>精准清晰的理论基础有助于培养技术自信。<br>参考网址:<a href=\"http://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650589824&amp;idx=1&amp;sn=8e665900ff5ad912707e215a0bfedc3f&amp;chksm=8891daa4bfe653b2891aab2bcfa4b51129a65ee0ade08a65545043feaea6813291320063b8d4&amp;mpshare=1&amp;scene=23&amp;srcid=0602q4MMmCCe6pPUE1XNnYhH#rd\" target=\"_blank\" rel=\"noopener\">像素理论详解</a>,<a href=\"https://github.com/amfe/lib-flexible\" target=\"_blank\" rel=\"noopener\">rem</a></p>\n<h2 id=\"2-内容梳理\"><a href=\"#2-内容梳理\" class=\"headerlink\" title=\"2.内容梳理\"></a>2.内容梳理</h2><p>###2.1 核心概念解读:<br><strong>英寸:</strong>屏幕对角线的长度,1英寸=2.54厘米<br><strong>分辨率:</strong>表示对象在垂直和水平上像素(物理像素)点数的乘积(注:清晰度还与尺寸有关)<br><strong>PPI:</strong>表示每英寸包括的像素(物理像素)数,反映了清晰度<br><strong>设备独立像素:</strong>为保证新老设备显示效果基本一致,新设备在增大物理像素的同时,并不增加”设备独立像素”,故1设备独立像素等于若干(@2x,@3x)物理像素.ReactNative开发中样式单位(dp)就是设备独立像素(ios尺寸单位pt,android尺寸单位dp同理),而UI设计的原型图一般是基于iphone6的物理像素,为了适配所有机型，我们在写样式时需要把物理像素转换为设备独立像素.浏览器开发者工具显示的移动端设备像素就是设备独立像素.web端开发中,当页面缩放比例为100%时,一个css像素就等于一个设备独立像素.<br><strong>设备像素比(dpr):</strong>物理像素和设备独立像素的比值<br><strong>视口:</strong>布局视口(css依赖的视口),视觉视口(通过屏幕可以看到的区域),理想视口(当页面缩放比例为100%时,理想视口=视觉视口,CSS像素=设备独立像素)<br><strong>安全区域:</strong>为圆角,刘海和小黑条设计的解决方案</p>\n<p>###2.2 H5适配手机主要有两个维度：<br>（1）适配不同像素密度(1像素对应多少物理像素,比如3倍屏@3x, 即1px对应9个物理像素[3x3])<br>（2）适配不同大小屏幕<br>问题一：图片如何在3倍屏和2倍屏上显示不失真？<br>答：1个图片像素对应1个物理像素，图片就不会失真[精准匹配需要借助媒体查询等手段]，简单粗暴的适配方案，就是针对所有屏幕，都只提供最高清图片,还有img标签的srcset等高级属性的应用。<br>问题二：如何适配不同大小屏幕？<br>答：原则是确保页面布局的度量与屏幕大小保持一定比例。例如通常设计稿是750像素，我们需要按比例还原（x / 750，eg: 75 / 750 = 10% ）。<br>实践中不能直接用百分比，因为它总是需要一个参照量，而且边框不支持百分比等问题。<br>rem:依赖根元素font-size属性的计算值<br>vw/vh: 1vw= 1%屏幕宽度 完美方案。<br>问题三：如何方便将px转换为vw?<br>答：<a href=\"https://www.npmjs.com/package/postcss-px-to-viewport\" target=\"_blank\" rel=\"noopener\">postcss-px-to-viewport插件</a></p>\n"},{"title":"js模拟class","date":"2019-06-12T05:33:13.000Z","_content":"## 1.文档目的\n类：数据及其行为的封装，可视为一种“类型”\n对象：对象是类的实例。js中一切皆对象，没有类的概念，但可以通过对象来模拟类\n实例：相对“类”来说，对象的另一种称谓，故常说“对象实例”，其实指同一事物\n构造函数：类的一个特殊方法，用于在创建对象时初始化实例[通常会初始化实例属性]\n参考网址: [JS面向对象编程](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html),[传统JS模拟类定义](http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html),[ES6关于类定义](http://es6.ruanyifeng.com/#docs/class)\n\n## 2.要点梳理\n2.1传统js中推荐使用极简主义法来模拟类\n```\n   // 父类\n　　var Animal = {\n　　　　createNew: function(){\n　　　　　　var animal = {};\n　　　　　　animal.sleep = function(){ alert(\"睡懒觉\"); };\n　　　　　　return animal;\n　　　　}\n　　};\n  // 子类继承父类\n　var Cat = {\n       // 共享属性\n       voice : \"汪汪汪\",\n　　　　createNew: function(){\n　　　　　　var cat = Animal.createNew();\n          // 实例属性\n　　　　　　cat.name = \"大毛\";\n          // 继承的方法重写\n          cat.sleep = function() { alert(\"子类不想睡懒觉\"); }\n          // 私有属性\n          var sound = \"喵喵喵\";\n          // 获取私有属性\n　　　　　　cat.makeSound = function(){ alert(\"私有属性:\" + sound); };\n          // 修改共享属性\n          cat.changeVoice = function(x){Cat.voice = x;}\n          // 获取共享属性\n          cat.getVoice = function(){ return Cat.voice }\n　　　　　　return cat;\n　　　　}\n　　};\n  // 实例化对象\n  var cat1 = Cat.createNew();\n  // 继承的方法重写\n　cat1.sleep();\n  // 私有属性只能通过内部方法调用\n  cat1.makeSound()\n  // 如果有一个实例对象，修改了共享的数据，另一个实例对象也会受到影响。\n  cat2.changeVoice(\"哈哈哈\");\n  cat1.getVoice() // 哈哈哈\n  console.log(Cat.voice) // 哈哈哈\n```\n2.2ES6风格类的定义\n```\n<!-- 父类 -->\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  <!-- 静态方法 -->\n  static hello() {\n    console.log('hello world');\n  }\n  <!-- 实例方法 -->\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n<!-- 子类 -->\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y);\n    this.color = color;\n  }\n}\n<!-- 实例化 -->\nvar obj = new ColorPoint();\nobj.toString()\nColorPoint.hello()\n```\n2.3实例练习\n```\n<html>\n  <head>\n    <title>test</title>\n  </head>\n  <body>\n    <div>我是本来的内容</div>\n    <div id=\"target\"></div>\n    <script>\n      // 定义类\n      var RenderContent = {\n        createContent: function(){\n          var renderContent = {}\n          // 动态生成dom\n          renderContent.init = function(el){\n            el.innerHTML = \"<p>我只是插入的dom</p>\"\n          }\n          // 异步callback\n          renderContent.waitTime = function(n, callback){\n            console.log('您传入的时间数值是:' + n)\n            console.log('已进入计时状态,请等候...')\n            setTimeout(function(){\n              callback(2 * n)\n            }, 2 * n * 1000)\n          }\n          return renderContent\n        }\n      }\n      // 实例化对象\n      var render1 = RenderContent.createContent()\n      // 调用方法生成dom\n      render1.init(document.getElementById('target'))\n      // 调用异步方法:callback\n      // 传入等待时间n,返回等待时间的二倍\n      render1.waitTime(2, function(m){\n        console.log('我等待了2n的时间:' + m)\n      })\n    </script>\n  </body>\n</html>\n```\n","source":"_posts/2019-06-12-class.md","raw":"---\ntitle: js模拟class\ndate: 2019-06-12 13:33:13\ntags: JS\n---\n## 1.文档目的\n类：数据及其行为的封装，可视为一种“类型”\n对象：对象是类的实例。js中一切皆对象，没有类的概念，但可以通过对象来模拟类\n实例：相对“类”来说，对象的另一种称谓，故常说“对象实例”，其实指同一事物\n构造函数：类的一个特殊方法，用于在创建对象时初始化实例[通常会初始化实例属性]\n参考网址: [JS面向对象编程](http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html),[传统JS模拟类定义](http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html),[ES6关于类定义](http://es6.ruanyifeng.com/#docs/class)\n\n## 2.要点梳理\n2.1传统js中推荐使用极简主义法来模拟类\n```\n   // 父类\n　　var Animal = {\n　　　　createNew: function(){\n　　　　　　var animal = {};\n　　　　　　animal.sleep = function(){ alert(\"睡懒觉\"); };\n　　　　　　return animal;\n　　　　}\n　　};\n  // 子类继承父类\n　var Cat = {\n       // 共享属性\n       voice : \"汪汪汪\",\n　　　　createNew: function(){\n　　　　　　var cat = Animal.createNew();\n          // 实例属性\n　　　　　　cat.name = \"大毛\";\n          // 继承的方法重写\n          cat.sleep = function() { alert(\"子类不想睡懒觉\"); }\n          // 私有属性\n          var sound = \"喵喵喵\";\n          // 获取私有属性\n　　　　　　cat.makeSound = function(){ alert(\"私有属性:\" + sound); };\n          // 修改共享属性\n          cat.changeVoice = function(x){Cat.voice = x;}\n          // 获取共享属性\n          cat.getVoice = function(){ return Cat.voice }\n　　　　　　return cat;\n　　　　}\n　　};\n  // 实例化对象\n  var cat1 = Cat.createNew();\n  // 继承的方法重写\n　cat1.sleep();\n  // 私有属性只能通过内部方法调用\n  cat1.makeSound()\n  // 如果有一个实例对象，修改了共享的数据，另一个实例对象也会受到影响。\n  cat2.changeVoice(\"哈哈哈\");\n  cat1.getVoice() // 哈哈哈\n  console.log(Cat.voice) // 哈哈哈\n```\n2.2ES6风格类的定义\n```\n<!-- 父类 -->\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  <!-- 静态方法 -->\n  static hello() {\n    console.log('hello world');\n  }\n  <!-- 实例方法 -->\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n<!-- 子类 -->\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y);\n    this.color = color;\n  }\n}\n<!-- 实例化 -->\nvar obj = new ColorPoint();\nobj.toString()\nColorPoint.hello()\n```\n2.3实例练习\n```\n<html>\n  <head>\n    <title>test</title>\n  </head>\n  <body>\n    <div>我是本来的内容</div>\n    <div id=\"target\"></div>\n    <script>\n      // 定义类\n      var RenderContent = {\n        createContent: function(){\n          var renderContent = {}\n          // 动态生成dom\n          renderContent.init = function(el){\n            el.innerHTML = \"<p>我只是插入的dom</p>\"\n          }\n          // 异步callback\n          renderContent.waitTime = function(n, callback){\n            console.log('您传入的时间数值是:' + n)\n            console.log('已进入计时状态,请等候...')\n            setTimeout(function(){\n              callback(2 * n)\n            }, 2 * n * 1000)\n          }\n          return renderContent\n        }\n      }\n      // 实例化对象\n      var render1 = RenderContent.createContent()\n      // 调用方法生成dom\n      render1.init(document.getElementById('target'))\n      // 调用异步方法:callback\n      // 传入等待时间n,返回等待时间的二倍\n      render1.waitTime(2, function(m){\n        console.log('我等待了2n的时间:' + m)\n      })\n    </script>\n  </body>\n</html>\n```\n","slug":"class","published":1,"updated":"2019-07-08T01:25:27.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwt001vxijk9qw8euqt","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>类：数据及其行为的封装，可视为一种“类型”<br>对象：对象是类的实例。js中一切皆对象，没有类的概念，但可以通过对象来模拟类<br>实例：相对“类”来说，对象的另一种称谓，故常说“对象实例”，其实指同一事物<br>构造函数：类的一个特殊方法，用于在创建对象时初始化实例[通常会初始化实例属性]<br>参考网址: <a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html\" target=\"_blank\" rel=\"noopener\">JS面向对象编程</a>,<a href=\"http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html\" target=\"_blank\" rel=\"noopener\">传统JS模拟类定义</a>,<a href=\"http://es6.ruanyifeng.com/#docs/class\" target=\"_blank\" rel=\"noopener\">ES6关于类定义</a></p>\n<h2 id=\"2-要点梳理\"><a href=\"#2-要点梳理\" class=\"headerlink\" title=\"2.要点梳理\"></a>2.要点梳理</h2><p>2.1传统js中推荐使用极简主义法来模拟类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 父类</span><br><span class=\"line\">　　var Animal = &#123;</span><br><span class=\"line\">　　　　createNew: function()&#123;</span><br><span class=\"line\">　　　　　　var animal = &#123;&#125;;</span><br><span class=\"line\">　　　　　　animal.sleep = function()&#123; alert(&quot;睡懒觉&quot;); &#125;;</span><br><span class=\"line\">　　　　　　return animal;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">// 子类继承父类</span><br><span class=\"line\">　var Cat = &#123;</span><br><span class=\"line\">     // 共享属性</span><br><span class=\"line\">     voice : &quot;汪汪汪&quot;,</span><br><span class=\"line\">　　　　createNew: function()&#123;</span><br><span class=\"line\">　　　　　　var cat = Animal.createNew();</span><br><span class=\"line\">        // 实例属性</span><br><span class=\"line\">　　　　　　cat.name = &quot;大毛&quot;;</span><br><span class=\"line\">        // 继承的方法重写</span><br><span class=\"line\">        cat.sleep = function() &#123; alert(&quot;子类不想睡懒觉&quot;); &#125;</span><br><span class=\"line\">        // 私有属性</span><br><span class=\"line\">        var sound = &quot;喵喵喵&quot;;</span><br><span class=\"line\">        // 获取私有属性</span><br><span class=\"line\">　　　　　　cat.makeSound = function()&#123; alert(&quot;私有属性:&quot; + sound); &#125;;</span><br><span class=\"line\">        // 修改共享属性</span><br><span class=\"line\">        cat.changeVoice = function(x)&#123;Cat.voice = x;&#125;</span><br><span class=\"line\">        // 获取共享属性</span><br><span class=\"line\">        cat.getVoice = function()&#123; return Cat.voice &#125;</span><br><span class=\"line\">　　　　　　return cat;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">// 实例化对象</span><br><span class=\"line\">var cat1 = Cat.createNew();</span><br><span class=\"line\">// 继承的方法重写</span><br><span class=\"line\">　cat1.sleep();</span><br><span class=\"line\">// 私有属性只能通过内部方法调用</span><br><span class=\"line\">cat1.makeSound()</span><br><span class=\"line\">// 如果有一个实例对象，修改了共享的数据，另一个实例对象也会受到影响。</span><br><span class=\"line\">cat2.changeVoice(&quot;哈哈哈&quot;);</span><br><span class=\"line\">cat1.getVoice() // 哈哈哈</span><br><span class=\"line\">console.log(Cat.voice) // 哈哈哈</span><br></pre></td></tr></table></figure></p>\n<p>2.2ES6风格类的定义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 父类 --&gt;</span><br><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x, y) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;!-- 静态方法 --&gt;</span><br><span class=\"line\">  static hello() &#123;</span><br><span class=\"line\">    console.log(&apos;hello world&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;!-- 实例方法 --&gt;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 子类 --&gt;</span><br><span class=\"line\">class ColorPoint extends Point &#123;</span><br><span class=\"line\">  constructor(x, y, color) &#123;</span><br><span class=\"line\">    super(x, y);</span><br><span class=\"line\">    this.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 实例化 --&gt;</span><br><span class=\"line\">var obj = new ColorPoint();</span><br><span class=\"line\">obj.toString()</span><br><span class=\"line\">ColorPoint.hello()</span><br></pre></td></tr></table></figure></p>\n<p>2.3实例练习<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;test&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;我是本来的内容&lt;/div&gt;</span><br><span class=\"line\">    &lt;div id=&quot;target&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      // 定义类</span><br><span class=\"line\">      var RenderContent = &#123;</span><br><span class=\"line\">        createContent: function()&#123;</span><br><span class=\"line\">          var renderContent = &#123;&#125;</span><br><span class=\"line\">          // 动态生成dom</span><br><span class=\"line\">          renderContent.init = function(el)&#123;</span><br><span class=\"line\">            el.innerHTML = &quot;&lt;p&gt;我只是插入的dom&lt;/p&gt;&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          // 异步callback</span><br><span class=\"line\">          renderContent.waitTime = function(n, callback)&#123;</span><br><span class=\"line\">            console.log(&apos;您传入的时间数值是:&apos; + n)</span><br><span class=\"line\">            console.log(&apos;已进入计时状态,请等候...&apos;)</span><br><span class=\"line\">            setTimeout(function()&#123;</span><br><span class=\"line\">              callback(2 * n)</span><br><span class=\"line\">            &#125;, 2 * n * 1000)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return renderContent</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 实例化对象</span><br><span class=\"line\">      var render1 = RenderContent.createContent()</span><br><span class=\"line\">      // 调用方法生成dom</span><br><span class=\"line\">      render1.init(document.getElementById(&apos;target&apos;))</span><br><span class=\"line\">      // 调用异步方法:callback</span><br><span class=\"line\">      // 传入等待时间n,返回等待时间的二倍</span><br><span class=\"line\">      render1.waitTime(2, function(m)&#123;</span><br><span class=\"line\">        console.log(&apos;我等待了2n的时间:&apos; + m)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>类：数据及其行为的封装，可视为一种“类型”<br>对象：对象是类的实例。js中一切皆对象，没有类的概念，但可以通过对象来模拟类<br>实例：相对“类”来说，对象的另一种称谓，故常说“对象实例”，其实指同一事物<br>构造函数：类的一个特殊方法，用于在创建对象时初始化实例[通常会初始化实例属性]<br>参考网址: <a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html\" target=\"_blank\" rel=\"noopener\">JS面向对象编程</a>,<a href=\"http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html\" target=\"_blank\" rel=\"noopener\">传统JS模拟类定义</a>,<a href=\"http://es6.ruanyifeng.com/#docs/class\" target=\"_blank\" rel=\"noopener\">ES6关于类定义</a></p>\n<h2 id=\"2-要点梳理\"><a href=\"#2-要点梳理\" class=\"headerlink\" title=\"2.要点梳理\"></a>2.要点梳理</h2><p>2.1传统js中推荐使用极简主义法来模拟类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 父类</span><br><span class=\"line\">　　var Animal = &#123;</span><br><span class=\"line\">　　　　createNew: function()&#123;</span><br><span class=\"line\">　　　　　　var animal = &#123;&#125;;</span><br><span class=\"line\">　　　　　　animal.sleep = function()&#123; alert(&quot;睡懒觉&quot;); &#125;;</span><br><span class=\"line\">　　　　　　return animal;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">// 子类继承父类</span><br><span class=\"line\">　var Cat = &#123;</span><br><span class=\"line\">     // 共享属性</span><br><span class=\"line\">     voice : &quot;汪汪汪&quot;,</span><br><span class=\"line\">　　　　createNew: function()&#123;</span><br><span class=\"line\">　　　　　　var cat = Animal.createNew();</span><br><span class=\"line\">        // 实例属性</span><br><span class=\"line\">　　　　　　cat.name = &quot;大毛&quot;;</span><br><span class=\"line\">        // 继承的方法重写</span><br><span class=\"line\">        cat.sleep = function() &#123; alert(&quot;子类不想睡懒觉&quot;); &#125;</span><br><span class=\"line\">        // 私有属性</span><br><span class=\"line\">        var sound = &quot;喵喵喵&quot;;</span><br><span class=\"line\">        // 获取私有属性</span><br><span class=\"line\">　　　　　　cat.makeSound = function()&#123; alert(&quot;私有属性:&quot; + sound); &#125;;</span><br><span class=\"line\">        // 修改共享属性</span><br><span class=\"line\">        cat.changeVoice = function(x)&#123;Cat.voice = x;&#125;</span><br><span class=\"line\">        // 获取共享属性</span><br><span class=\"line\">        cat.getVoice = function()&#123; return Cat.voice &#125;</span><br><span class=\"line\">　　　　　　return cat;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;;</span><br><span class=\"line\">// 实例化对象</span><br><span class=\"line\">var cat1 = Cat.createNew();</span><br><span class=\"line\">// 继承的方法重写</span><br><span class=\"line\">　cat1.sleep();</span><br><span class=\"line\">// 私有属性只能通过内部方法调用</span><br><span class=\"line\">cat1.makeSound()</span><br><span class=\"line\">// 如果有一个实例对象，修改了共享的数据，另一个实例对象也会受到影响。</span><br><span class=\"line\">cat2.changeVoice(&quot;哈哈哈&quot;);</span><br><span class=\"line\">cat1.getVoice() // 哈哈哈</span><br><span class=\"line\">console.log(Cat.voice) // 哈哈哈</span><br></pre></td></tr></table></figure></p>\n<p>2.2ES6风格类的定义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 父类 --&gt;</span><br><span class=\"line\">class Point &#123;</span><br><span class=\"line\">  constructor(x, y) &#123;</span><br><span class=\"line\">    this.x = x;</span><br><span class=\"line\">    this.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;!-- 静态方法 --&gt;</span><br><span class=\"line\">  static hello() &#123;</span><br><span class=\"line\">    console.log(&apos;hello world&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;!-- 实例方法 --&gt;</span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 子类 --&gt;</span><br><span class=\"line\">class ColorPoint extends Point &#123;</span><br><span class=\"line\">  constructor(x, y, color) &#123;</span><br><span class=\"line\">    super(x, y);</span><br><span class=\"line\">    this.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 实例化 --&gt;</span><br><span class=\"line\">var obj = new ColorPoint();</span><br><span class=\"line\">obj.toString()</span><br><span class=\"line\">ColorPoint.hello()</span><br></pre></td></tr></table></figure></p>\n<p>2.3实例练习<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;test&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;我是本来的内容&lt;/div&gt;</span><br><span class=\"line\">    &lt;div id=&quot;target&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      // 定义类</span><br><span class=\"line\">      var RenderContent = &#123;</span><br><span class=\"line\">        createContent: function()&#123;</span><br><span class=\"line\">          var renderContent = &#123;&#125;</span><br><span class=\"line\">          // 动态生成dom</span><br><span class=\"line\">          renderContent.init = function(el)&#123;</span><br><span class=\"line\">            el.innerHTML = &quot;&lt;p&gt;我只是插入的dom&lt;/p&gt;&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          // 异步callback</span><br><span class=\"line\">          renderContent.waitTime = function(n, callback)&#123;</span><br><span class=\"line\">            console.log(&apos;您传入的时间数值是:&apos; + n)</span><br><span class=\"line\">            console.log(&apos;已进入计时状态,请等候...&apos;)</span><br><span class=\"line\">            setTimeout(function()&#123;</span><br><span class=\"line\">              callback(2 * n)</span><br><span class=\"line\">            &#125;, 2 * n * 1000)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return renderContent</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 实例化对象</span><br><span class=\"line\">      var render1 = RenderContent.createContent()</span><br><span class=\"line\">      // 调用方法生成dom</span><br><span class=\"line\">      render1.init(document.getElementById(&apos;target&apos;))</span><br><span class=\"line\">      // 调用异步方法:callback</span><br><span class=\"line\">      // 传入等待时间n,返回等待时间的二倍</span><br><span class=\"line\">      render1.waitTime(2, function(m)&#123;</span><br><span class=\"line\">        console.log(&apos;我等待了2n的时间:&apos; + m)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"RN项目发布至APP Store","date":"2019-06-12T05:14:17.000Z","_content":"## 1.文档目的\n记录RN项目打包生成IOS安装包,并发布至APP Store的过程.\n参考网址:[RN转IOS前期处理](https://www.jianshu.com/p/937daff609eb),[打包开发版](https://blog.csdn.net/hbblzjy/article/details/58592976),[打包发布版本](https://www.jianshu.com/p/a414925906b0)\n\n## 2.过程记录\n打包ios实践：\n2.1 https://www.jianshu.com/p/937daff609eb\n在ios下新建bundle文件夹\n在package.json中配置命令\n```\n\"bundle-ios\":\"react-native bundle --entry-file index.js  --platform ios --dev false --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle\"\n```\n运行： yarn run bundle-ios\n\n将assets 和 index.ios.jsbundle 文件引入到xcode工程\n打开Xcode，在第二个tpa3文件夹上右键单击，add Files to '...'\n[注意选中：Create folder references]\n\n修改Appdelegate中的配置代码如下：\n```\n#if DEBUG\n  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n#else\n  jsCodeLocation = [NSURL URLWithString:[[NSBundle mainBundle] pathForResource:@\"index.ios.jsbundle\" ofType:nil]];\n#endif\n```\nRN项目自带的是debug模式，真机打包需要修改为release模式。下图打开快捷键为command+shit+，\n\n2.2 Certificates(哪台电脑可以发布程序)\n 注意：第一步选择证书类型（Development用于测试，App Store and Ad Hoc用于发布正式版）\n（1）本电脑生成的证书上传IOS\n（2）IOS生成的Certificates用于安装\n 注意：不要忘了双击安装\n2.3 Identifiers（哪个APP可以被发布）\n（1）App IDs / yananJzfp / org.reactjs.native.example.tpa3(修改为 com.yanan.jzfp) / [能用的服务都可以先选上]\n2.4 Devices （哪些设备可以运行真机测试）\n（1）UDID: 可以通过iTunes查看\n2.5 Provisioning Profiles （生成总配置文件）\n 注意：必须选择包含应用程序签名的证书（与第一步的证书相对应）\n（1）Development开发证书（能全选的尽量全选）\n（2）Distribution （要选对应的配置文件）\n 注意：不要忘了双击安装[用于打包环境的改变]\n2.6 打包过程\n（1）Xcode中确保有团队账号（Xcode-----》Preferences----->Accounts）\n（2）配置Build Settings中Code Signing Identity和Development Team\n 注意：这里设置的要根据打包类型再General中设置对应的Signing(关注 Provisioning Profile项)，dev版本可以待生成之后再选择\n（3）左上角“运行”按钮右边的运行环境不能是模拟器，才能点击(Product ----> Archive)\n","source":"_posts/2019-06-12-ios.md","raw":"---\ntitle: RN项目发布至APP Store\ndate: 2019-06-12 13:14:17\ntags: React\n---\n## 1.文档目的\n记录RN项目打包生成IOS安装包,并发布至APP Store的过程.\n参考网址:[RN转IOS前期处理](https://www.jianshu.com/p/937daff609eb),[打包开发版](https://blog.csdn.net/hbblzjy/article/details/58592976),[打包发布版本](https://www.jianshu.com/p/a414925906b0)\n\n## 2.过程记录\n打包ios实践：\n2.1 https://www.jianshu.com/p/937daff609eb\n在ios下新建bundle文件夹\n在package.json中配置命令\n```\n\"bundle-ios\":\"react-native bundle --entry-file index.js  --platform ios --dev false --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle\"\n```\n运行： yarn run bundle-ios\n\n将assets 和 index.ios.jsbundle 文件引入到xcode工程\n打开Xcode，在第二个tpa3文件夹上右键单击，add Files to '...'\n[注意选中：Create folder references]\n\n修改Appdelegate中的配置代码如下：\n```\n#if DEBUG\n  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n#else\n  jsCodeLocation = [NSURL URLWithString:[[NSBundle mainBundle] pathForResource:@\"index.ios.jsbundle\" ofType:nil]];\n#endif\n```\nRN项目自带的是debug模式，真机打包需要修改为release模式。下图打开快捷键为command+shit+，\n\n2.2 Certificates(哪台电脑可以发布程序)\n 注意：第一步选择证书类型（Development用于测试，App Store and Ad Hoc用于发布正式版）\n（1）本电脑生成的证书上传IOS\n（2）IOS生成的Certificates用于安装\n 注意：不要忘了双击安装\n2.3 Identifiers（哪个APP可以被发布）\n（1）App IDs / yananJzfp / org.reactjs.native.example.tpa3(修改为 com.yanan.jzfp) / [能用的服务都可以先选上]\n2.4 Devices （哪些设备可以运行真机测试）\n（1）UDID: 可以通过iTunes查看\n2.5 Provisioning Profiles （生成总配置文件）\n 注意：必须选择包含应用程序签名的证书（与第一步的证书相对应）\n（1）Development开发证书（能全选的尽量全选）\n（2）Distribution （要选对应的配置文件）\n 注意：不要忘了双击安装[用于打包环境的改变]\n2.6 打包过程\n（1）Xcode中确保有团队账号（Xcode-----》Preferences----->Accounts）\n（2）配置Build Settings中Code Signing Identity和Development Team\n 注意：这里设置的要根据打包类型再General中设置对应的Signing(关注 Provisioning Profile项)，dev版本可以待生成之后再选择\n（3）左上角“运行”按钮右边的运行环境不能是模拟器，才能点击(Product ----> Archive)\n","slug":"ios","published":1,"updated":"2019-07-08T01:25:27.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwu001xxijkxtrzf53i","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>记录RN项目打包生成IOS安装包,并发布至APP Store的过程.<br>参考网址:<a href=\"https://www.jianshu.com/p/937daff609eb\" target=\"_blank\" rel=\"noopener\">RN转IOS前期处理</a>,<a href=\"https://blog.csdn.net/hbblzjy/article/details/58592976\" target=\"_blank\" rel=\"noopener\">打包开发版</a>,<a href=\"https://www.jianshu.com/p/a414925906b0\" target=\"_blank\" rel=\"noopener\">打包发布版本</a></p>\n<h2 id=\"2-过程记录\"><a href=\"#2-过程记录\" class=\"headerlink\" title=\"2.过程记录\"></a>2.过程记录</h2><p>打包ios实践：<br>2.1 <a href=\"https://www.jianshu.com/p/937daff609eb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/937daff609eb</a><br>在ios下新建bundle文件夹<br>在package.json中配置命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;bundle-ios&quot;:&quot;react-native bundle --entry-file index.js  --platform ios --dev false --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle&quot;</span><br></pre></td></tr></table></figure></p>\n<p>运行： yarn run bundle-ios</p>\n<p>将assets 和 index.ios.jsbundle 文件引入到xcode工程<br>打开Xcode，在第二个tpa3文件夹上右键单击，add Files to ‘…’<br>[注意选中：Create folder references]</p>\n<p>修改Appdelegate中的配置代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if DEBUG</span><br><span class=\"line\">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil];</span><br><span class=\"line\">#else</span><br><span class=\"line\">  jsCodeLocation = [NSURL URLWithString:[[NSBundle mainBundle] pathForResource:@&quot;index.ios.jsbundle&quot; ofType:nil]];</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n<p>RN项目自带的是debug模式，真机打包需要修改为release模式。下图打开快捷键为command+shit+，</p>\n<p>2.2 Certificates(哪台电脑可以发布程序)<br> 注意：第一步选择证书类型（Development用于测试，App Store and Ad Hoc用于发布正式版）<br>（1）本电脑生成的证书上传IOS<br>（2）IOS生成的Certificates用于安装<br> 注意：不要忘了双击安装<br>2.3 Identifiers（哪个APP可以被发布）<br>（1）App IDs / yananJzfp / org.reactjs.native.example.tpa3(修改为 com.yanan.jzfp) / [能用的服务都可以先选上]<br>2.4 Devices （哪些设备可以运行真机测试）<br>（1）UDID: 可以通过iTunes查看<br>2.5 Provisioning Profiles （生成总配置文件）<br> 注意：必须选择包含应用程序签名的证书（与第一步的证书相对应）<br>（1）Development开发证书（能全选的尽量全选）<br>（2）Distribution （要选对应的配置文件）<br> 注意：不要忘了双击安装[用于打包环境的改变]<br>2.6 打包过程<br>（1）Xcode中确保有团队账号（Xcode—–》Preferences—–&gt;Accounts）<br>（2）配置Build Settings中Code Signing Identity和Development Team<br> 注意：这里设置的要根据打包类型再General中设置对应的Signing(关注 Provisioning Profile项)，dev版本可以待生成之后再选择<br>（3）左上角“运行”按钮右边的运行环境不能是模拟器，才能点击(Product —-&gt; Archive)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>记录RN项目打包生成IOS安装包,并发布至APP Store的过程.<br>参考网址:<a href=\"https://www.jianshu.com/p/937daff609eb\" target=\"_blank\" rel=\"noopener\">RN转IOS前期处理</a>,<a href=\"https://blog.csdn.net/hbblzjy/article/details/58592976\" target=\"_blank\" rel=\"noopener\">打包开发版</a>,<a href=\"https://www.jianshu.com/p/a414925906b0\" target=\"_blank\" rel=\"noopener\">打包发布版本</a></p>\n<h2 id=\"2-过程记录\"><a href=\"#2-过程记录\" class=\"headerlink\" title=\"2.过程记录\"></a>2.过程记录</h2><p>打包ios实践：<br>2.1 <a href=\"https://www.jianshu.com/p/937daff609eb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/937daff609eb</a><br>在ios下新建bundle文件夹<br>在package.json中配置命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;bundle-ios&quot;:&quot;react-native bundle --entry-file index.js  --platform ios --dev false --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle&quot;</span><br></pre></td></tr></table></figure></p>\n<p>运行： yarn run bundle-ios</p>\n<p>将assets 和 index.ios.jsbundle 文件引入到xcode工程<br>打开Xcode，在第二个tpa3文件夹上右键单击，add Files to ‘…’<br>[注意选中：Create folder references]</p>\n<p>修改Appdelegate中的配置代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if DEBUG</span><br><span class=\"line\">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil];</span><br><span class=\"line\">#else</span><br><span class=\"line\">  jsCodeLocation = [NSURL URLWithString:[[NSBundle mainBundle] pathForResource:@&quot;index.ios.jsbundle&quot; ofType:nil]];</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure></p>\n<p>RN项目自带的是debug模式，真机打包需要修改为release模式。下图打开快捷键为command+shit+，</p>\n<p>2.2 Certificates(哪台电脑可以发布程序)<br> 注意：第一步选择证书类型（Development用于测试，App Store and Ad Hoc用于发布正式版）<br>（1）本电脑生成的证书上传IOS<br>（2）IOS生成的Certificates用于安装<br> 注意：不要忘了双击安装<br>2.3 Identifiers（哪个APP可以被发布）<br>（1）App IDs / yananJzfp / org.reactjs.native.example.tpa3(修改为 com.yanan.jzfp) / [能用的服务都可以先选上]<br>2.4 Devices （哪些设备可以运行真机测试）<br>（1）UDID: 可以通过iTunes查看<br>2.5 Provisioning Profiles （生成总配置文件）<br> 注意：必须选择包含应用程序签名的证书（与第一步的证书相对应）<br>（1）Development开发证书（能全选的尽量全选）<br>（2）Distribution （要选对应的配置文件）<br> 注意：不要忘了双击安装[用于打包环境的改变]<br>2.6 打包过程<br>（1）Xcode中确保有团队账号（Xcode—–》Preferences—–&gt;Accounts）<br>（2）配置Build Settings中Code Signing Identity和Development Team<br> 注意：这里设置的要根据打包类型再General中设置对应的Signing(关注 Provisioning Profile项)，dev版本可以待生成之后再选择<br>（3）左上角“运行”按钮右边的运行环境不能是模拟器，才能点击(Product —-&gt; Archive)</p>\n"},{"title":"prototype原型链与构造函数法模拟类","date":"2019-06-15T04:06:28.000Z","_content":"## 1.概念\n原型链：如果在第一个对象上没有找到需要的属性或方法，引擎就会继续在prototype关联的对象上继续查找。\n\n## 2.理论探究\n{% asset_img image001.jpg this is first image %}\n<center>**图（1）**</center>\n1.在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。即：对象具有属性__proto__，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数(简单理解为“父类”)的原型prototype，这也保证了实例能够访问在构造函数原型(简单理解为“父类”)中定义的属性和方法。\n2.方法(Function)这个特殊的对象，除了和其他对象一样有上述_proto_属性之外，还有自己特有的属性——原型属性（prototype），这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法（我们把这个对象叫做原型对象prototype）。原型对象也有一个属性，叫做constructor，这个属性包含了一个指针，指回原构造函数。\n小结：\n对象有属性__proto__,指向该对象的构造函数(简单理解为“父类”)的原型对象prototype。\n方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象(所有实例共享的属性和方法)\n3.模拟类：首先要明确面向对象语言中，对象实例化和继承都是通过“复制”实现的，即各个实例之间没有关联关系。\n但是js中（var a= new Foo()）new[带new的函数调用被称为“构造函数调用”]一个新对象实际发生的却是将新对象a的_proto_属性指向Foo.prototype（同时：a.constructor === Foo === Foo.prototype.constructor）,即各个实例共享了属性和方法，相互之间建立了关联关系。\n4.模拟继承（也叫“原型继承”）：实质是创建两个对象（父子）之间的关联关系，使得一个对象（子）可以通过委托访问另一个对象（父）的属性和函数，核心是apply()方法的应用\n小结：\n对象有属性constructor,指向的是对象关联的函数（Foo父类）[实质上是a.constructor === Foo.prototype.constructor]\nnew实例化的实质：\"构造函数\"会被调用，而绑定在prototype属性上的公共属性和方法会和实例的_proto_属性建立关联关系\n\n实例：构造函数法模拟继承分析\n```\n  // 父类\n    function Animal(species){\n       //实例化对象的过程中会通过new调用该“构造函数”执行，即初始化\n       //即：每个实例都会产生属于自己的species属性\n　　　　this.species = species;\n　　}\n    // 子类:注意将父类需要的属性放前面，方便arguments正确对应\n　　function Cat(species,name){\n        Animal.apply(this, arguments); //通过apply方法将父类绑定到自身环境\n　　　　this.name = name;\n　　}\n  // 公共的不变的属性和方法直接绑定至prototype\n    // 即：prototype不属于构造函数，不会在new是被调用，而会被各个实例所共享\n    Cat.prototype.sound = \"喵喵喵...\";\n    Cat.prototype.eat = function(){console.log('猫爱吃鱼')};\n\n    //new调用实质：cat1.constructor = Cat.prototype.constructor，则产生不同的species实例变量\n    //同时：cat1._proto_ = Cat.prototype,保证了所有实例可以调用共享的绑定在prototype上的属性和方法\n　　var cat1 = new Cat(\"动物\",\"大毛\"); \n    //调用\n    console.log(cat1.species, '---我是继承父类的属性')\n    console.log(cat1.sound, '---我是绑定在子类prototype上的公用属性')\n```\n","source":"_posts/2019-06-15-prototype.md","raw":"---\ntitle: prototype原型链与构造函数法模拟类\ndate: 2019-06-15 12:06:28\ntags: JS\n---\n## 1.概念\n原型链：如果在第一个对象上没有找到需要的属性或方法，引擎就会继续在prototype关联的对象上继续查找。\n\n## 2.理论探究\n{% asset_img image001.jpg this is first image %}\n<center>**图（1）**</center>\n1.在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。即：对象具有属性__proto__，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数(简单理解为“父类”)的原型prototype，这也保证了实例能够访问在构造函数原型(简单理解为“父类”)中定义的属性和方法。\n2.方法(Function)这个特殊的对象，除了和其他对象一样有上述_proto_属性之外，还有自己特有的属性——原型属性（prototype），这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法（我们把这个对象叫做原型对象prototype）。原型对象也有一个属性，叫做constructor，这个属性包含了一个指针，指回原构造函数。\n小结：\n对象有属性__proto__,指向该对象的构造函数(简单理解为“父类”)的原型对象prototype。\n方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象(所有实例共享的属性和方法)\n3.模拟类：首先要明确面向对象语言中，对象实例化和继承都是通过“复制”实现的，即各个实例之间没有关联关系。\n但是js中（var a= new Foo()）new[带new的函数调用被称为“构造函数调用”]一个新对象实际发生的却是将新对象a的_proto_属性指向Foo.prototype（同时：a.constructor === Foo === Foo.prototype.constructor）,即各个实例共享了属性和方法，相互之间建立了关联关系。\n4.模拟继承（也叫“原型继承”）：实质是创建两个对象（父子）之间的关联关系，使得一个对象（子）可以通过委托访问另一个对象（父）的属性和函数，核心是apply()方法的应用\n小结：\n对象有属性constructor,指向的是对象关联的函数（Foo父类）[实质上是a.constructor === Foo.prototype.constructor]\nnew实例化的实质：\"构造函数\"会被调用，而绑定在prototype属性上的公共属性和方法会和实例的_proto_属性建立关联关系\n\n实例：构造函数法模拟继承分析\n```\n  // 父类\n    function Animal(species){\n       //实例化对象的过程中会通过new调用该“构造函数”执行，即初始化\n       //即：每个实例都会产生属于自己的species属性\n　　　　this.species = species;\n　　}\n    // 子类:注意将父类需要的属性放前面，方便arguments正确对应\n　　function Cat(species,name){\n        Animal.apply(this, arguments); //通过apply方法将父类绑定到自身环境\n　　　　this.name = name;\n　　}\n  // 公共的不变的属性和方法直接绑定至prototype\n    // 即：prototype不属于构造函数，不会在new是被调用，而会被各个实例所共享\n    Cat.prototype.sound = \"喵喵喵...\";\n    Cat.prototype.eat = function(){console.log('猫爱吃鱼')};\n\n    //new调用实质：cat1.constructor = Cat.prototype.constructor，则产生不同的species实例变量\n    //同时：cat1._proto_ = Cat.prototype,保证了所有实例可以调用共享的绑定在prototype上的属性和方法\n　　var cat1 = new Cat(\"动物\",\"大毛\"); \n    //调用\n    console.log(cat1.species, '---我是继承父类的属性')\n    console.log(cat1.sound, '---我是绑定在子类prototype上的公用属性')\n```\n","slug":"prototype","published":1,"updated":"2019-07-08T01:25:27.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezww001zxijkx3iv6pt9","content":"<h2 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h2><p>原型链：如果在第一个对象上没有找到需要的属性或方法，引擎就会继续在prototype关联的对象上继续查找。</p>\n<h2 id=\"2-理论探究\"><a href=\"#2-理论探究\" class=\"headerlink\" title=\"2.理论探究\"></a>2.理论探究</h2><img src=\"/2019/06/15/prototype/image001.jpg\" title=\"this is first image\">\n<p><center><strong>图（1）</strong></center><br>1.在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。即：对象具有属性<strong>proto</strong>，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数(简单理解为“父类”)的原型prototype，这也保证了实例能够访问在构造函数原型(简单理解为“父类”)中定义的属性和方法。<br>2.方法(Function)这个特殊的对象，除了和其他对象一样有上述<em>proto</em>属性之外，还有自己特有的属性——原型属性（prototype），这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法（我们把这个对象叫做原型对象prototype）。原型对象也有一个属性，叫做constructor，这个属性包含了一个指针，指回原构造函数。<br>小结：<br>对象有属性<strong>proto</strong>,指向该对象的构造函数(简单理解为“父类”)的原型对象prototype。<br>方法除了有属性<strong>proto</strong>,还有属性prototype，prototype指向该方法的原型对象(所有实例共享的属性和方法)<br>3.模拟类：首先要明确面向对象语言中，对象实例化和继承都是通过“复制”实现的，即各个实例之间没有关联关系。<br>但是js中（var a= new Foo()）new[带new的函数调用被称为“构造函数调用”]一个新对象实际发生的却是将新对象a的<em>proto</em>属性指向Foo.prototype（同时：a.constructor === Foo === Foo.prototype.constructor）,即各个实例共享了属性和方法，相互之间建立了关联关系。<br>4.模拟继承（也叫“原型继承”）：实质是创建两个对象（父子）之间的关联关系，使得一个对象（子）可以通过委托访问另一个对象（父）的属性和函数，核心是apply()方法的应用<br>小结：<br>对象有属性constructor,指向的是对象关联的函数（Foo父类）[实质上是a.constructor === Foo.prototype.constructor]<br>new实例化的实质：”构造函数”会被调用，而绑定在prototype属性上的公共属性和方法会和实例的<em>proto</em>属性建立关联关系</p>\n<p>实例：构造函数法模拟继承分析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父类</span><br><span class=\"line\">  function Animal(species)&#123;</span><br><span class=\"line\">     //实例化对象的过程中会通过new调用该“构造函数”执行，即初始化</span><br><span class=\"line\">     //即：每个实例都会产生属于自己的species属性</span><br><span class=\"line\">　　　　this.species = species;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">  // 子类:注意将父类需要的属性放前面，方便arguments正确对应</span><br><span class=\"line\">　　function Cat(species,name)&#123;</span><br><span class=\"line\">      Animal.apply(this, arguments); //通过apply方法将父类绑定到自身环境</span><br><span class=\"line\">　　　　this.name = name;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">// 公共的不变的属性和方法直接绑定至prototype</span><br><span class=\"line\">  // 即：prototype不属于构造函数，不会在new是被调用，而会被各个实例所共享</span><br><span class=\"line\">  Cat.prototype.sound = &quot;喵喵喵...&quot;;</span><br><span class=\"line\">  Cat.prototype.eat = function()&#123;console.log(&apos;猫爱吃鱼&apos;)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  //new调用实质：cat1.constructor = Cat.prototype.constructor，则产生不同的species实例变量</span><br><span class=\"line\">  //同时：cat1._proto_ = Cat.prototype,保证了所有实例可以调用共享的绑定在prototype上的属性和方法</span><br><span class=\"line\">　　var cat1 = new Cat(&quot;动物&quot;,&quot;大毛&quot;); </span><br><span class=\"line\">  //调用</span><br><span class=\"line\">  console.log(cat1.species, &apos;---我是继承父类的属性&apos;)</span><br><span class=\"line\">  console.log(cat1.sound, &apos;---我是绑定在子类prototype上的公用属性&apos;)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h2><p>原型链：如果在第一个对象上没有找到需要的属性或方法，引擎就会继续在prototype关联的对象上继续查找。</p>\n<h2 id=\"2-理论探究\"><a href=\"#2-理论探究\" class=\"headerlink\" title=\"2.理论探究\"></a>2.理论探究</h2><img src=\"/2019/06/15/prototype/image001.jpg\" title=\"this is first image\">\n<p><center><strong>图（1）</strong></center><br>1.在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。即：对象具有属性<strong>proto</strong>，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数(简单理解为“父类”)的原型prototype，这也保证了实例能够访问在构造函数原型(简单理解为“父类”)中定义的属性和方法。<br>2.方法(Function)这个特殊的对象，除了和其他对象一样有上述<em>proto</em>属性之外，还有自己特有的属性——原型属性（prototype），这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法（我们把这个对象叫做原型对象prototype）。原型对象也有一个属性，叫做constructor，这个属性包含了一个指针，指回原构造函数。<br>小结：<br>对象有属性<strong>proto</strong>,指向该对象的构造函数(简单理解为“父类”)的原型对象prototype。<br>方法除了有属性<strong>proto</strong>,还有属性prototype，prototype指向该方法的原型对象(所有实例共享的属性和方法)<br>3.模拟类：首先要明确面向对象语言中，对象实例化和继承都是通过“复制”实现的，即各个实例之间没有关联关系。<br>但是js中（var a= new Foo()）new[带new的函数调用被称为“构造函数调用”]一个新对象实际发生的却是将新对象a的<em>proto</em>属性指向Foo.prototype（同时：a.constructor === Foo === Foo.prototype.constructor）,即各个实例共享了属性和方法，相互之间建立了关联关系。<br>4.模拟继承（也叫“原型继承”）：实质是创建两个对象（父子）之间的关联关系，使得一个对象（子）可以通过委托访问另一个对象（父）的属性和函数，核心是apply()方法的应用<br>小结：<br>对象有属性constructor,指向的是对象关联的函数（Foo父类）[实质上是a.constructor === Foo.prototype.constructor]<br>new实例化的实质：”构造函数”会被调用，而绑定在prototype属性上的公共属性和方法会和实例的<em>proto</em>属性建立关联关系</p>\n<p>实例：构造函数法模拟继承分析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父类</span><br><span class=\"line\">  function Animal(species)&#123;</span><br><span class=\"line\">     //实例化对象的过程中会通过new调用该“构造函数”执行，即初始化</span><br><span class=\"line\">     //即：每个实例都会产生属于自己的species属性</span><br><span class=\"line\">　　　　this.species = species;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">  // 子类:注意将父类需要的属性放前面，方便arguments正确对应</span><br><span class=\"line\">　　function Cat(species,name)&#123;</span><br><span class=\"line\">      Animal.apply(this, arguments); //通过apply方法将父类绑定到自身环境</span><br><span class=\"line\">　　　　this.name = name;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">// 公共的不变的属性和方法直接绑定至prototype</span><br><span class=\"line\">  // 即：prototype不属于构造函数，不会在new是被调用，而会被各个实例所共享</span><br><span class=\"line\">  Cat.prototype.sound = &quot;喵喵喵...&quot;;</span><br><span class=\"line\">  Cat.prototype.eat = function()&#123;console.log(&apos;猫爱吃鱼&apos;)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  //new调用实质：cat1.constructor = Cat.prototype.constructor，则产生不同的species实例变量</span><br><span class=\"line\">  //同时：cat1._proto_ = Cat.prototype,保证了所有实例可以调用共享的绑定在prototype上的属性和方法</span><br><span class=\"line\">　　var cat1 = new Cat(&quot;动物&quot;,&quot;大毛&quot;); </span><br><span class=\"line\">  //调用</span><br><span class=\"line\">  console.log(cat1.species, &apos;---我是继承父类的属性&apos;)</span><br><span class=\"line\">  console.log(cat1.sound, &apos;---我是绑定在子类prototype上的公用属性&apos;)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"this和function","date":"2019-06-14T08:00:41.000Z","_content":"## 1.文档目的\n通过简单的实例分析this和function深层原理，便于对js加深理解\n参考：[this用法](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)，[this原理](http://www.ruanyifeng.com/blog/2018/06/javascript-this.html),[bind,apply,call动态改变this指向](https://www.cnblogs.com/coco1s/p/4833199.html)\n\n## 2.剖析\n### 2.1this的定义\nthis就是函数运行时所在的环境对象,强调“函数”内部，“运行”环境\n\n### 2.2明确几点前提条件\n（1）首先需要明确的常识undefined是一个类型，也是一个值。而is not defined是报错\n（2）全局变量的声明定义会被提升至顶端，而函数作用域的变量会被提升至函数顶部，js只有函数作用域，没有块作用域，但是let实现了块作用域，且不会对其进行提升。const同理，但其不可修改。function fun(){}和var变量一样，声明定义会被提升。但是fun=function (){}却不会被提升\n（3）函数是在运行时编译[通常就在运行前的几微妙]的,函数未运行就不存在函数内部编译，更不存在内部报错.最外层会直接运行，不妨也将window环境视为一个全局函数体\n（4）不成功的右查询RHS引用会导致抛出ReferenceError异常[非严格模式：不成功的左查询LHS会创建一个全局的变量]。ReferenceError同作用域判别相关，而TypeError则代表作用域判别成够了，但是对结果的操作是非法或不合理的。\n\n### 2.3实例解析\n思考题1：\n```\n//分析该函数行为，必须要等到运行时才有意义\n//当运行时，\nfunction fun(){\n    //对x进行RHS,完全找不到[注：LHS才会重新定义变量并绑定到window上]，即没有定义过x变量本身[注：区别于x的value值]\n    //故报红：Uncaught ReferenceError: x is not defined\n    console.log(x) \n\n    //this.x可以编译为window.x[即window是存在的，其上并没有x,故window.x的value值为‘undefined’(未定义的变量，或变量值为undefined)]\n    console.log(this.x)\n}\nfun() //运行时\n```\n总结：复合变量的value值为undefined是指主变量存在，附变量未定义。而is not defined是指整个变量本身就不存在。\n思考题2：\n```\nvar obj = { //obj的value是个对象的指针地址\n    //obj.foo的value是个function的指针地址\n    //函数内部只有this.bar,由于未在运行时，故this.bar暂不分析\n    foo: function () { console.log(this.bar) },\n    bar: 1 //obj.bar的value是数值1\n};\n\nvar foo = obj.foo; //将obj.foo的value值[function的指针地址]赋值给window.foo的value值，即变量window.foo的value也是地址\nvar bar = 2; //window.bar的value是数值2\n\n//小括号代表执行，即执行obj.foo的value,此时obj.foo的value是function的指针地址，即执行function本身。\n//由于函数是由obj调用,而obj中存在obj.bar的value为1，故执行结果为1\nobj.foo()\n//小括号代表执行，即执行window.foo的value,此时window.foo的value也是function的指针地址，即执行function本身。\n//由于函数是由window调用，而window中存在window.bar的value为2，故执行结果为2\nfoo()\n```\n\n### 2.4显示绑定this\nbind、apply 、 call 三者都是用来改变函数的this对象的指向的\nbind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 ，但两者接受参数的方式不同。\nfunc.bind(this)()\nfunc.call(this, arg1, arg2);\nfunc.apply(this, [arg1, arg2])\n\n### 2.5箭头函数中的this\n箭头函数的this总是指向定义时所在的对象，而不是使用时所在的对象。即this对象的指向是固定的\n```\nfunction foo() {\n  setTimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\nvar id = 21;\n\nfoo.call({ id: 42 });\n// id: 42\n```\n上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。\n","source":"_posts/2019-06-14-this.md","raw":"---\ntitle: this和function\ndate: 2019-06-14 16:00:41\ntags: JS\n---\n## 1.文档目的\n通过简单的实例分析this和function深层原理，便于对js加深理解\n参考：[this用法](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)，[this原理](http://www.ruanyifeng.com/blog/2018/06/javascript-this.html),[bind,apply,call动态改变this指向](https://www.cnblogs.com/coco1s/p/4833199.html)\n\n## 2.剖析\n### 2.1this的定义\nthis就是函数运行时所在的环境对象,强调“函数”内部，“运行”环境\n\n### 2.2明确几点前提条件\n（1）首先需要明确的常识undefined是一个类型，也是一个值。而is not defined是报错\n（2）全局变量的声明定义会被提升至顶端，而函数作用域的变量会被提升至函数顶部，js只有函数作用域，没有块作用域，但是let实现了块作用域，且不会对其进行提升。const同理，但其不可修改。function fun(){}和var变量一样，声明定义会被提升。但是fun=function (){}却不会被提升\n（3）函数是在运行时编译[通常就在运行前的几微妙]的,函数未运行就不存在函数内部编译，更不存在内部报错.最外层会直接运行，不妨也将window环境视为一个全局函数体\n（4）不成功的右查询RHS引用会导致抛出ReferenceError异常[非严格模式：不成功的左查询LHS会创建一个全局的变量]。ReferenceError同作用域判别相关，而TypeError则代表作用域判别成够了，但是对结果的操作是非法或不合理的。\n\n### 2.3实例解析\n思考题1：\n```\n//分析该函数行为，必须要等到运行时才有意义\n//当运行时，\nfunction fun(){\n    //对x进行RHS,完全找不到[注：LHS才会重新定义变量并绑定到window上]，即没有定义过x变量本身[注：区别于x的value值]\n    //故报红：Uncaught ReferenceError: x is not defined\n    console.log(x) \n\n    //this.x可以编译为window.x[即window是存在的，其上并没有x,故window.x的value值为‘undefined’(未定义的变量，或变量值为undefined)]\n    console.log(this.x)\n}\nfun() //运行时\n```\n总结：复合变量的value值为undefined是指主变量存在，附变量未定义。而is not defined是指整个变量本身就不存在。\n思考题2：\n```\nvar obj = { //obj的value是个对象的指针地址\n    //obj.foo的value是个function的指针地址\n    //函数内部只有this.bar,由于未在运行时，故this.bar暂不分析\n    foo: function () { console.log(this.bar) },\n    bar: 1 //obj.bar的value是数值1\n};\n\nvar foo = obj.foo; //将obj.foo的value值[function的指针地址]赋值给window.foo的value值，即变量window.foo的value也是地址\nvar bar = 2; //window.bar的value是数值2\n\n//小括号代表执行，即执行obj.foo的value,此时obj.foo的value是function的指针地址，即执行function本身。\n//由于函数是由obj调用,而obj中存在obj.bar的value为1，故执行结果为1\nobj.foo()\n//小括号代表执行，即执行window.foo的value,此时window.foo的value也是function的指针地址，即执行function本身。\n//由于函数是由window调用，而window中存在window.bar的value为2，故执行结果为2\nfoo()\n```\n\n### 2.4显示绑定this\nbind、apply 、 call 三者都是用来改变函数的this对象的指向的\nbind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 ，但两者接受参数的方式不同。\nfunc.bind(this)()\nfunc.call(this, arg1, arg2);\nfunc.apply(this, [arg1, arg2])\n\n### 2.5箭头函数中的this\n箭头函数的this总是指向定义时所在的对象，而不是使用时所在的对象。即this对象的指向是固定的\n```\nfunction foo() {\n  setTimeout(() => {\n    console.log('id:', this.id);\n  }, 100);\n}\n\nvar id = 21;\n\nfoo.call({ id: 42 });\n// id: 42\n```\n上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。\n","slug":"this","published":1,"updated":"2019-07-08T01:25:27.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwx0021xijk6r6mi2wy","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>通过简单的实例分析this和function深层原理，便于对js加深理解<br>参考：<a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">this用法</a>，<a href=\"http://www.ruanyifeng.com/blog/2018/06/javascript-this.html\" target=\"_blank\" rel=\"noopener\">this原理</a>,<a href=\"https://www.cnblogs.com/coco1s/p/4833199.html\" target=\"_blank\" rel=\"noopener\">bind,apply,call动态改变this指向</a></p>\n<h2 id=\"2-剖析\"><a href=\"#2-剖析\" class=\"headerlink\" title=\"2.剖析\"></a>2.剖析</h2><h3 id=\"2-1this的定义\"><a href=\"#2-1this的定义\" class=\"headerlink\" title=\"2.1this的定义\"></a>2.1this的定义</h3><p>this就是函数运行时所在的环境对象,强调“函数”内部，“运行”环境</p>\n<h3 id=\"2-2明确几点前提条件\"><a href=\"#2-2明确几点前提条件\" class=\"headerlink\" title=\"2.2明确几点前提条件\"></a>2.2明确几点前提条件</h3><p>（1）首先需要明确的常识undefined是一个类型，也是一个值。而is not defined是报错<br>（2）全局变量的声明定义会被提升至顶端，而函数作用域的变量会被提升至函数顶部，js只有函数作用域，没有块作用域，但是let实现了块作用域，且不会对其进行提升。const同理，但其不可修改。function fun(){}和var变量一样，声明定义会被提升。但是fun=function (){}却不会被提升<br>（3）函数是在运行时编译[通常就在运行前的几微妙]的,函数未运行就不存在函数内部编译，更不存在内部报错.最外层会直接运行，不妨也将window环境视为一个全局函数体<br>（4）不成功的右查询RHS引用会导致抛出ReferenceError异常[非严格模式：不成功的左查询LHS会创建一个全局的变量]。ReferenceError同作用域判别相关，而TypeError则代表作用域判别成够了，但是对结果的操作是非法或不合理的。</p>\n<h3 id=\"2-3实例解析\"><a href=\"#2-3实例解析\" class=\"headerlink\" title=\"2.3实例解析\"></a>2.3实例解析</h3><p>思考题1：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//分析该函数行为，必须要等到运行时才有意义</span><br><span class=\"line\">//当运行时，</span><br><span class=\"line\">function fun()&#123;</span><br><span class=\"line\">    //对x进行RHS,完全找不到[注：LHS才会重新定义变量并绑定到window上]，即没有定义过x变量本身[注：区别于x的value值]</span><br><span class=\"line\">    //故报红：Uncaught ReferenceError: x is not defined</span><br><span class=\"line\">    console.log(x) </span><br><span class=\"line\"></span><br><span class=\"line\">    //this.x可以编译为window.x[即window是存在的，其上并没有x,故window.x的value值为‘undefined’(未定义的变量，或变量值为undefined)]</span><br><span class=\"line\">    console.log(this.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun() //运行时</span><br></pre></td></tr></table></figure></p>\n<p>总结：复合变量的value值为undefined是指主变量存在，附变量未定义。而is not defined是指整个变量本身就不存在。<br>思考题2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; //obj的value是个对象的指针地址</span><br><span class=\"line\">    //obj.foo的value是个function的指针地址</span><br><span class=\"line\">    //函数内部只有this.bar,由于未在运行时，故this.bar暂不分析</span><br><span class=\"line\">    foo: function () &#123; console.log(this.bar) &#125;,</span><br><span class=\"line\">    bar: 1 //obj.bar的value是数值1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = obj.foo; //将obj.foo的value值[function的指针地址]赋值给window.foo的value值，即变量window.foo的value也是地址</span><br><span class=\"line\">var bar = 2; //window.bar的value是数值2</span><br><span class=\"line\"></span><br><span class=\"line\">//小括号代表执行，即执行obj.foo的value,此时obj.foo的value是function的指针地址，即执行function本身。</span><br><span class=\"line\">//由于函数是由obj调用,而obj中存在obj.bar的value为1，故执行结果为1</span><br><span class=\"line\">obj.foo()</span><br><span class=\"line\">//小括号代表执行，即执行window.foo的value,此时window.foo的value也是function的指针地址，即执行function本身。</span><br><span class=\"line\">//由于函数是由window调用，而window中存在window.bar的value为2，故执行结果为2</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-4显示绑定this\"><a href=\"#2-4显示绑定this\" class=\"headerlink\" title=\"2.4显示绑定this\"></a>2.4显示绑定this</h3><p>bind、apply 、 call 三者都是用来改变函数的this对象的指向的<br>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 ，但两者接受参数的方式不同。<br>func.bind(this)()<br>func.call(this, arg1, arg2);<br>func.apply(this, [arg1, arg2])</p>\n<h3 id=\"2-5箭头函数中的this\"><a href=\"#2-5箭头函数中的this\" class=\"headerlink\" title=\"2.5箭头函数中的this\"></a>2.5箭头函数中的this</h3><p>箭头函数的this总是指向定义时所在的对象，而不是使用时所在的对象。即this对象的指向是固定的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;id:&apos;, this.id);</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var id = 21;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(&#123; id: 42 &#125;);</span><br><span class=\"line\">// id: 42</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>通过简单的实例分析this和function深层原理，便于对js加深理解<br>参考：<a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">this用法</a>，<a href=\"http://www.ruanyifeng.com/blog/2018/06/javascript-this.html\" target=\"_blank\" rel=\"noopener\">this原理</a>,<a href=\"https://www.cnblogs.com/coco1s/p/4833199.html\" target=\"_blank\" rel=\"noopener\">bind,apply,call动态改变this指向</a></p>\n<h2 id=\"2-剖析\"><a href=\"#2-剖析\" class=\"headerlink\" title=\"2.剖析\"></a>2.剖析</h2><h3 id=\"2-1this的定义\"><a href=\"#2-1this的定义\" class=\"headerlink\" title=\"2.1this的定义\"></a>2.1this的定义</h3><p>this就是函数运行时所在的环境对象,强调“函数”内部，“运行”环境</p>\n<h3 id=\"2-2明确几点前提条件\"><a href=\"#2-2明确几点前提条件\" class=\"headerlink\" title=\"2.2明确几点前提条件\"></a>2.2明确几点前提条件</h3><p>（1）首先需要明确的常识undefined是一个类型，也是一个值。而is not defined是报错<br>（2）全局变量的声明定义会被提升至顶端，而函数作用域的变量会被提升至函数顶部，js只有函数作用域，没有块作用域，但是let实现了块作用域，且不会对其进行提升。const同理，但其不可修改。function fun(){}和var变量一样，声明定义会被提升。但是fun=function (){}却不会被提升<br>（3）函数是在运行时编译[通常就在运行前的几微妙]的,函数未运行就不存在函数内部编译，更不存在内部报错.最外层会直接运行，不妨也将window环境视为一个全局函数体<br>（4）不成功的右查询RHS引用会导致抛出ReferenceError异常[非严格模式：不成功的左查询LHS会创建一个全局的变量]。ReferenceError同作用域判别相关，而TypeError则代表作用域判别成够了，但是对结果的操作是非法或不合理的。</p>\n<h3 id=\"2-3实例解析\"><a href=\"#2-3实例解析\" class=\"headerlink\" title=\"2.3实例解析\"></a>2.3实例解析</h3><p>思考题1：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//分析该函数行为，必须要等到运行时才有意义</span><br><span class=\"line\">//当运行时，</span><br><span class=\"line\">function fun()&#123;</span><br><span class=\"line\">    //对x进行RHS,完全找不到[注：LHS才会重新定义变量并绑定到window上]，即没有定义过x变量本身[注：区别于x的value值]</span><br><span class=\"line\">    //故报红：Uncaught ReferenceError: x is not defined</span><br><span class=\"line\">    console.log(x) </span><br><span class=\"line\"></span><br><span class=\"line\">    //this.x可以编译为window.x[即window是存在的，其上并没有x,故window.x的value值为‘undefined’(未定义的变量，或变量值为undefined)]</span><br><span class=\"line\">    console.log(this.x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun() //运行时</span><br></pre></td></tr></table></figure></p>\n<p>总结：复合变量的value值为undefined是指主变量存在，附变量未定义。而is not defined是指整个变量本身就不存在。<br>思考题2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123; //obj的value是个对象的指针地址</span><br><span class=\"line\">    //obj.foo的value是个function的指针地址</span><br><span class=\"line\">    //函数内部只有this.bar,由于未在运行时，故this.bar暂不分析</span><br><span class=\"line\">    foo: function () &#123; console.log(this.bar) &#125;,</span><br><span class=\"line\">    bar: 1 //obj.bar的value是数值1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = obj.foo; //将obj.foo的value值[function的指针地址]赋值给window.foo的value值，即变量window.foo的value也是地址</span><br><span class=\"line\">var bar = 2; //window.bar的value是数值2</span><br><span class=\"line\"></span><br><span class=\"line\">//小括号代表执行，即执行obj.foo的value,此时obj.foo的value是function的指针地址，即执行function本身。</span><br><span class=\"line\">//由于函数是由obj调用,而obj中存在obj.bar的value为1，故执行结果为1</span><br><span class=\"line\">obj.foo()</span><br><span class=\"line\">//小括号代表执行，即执行window.foo的value,此时window.foo的value也是function的指针地址，即执行function本身。</span><br><span class=\"line\">//由于函数是由window调用，而window中存在window.bar的value为2，故执行结果为2</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-4显示绑定this\"><a href=\"#2-4显示绑定this\" class=\"headerlink\" title=\"2.4显示绑定this\"></a>2.4显示绑定this</h3><p>bind、apply 、 call 三者都是用来改变函数的this对象的指向的<br>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 ，但两者接受参数的方式不同。<br>func.bind(this)()<br>func.call(this, arg1, arg2);<br>func.apply(this, [arg1, arg2])</p>\n<h3 id=\"2-5箭头函数中的this\"><a href=\"#2-5箭头函数中的this\" class=\"headerlink\" title=\"2.5箭头函数中的this\"></a>2.5箭头函数中的this</h3><p>箭头函数的this总是指向定义时所在的对象，而不是使用时所在的对象。即this对象的指向是固定的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;id:&apos;, this.id);</span><br><span class=\"line\">  &#125;, 100);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var id = 21;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.call(&#123; id: 42 &#125;);</span><br><span class=\"line\">// id: 42</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。</p>\n"},{"title":"基于React Native的android原生代码实现","date":"2019-06-29T23:55:15.000Z","_content":"## 1.文档目的\nReact Native可以在其基础上直接调用原生代码，本文仅举一个简单的例子，更多内容需要多多实践\n参考网址：[RN中Android原生模块](https://reactnative.cn/docs/native-modules-android/)\n\n## 2.实例实践\n### 2.1原生组件展示\n假设我们希望可以从 RN 调用原生代码实现的一个 Toast 消息{ToastExample.show('Awesome', ToastExample.SHORT);}，代码如下：\n创建android/app/src/main/java/com/{your-app-name}/ToastModule.java\n```\npackage com.{your-app-name};\n\nimport android.widget.Toast;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\nimport java.util.Map;\nimport java.util.HashMap;\n\n// 要求继承ReactContextBaseJavaModule\npublic class ToastModule extends ReactContextBaseJavaModule {\n\n  private static final String DURATION_SHORT_KEY = \"SHORT\";\n  private static final String DURATION_LONG_KEY = \"LONG\";\n\n  public ToastModule(ReactApplicationContext reactContext) {\n    super(reactContext);\n  }\n\n  // ReactContextBaseJavaModule要求派生类实现getName方法,假如该方法返回‘ToastExample’，则RN通过NativeModules.ToastExample访问该模块\n   @Override\n  public String getName() {\n    return \"ToastExample\";\n  }\n\n  // getContants返回一些可以被RN同步访问的预定于的常量\n   @Override\n  public Map<String, Object> getConstants() {\n    final Map<String, Object> constants = new HashMap<>();\n    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);\n    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);\n    return constants;\n  }\n\n  // RN访问java是异步的，只能通过回调或监听，这里返回必须使用@ReactMethod注解\n  @ReactMethod\n  public void show(String message, int duration) {\n    Toast.makeText(getReactApplicationContext(), message, duration).show();\n  }\n}\n```\n 注册模块，创建android/app/src/main/java/com/{your-app-name}/CustomToastPackage.java\n ```\npackage com.{your-app-name};\n\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.ViewManager;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class CustomToastPackage implements ReactPackage {\n\n  @Override\n  public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {\n    return Collections.emptyList();\n  }\n\n  @Override\n  public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {\n    List<NativeModule> modules = new ArrayList<>();\n\n    modules.add(new ToastModule(reactContext));\n\n    return modules;\n  }\n}\n ```\n 这个模块需要在MainApplication.java文件的getPackages方法中暴露给RN,具体路径是android/app/src/main/java/com/your-app-name/MainApplication.java\n ```\n // MainApplication.java\n...\nimport com.your-app-name.CustomToastPackage; // <-- 引入你自己的包\n...\nprotected List<ReactPackage> getPackages() {\n    return Arrays.<ReactPackage>asList(\n            new MainReactPackage(),\n            new CustomToastPackage()); // <-- 添加这一行，类名替换成你的Package类的名字.\n}\n ```\n 在RN端使用的代码,建议将原生模块提供的模块都统一管理\n ```\n import { NativeModules } from \"react-native\";\n \n let {ToastExample} = NativeModules\n\n export {ToastExample};\n ```\n### 2.2回调返回计算值\n回调函数模式提供一个函数来把返回值传回给 JavaScript\n在JAVA端定义函数如下：\n```\nimport com.facebook.react.bridge.Callback;\n\npublic class UIManagerModule extends ReactContextBaseJavaModule {\n\n...\n\n  @ReactMethod\n  public void measureLayout(\n      int tag,\n      int ancestorTag,\n      Callback errorCallback,\n      Callback successCallback) {\n    try {\n      measureLayout(tag, ancestorTag, mMeasureBuffer);\n      float relativeX = PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);\n      float relativeY = PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);\n      float width = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);\n      float height = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);\n      successCallback.invoke(relativeX, relativeY, width, height);\n    } catch (IllegalViewOperationException e) {\n      errorCallback.invoke(e.getMessage());\n    }\n  }\n\n...\n```\n在RN端调用如下：\n```\nUIManager.measureLayout(\n  100,\n  100,\n  msg => {\n    console.log(msg);\n  },\n  (x, y, width, height) => {\n    console.log(x + \":\" + y + \":\" + width + \":\" + height);\n  }\n);\n```\n还有监听模式，Promises模式等更多功能实践，请参考官网...\n","source":"_posts/2019-06-30-native.md","raw":"---\ntitle: 基于React Native的android原生代码实现\ndate: 2019-06-30 07:55:15\ntags: React\n---\n## 1.文档目的\nReact Native可以在其基础上直接调用原生代码，本文仅举一个简单的例子，更多内容需要多多实践\n参考网址：[RN中Android原生模块](https://reactnative.cn/docs/native-modules-android/)\n\n## 2.实例实践\n### 2.1原生组件展示\n假设我们希望可以从 RN 调用原生代码实现的一个 Toast 消息{ToastExample.show('Awesome', ToastExample.SHORT);}，代码如下：\n创建android/app/src/main/java/com/{your-app-name}/ToastModule.java\n```\npackage com.{your-app-name};\n\nimport android.widget.Toast;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\nimport java.util.Map;\nimport java.util.HashMap;\n\n// 要求继承ReactContextBaseJavaModule\npublic class ToastModule extends ReactContextBaseJavaModule {\n\n  private static final String DURATION_SHORT_KEY = \"SHORT\";\n  private static final String DURATION_LONG_KEY = \"LONG\";\n\n  public ToastModule(ReactApplicationContext reactContext) {\n    super(reactContext);\n  }\n\n  // ReactContextBaseJavaModule要求派生类实现getName方法,假如该方法返回‘ToastExample’，则RN通过NativeModules.ToastExample访问该模块\n   @Override\n  public String getName() {\n    return \"ToastExample\";\n  }\n\n  // getContants返回一些可以被RN同步访问的预定于的常量\n   @Override\n  public Map<String, Object> getConstants() {\n    final Map<String, Object> constants = new HashMap<>();\n    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);\n    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);\n    return constants;\n  }\n\n  // RN访问java是异步的，只能通过回调或监听，这里返回必须使用@ReactMethod注解\n  @ReactMethod\n  public void show(String message, int duration) {\n    Toast.makeText(getReactApplicationContext(), message, duration).show();\n  }\n}\n```\n 注册模块，创建android/app/src/main/java/com/{your-app-name}/CustomToastPackage.java\n ```\npackage com.{your-app-name};\n\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.ViewManager;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class CustomToastPackage implements ReactPackage {\n\n  @Override\n  public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {\n    return Collections.emptyList();\n  }\n\n  @Override\n  public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {\n    List<NativeModule> modules = new ArrayList<>();\n\n    modules.add(new ToastModule(reactContext));\n\n    return modules;\n  }\n}\n ```\n 这个模块需要在MainApplication.java文件的getPackages方法中暴露给RN,具体路径是android/app/src/main/java/com/your-app-name/MainApplication.java\n ```\n // MainApplication.java\n...\nimport com.your-app-name.CustomToastPackage; // <-- 引入你自己的包\n...\nprotected List<ReactPackage> getPackages() {\n    return Arrays.<ReactPackage>asList(\n            new MainReactPackage(),\n            new CustomToastPackage()); // <-- 添加这一行，类名替换成你的Package类的名字.\n}\n ```\n 在RN端使用的代码,建议将原生模块提供的模块都统一管理\n ```\n import { NativeModules } from \"react-native\";\n \n let {ToastExample} = NativeModules\n\n export {ToastExample};\n ```\n### 2.2回调返回计算值\n回调函数模式提供一个函数来把返回值传回给 JavaScript\n在JAVA端定义函数如下：\n```\nimport com.facebook.react.bridge.Callback;\n\npublic class UIManagerModule extends ReactContextBaseJavaModule {\n\n...\n\n  @ReactMethod\n  public void measureLayout(\n      int tag,\n      int ancestorTag,\n      Callback errorCallback,\n      Callback successCallback) {\n    try {\n      measureLayout(tag, ancestorTag, mMeasureBuffer);\n      float relativeX = PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);\n      float relativeY = PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);\n      float width = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);\n      float height = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);\n      successCallback.invoke(relativeX, relativeY, width, height);\n    } catch (IllegalViewOperationException e) {\n      errorCallback.invoke(e.getMessage());\n    }\n  }\n\n...\n```\n在RN端调用如下：\n```\nUIManager.measureLayout(\n  100,\n  100,\n  msg => {\n    console.log(msg);\n  },\n  (x, y, width, height) => {\n    console.log(x + \":\" + y + \":\" + width + \":\" + height);\n  }\n);\n```\n还有监听模式，Promises模式等更多功能实践，请参考官网...\n","slug":"native","published":1,"updated":"2019-07-08T01:25:27.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwy0023xijk8j6mdc76","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>React Native可以在其基础上直接调用原生代码，本文仅举一个简单的例子，更多内容需要多多实践<br>参考网址：<a href=\"https://reactnative.cn/docs/native-modules-android/\" target=\"_blank\" rel=\"noopener\">RN中Android原生模块</a></p>\n<h2 id=\"2-实例实践\"><a href=\"#2-实例实践\" class=\"headerlink\" title=\"2.实例实践\"></a>2.实例实践</h2><h3 id=\"2-1原生组件展示\"><a href=\"#2-1原生组件展示\" class=\"headerlink\" title=\"2.1原生组件展示\"></a>2.1原生组件展示</h3><p>假设我们希望可以从 RN 调用原生代码实现的一个 Toast 消息{ToastExample.show(‘Awesome’, ToastExample.SHORT);}，代码如下：<br>创建android/app/src/main/java/com/{your-app-name}/ToastModule.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.&#123;your-app-name&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\">import com.facebook.react.bridge.NativeModule;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactApplicationContext;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactContext;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactContextBaseJavaModule;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactMethod;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">// 要求继承ReactContextBaseJavaModule</span><br><span class=\"line\">public class ToastModule extends ReactContextBaseJavaModule &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static final String DURATION_SHORT_KEY = &quot;SHORT&quot;;</span><br><span class=\"line\">  private static final String DURATION_LONG_KEY = &quot;LONG&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ToastModule(ReactApplicationContext reactContext) &#123;</span><br><span class=\"line\">    super(reactContext);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // ReactContextBaseJavaModule要求派生类实现getName方法,假如该方法返回‘ToastExample’，则RN通过NativeModules.ToastExample访问该模块</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">  public String getName() &#123;</span><br><span class=\"line\">    return &quot;ToastExample&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // getContants返回一些可以被RN同步访问的预定于的常量</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">  public Map&lt;String, Object&gt; getConstants() &#123;</span><br><span class=\"line\">    final Map&lt;String, Object&gt; constants = new HashMap&lt;&gt;();</span><br><span class=\"line\">    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);</span><br><span class=\"line\">    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);</span><br><span class=\"line\">    return constants;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // RN访问java是异步的，只能通过回调或监听，这里返回必须使用@ReactMethod注解</span><br><span class=\"line\">  @ReactMethod</span><br><span class=\"line\">  public void show(String message, int duration) &#123;</span><br><span class=\"line\">    Toast.makeText(getReactApplicationContext(), message, duration).show();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 注册模块，创建android/app/src/main/java/com/{your-app-name}/CustomToastPackage.java<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.&#123;your-app-name&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.facebook.react.ReactPackage;</span><br><span class=\"line\">import com.facebook.react.bridge.NativeModule;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactApplicationContext;</span><br><span class=\"line\">import com.facebook.react.uimanager.ViewManager;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Collections;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CustomToastPackage implements ReactPackage &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</span><br><span class=\"line\">    return Collections.emptyList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123;</span><br><span class=\"line\">    List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    modules.add(new ToastModule(reactContext));</span><br><span class=\"line\"></span><br><span class=\"line\">    return modules;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 这个模块需要在MainApplication.java文件的getPackages方法中暴露给RN,具体路径是android/app/src/main/java/com/your-app-name/MainApplication.java<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // MainApplication.java</span><br><span class=\"line\">...</span><br><span class=\"line\">import com.your-app-name.CustomToastPackage; // &lt;-- 引入你自己的包</span><br><span class=\"line\">...</span><br><span class=\"line\">protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class=\"line\">    return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class=\"line\">            new MainReactPackage(),</span><br><span class=\"line\">            new CustomToastPackage()); // &lt;-- 添加这一行，类名替换成你的Package类的名字.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 在RN端使用的代码,建议将原生模块提供的模块都统一管理<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; NativeModules &#125; from &quot;react-native&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123;ToastExample&#125; = NativeModules</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;ToastExample&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2回调返回计算值\"><a href=\"#2-2回调返回计算值\" class=\"headerlink\" title=\"2.2回调返回计算值\"></a>2.2回调返回计算值</h3><p>回调函数模式提供一个函数来把返回值传回给 JavaScript<br>在JAVA端定义函数如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.facebook.react.bridge.Callback;</span><br><span class=\"line\"></span><br><span class=\"line\">public class UIManagerModule extends ReactContextBaseJavaModule &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">  @ReactMethod</span><br><span class=\"line\">  public void measureLayout(</span><br><span class=\"line\">      int tag,</span><br><span class=\"line\">      int ancestorTag,</span><br><span class=\"line\">      Callback errorCallback,</span><br><span class=\"line\">      Callback successCallback) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      measureLayout(tag, ancestorTag, mMeasureBuffer);</span><br><span class=\"line\">      float relativeX = PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);</span><br><span class=\"line\">      float relativeY = PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);</span><br><span class=\"line\">      float width = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);</span><br><span class=\"line\">      float height = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);</span><br><span class=\"line\">      successCallback.invoke(relativeX, relativeY, width, height);</span><br><span class=\"line\">    &#125; catch (IllegalViewOperationException e) &#123;</span><br><span class=\"line\">      errorCallback.invoke(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>在RN端调用如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIManager.measureLayout(</span><br><span class=\"line\">  100,</span><br><span class=\"line\">  100,</span><br><span class=\"line\">  msg =&gt; &#123;</span><br><span class=\"line\">    console.log(msg);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (x, y, width, height) =&gt; &#123;</span><br><span class=\"line\">    console.log(x + &quot;:&quot; + y + &quot;:&quot; + width + &quot;:&quot; + height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>还有监听模式，Promises模式等更多功能实践，请参考官网…</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>React Native可以在其基础上直接调用原生代码，本文仅举一个简单的例子，更多内容需要多多实践<br>参考网址：<a href=\"https://reactnative.cn/docs/native-modules-android/\" target=\"_blank\" rel=\"noopener\">RN中Android原生模块</a></p>\n<h2 id=\"2-实例实践\"><a href=\"#2-实例实践\" class=\"headerlink\" title=\"2.实例实践\"></a>2.实例实践</h2><h3 id=\"2-1原生组件展示\"><a href=\"#2-1原生组件展示\" class=\"headerlink\" title=\"2.1原生组件展示\"></a>2.1原生组件展示</h3><p>假设我们希望可以从 RN 调用原生代码实现的一个 Toast 消息{ToastExample.show(‘Awesome’, ToastExample.SHORT);}，代码如下：<br>创建android/app/src/main/java/com/{your-app-name}/ToastModule.java<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.&#123;your-app-name&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.widget.Toast;</span><br><span class=\"line\">import com.facebook.react.bridge.NativeModule;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactApplicationContext;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactContext;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactContextBaseJavaModule;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactMethod;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">// 要求继承ReactContextBaseJavaModule</span><br><span class=\"line\">public class ToastModule extends ReactContextBaseJavaModule &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private static final String DURATION_SHORT_KEY = &quot;SHORT&quot;;</span><br><span class=\"line\">  private static final String DURATION_LONG_KEY = &quot;LONG&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  public ToastModule(ReactApplicationContext reactContext) &#123;</span><br><span class=\"line\">    super(reactContext);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // ReactContextBaseJavaModule要求派生类实现getName方法,假如该方法返回‘ToastExample’，则RN通过NativeModules.ToastExample访问该模块</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">  public String getName() &#123;</span><br><span class=\"line\">    return &quot;ToastExample&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // getContants返回一些可以被RN同步访问的预定于的常量</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">  public Map&lt;String, Object&gt; getConstants() &#123;</span><br><span class=\"line\">    final Map&lt;String, Object&gt; constants = new HashMap&lt;&gt;();</span><br><span class=\"line\">    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);</span><br><span class=\"line\">    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);</span><br><span class=\"line\">    return constants;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // RN访问java是异步的，只能通过回调或监听，这里返回必须使用@ReactMethod注解</span><br><span class=\"line\">  @ReactMethod</span><br><span class=\"line\">  public void show(String message, int duration) &#123;</span><br><span class=\"line\">    Toast.makeText(getReactApplicationContext(), message, duration).show();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 注册模块，创建android/app/src/main/java/com/{your-app-name}/CustomToastPackage.java<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.&#123;your-app-name&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.facebook.react.ReactPackage;</span><br><span class=\"line\">import com.facebook.react.bridge.NativeModule;</span><br><span class=\"line\">import com.facebook.react.bridge.ReactApplicationContext;</span><br><span class=\"line\">import com.facebook.react.uimanager.ViewManager;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Collections;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CustomToastPackage implements ReactPackage &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</span><br><span class=\"line\">    return Collections.emptyList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123;</span><br><span class=\"line\">    List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    modules.add(new ToastModule(reactContext));</span><br><span class=\"line\"></span><br><span class=\"line\">    return modules;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 这个模块需要在MainApplication.java文件的getPackages方法中暴露给RN,具体路径是android/app/src/main/java/com/your-app-name/MainApplication.java<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // MainApplication.java</span><br><span class=\"line\">...</span><br><span class=\"line\">import com.your-app-name.CustomToastPackage; // &lt;-- 引入你自己的包</span><br><span class=\"line\">...</span><br><span class=\"line\">protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class=\"line\">    return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class=\"line\">            new MainReactPackage(),</span><br><span class=\"line\">            new CustomToastPackage()); // &lt;-- 添加这一行，类名替换成你的Package类的名字.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 在RN端使用的代码,建议将原生模块提供的模块都统一管理<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; NativeModules &#125; from &quot;react-native&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123;ToastExample&#125; = NativeModules</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;ToastExample&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2回调返回计算值\"><a href=\"#2-2回调返回计算值\" class=\"headerlink\" title=\"2.2回调返回计算值\"></a>2.2回调返回计算值</h3><p>回调函数模式提供一个函数来把返回值传回给 JavaScript<br>在JAVA端定义函数如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.facebook.react.bridge.Callback;</span><br><span class=\"line\"></span><br><span class=\"line\">public class UIManagerModule extends ReactContextBaseJavaModule &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">  @ReactMethod</span><br><span class=\"line\">  public void measureLayout(</span><br><span class=\"line\">      int tag,</span><br><span class=\"line\">      int ancestorTag,</span><br><span class=\"line\">      Callback errorCallback,</span><br><span class=\"line\">      Callback successCallback) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      measureLayout(tag, ancestorTag, mMeasureBuffer);</span><br><span class=\"line\">      float relativeX = PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);</span><br><span class=\"line\">      float relativeY = PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);</span><br><span class=\"line\">      float width = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);</span><br><span class=\"line\">      float height = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);</span><br><span class=\"line\">      successCallback.invoke(relativeX, relativeY, width, height);</span><br><span class=\"line\">    &#125; catch (IllegalViewOperationException e) &#123;</span><br><span class=\"line\">      errorCallback.invoke(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>在RN端调用如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIManager.measureLayout(</span><br><span class=\"line\">  100,</span><br><span class=\"line\">  100,</span><br><span class=\"line\">  msg =&gt; &#123;</span><br><span class=\"line\">    console.log(msg);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  (x, y, width, height) =&gt; &#123;</span><br><span class=\"line\">    console.log(x + &quot;:&quot; + y + &quot;:&quot; + width + &quot;:&quot; + height);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>还有监听模式，Promises模式等更多功能实践，请参考官网…</p>\n"},{"title":"react概述","date":"2019-06-30T00:53:51.000Z","_content":"## 1.文档目的\n仔细阅读了React官方教程，对易疏忽的地方做个笔记，便于知识的整体梳理和消化\n参考网址：[React逐步学习指南](https://zh-hans.reactjs.org/docs/hello-world.html),[React实践教程](https://zh-hans.reactjs.org/tutorial/tutorial.html)\n\n## 2.文档内容\n### 2.1整体认知\nReact 是一个用于构建用户界面的 JavaScript 库，\n以组件为最小单元，\n以JSX为语法基础，\n以单向（自上而下）数据流props维护组件关系\n以私有state控制组件渲染和数据更新\n\n### 2.2安装或引入React\n推荐的工具链方式：[Create React App](https://github.com/facebook/create-react-app)\nscript标记引入：\n```\n <!-- 加载 React。-->\n  <!-- 注意: 部署时，将 \"development.js\" 替换为 \"production.min.js\"。-->\n  <script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\n\n  <!-- 加载我们的 React 组件。-->\n  <script src=\"like_button.js\"></script>\n```\n\n### 2.2组件的实现方式\n组件有函数实现方式和class实现方式两种。\n函数组件基本结构（无受控state）：\n```\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\nclass组件基本结构(可以有受控state)\n```\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {info: null};\n  }\n  render() {\n    return <h1>Hello, {this.props.name}, {this.state.info}</h1>;\n  }\n}\n```\n\n### 2.3JSX语法\n```\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n    // 私有变量且受控\n    this.state = {isShow: null, listData: null};\n    // 私有变量且非受控\n    this.title = null\n  }\n\n  // 函数用表达式形式的箭头函数，保证了this引用的正确，若非如此，则需要在constructor中显示bind(this)\n  _renderNode = () => {\n      // JSX作为表达式当然可以使其等于一个变量\n      const nodeElement = <Text>Hello</Text>\n      return (\n          <View>\n            // JSX中{}中可以是任何表达式，包括变量\n            <Text>问候语：{nodeElement}</Text>\n          </View>\n      )\n  }\n\n  _renderList = () => {\n       let {listData} = this.state\n       return (\n           <View>\n                // JSX中循环结构可直接用map表达式，注意绑定key(尽量不直接用index)\n                {listData.map(item =>(<View key={item.id}>\n                    <Text>{item.name}</Text>\n                </View>))}\n           </View>\n       )\n  }\n\n  render() {\n    // 公有入参属性\n    let {id} = this.props\n    let {isShow, listData} = this.state\n\n    // JSX表达式可以作为函数的返回值(同样可以作为函数入参等任何变量/表达式可以在的地方)\n    return (\n        <View>\n            // JSX中{}中可以是任何表达式，包括函数\n            {this._renderNode()}\n            // 一个表达式，只能是一个整体，不能是多个语句\n            // 选择结构，在JSX中直接用三元表达式\n            {isShow ? <View><Text>是</Text></View> : <View><Text>否</Text></View>}\n            // 布尔结构，在JSX中直接用&&运算符\n            {listData && this._renderList()}\n        </View>\n    )\n  }\n}\n```\n总结：\n1.JSX本身是个表达式，可以赋值给一个变量。即变量可以在的位置JSX表达式也可以。\n2.JSX中可以用{}处理表达式(表达式的形式可以是一个变量，&&运算符，三元运算符，map()运算符，函数等形式)\n\n### 2.4其他要点\n1.props和state都可以由生命周期控制\n2.受控表单统一用value和onChange处理,多个表单项共用处理函数需要提供不同name值，且受控表单便于在处理函数中做校验\n```\n<input type=\"text\" name=\"name1\" value={this.state.value1} onChange={this.handleChange} />\n<input type=\"text\" name=\"name2\" value={this.state.value2} onChange={this.handleChange} />\n\n handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n```\n若是同一个对象不同属性的绑定，则只需要设置setState中不同属性即可\n```\n<input type=\"text\" value={this.state.oInfo.value1} onChange={value1 => this.setState({oInfo: {...oInfo, value1}})} />\n<input type=\"text\" value={this.state.oInfo.value2} onChange={value2 => this.setState({oInfo: {...oInfo, value2}})} />\n```\n3.基于React构建页面的步骤：\n第一步：将设计好的 UI 划分为组件层级\n第二步：用 React 创建一个静态版本(仅用props)\n第三步：确定 UI state 的最小（且完整）表示\n第四步：确定 state 放置的位置（若多个组件共用state，则放置在它们最近的共同组件中）\n第五步：添加反向数据流等其他数据逻辑\n","source":"_posts/2019-06-30-react.md","raw":"---\ntitle: react概述\ndate: 2019-06-30 08:53:51\ntags: React\n---\n## 1.文档目的\n仔细阅读了React官方教程，对易疏忽的地方做个笔记，便于知识的整体梳理和消化\n参考网址：[React逐步学习指南](https://zh-hans.reactjs.org/docs/hello-world.html),[React实践教程](https://zh-hans.reactjs.org/tutorial/tutorial.html)\n\n## 2.文档内容\n### 2.1整体认知\nReact 是一个用于构建用户界面的 JavaScript 库，\n以组件为最小单元，\n以JSX为语法基础，\n以单向（自上而下）数据流props维护组件关系\n以私有state控制组件渲染和数据更新\n\n### 2.2安装或引入React\n推荐的工具链方式：[Create React App](https://github.com/facebook/create-react-app)\nscript标记引入：\n```\n <!-- 加载 React。-->\n  <!-- 注意: 部署时，将 \"development.js\" 替换为 \"production.min.js\"。-->\n  <script src=\"https://unpkg.com/react@16/umd/react.development.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" crossorigin></script>\n\n  <!-- 加载我们的 React 组件。-->\n  <script src=\"like_button.js\"></script>\n```\n\n### 2.2组件的实现方式\n组件有函数实现方式和class实现方式两种。\n函数组件基本结构（无受控state）：\n```\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\nclass组件基本结构(可以有受控state)\n```\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {info: null};\n  }\n  render() {\n    return <h1>Hello, {this.props.name}, {this.state.info}</h1>;\n  }\n}\n```\n\n### 2.3JSX语法\n```\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n    // 私有变量且受控\n    this.state = {isShow: null, listData: null};\n    // 私有变量且非受控\n    this.title = null\n  }\n\n  // 函数用表达式形式的箭头函数，保证了this引用的正确，若非如此，则需要在constructor中显示bind(this)\n  _renderNode = () => {\n      // JSX作为表达式当然可以使其等于一个变量\n      const nodeElement = <Text>Hello</Text>\n      return (\n          <View>\n            // JSX中{}中可以是任何表达式，包括变量\n            <Text>问候语：{nodeElement}</Text>\n          </View>\n      )\n  }\n\n  _renderList = () => {\n       let {listData} = this.state\n       return (\n           <View>\n                // JSX中循环结构可直接用map表达式，注意绑定key(尽量不直接用index)\n                {listData.map(item =>(<View key={item.id}>\n                    <Text>{item.name}</Text>\n                </View>))}\n           </View>\n       )\n  }\n\n  render() {\n    // 公有入参属性\n    let {id} = this.props\n    let {isShow, listData} = this.state\n\n    // JSX表达式可以作为函数的返回值(同样可以作为函数入参等任何变量/表达式可以在的地方)\n    return (\n        <View>\n            // JSX中{}中可以是任何表达式，包括函数\n            {this._renderNode()}\n            // 一个表达式，只能是一个整体，不能是多个语句\n            // 选择结构，在JSX中直接用三元表达式\n            {isShow ? <View><Text>是</Text></View> : <View><Text>否</Text></View>}\n            // 布尔结构，在JSX中直接用&&运算符\n            {listData && this._renderList()}\n        </View>\n    )\n  }\n}\n```\n总结：\n1.JSX本身是个表达式，可以赋值给一个变量。即变量可以在的位置JSX表达式也可以。\n2.JSX中可以用{}处理表达式(表达式的形式可以是一个变量，&&运算符，三元运算符，map()运算符，函数等形式)\n\n### 2.4其他要点\n1.props和state都可以由生命周期控制\n2.受控表单统一用value和onChange处理,多个表单项共用处理函数需要提供不同name值，且受控表单便于在处理函数中做校验\n```\n<input type=\"text\" name=\"name1\" value={this.state.value1} onChange={this.handleChange} />\n<input type=\"text\" name=\"name2\" value={this.state.value2} onChange={this.handleChange} />\n\n handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n```\n若是同一个对象不同属性的绑定，则只需要设置setState中不同属性即可\n```\n<input type=\"text\" value={this.state.oInfo.value1} onChange={value1 => this.setState({oInfo: {...oInfo, value1}})} />\n<input type=\"text\" value={this.state.oInfo.value2} onChange={value2 => this.setState({oInfo: {...oInfo, value2}})} />\n```\n3.基于React构建页面的步骤：\n第一步：将设计好的 UI 划分为组件层级\n第二步：用 React 创建一个静态版本(仅用props)\n第三步：确定 UI state 的最小（且完整）表示\n第四步：确定 state 放置的位置（若多个组件共用state，则放置在它们最近的共同组件中）\n第五步：添加反向数据流等其他数据逻辑\n","slug":"react","published":1,"updated":"2019-07-08T01:25:27.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezwz0025xijkmvxj03c8","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>仔细阅读了React官方教程，对易疏忽的地方做个笔记，便于知识的整体梳理和消化<br>参考网址：<a href=\"https://zh-hans.reactjs.org/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">React逐步学习指南</a>,<a href=\"https://zh-hans.reactjs.org/tutorial/tutorial.html\" target=\"_blank\" rel=\"noopener\">React实践教程</a></p>\n<h2 id=\"2-文档内容\"><a href=\"#2-文档内容\" class=\"headerlink\" title=\"2.文档内容\"></a>2.文档内容</h2><h3 id=\"2-1整体认知\"><a href=\"#2-1整体认知\" class=\"headerlink\" title=\"2.1整体认知\"></a>2.1整体认知</h3><p>React 是一个用于构建用户界面的 JavaScript 库，<br>以组件为最小单元，<br>以JSX为语法基础，<br>以单向（自上而下）数据流props维护组件关系<br>以私有state控制组件渲染和数据更新</p>\n<h3 id=\"2-2安装或引入React\"><a href=\"#2-2安装或引入React\" class=\"headerlink\" title=\"2.2安装或引入React\"></a>2.2安装或引入React</h3><p>推荐的工具链方式：<a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">Create React App</a><br>script标记引入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 加载 React。--&gt;</span><br><span class=\"line\"> &lt;!-- 注意: 部署时，将 &quot;development.js&quot; 替换为 &quot;production.min.js&quot;。--&gt;</span><br><span class=\"line\"> &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;!-- 加载我们的 React 组件。--&gt;</span><br><span class=\"line\"> &lt;script src=&quot;like_button.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2组件的实现方式\"><a href=\"#2-2组件的实现方式\" class=\"headerlink\" title=\"2.2组件的实现方式\"></a>2.2组件的实现方式</h3><p>组件有函数实现方式和class实现方式两种。<br>函数组件基本结构（无受控state）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Welcome(props) &#123;</span><br><span class=\"line\">  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>class组件基本结构(可以有受控state)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Welcome extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;info: null&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;h1&gt;Hello, &#123;this.props.name&#125;, &#123;this.state.info&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3JSX语法\"><a href=\"#2-3JSX语法\" class=\"headerlink\" title=\"2.3JSX语法\"></a>2.3JSX语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Welcome extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    // 私有变量且受控</span><br><span class=\"line\">    this.state = &#123;isShow: null, listData: null&#125;;</span><br><span class=\"line\">    // 私有变量且非受控</span><br><span class=\"line\">    this.title = null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 函数用表达式形式的箭头函数，保证了this引用的正确，若非如此，则需要在constructor中显示bind(this)</span><br><span class=\"line\">  _renderNode = () =&gt; &#123;</span><br><span class=\"line\">      // JSX作为表达式当然可以使其等于一个变量</span><br><span class=\"line\">      const nodeElement = &lt;Text&gt;Hello&lt;/Text&gt;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">          &lt;View&gt;</span><br><span class=\"line\">            // JSX中&#123;&#125;中可以是任何表达式，包括变量</span><br><span class=\"line\">            &lt;Text&gt;问候语：&#123;nodeElement&#125;&lt;/Text&gt;</span><br><span class=\"line\">          &lt;/View&gt;</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _renderList = () =&gt; &#123;</span><br><span class=\"line\">       let &#123;listData&#125; = this.state</span><br><span class=\"line\">       return (</span><br><span class=\"line\">           &lt;View&gt;</span><br><span class=\"line\">                // JSX中循环结构可直接用map表达式，注意绑定key(尽量不直接用index)</span><br><span class=\"line\">                &#123;listData.map(item =&gt;(&lt;View key=&#123;item.id&#125;&gt;</span><br><span class=\"line\">                    &lt;Text&gt;&#123;item.name&#125;&lt;/Text&gt;</span><br><span class=\"line\">                &lt;/View&gt;))&#125;</span><br><span class=\"line\">           &lt;/View&gt;</span><br><span class=\"line\">       )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 公有入参属性</span><br><span class=\"line\">    let &#123;id&#125; = this.props</span><br><span class=\"line\">    let &#123;isShow, listData&#125; = this.state</span><br><span class=\"line\"></span><br><span class=\"line\">    // JSX表达式可以作为函数的返回值(同样可以作为函数入参等任何变量/表达式可以在的地方)</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;View&gt;</span><br><span class=\"line\">            // JSX中&#123;&#125;中可以是任何表达式，包括函数</span><br><span class=\"line\">            &#123;this._renderNode()&#125;</span><br><span class=\"line\">            // 一个表达式，只能是一个整体，不能是多个语句</span><br><span class=\"line\">            // 选择结构，在JSX中直接用三元表达式</span><br><span class=\"line\">            &#123;isShow ? &lt;View&gt;&lt;Text&gt;是&lt;/Text&gt;&lt;/View&gt; : &lt;View&gt;&lt;Text&gt;否&lt;/Text&gt;&lt;/View&gt;&#125;</span><br><span class=\"line\">            // 布尔结构，在JSX中直接用&amp;&amp;运算符</span><br><span class=\"line\">            &#123;listData &amp;&amp; this._renderList()&#125;</span><br><span class=\"line\">        &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：<br>1.JSX本身是个表达式，可以赋值给一个变量。即变量可以在的位置JSX表达式也可以。<br>2.JSX中可以用{}处理表达式(表达式的形式可以是一个变量，&amp;&amp;运算符，三元运算符，map()运算符，函数等形式)</p>\n<h3 id=\"2-4其他要点\"><a href=\"#2-4其他要点\" class=\"headerlink\" title=\"2.4其他要点\"></a>2.4其他要点</h3><p>1.props和state都可以由生命周期控制<br>2.受控表单统一用value和onChange处理,多个表单项共用处理函数需要提供不同name值，且受控表单便于在处理函数中做校验<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;name1&quot; value=&#123;this.state.value1&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;name2&quot; value=&#123;this.state.value2&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> handleChange(event) &#123;</span><br><span class=\"line\">    const target = event.target;</span><br><span class=\"line\">    const value = target.value;</span><br><span class=\"line\">    const name = target.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      [name]: value</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>若是同一个对象不同属性的绑定，则只需要设置setState中不同属性即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&#123;this.state.oInfo.value1&#125; onChange=&#123;value1 =&gt; this.setState(&#123;oInfo: &#123;...oInfo, value1&#125;&#125;)&#125; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; value=&#123;this.state.oInfo.value2&#125; onChange=&#123;value2 =&gt; this.setState(&#123;oInfo: &#123;...oInfo, value2&#125;&#125;)&#125; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.基于React构建页面的步骤：<br>第一步：将设计好的 UI 划分为组件层级<br>第二步：用 React 创建一个静态版本(仅用props)<br>第三步：确定 UI state 的最小（且完整）表示<br>第四步：确定 state 放置的位置（若多个组件共用state，则放置在它们最近的共同组件中）<br>第五步：添加反向数据流等其他数据逻辑</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>仔细阅读了React官方教程，对易疏忽的地方做个笔记，便于知识的整体梳理和消化<br>参考网址：<a href=\"https://zh-hans.reactjs.org/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">React逐步学习指南</a>,<a href=\"https://zh-hans.reactjs.org/tutorial/tutorial.html\" target=\"_blank\" rel=\"noopener\">React实践教程</a></p>\n<h2 id=\"2-文档内容\"><a href=\"#2-文档内容\" class=\"headerlink\" title=\"2.文档内容\"></a>2.文档内容</h2><h3 id=\"2-1整体认知\"><a href=\"#2-1整体认知\" class=\"headerlink\" title=\"2.1整体认知\"></a>2.1整体认知</h3><p>React 是一个用于构建用户界面的 JavaScript 库，<br>以组件为最小单元，<br>以JSX为语法基础，<br>以单向（自上而下）数据流props维护组件关系<br>以私有state控制组件渲染和数据更新</p>\n<h3 id=\"2-2安装或引入React\"><a href=\"#2-2安装或引入React\" class=\"headerlink\" title=\"2.2安装或引入React\"></a>2.2安装或引入React</h3><p>推荐的工具链方式：<a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener\">Create React App</a><br>script标记引入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 加载 React。--&gt;</span><br><span class=\"line\"> &lt;!-- 注意: 部署时，将 &quot;development.js&quot; 替换为 &quot;production.min.js&quot;。--&gt;</span><br><span class=\"line\"> &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;!-- 加载我们的 React 组件。--&gt;</span><br><span class=\"line\"> &lt;script src=&quot;like_button.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2组件的实现方式\"><a href=\"#2-2组件的实现方式\" class=\"headerlink\" title=\"2.2组件的实现方式\"></a>2.2组件的实现方式</h3><p>组件有函数实现方式和class实现方式两种。<br>函数组件基本结构（无受控state）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Welcome(props) &#123;</span><br><span class=\"line\">  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>class组件基本结构(可以有受控state)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Welcome extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123;info: null&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;h1&gt;Hello, &#123;this.props.name&#125;, &#123;this.state.info&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3JSX语法\"><a href=\"#2-3JSX语法\" class=\"headerlink\" title=\"2.3JSX语法\"></a>2.3JSX语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Welcome extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    // 私有变量且受控</span><br><span class=\"line\">    this.state = &#123;isShow: null, listData: null&#125;;</span><br><span class=\"line\">    // 私有变量且非受控</span><br><span class=\"line\">    this.title = null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 函数用表达式形式的箭头函数，保证了this引用的正确，若非如此，则需要在constructor中显示bind(this)</span><br><span class=\"line\">  _renderNode = () =&gt; &#123;</span><br><span class=\"line\">      // JSX作为表达式当然可以使其等于一个变量</span><br><span class=\"line\">      const nodeElement = &lt;Text&gt;Hello&lt;/Text&gt;</span><br><span class=\"line\">      return (</span><br><span class=\"line\">          &lt;View&gt;</span><br><span class=\"line\">            // JSX中&#123;&#125;中可以是任何表达式，包括变量</span><br><span class=\"line\">            &lt;Text&gt;问候语：&#123;nodeElement&#125;&lt;/Text&gt;</span><br><span class=\"line\">          &lt;/View&gt;</span><br><span class=\"line\">      )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _renderList = () =&gt; &#123;</span><br><span class=\"line\">       let &#123;listData&#125; = this.state</span><br><span class=\"line\">       return (</span><br><span class=\"line\">           &lt;View&gt;</span><br><span class=\"line\">                // JSX中循环结构可直接用map表达式，注意绑定key(尽量不直接用index)</span><br><span class=\"line\">                &#123;listData.map(item =&gt;(&lt;View key=&#123;item.id&#125;&gt;</span><br><span class=\"line\">                    &lt;Text&gt;&#123;item.name&#125;&lt;/Text&gt;</span><br><span class=\"line\">                &lt;/View&gt;))&#125;</span><br><span class=\"line\">           &lt;/View&gt;</span><br><span class=\"line\">       )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // 公有入参属性</span><br><span class=\"line\">    let &#123;id&#125; = this.props</span><br><span class=\"line\">    let &#123;isShow, listData&#125; = this.state</span><br><span class=\"line\"></span><br><span class=\"line\">    // JSX表达式可以作为函数的返回值(同样可以作为函数入参等任何变量/表达式可以在的地方)</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;View&gt;</span><br><span class=\"line\">            // JSX中&#123;&#125;中可以是任何表达式，包括函数</span><br><span class=\"line\">            &#123;this._renderNode()&#125;</span><br><span class=\"line\">            // 一个表达式，只能是一个整体，不能是多个语句</span><br><span class=\"line\">            // 选择结构，在JSX中直接用三元表达式</span><br><span class=\"line\">            &#123;isShow ? &lt;View&gt;&lt;Text&gt;是&lt;/Text&gt;&lt;/View&gt; : &lt;View&gt;&lt;Text&gt;否&lt;/Text&gt;&lt;/View&gt;&#125;</span><br><span class=\"line\">            // 布尔结构，在JSX中直接用&amp;&amp;运算符</span><br><span class=\"line\">            &#123;listData &amp;&amp; this._renderList()&#125;</span><br><span class=\"line\">        &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：<br>1.JSX本身是个表达式，可以赋值给一个变量。即变量可以在的位置JSX表达式也可以。<br>2.JSX中可以用{}处理表达式(表达式的形式可以是一个变量，&amp;&amp;运算符，三元运算符，map()运算符，函数等形式)</p>\n<h3 id=\"2-4其他要点\"><a href=\"#2-4其他要点\" class=\"headerlink\" title=\"2.4其他要点\"></a>2.4其他要点</h3><p>1.props和state都可以由生命周期控制<br>2.受控表单统一用value和onChange处理,多个表单项共用处理函数需要提供不同name值，且受控表单便于在处理函数中做校验<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;name1&quot; value=&#123;this.state.value1&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;name2&quot; value=&#123;this.state.value2&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> handleChange(event) &#123;</span><br><span class=\"line\">    const target = event.target;</span><br><span class=\"line\">    const value = target.value;</span><br><span class=\"line\">    const name = target.name;</span><br><span class=\"line\"></span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      [name]: value</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>若是同一个对象不同属性的绑定，则只需要设置setState中不同属性即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; value=&#123;this.state.oInfo.value1&#125; onChange=&#123;value1 =&gt; this.setState(&#123;oInfo: &#123;...oInfo, value1&#125;&#125;)&#125; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; value=&#123;this.state.oInfo.value2&#125; onChange=&#123;value2 =&gt; this.setState(&#123;oInfo: &#123;...oInfo, value2&#125;&#125;)&#125; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3.基于React构建页面的步骤：<br>第一步：将设计好的 UI 划分为组件层级<br>第二步：用 React 创建一个静态版本(仅用props)<br>第三步：确定 UI state 的最小（且完整）表示<br>第四步：确定 state 放置的位置（若多个组件共用state，则放置在它们最近的共同组件中）<br>第五步：添加反向数据流等其他数据逻辑</p>\n"},{"title":"util工具方法","date":"2019-07-08T06:09:03.000Z","_content":"## 1.文档目的\n收集整理常用实现,积累总结经验\n\n## 2.实践积累\n### 2.1循环复合对象\n```\n//for...of遍历数组\nlet arr = ['a', 'b', 'c'];\nfor(let key of arr.keys()) {\n  console.log(\"arr键名：\" + key);\n}\nfor(let value of arr.values()) {\n  console.log(\"arr键值：\" + value);\n}\nfor(let [key,value] of arr.entries()) {\n  console.log(\"arr键名：\" + key + ',arr键值：' + value);\n}\n//for...of遍历对象\nlet obj = {\n\tname: 'xiaoming',\n\tage: 18\n}\nfor(let key of Object.keys(obj)) {\n  console.log(\"obj键名：\" + key);\n}\nfor(let value of Object.values(obj)) {\n  console.log(\"obj键值：\" + value);\n}\nfor(let [key,value] of Object.entries(obj)) {\n  console.log(\"obj键名：\" + key + ',obj键值：' + value);\n}\n```\n### 2.2模拟数据与接口数据转换[装饰者模式应用]\n```\n// 写在具体逻辑模块中\ntransData(data){\n\tlet {userName1: name, userAge1: age} = data\n\tlet oInfo = {name, age}\n\treturn oInfo\n}\n```\n### 2.3动态创建数组\n```\n// 简单数组\n[1,2,3]\n// 复杂重复数组\nnew Array(8).fill({name: 'xiaoming', age: 12})\n```\n### 2.4浅拷贝\nfor...in...实践\n```\nfunction extendCopy(p) {\n　　　　var c = {};\n　　　　for (var i in p) {\n　　　　　　c[i] = p[i];\n　　　　}\n　　　　c.uber = p;\n　　　　return c;\n}\nvar Doctor = extendCopy(Chinese);\n```\n### 2.5深拷贝\n遇到复合对象[Object或Array]时,递归调用浅拷贝\n```\n　　function deepCopy(p, c) {\n　　　　var c = c || {};\n　　　　for (var i in p) {\n　　　　　　if (typeof p[i] === 'object') {\n　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n　　　　　　　　deepCopy(p[i], c[i]);\n　　　　　　} else {\n　　　　　　　　　c[i] = p[i];\n　　　　　　}\n　　　　}\n　　　　return c;\n　　}\n　var Doctor = deepCopy(Chinese);\n```\n### 2.6排序\n```\n// 快速排序\nvar quickSort = function(arr) {\n　　if (arr.length <= 1) { return arr; }\n　　var pivotIndex = Math.floor(arr.length / 2);\n　　var pivot = arr.splice(pivotIndex, 1)[0];\n　　var left = [];\n　　var right = [];\n　　for (var i = 0; i < arr.length; i++){\n　　　　if (arr[i] < pivot) {\n　　　　　　left.push(arr[i]);\n　　　　} else {\n　　　　　　right.push(arr[i]);\n　　　　}\n　　}\n　　return quickSort(left).concat([pivot], quickSort(right));\n};\n// 复杂数组基于sort排序\n// 首先要明确sort()默认是根据字符串UniCode码排序的\nlet arr = [323,134,534,62,9,27]\narr.sort()\nexport output:[134, 27, 323, 534, 62, 9]\n// 大多数情况下，我们希望按照数值大小排序,例如复合数组根据某属性，按照指定的方式排序\nfunction sortBy(attr,rev){\n\t// 若第二个参数没有传递，默认升序\n\tif(rev === undefined){\n\t\trev = 1;\n\t}else{\n\t\trev = (rev) ? 1 : -1;\n\t}\n\treturn function(a,b){\n\t\ta = a[attr];\n\t\tb = b[attr];\n\t\tif(a<b){\n\t\t\treturn rev * -1\n\t\t}\n\t\tif(a>b){\n\t\t\treturn rev * 1\n\t\t}\n\t\treturn 0;\n\t}\n}\nlet arr = [{name: '张三丰', age:34}, {name: '黄忠', age:28}, {name: '星魂', age:54}]\narr.sort(sortBy('age',false))\n```\n### 2.7递归\n```\n// 根据规律总结递归体，明确结束条件[一层层调用，又一层层返回]\n// 计算n的阶乘\nfunction fact(n){\n\tif(1 == n){\n\t\treturn 1;\n\t}\n\treturn n*fact(n-1)\n}\nconsole.log(fact(5))\n```\n","source":"_posts/2019-07-08-util.md","raw":"---\ntitle: util工具方法\ndate: 2019-07-08 14:09:03\ntags: JS\n---\n## 1.文档目的\n收集整理常用实现,积累总结经验\n\n## 2.实践积累\n### 2.1循环复合对象\n```\n//for...of遍历数组\nlet arr = ['a', 'b', 'c'];\nfor(let key of arr.keys()) {\n  console.log(\"arr键名：\" + key);\n}\nfor(let value of arr.values()) {\n  console.log(\"arr键值：\" + value);\n}\nfor(let [key,value] of arr.entries()) {\n  console.log(\"arr键名：\" + key + ',arr键值：' + value);\n}\n//for...of遍历对象\nlet obj = {\n\tname: 'xiaoming',\n\tage: 18\n}\nfor(let key of Object.keys(obj)) {\n  console.log(\"obj键名：\" + key);\n}\nfor(let value of Object.values(obj)) {\n  console.log(\"obj键值：\" + value);\n}\nfor(let [key,value] of Object.entries(obj)) {\n  console.log(\"obj键名：\" + key + ',obj键值：' + value);\n}\n```\n### 2.2模拟数据与接口数据转换[装饰者模式应用]\n```\n// 写在具体逻辑模块中\ntransData(data){\n\tlet {userName1: name, userAge1: age} = data\n\tlet oInfo = {name, age}\n\treturn oInfo\n}\n```\n### 2.3动态创建数组\n```\n// 简单数组\n[1,2,3]\n// 复杂重复数组\nnew Array(8).fill({name: 'xiaoming', age: 12})\n```\n### 2.4浅拷贝\nfor...in...实践\n```\nfunction extendCopy(p) {\n　　　　var c = {};\n　　　　for (var i in p) {\n　　　　　　c[i] = p[i];\n　　　　}\n　　　　c.uber = p;\n　　　　return c;\n}\nvar Doctor = extendCopy(Chinese);\n```\n### 2.5深拷贝\n遇到复合对象[Object或Array]时,递归调用浅拷贝\n```\n　　function deepCopy(p, c) {\n　　　　var c = c || {};\n　　　　for (var i in p) {\n　　　　　　if (typeof p[i] === 'object') {\n　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : {};\n　　　　　　　　deepCopy(p[i], c[i]);\n　　　　　　} else {\n　　　　　　　　　c[i] = p[i];\n　　　　　　}\n　　　　}\n　　　　return c;\n　　}\n　var Doctor = deepCopy(Chinese);\n```\n### 2.6排序\n```\n// 快速排序\nvar quickSort = function(arr) {\n　　if (arr.length <= 1) { return arr; }\n　　var pivotIndex = Math.floor(arr.length / 2);\n　　var pivot = arr.splice(pivotIndex, 1)[0];\n　　var left = [];\n　　var right = [];\n　　for (var i = 0; i < arr.length; i++){\n　　　　if (arr[i] < pivot) {\n　　　　　　left.push(arr[i]);\n　　　　} else {\n　　　　　　right.push(arr[i]);\n　　　　}\n　　}\n　　return quickSort(left).concat([pivot], quickSort(right));\n};\n// 复杂数组基于sort排序\n// 首先要明确sort()默认是根据字符串UniCode码排序的\nlet arr = [323,134,534,62,9,27]\narr.sort()\nexport output:[134, 27, 323, 534, 62, 9]\n// 大多数情况下，我们希望按照数值大小排序,例如复合数组根据某属性，按照指定的方式排序\nfunction sortBy(attr,rev){\n\t// 若第二个参数没有传递，默认升序\n\tif(rev === undefined){\n\t\trev = 1;\n\t}else{\n\t\trev = (rev) ? 1 : -1;\n\t}\n\treturn function(a,b){\n\t\ta = a[attr];\n\t\tb = b[attr];\n\t\tif(a<b){\n\t\t\treturn rev * -1\n\t\t}\n\t\tif(a>b){\n\t\t\treturn rev * 1\n\t\t}\n\t\treturn 0;\n\t}\n}\nlet arr = [{name: '张三丰', age:34}, {name: '黄忠', age:28}, {name: '星魂', age:54}]\narr.sort(sortBy('age',false))\n```\n### 2.7递归\n```\n// 根据规律总结递归体，明确结束条件[一层层调用，又一层层返回]\n// 计算n的阶乘\nfunction fact(n){\n\tif(1 == n){\n\t\treturn 1;\n\t}\n\treturn n*fact(n-1)\n}\nconsole.log(fact(5))\n```\n","slug":"util","published":1,"updated":"2019-10-08T08:50:04.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezx00027xijkf9sxl1v6","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>收集整理常用实现,积累总结经验</p>\n<h2 id=\"2-实践积累\"><a href=\"#2-实践积累\" class=\"headerlink\" title=\"2.实践积累\"></a>2.实践积累</h2><h3 id=\"2-1循环复合对象\"><a href=\"#2-1循环复合对象\" class=\"headerlink\" title=\"2.1循环复合对象\"></a>2.1循环复合对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//for...of遍历数组</span><br><span class=\"line\">let arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">for(let key of arr.keys()) &#123;</span><br><span class=\"line\">  console.log(&quot;arr键名：&quot; + key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let value of arr.values()) &#123;</span><br><span class=\"line\">  console.log(&quot;arr键值：&quot; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let [key,value] of arr.entries()) &#123;</span><br><span class=\"line\">  console.log(&quot;arr键名：&quot; + key + &apos;,arr键值：&apos; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//for...of遍历对象</span><br><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">\tname: &apos;xiaoming&apos;,</span><br><span class=\"line\">\tage: 18</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let key of Object.keys(obj)) &#123;</span><br><span class=\"line\">  console.log(&quot;obj键名：&quot; + key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let value of Object.values(obj)) &#123;</span><br><span class=\"line\">  console.log(&quot;obj键值：&quot; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let [key,value] of Object.entries(obj)) &#123;</span><br><span class=\"line\">  console.log(&quot;obj键名：&quot; + key + &apos;,obj键值：&apos; + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2模拟数据与接口数据转换-装饰者模式应用\"><a href=\"#2-2模拟数据与接口数据转换-装饰者模式应用\" class=\"headerlink\" title=\"2.2模拟数据与接口数据转换[装饰者模式应用]\"></a>2.2模拟数据与接口数据转换[装饰者模式应用]</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 写在具体逻辑模块中</span><br><span class=\"line\">transData(data)&#123;</span><br><span class=\"line\">\tlet &#123;userName1: name, userAge1: age&#125; = data</span><br><span class=\"line\">\tlet oInfo = &#123;name, age&#125;</span><br><span class=\"line\">\treturn oInfo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3动态创建数组\"><a href=\"#2-3动态创建数组\" class=\"headerlink\" title=\"2.3动态创建数组\"></a>2.3动态创建数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 简单数组</span><br><span class=\"line\">[1,2,3]</span><br><span class=\"line\">// 复杂重复数组</span><br><span class=\"line\">new Array(8).fill(&#123;name: &apos;xiaoming&apos;, age: 12&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4浅拷贝\"><a href=\"#2-4浅拷贝\" class=\"headerlink\" title=\"2.4浅拷贝\"></a>2.4浅拷贝</h3><p>for…in…实践<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function extendCopy(p) &#123;</span><br><span class=\"line\">　　　　var c = &#123;&#125;;</span><br><span class=\"line\">　　　　for (var i in p) &#123;</span><br><span class=\"line\">　　　　　　c[i] = p[i];</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　c.uber = p;</span><br><span class=\"line\">　　　　return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Doctor = extendCopy(Chinese);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5深拷贝\"><a href=\"#2-5深拷贝\" class=\"headerlink\" title=\"2.5深拷贝\"></a>2.5深拷贝</h3><p>遇到复合对象[Object或Array]时,递归调用浅拷贝<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　function deepCopy(p, c) &#123;</span><br><span class=\"line\">　　　　var c = c || &#123;&#125;;</span><br><span class=\"line\">　　　　for (var i in p) &#123;</span><br><span class=\"line\">　　　　　　if (typeof p[i] === &apos;object&apos;) &#123;</span><br><span class=\"line\">　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : &#123;&#125;;</span><br><span class=\"line\">　　　　　　　　deepCopy(p[i], c[i]);</span><br><span class=\"line\">　　　　　　&#125; else &#123;</span><br><span class=\"line\">　　　　　　　　　c[i] = p[i];</span><br><span class=\"line\">　　　　　　&#125;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　return c;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　var Doctor = deepCopy(Chinese);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-6排序\"><a href=\"#2-6排序\" class=\"headerlink\" title=\"2.6排序\"></a>2.6排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 快速排序</span><br><span class=\"line\">var quickSort = function(arr) &#123;</span><br><span class=\"line\">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</span><br><span class=\"line\">　　var pivotIndex = Math.floor(arr.length / 2);</span><br><span class=\"line\">　　var pivot = arr.splice(pivotIndex, 1)[0];</span><br><span class=\"line\">　　var left = [];</span><br><span class=\"line\">　　var right = [];</span><br><span class=\"line\">　　for (var i = 0; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">　　　　if (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">　　　　　　left.push(arr[i]);</span><br><span class=\"line\">　　　　&#125; else &#123;</span><br><span class=\"line\">　　　　　　right.push(arr[i]);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　return quickSort(left).concat([pivot], quickSort(right));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 复杂数组基于sort排序</span><br><span class=\"line\">// 首先要明确sort()默认是根据字符串UniCode码排序的</span><br><span class=\"line\">let arr = [323,134,534,62,9,27]</span><br><span class=\"line\">arr.sort()</span><br><span class=\"line\">export output:[134, 27, 323, 534, 62, 9]</span><br><span class=\"line\">// 大多数情况下，我们希望按照数值大小排序,例如复合数组根据某属性，按照指定的方式排序</span><br><span class=\"line\">function sortBy(attr,rev)&#123;</span><br><span class=\"line\">\t// 若第二个参数没有传递，默认升序</span><br><span class=\"line\">\tif(rev === undefined)&#123;</span><br><span class=\"line\">\t\trev = 1;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\trev = (rev) ? 1 : -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn function(a,b)&#123;</span><br><span class=\"line\">\t\ta = a[attr];</span><br><span class=\"line\">\t\tb = b[attr];</span><br><span class=\"line\">\t\tif(a&lt;b)&#123;</span><br><span class=\"line\">\t\t\treturn rev * -1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(a&gt;b)&#123;</span><br><span class=\"line\">\t\t\treturn rev * 1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [&#123;name: &apos;张三丰&apos;, age:34&#125;, &#123;name: &apos;黄忠&apos;, age:28&#125;, &#123;name: &apos;星魂&apos;, age:54&#125;]</span><br><span class=\"line\">arr.sort(sortBy(&apos;age&apos;,false))</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-7递归\"><a href=\"#2-7递归\" class=\"headerlink\" title=\"2.7递归\"></a>2.7递归</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 根据规律总结递归体，明确结束条件[一层层调用，又一层层返回]</span><br><span class=\"line\">// 计算n的阶乘</span><br><span class=\"line\">function fact(n)&#123;</span><br><span class=\"line\">\tif(1 == n)&#123;</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn n*fact(n-1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(fact(5))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>收集整理常用实现,积累总结经验</p>\n<h2 id=\"2-实践积累\"><a href=\"#2-实践积累\" class=\"headerlink\" title=\"2.实践积累\"></a>2.实践积累</h2><h3 id=\"2-1循环复合对象\"><a href=\"#2-1循环复合对象\" class=\"headerlink\" title=\"2.1循环复合对象\"></a>2.1循环复合对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//for...of遍历数组</span><br><span class=\"line\">let arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">for(let key of arr.keys()) &#123;</span><br><span class=\"line\">  console.log(&quot;arr键名：&quot; + key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let value of arr.values()) &#123;</span><br><span class=\"line\">  console.log(&quot;arr键值：&quot; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let [key,value] of arr.entries()) &#123;</span><br><span class=\"line\">  console.log(&quot;arr键名：&quot; + key + &apos;,arr键值：&apos; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//for...of遍历对象</span><br><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">\tname: &apos;xiaoming&apos;,</span><br><span class=\"line\">\tage: 18</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let key of Object.keys(obj)) &#123;</span><br><span class=\"line\">  console.log(&quot;obj键名：&quot; + key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let value of Object.values(obj)) &#123;</span><br><span class=\"line\">  console.log(&quot;obj键值：&quot; + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let [key,value] of Object.entries(obj)) &#123;</span><br><span class=\"line\">  console.log(&quot;obj键名：&quot; + key + &apos;,obj键值：&apos; + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2模拟数据与接口数据转换-装饰者模式应用\"><a href=\"#2-2模拟数据与接口数据转换-装饰者模式应用\" class=\"headerlink\" title=\"2.2模拟数据与接口数据转换[装饰者模式应用]\"></a>2.2模拟数据与接口数据转换[装饰者模式应用]</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 写在具体逻辑模块中</span><br><span class=\"line\">transData(data)&#123;</span><br><span class=\"line\">\tlet &#123;userName1: name, userAge1: age&#125; = data</span><br><span class=\"line\">\tlet oInfo = &#123;name, age&#125;</span><br><span class=\"line\">\treturn oInfo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3动态创建数组\"><a href=\"#2-3动态创建数组\" class=\"headerlink\" title=\"2.3动态创建数组\"></a>2.3动态创建数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 简单数组</span><br><span class=\"line\">[1,2,3]</span><br><span class=\"line\">// 复杂重复数组</span><br><span class=\"line\">new Array(8).fill(&#123;name: &apos;xiaoming&apos;, age: 12&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4浅拷贝\"><a href=\"#2-4浅拷贝\" class=\"headerlink\" title=\"2.4浅拷贝\"></a>2.4浅拷贝</h3><p>for…in…实践<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function extendCopy(p) &#123;</span><br><span class=\"line\">　　　　var c = &#123;&#125;;</span><br><span class=\"line\">　　　　for (var i in p) &#123;</span><br><span class=\"line\">　　　　　　c[i] = p[i];</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　c.uber = p;</span><br><span class=\"line\">　　　　return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var Doctor = extendCopy(Chinese);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5深拷贝\"><a href=\"#2-5深拷贝\" class=\"headerlink\" title=\"2.5深拷贝\"></a>2.5深拷贝</h3><p>遇到复合对象[Object或Array]时,递归调用浅拷贝<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　function deepCopy(p, c) &#123;</span><br><span class=\"line\">　　　　var c = c || &#123;&#125;;</span><br><span class=\"line\">　　　　for (var i in p) &#123;</span><br><span class=\"line\">　　　　　　if (typeof p[i] === &apos;object&apos;) &#123;</span><br><span class=\"line\">　　　　　　　　c[i] = (p[i].constructor === Array) ? [] : &#123;&#125;;</span><br><span class=\"line\">　　　　　　　　deepCopy(p[i], c[i]);</span><br><span class=\"line\">　　　　　　&#125; else &#123;</span><br><span class=\"line\">　　　　　　　　　c[i] = p[i];</span><br><span class=\"line\">　　　　　　&#125;</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　return c;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　var Doctor = deepCopy(Chinese);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-6排序\"><a href=\"#2-6排序\" class=\"headerlink\" title=\"2.6排序\"></a>2.6排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 快速排序</span><br><span class=\"line\">var quickSort = function(arr) &#123;</span><br><span class=\"line\">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</span><br><span class=\"line\">　　var pivotIndex = Math.floor(arr.length / 2);</span><br><span class=\"line\">　　var pivot = arr.splice(pivotIndex, 1)[0];</span><br><span class=\"line\">　　var left = [];</span><br><span class=\"line\">　　var right = [];</span><br><span class=\"line\">　　for (var i = 0; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">　　　　if (arr[i] &lt; pivot) &#123;</span><br><span class=\"line\">　　　　　　left.push(arr[i]);</span><br><span class=\"line\">　　　　&#125; else &#123;</span><br><span class=\"line\">　　　　　　right.push(arr[i]);</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">　　return quickSort(left).concat([pivot], quickSort(right));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 复杂数组基于sort排序</span><br><span class=\"line\">// 首先要明确sort()默认是根据字符串UniCode码排序的</span><br><span class=\"line\">let arr = [323,134,534,62,9,27]</span><br><span class=\"line\">arr.sort()</span><br><span class=\"line\">export output:[134, 27, 323, 534, 62, 9]</span><br><span class=\"line\">// 大多数情况下，我们希望按照数值大小排序,例如复合数组根据某属性，按照指定的方式排序</span><br><span class=\"line\">function sortBy(attr,rev)&#123;</span><br><span class=\"line\">\t// 若第二个参数没有传递，默认升序</span><br><span class=\"line\">\tif(rev === undefined)&#123;</span><br><span class=\"line\">\t\trev = 1;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\trev = (rev) ? 1 : -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn function(a,b)&#123;</span><br><span class=\"line\">\t\ta = a[attr];</span><br><span class=\"line\">\t\tb = b[attr];</span><br><span class=\"line\">\t\tif(a&lt;b)&#123;</span><br><span class=\"line\">\t\t\treturn rev * -1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(a&gt;b)&#123;</span><br><span class=\"line\">\t\t\treturn rev * 1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let arr = [&#123;name: &apos;张三丰&apos;, age:34&#125;, &#123;name: &apos;黄忠&apos;, age:28&#125;, &#123;name: &apos;星魂&apos;, age:54&#125;]</span><br><span class=\"line\">arr.sort(sortBy(&apos;age&apos;,false))</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-7递归\"><a href=\"#2-7递归\" class=\"headerlink\" title=\"2.7递归\"></a>2.7递归</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 根据规律总结递归体，明确结束条件[一层层调用，又一层层返回]</span><br><span class=\"line\">// 计算n的阶乘</span><br><span class=\"line\">function fact(n)&#123;</span><br><span class=\"line\">\tif(1 == n)&#123;</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn n*fact(n-1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(fact(5))</span><br></pre></td></tr></table></figure>\n"},{"title":"TypeScript和vue的完美整合","date":"2019-07-13T08:03:54.000Z","_content":"## 1.文档目的\n新技术架构的实践笔记\n参考：[typescript教程](https://www.tslang.cn/docs/home.html),[vue-class-component](https://github.com/vuejs/vue-class-component),[vue-property-decorator](https://github.com/kaorun343/vue-property-decorator),[vue-property-decorator使用指南\n](https://juejin.im/post/5c173a84f265da610e7ffe44),[typescript与vue的结合](https://github.com/Microsoft/TypeScript-Vue-Starter#typescript-vue-starter)\n\n## 2.细节梳理\n### 2.1重新认知文件后缀\n.html文件中可以直接写<script></script>代码，然后用浏览器打开\n.js文件可以用命令行中node test.js运行\n.ts是js类型的超级，添加了类型检测等特性。可以在命令行中全局安装typescript，并编译tsc test.ts\njsx是一种嵌入式语法，可被转换成合法的JavaScript\n.tsx是可支持jsx语法的ts文件\n总结：ts,jsx，以及tsx都可转换为js\n\n### 2.2认识vue-class-component和vue-property-decorator\n为了适应typescript引入vue带来的变化，特意发展了这两个库对vue语法进一步做了包装，这就是两个语法糖。\nvue-class-component定义了基本以class形式的书写方式，vue-property-decorator在前者基础上定义了更多的声明式语法糖","source":"_posts/2019-07-13-ts-vue.md","raw":"---\ntitle: TypeScript和vue的完美整合\ndate: 2019-07-13 16:03:54\ntags: Vue\n---\n## 1.文档目的\n新技术架构的实践笔记\n参考：[typescript教程](https://www.tslang.cn/docs/home.html),[vue-class-component](https://github.com/vuejs/vue-class-component),[vue-property-decorator](https://github.com/kaorun343/vue-property-decorator),[vue-property-decorator使用指南\n](https://juejin.im/post/5c173a84f265da610e7ffe44),[typescript与vue的结合](https://github.com/Microsoft/TypeScript-Vue-Starter#typescript-vue-starter)\n\n## 2.细节梳理\n### 2.1重新认知文件后缀\n.html文件中可以直接写<script></script>代码，然后用浏览器打开\n.js文件可以用命令行中node test.js运行\n.ts是js类型的超级，添加了类型检测等特性。可以在命令行中全局安装typescript，并编译tsc test.ts\njsx是一种嵌入式语法，可被转换成合法的JavaScript\n.tsx是可支持jsx语法的ts文件\n总结：ts,jsx，以及tsx都可转换为js\n\n### 2.2认识vue-class-component和vue-property-decorator\n为了适应typescript引入vue带来的变化，特意发展了这两个库对vue语法进一步做了包装，这就是两个语法糖。\nvue-class-component定义了基本以class形式的书写方式，vue-property-decorator在前者基础上定义了更多的声明式语法糖","slug":"ts-vue","published":1,"updated":"2019-07-13T09:31:40.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezx10029xijkg9w7jhjb","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>新技术架构的实践笔记<br>参考：<a href=\"https://www.tslang.cn/docs/home.html\" target=\"_blank\" rel=\"noopener\">typescript教程</a>,<a href=\"https://github.com/vuejs/vue-class-component\" target=\"_blank\" rel=\"noopener\">vue-class-component</a>,<a href=\"https://github.com/kaorun343/vue-property-decorator\" target=\"_blank\" rel=\"noopener\">vue-property-decorator</a>,<a href=\"https://juejin.im/post/5c173a84f265da610e7ffe44\" target=\"_blank\" rel=\"noopener\">vue-property-decorator使用指南\n</a>,<a href=\"https://github.com/Microsoft/TypeScript-Vue-Starter#typescript-vue-starter\" target=\"_blank\" rel=\"noopener\">typescript与vue的结合</a></p>\n<h2 id=\"2-细节梳理\"><a href=\"#2-细节梳理\" class=\"headerlink\" title=\"2.细节梳理\"></a>2.细节梳理</h2><h3 id=\"2-1重新认知文件后缀\"><a href=\"#2-1重新认知文件后缀\" class=\"headerlink\" title=\"2.1重新认知文件后缀\"></a>2.1重新认知文件后缀</h3><p>.html文件中可以直接写<script></script>代码，然后用浏览器打开<br>.js文件可以用命令行中node test.js运行<br>.ts是js类型的超级，添加了类型检测等特性。可以在命令行中全局安装typescript，并编译tsc test.ts<br>jsx是一种嵌入式语法，可被转换成合法的JavaScript<br>.tsx是可支持jsx语法的ts文件<br>总结：ts,jsx，以及tsx都可转换为js</p>\n<h3 id=\"2-2认识vue-class-component和vue-property-decorator\"><a href=\"#2-2认识vue-class-component和vue-property-decorator\" class=\"headerlink\" title=\"2.2认识vue-class-component和vue-property-decorator\"></a>2.2认识vue-class-component和vue-property-decorator</h3><p>为了适应typescript引入vue带来的变化，特意发展了这两个库对vue语法进一步做了包装，这就是两个语法糖。<br>vue-class-component定义了基本以class形式的书写方式，vue-property-decorator在前者基础上定义了更多的声明式语法糖</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>新技术架构的实践笔记<br>参考：<a href=\"https://www.tslang.cn/docs/home.html\" target=\"_blank\" rel=\"noopener\">typescript教程</a>,<a href=\"https://github.com/vuejs/vue-class-component\" target=\"_blank\" rel=\"noopener\">vue-class-component</a>,<a href=\"https://github.com/kaorun343/vue-property-decorator\" target=\"_blank\" rel=\"noopener\">vue-property-decorator</a>,<a href=\"https://juejin.im/post/5c173a84f265da610e7ffe44\" target=\"_blank\" rel=\"noopener\">vue-property-decorator使用指南\n</a>,<a href=\"https://github.com/Microsoft/TypeScript-Vue-Starter#typescript-vue-starter\" target=\"_blank\" rel=\"noopener\">typescript与vue的结合</a></p>\n<h2 id=\"2-细节梳理\"><a href=\"#2-细节梳理\" class=\"headerlink\" title=\"2.细节梳理\"></a>2.细节梳理</h2><h3 id=\"2-1重新认知文件后缀\"><a href=\"#2-1重新认知文件后缀\" class=\"headerlink\" title=\"2.1重新认知文件后缀\"></a>2.1重新认知文件后缀</h3><p>.html文件中可以直接写<script></script>代码，然后用浏览器打开<br>.js文件可以用命令行中node test.js运行<br>.ts是js类型的超级，添加了类型检测等特性。可以在命令行中全局安装typescript，并编译tsc test.ts<br>jsx是一种嵌入式语法，可被转换成合法的JavaScript<br>.tsx是可支持jsx语法的ts文件<br>总结：ts,jsx，以及tsx都可转换为js</p>\n<h3 id=\"2-2认识vue-class-component和vue-property-decorator\"><a href=\"#2-2认识vue-class-component和vue-property-decorator\" class=\"headerlink\" title=\"2.2认识vue-class-component和vue-property-decorator\"></a>2.2认识vue-class-component和vue-property-decorator</h3><p>为了适应typescript引入vue带来的变化，特意发展了这两个库对vue语法进一步做了包装，这就是两个语法糖。<br>vue-class-component定义了基本以class形式的书写方式，vue-property-decorator在前者基础上定义了更多的声明式语法糖</p>\n"},{"title":"postMessage异步通讯","date":"2019-07-17T06:17:04.000Z","_content":"## 1.文档目的\nweb端异步消息传递机制,特别是对于跨域情况下的通讯,显得尤其重要,主要应用场景iframe和webview\n\n## 2.实践积累\niframe形式\n```\n// 父页面\n<html>\n  <body>\n    <p>我是父页面</p>\n    <button id=\"btn\">获取子页面信息</button>\n    <iframe id=\"mapIframe\" height=\"850px\" width=\"1500px\" src=\"http://fp1.xys.gov.cn/map/index.html#/map\"></iframe>\n    <script>\n      // 触发事件\n      document.getElementById('btn').addEventListener('click', function() {\n        document.getElementById('mapIframe').contentWindow.postMessage(JSON.stringify({ data: 'getLocation' }), '*')\n      })\n      // 父页面监听事件\n      window.addEventListener('message',function(event) {\n        console.log(JSON.parse(event.data), '--父页面监听数据')\n      },false)\n    </script>\n  </body>\n</html>\n// 子页面监听\n      window.addEventListener('message', function (event) {\n        if (typeof (event.data) === 'string') {\n          console.log(JSON.parse(event.data), '--子页面接收的数据')\n          // 向父窗口发送事件\n          if (window.parent && window.postMessage) {\n            // let message = { loadFinish: true }\n            window.parent.postMessage(JSON.stringify({ data: 'success' }), '*')\n          }\n        }\n      }, false)\n```\nwebview形式\n```\n// RN项目父页面\nimport { WebView } from 'react-native-webview'\n<View style={{ flex: 1 }}>\n        <WebView\n          ref={ref => (this.webView = ref)}\n          source={webviewUrl}\n          startInLoadingState={true}\n          renderLoading={() => <Loading active />}\n          javaScriptEnabled={true}\n          domStorageEnabled={true}\n          useWebKit={true}\n          automaticallyAdjustContentInsets={false}\n          onLoadEnd={this.onLoadEnd}\n          onLoadStart={this.onLoadStart}\n          obLoadEnd={this.onLoadEnd}\n          onError={this.onLoadError}\n          onMessage={this.onMessage}\n        />\n      </View>\n\n   onLoadEnd = () => {\n    this.webView.postMessage(JSON.stringify({data:'hi'}))\n  }\n\n    onMessage = event => {\n    try {\n      let { loadFinish } = JSON.parse(event.nativeEvent.data)\n    } catch (error) {}\n  }\n// web端子页面\nwindow.onload = () => {\n  document.addEventListener('message', ({ data }) => {\n    const msg = JSON.parse(data);\n  })\n  // 消息回传给rn端\n  if (window.postMessage) {\n            let message = { loadFinish: true };\n            window.postMessage(JSON.stringify(message));\n          }\n}\n```\n","source":"_posts/2019-07-17-postMessage.md","raw":"---\ntitle: postMessage异步通讯\ndate: 2019-07-17 14:17:04\ntags: JS\n---\n## 1.文档目的\nweb端异步消息传递机制,特别是对于跨域情况下的通讯,显得尤其重要,主要应用场景iframe和webview\n\n## 2.实践积累\niframe形式\n```\n// 父页面\n<html>\n  <body>\n    <p>我是父页面</p>\n    <button id=\"btn\">获取子页面信息</button>\n    <iframe id=\"mapIframe\" height=\"850px\" width=\"1500px\" src=\"http://fp1.xys.gov.cn/map/index.html#/map\"></iframe>\n    <script>\n      // 触发事件\n      document.getElementById('btn').addEventListener('click', function() {\n        document.getElementById('mapIframe').contentWindow.postMessage(JSON.stringify({ data: 'getLocation' }), '*')\n      })\n      // 父页面监听事件\n      window.addEventListener('message',function(event) {\n        console.log(JSON.parse(event.data), '--父页面监听数据')\n      },false)\n    </script>\n  </body>\n</html>\n// 子页面监听\n      window.addEventListener('message', function (event) {\n        if (typeof (event.data) === 'string') {\n          console.log(JSON.parse(event.data), '--子页面接收的数据')\n          // 向父窗口发送事件\n          if (window.parent && window.postMessage) {\n            // let message = { loadFinish: true }\n            window.parent.postMessage(JSON.stringify({ data: 'success' }), '*')\n          }\n        }\n      }, false)\n```\nwebview形式\n```\n// RN项目父页面\nimport { WebView } from 'react-native-webview'\n<View style={{ flex: 1 }}>\n        <WebView\n          ref={ref => (this.webView = ref)}\n          source={webviewUrl}\n          startInLoadingState={true}\n          renderLoading={() => <Loading active />}\n          javaScriptEnabled={true}\n          domStorageEnabled={true}\n          useWebKit={true}\n          automaticallyAdjustContentInsets={false}\n          onLoadEnd={this.onLoadEnd}\n          onLoadStart={this.onLoadStart}\n          obLoadEnd={this.onLoadEnd}\n          onError={this.onLoadError}\n          onMessage={this.onMessage}\n        />\n      </View>\n\n   onLoadEnd = () => {\n    this.webView.postMessage(JSON.stringify({data:'hi'}))\n  }\n\n    onMessage = event => {\n    try {\n      let { loadFinish } = JSON.parse(event.nativeEvent.data)\n    } catch (error) {}\n  }\n// web端子页面\nwindow.onload = () => {\n  document.addEventListener('message', ({ data }) => {\n    const msg = JSON.parse(data);\n  })\n  // 消息回传给rn端\n  if (window.postMessage) {\n            let message = { loadFinish: true };\n            window.postMessage(JSON.stringify(message));\n          }\n}\n```\n","slug":"postMessage","published":1,"updated":"2019-07-17T06:34:38.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezx2002bxijkfpflue0x","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>web端异步消息传递机制,特别是对于跨域情况下的通讯,显得尤其重要,主要应用场景iframe和webview</p>\n<h2 id=\"2-实践积累\"><a href=\"#2-实践积累\" class=\"headerlink\" title=\"2.实践积累\"></a>2.实践积累</h2><p>iframe形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父页面</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;p&gt;我是父页面&lt;/p&gt;</span><br><span class=\"line\">    &lt;button id=&quot;btn&quot;&gt;获取子页面信息&lt;/button&gt;</span><br><span class=\"line\">    &lt;iframe id=&quot;mapIframe&quot; height=&quot;850px&quot; width=&quot;1500px&quot; src=&quot;http://fp1.xys.gov.cn/map/index.html#/map&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      // 触发事件</span><br><span class=\"line\">      document.getElementById(&apos;btn&apos;).addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        document.getElementById(&apos;mapIframe&apos;).contentWindow.postMessage(JSON.stringify(&#123; data: &apos;getLocation&apos; &#125;), &apos;*&apos;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      // 父页面监听事件</span><br><span class=\"line\">      window.addEventListener(&apos;message&apos;,function(event) &#123;</span><br><span class=\"line\">        console.log(JSON.parse(event.data), &apos;--父页面监听数据&apos;)</span><br><span class=\"line\">      &#125;,false)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">// 子页面监听</span><br><span class=\"line\">      window.addEventListener(&apos;message&apos;, function (event) &#123;</span><br><span class=\"line\">        if (typeof (event.data) === &apos;string&apos;) &#123;</span><br><span class=\"line\">          console.log(JSON.parse(event.data), &apos;--子页面接收的数据&apos;)</span><br><span class=\"line\">          // 向父窗口发送事件</span><br><span class=\"line\">          if (window.parent &amp;&amp; window.postMessage) &#123;</span><br><span class=\"line\">            // let message = &#123; loadFinish: true &#125;</span><br><span class=\"line\">            window.parent.postMessage(JSON.stringify(&#123; data: &apos;success&apos; &#125;), &apos;*&apos;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, false)</span><br></pre></td></tr></table></figure></p>\n<p>webview形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RN项目父页面</span><br><span class=\"line\">import &#123; WebView &#125; from &apos;react-native-webview&apos;</span><br><span class=\"line\">&lt;View style=&#123;&#123; flex: 1 &#125;&#125;&gt;</span><br><span class=\"line\">        &lt;WebView</span><br><span class=\"line\">          ref=&#123;ref =&gt; (this.webView = ref)&#125;</span><br><span class=\"line\">          source=&#123;webviewUrl&#125;</span><br><span class=\"line\">          startInLoadingState=&#123;true&#125;</span><br><span class=\"line\">          renderLoading=&#123;() =&gt; &lt;Loading active /&gt;&#125;</span><br><span class=\"line\">          javaScriptEnabled=&#123;true&#125;</span><br><span class=\"line\">          domStorageEnabled=&#123;true&#125;</span><br><span class=\"line\">          useWebKit=&#123;true&#125;</span><br><span class=\"line\">          automaticallyAdjustContentInsets=&#123;false&#125;</span><br><span class=\"line\">          onLoadEnd=&#123;this.onLoadEnd&#125;</span><br><span class=\"line\">          onLoadStart=&#123;this.onLoadStart&#125;</span><br><span class=\"line\">          obLoadEnd=&#123;this.onLoadEnd&#125;</span><br><span class=\"line\">          onError=&#123;this.onLoadError&#125;</span><br><span class=\"line\">          onMessage=&#123;this.onMessage&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   onLoadEnd = () =&gt; &#123;</span><br><span class=\"line\">    this.webView.postMessage(JSON.stringify(&#123;data:&apos;hi&apos;&#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    onMessage = event =&gt; &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      let &#123; loadFinish &#125; = JSON.parse(event.nativeEvent.data)</span><br><span class=\"line\">    &#125; catch (error) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">// web端子页面</span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  document.addEventListener(&apos;message&apos;, (&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">    const msg = JSON.parse(data);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 消息回传给rn端</span><br><span class=\"line\">  if (window.postMessage) &#123;</span><br><span class=\"line\">            let message = &#123; loadFinish: true &#125;;</span><br><span class=\"line\">            window.postMessage(JSON.stringify(message));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>web端异步消息传递机制,特别是对于跨域情况下的通讯,显得尤其重要,主要应用场景iframe和webview</p>\n<h2 id=\"2-实践积累\"><a href=\"#2-实践积累\" class=\"headerlink\" title=\"2.实践积累\"></a>2.实践积累</h2><p>iframe形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父页面</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;p&gt;我是父页面&lt;/p&gt;</span><br><span class=\"line\">    &lt;button id=&quot;btn&quot;&gt;获取子页面信息&lt;/button&gt;</span><br><span class=\"line\">    &lt;iframe id=&quot;mapIframe&quot; height=&quot;850px&quot; width=&quot;1500px&quot; src=&quot;http://fp1.xys.gov.cn/map/index.html#/map&quot;&gt;&lt;/iframe&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      // 触发事件</span><br><span class=\"line\">      document.getElementById(&apos;btn&apos;).addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        document.getElementById(&apos;mapIframe&apos;).contentWindow.postMessage(JSON.stringify(&#123; data: &apos;getLocation&apos; &#125;), &apos;*&apos;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      // 父页面监听事件</span><br><span class=\"line\">      window.addEventListener(&apos;message&apos;,function(event) &#123;</span><br><span class=\"line\">        console.log(JSON.parse(event.data), &apos;--父页面监听数据&apos;)</span><br><span class=\"line\">      &#125;,false)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">// 子页面监听</span><br><span class=\"line\">      window.addEventListener(&apos;message&apos;, function (event) &#123;</span><br><span class=\"line\">        if (typeof (event.data) === &apos;string&apos;) &#123;</span><br><span class=\"line\">          console.log(JSON.parse(event.data), &apos;--子页面接收的数据&apos;)</span><br><span class=\"line\">          // 向父窗口发送事件</span><br><span class=\"line\">          if (window.parent &amp;&amp; window.postMessage) &#123;</span><br><span class=\"line\">            // let message = &#123; loadFinish: true &#125;</span><br><span class=\"line\">            window.parent.postMessage(JSON.stringify(&#123; data: &apos;success&apos; &#125;), &apos;*&apos;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, false)</span><br></pre></td></tr></table></figure></p>\n<p>webview形式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RN项目父页面</span><br><span class=\"line\">import &#123; WebView &#125; from &apos;react-native-webview&apos;</span><br><span class=\"line\">&lt;View style=&#123;&#123; flex: 1 &#125;&#125;&gt;</span><br><span class=\"line\">        &lt;WebView</span><br><span class=\"line\">          ref=&#123;ref =&gt; (this.webView = ref)&#125;</span><br><span class=\"line\">          source=&#123;webviewUrl&#125;</span><br><span class=\"line\">          startInLoadingState=&#123;true&#125;</span><br><span class=\"line\">          renderLoading=&#123;() =&gt; &lt;Loading active /&gt;&#125;</span><br><span class=\"line\">          javaScriptEnabled=&#123;true&#125;</span><br><span class=\"line\">          domStorageEnabled=&#123;true&#125;</span><br><span class=\"line\">          useWebKit=&#123;true&#125;</span><br><span class=\"line\">          automaticallyAdjustContentInsets=&#123;false&#125;</span><br><span class=\"line\">          onLoadEnd=&#123;this.onLoadEnd&#125;</span><br><span class=\"line\">          onLoadStart=&#123;this.onLoadStart&#125;</span><br><span class=\"line\">          obLoadEnd=&#123;this.onLoadEnd&#125;</span><br><span class=\"line\">          onError=&#123;this.onLoadError&#125;</span><br><span class=\"line\">          onMessage=&#123;this.onMessage&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   onLoadEnd = () =&gt; &#123;</span><br><span class=\"line\">    this.webView.postMessage(JSON.stringify(&#123;data:&apos;hi&apos;&#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    onMessage = event =&gt; &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      let &#123; loadFinish &#125; = JSON.parse(event.nativeEvent.data)</span><br><span class=\"line\">    &#125; catch (error) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">// web端子页面</span><br><span class=\"line\">window.onload = () =&gt; &#123;</span><br><span class=\"line\">  document.addEventListener(&apos;message&apos;, (&#123; data &#125;) =&gt; &#123;</span><br><span class=\"line\">    const msg = JSON.parse(data);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // 消息回传给rn端</span><br><span class=\"line\">  if (window.postMessage) &#123;</span><br><span class=\"line\">            let message = &#123; loadFinish: true &#125;;</span><br><span class=\"line\">            window.postMessage(JSON.stringify(message));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"基于H5+的混合app","date":"2019-07-31T05:11:06.000Z","_content":"## 1.技术概述\n基于H5+的混合app开发模式很好的将传统开发web的方式应用于开发app,是一套代码同时适用于微信内页面,web端,手机H5,甚至App,而且低技术成本的解决方案.\n本文记录vue cli3,h5+,Native.js相结合的方式,开发app[安卓,ios]\n参考文档:[vue cli3.0](https://cli.vuejs.org/zh/), [Vant](https://youzan.github.io/vant/#/zh-CN/intro), [H5+](http://www.html5plus.org/doc/h5p.html), [Native.js入门指南](http://ask.dcloud.net.cn/article/88), [Native.js示例汇总](https://ask.dcloud.net.cn/article/114)\n\n## 2.要点指引\n(1)用vue cli3.0搭建开发web端单页面的方式,用google调试开发移动端页面\n(2)以上项目编译后用HBuilder打开,并右键单击转换为APP项目,此时可用mac自带模拟器打开,完善应用相关配置后,可打包应用.\n(3)调用原生的能力基于H5+(注意必须放在plusready事件回调中),且可进一步借助Native.js调用原生能力.\n(4)关于App项目IOS模拟器的调试参考[调试混合app攻略](https://ask.dcloud.net.cn/article/143),基于Safari浏览器\n\n## 3.代码\n(1)在vue的methods方法中编写H5+移动设备代码,只能在移动设备(包括模拟器)中测试\n```\n<template>\n  <div>\n    <van-row>\n      <van-col span=\"8\">\n        <van-button type=\"info\" @click=\"testNative\">测试原生方法</van-button>\n      </van-col>\n    </van-row>\n  </div>\n</template>\n<script>\nexport default {\n  methods: {\n    testNative () {\n      try {\n        // eslint-disable-next-line\n        if (plus.os.name === 'Android') {\n          // H5+ 方法:返回系统版本\n          // eslint-disable-next-line\n          alert(plus.os.version)\n          // eslint-disable-next-line\n        } else if (plus.os.name === 'iOS') {\n          // 调用原生IOS方法:返回设备名称\n          // eslint-disable-next-line\n          let UIDevice = plus.ios.importClass('UIDevice')\n          let currentDevice = UIDevice.currentDevice()\n          alert(currentDevice.name())\n        }\n      } catch (err) {\n        console.log(err.toString(), '---原生语法请在对应移动设备测试')\n      }\n    }\n  },\n  mounted () {\n    this.testNative()\n  }\n}\n</script>\n<style lang=\"less\" scoped>\n@import '~../../style/global.less';\n</style>\n```\n","source":"_posts/2019-07-31-h5plus-app.md","raw":"---\ntitle: 基于H5+的混合app\ndate: 2019-07-31 13:11:06\ntags: Vue\n---\n## 1.技术概述\n基于H5+的混合app开发模式很好的将传统开发web的方式应用于开发app,是一套代码同时适用于微信内页面,web端,手机H5,甚至App,而且低技术成本的解决方案.\n本文记录vue cli3,h5+,Native.js相结合的方式,开发app[安卓,ios]\n参考文档:[vue cli3.0](https://cli.vuejs.org/zh/), [Vant](https://youzan.github.io/vant/#/zh-CN/intro), [H5+](http://www.html5plus.org/doc/h5p.html), [Native.js入门指南](http://ask.dcloud.net.cn/article/88), [Native.js示例汇总](https://ask.dcloud.net.cn/article/114)\n\n## 2.要点指引\n(1)用vue cli3.0搭建开发web端单页面的方式,用google调试开发移动端页面\n(2)以上项目编译后用HBuilder打开,并右键单击转换为APP项目,此时可用mac自带模拟器打开,完善应用相关配置后,可打包应用.\n(3)调用原生的能力基于H5+(注意必须放在plusready事件回调中),且可进一步借助Native.js调用原生能力.\n(4)关于App项目IOS模拟器的调试参考[调试混合app攻略](https://ask.dcloud.net.cn/article/143),基于Safari浏览器\n\n## 3.代码\n(1)在vue的methods方法中编写H5+移动设备代码,只能在移动设备(包括模拟器)中测试\n```\n<template>\n  <div>\n    <van-row>\n      <van-col span=\"8\">\n        <van-button type=\"info\" @click=\"testNative\">测试原生方法</van-button>\n      </van-col>\n    </van-row>\n  </div>\n</template>\n<script>\nexport default {\n  methods: {\n    testNative () {\n      try {\n        // eslint-disable-next-line\n        if (plus.os.name === 'Android') {\n          // H5+ 方法:返回系统版本\n          // eslint-disable-next-line\n          alert(plus.os.version)\n          // eslint-disable-next-line\n        } else if (plus.os.name === 'iOS') {\n          // 调用原生IOS方法:返回设备名称\n          // eslint-disable-next-line\n          let UIDevice = plus.ios.importClass('UIDevice')\n          let currentDevice = UIDevice.currentDevice()\n          alert(currentDevice.name())\n        }\n      } catch (err) {\n        console.log(err.toString(), '---原生语法请在对应移动设备测试')\n      }\n    }\n  },\n  mounted () {\n    this.testNative()\n  }\n}\n</script>\n<style lang=\"less\" scoped>\n@import '~../../style/global.less';\n</style>\n```\n","slug":"h5plus-app","published":1,"updated":"2019-07-31T08:02:10.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezx3002exijk605tblod","content":"<h2 id=\"1-技术概述\"><a href=\"#1-技术概述\" class=\"headerlink\" title=\"1.技术概述\"></a>1.技术概述</h2><p>基于H5+的混合app开发模式很好的将传统开发web的方式应用于开发app,是一套代码同时适用于微信内页面,web端,手机H5,甚至App,而且低技术成本的解决方案.<br>本文记录vue cli3,h5+,Native.js相结合的方式,开发app[安卓,ios]<br>参考文档:<a href=\"https://cli.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vue cli3.0</a>, <a href=\"https://youzan.github.io/vant/#/zh-CN/intro\" target=\"_blank\" rel=\"noopener\">Vant</a>, <a href=\"http://www.html5plus.org/doc/h5p.html\" target=\"_blank\" rel=\"noopener\">H5+</a>, <a href=\"http://ask.dcloud.net.cn/article/88\" target=\"_blank\" rel=\"noopener\">Native.js入门指南</a>, <a href=\"https://ask.dcloud.net.cn/article/114\" target=\"_blank\" rel=\"noopener\">Native.js示例汇总</a></p>\n<h2 id=\"2-要点指引\"><a href=\"#2-要点指引\" class=\"headerlink\" title=\"2.要点指引\"></a>2.要点指引</h2><p>(1)用vue cli3.0搭建开发web端单页面的方式,用google调试开发移动端页面<br>(2)以上项目编译后用HBuilder打开,并右键单击转换为APP项目,此时可用mac自带模拟器打开,完善应用相关配置后,可打包应用.<br>(3)调用原生的能力基于H5+(注意必须放在plusready事件回调中),且可进一步借助Native.js调用原生能力.<br>(4)关于App项目IOS模拟器的调试参考<a href=\"https://ask.dcloud.net.cn/article/143\" target=\"_blank\" rel=\"noopener\">调试混合app攻略</a>,基于Safari浏览器</p>\n<h2 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3.代码\"></a>3.代码</h2><p>(1)在vue的methods方法中编写H5+移动设备代码,只能在移动设备(包括模拟器)中测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;van-row&gt;</span><br><span class=\"line\">      &lt;van-col span=&quot;8&quot;&gt;</span><br><span class=\"line\">        &lt;van-button type=&quot;info&quot; @click=&quot;testNative&quot;&gt;测试原生方法&lt;/van-button&gt;</span><br><span class=\"line\">      &lt;/van-col&gt;</span><br><span class=\"line\">    &lt;/van-row&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    testNative () &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        // eslint-disable-next-line</span><br><span class=\"line\">        if (plus.os.name === &apos;Android&apos;) &#123;</span><br><span class=\"line\">          // H5+ 方法:返回系统版本</span><br><span class=\"line\">          // eslint-disable-next-line</span><br><span class=\"line\">          alert(plus.os.version)</span><br><span class=\"line\">          // eslint-disable-next-line</span><br><span class=\"line\">        &#125; else if (plus.os.name === &apos;iOS&apos;) &#123;</span><br><span class=\"line\">          // 调用原生IOS方法:返回设备名称</span><br><span class=\"line\">          // eslint-disable-next-line</span><br><span class=\"line\">          let UIDevice = plus.ios.importClass(&apos;UIDevice&apos;)</span><br><span class=\"line\">          let currentDevice = UIDevice.currentDevice()</span><br><span class=\"line\">          alert(currentDevice.name())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (err) &#123;</span><br><span class=\"line\">        console.log(err.toString(), &apos;---原生语法请在对应移动设备测试&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    this.testNative()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class=\"line\">@import &apos;~../../style/global.less&apos;;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-技术概述\"><a href=\"#1-技术概述\" class=\"headerlink\" title=\"1.技术概述\"></a>1.技术概述</h2><p>基于H5+的混合app开发模式很好的将传统开发web的方式应用于开发app,是一套代码同时适用于微信内页面,web端,手机H5,甚至App,而且低技术成本的解决方案.<br>本文记录vue cli3,h5+,Native.js相结合的方式,开发app[安卓,ios]<br>参考文档:<a href=\"https://cli.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vue cli3.0</a>, <a href=\"https://youzan.github.io/vant/#/zh-CN/intro\" target=\"_blank\" rel=\"noopener\">Vant</a>, <a href=\"http://www.html5plus.org/doc/h5p.html\" target=\"_blank\" rel=\"noopener\">H5+</a>, <a href=\"http://ask.dcloud.net.cn/article/88\" target=\"_blank\" rel=\"noopener\">Native.js入门指南</a>, <a href=\"https://ask.dcloud.net.cn/article/114\" target=\"_blank\" rel=\"noopener\">Native.js示例汇总</a></p>\n<h2 id=\"2-要点指引\"><a href=\"#2-要点指引\" class=\"headerlink\" title=\"2.要点指引\"></a>2.要点指引</h2><p>(1)用vue cli3.0搭建开发web端单页面的方式,用google调试开发移动端页面<br>(2)以上项目编译后用HBuilder打开,并右键单击转换为APP项目,此时可用mac自带模拟器打开,完善应用相关配置后,可打包应用.<br>(3)调用原生的能力基于H5+(注意必须放在plusready事件回调中),且可进一步借助Native.js调用原生能力.<br>(4)关于App项目IOS模拟器的调试参考<a href=\"https://ask.dcloud.net.cn/article/143\" target=\"_blank\" rel=\"noopener\">调试混合app攻略</a>,基于Safari浏览器</p>\n<h2 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3.代码\"></a>3.代码</h2><p>(1)在vue的methods方法中编写H5+移动设备代码,只能在移动设备(包括模拟器)中测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;van-row&gt;</span><br><span class=\"line\">      &lt;van-col span=&quot;8&quot;&gt;</span><br><span class=\"line\">        &lt;van-button type=&quot;info&quot; @click=&quot;testNative&quot;&gt;测试原生方法&lt;/van-button&gt;</span><br><span class=\"line\">      &lt;/van-col&gt;</span><br><span class=\"line\">    &lt;/van-row&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    testNative () &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        // eslint-disable-next-line</span><br><span class=\"line\">        if (plus.os.name === &apos;Android&apos;) &#123;</span><br><span class=\"line\">          // H5+ 方法:返回系统版本</span><br><span class=\"line\">          // eslint-disable-next-line</span><br><span class=\"line\">          alert(plus.os.version)</span><br><span class=\"line\">          // eslint-disable-next-line</span><br><span class=\"line\">        &#125; else if (plus.os.name === &apos;iOS&apos;) &#123;</span><br><span class=\"line\">          // 调用原生IOS方法:返回设备名称</span><br><span class=\"line\">          // eslint-disable-next-line</span><br><span class=\"line\">          let UIDevice = plus.ios.importClass(&apos;UIDevice&apos;)</span><br><span class=\"line\">          let currentDevice = UIDevice.currentDevice()</span><br><span class=\"line\">          alert(currentDevice.name())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; catch (err) &#123;</span><br><span class=\"line\">        console.log(err.toString(), &apos;---原生语法请在对应移动设备测试&apos;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    this.testNative()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class=\"line\">@import &apos;~../../style/global.less&apos;;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ES6","date":"2019-09-29T01:01:14.000Z","_content":"## 1.文档目的\n一句话描述ES6新增核心语法\n\n## 2.要点概述\n### Set\n类似数组但值唯一的数据结构\n### Map\n类似键值对对象但“键”可以是任意类型\n### Symbol\n新增的一种表示独一无二的值的原始数据类型\n### Proxy\n用于修改某些操作的默认行为,可理解为“拦截代理”,eg对于obj的get和set操作\n### Reflect\n增强操作对象语言的内部方法\n### Promise\n保存异步事件的结果，包含pending（进行中）、fulfilled（已成功）和rejected（已失败）三种状态。\n状态凝固时称为resolved“已定型”，通常仅代指fulfilled。\n1)其定义的异步过程就是将状态由pending变化为resolved的过程，抽象代码如下：\n```\nconst promise = new Promise((resolve, reject) => {\n\t\t// resolve和reject其实就是两种状态的回调\n        let _status = true; let _value = null; let _error = null\n        console.log('新实例创建时就会立即执行')\n        if (_status) {\n          return resolve(_value)\n          // console.log('建议加return,否则该位置语句依然后执行，且在回调内容之前执行')\n        } else {\n          return reject(_error)\n          // console.log('同上')\n        }\n      })\n```\n2)实例可用then分别指定resolved和rejected的回调，抽象代码如下：\n```\npromise.then(value => {\n  // success\n  console.log('同步过程执行完毕后才会执行')\n  // 可以继续返回Promise，则第二个then()会接收该实例\n  return new Promise((resolve, reject) => {})\n}, error => {\n  // failure可选，建议用catch()\n})\n.then(value2 =>{})\n.catch(error => {\n\t// rejected和异常建议统一在这里处理\n})\n.finally(() => {\n\t// 无论如何都会执行\n});\n```\n3)Promise.all()接收Promise数组，返回新的Promise实例。race()类似，但取最先返回的值为其成功结果\n```\nconst p = Promise.all([p1, p2, p3]);\np.then((arr) => {\n  // 返回成功数组\n}).catch(error => {\n  // 返回第一个失败原因\n});\n```\n4)Promise.resolve()和Promise.reject()都会直接返回一个Promise对象，只不过默认的状态不同\n### Iterator\n为不同的数据结构(Array,Set,Map[非obj],String)提供统一的访问机制.\n1)Array举例\n```\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\niter.next() // { value: 'a', done: false }\n```\n2）任何部署了Iterator的数据结构，都可用扩展运算符，将其转为数组。\n```\nlet arr = [...iterable];\n```\n3）都可用for...of遍历[建议停用其他循环方式]\n```\nfor (let key of Object.keys(someObject)) {\n  console.log(key + ': ' + someObject[key]);\n}\n```\n### Generator\n一种异步编程解决方案,其函数是状态机，返回的遍历器对象会遍历每个状态。\n1）举例说明Generator的基本结构,及运行原理\n```\n// 必须有“*”号，内部可以用yield表达式\nfunction* hiGenerator() {\n  // 状态1, yield表达式返回值总是undefined，故reset为undefined\n  let reset = yield 'hi';\n  // 状态2\n  return 'end';\n}\n// 调用该函数时，并不会直接运行，而是返回指向内部状态的指针\nlet hi = hiGenerator();\n// 每次调用next()，指针便向下移动一个状态,并返回yield后的值\n// 这里next传入的值会被reset变量接收,这为运行时注入不同的值，提供了解决方案\nhi.next('hi')   // { value: 'hi', done: false }\nhi.next()   // { value: 'end', done: true }\n```\n2）Generator函数的结果可以为Object提供Iterator遍历器函数，for...of遍历Generator函数(的结果)时，不再需要next触发,但不包含return值。\n```\nfunction* objectEntries() {\n  let propKeys = Object.keys(this);\n\n  for (let propKey of propKeys) {\n    yield [propKey, this[propKey]];\n  }\n}\nlet jane = { first: 'Jane', last: 'Doe' };\njane[Symbol.iterator] = objectEntries;\nfor (let [key, value] of jane) {\n  console.log(`${key}: ${value}`);\n}\n// 还可以解构赋值\nconsole.log([...obj]) // ['hi', 'end']\n```\n3)Generator函数不能直接像普通函数一样使用this和new,但可以变通使用:\n```\nfunction* F() {\n  this.a = 1;\n  yield this.b = 2;\n}\nvar f = F.call(F.prototype);\n\nf.next();  // Object {value: 2, done: false}\nf.next();  // Object {value: undefined, done: true}\n\nf.a // 1\nf.b // 2\n```\n4)Generator的状态机实现\n```\n// 传统状态机\nvar ticking = true;\nvar clock = function() {\n  if (ticking)\n    console.log('Tick!');\n  else\n    console.log('Tock!');\n  ticking = !ticking;\n}\n// Generator状态机\nvar clock = function* () {\n  while (true) {\n    console.log('Tick!');\n    yield;\n    console.log('Tock!');\n    yield;\n  }\n};\n```\n5)Generator与协程,上下文\n协程定义:一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。\nGenerator运行时的上下文:执行Generator函数，一旦遇到yield命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行next命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。\n6)Generator异步操作的同步化表达\n```\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = JSON.parse(result);\n    console.log(resp.value);\n}\n\nfunction request(url) {\n  makeAjaxCall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n```\n7)Generator控制流管理[对异步堆栈和队列的实现很有启发]\n假如有多个异步操作依次依赖,那么用回调函数如下:\n```\nstep1(function (value1) {\n  step2(value1, function(value2) {\n  });\n});\n```\n采用 Promise 改写如下:\n```\nPromise.then(step1)\n  .then(function (value2) {\n    // Do something with value2\n  })\n  .done();\n```\n采用 Generator 改写如下:\n```\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n  } catch (e) {\n    // Handle any error from step1 through step2\n  }\n}\n```\n8)可将Generator的返回值视为数组结构:\n```\nfunction* doStuff() {\n  yield fs.readFile.bind(null, 'hello.txt');\n  yield fs.readFile.bind(null, 'world.txt');\n  yield fs.readFile.bind(null, 'and-such.txt');\n}\nfor (task of doStuff()) {\n  // task是一个函数，可以像回调函数那样使用它\n}\n```\n### Async\n像同步一样处理异步问题\n异步解决方案：\n事件监听\n发布/订阅\ncallback\nPromise\nGenerator：基于callback返还指针控制权,继续执行next()\nAsync:基于Generator且内置执行器，返回值是Promise。async函数内部return值会成为then方法的参数\n继发关系(异步继发就是这么简单)：\nlet foo = await getFoo();\nlet bar = await getBar(foo);\n并列关系\nlet [foo, bar] = await Promise.all([getFoo(), getBar()]);\n### Class\n```\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n","source":"_posts/2019-09-29-es6.md","raw":"---\ntitle: ES6\ndate: 2019-09-29 09:01:14\ntags: JS\n---\n## 1.文档目的\n一句话描述ES6新增核心语法\n\n## 2.要点概述\n### Set\n类似数组但值唯一的数据结构\n### Map\n类似键值对对象但“键”可以是任意类型\n### Symbol\n新增的一种表示独一无二的值的原始数据类型\n### Proxy\n用于修改某些操作的默认行为,可理解为“拦截代理”,eg对于obj的get和set操作\n### Reflect\n增强操作对象语言的内部方法\n### Promise\n保存异步事件的结果，包含pending（进行中）、fulfilled（已成功）和rejected（已失败）三种状态。\n状态凝固时称为resolved“已定型”，通常仅代指fulfilled。\n1)其定义的异步过程就是将状态由pending变化为resolved的过程，抽象代码如下：\n```\nconst promise = new Promise((resolve, reject) => {\n\t\t// resolve和reject其实就是两种状态的回调\n        let _status = true; let _value = null; let _error = null\n        console.log('新实例创建时就会立即执行')\n        if (_status) {\n          return resolve(_value)\n          // console.log('建议加return,否则该位置语句依然后执行，且在回调内容之前执行')\n        } else {\n          return reject(_error)\n          // console.log('同上')\n        }\n      })\n```\n2)实例可用then分别指定resolved和rejected的回调，抽象代码如下：\n```\npromise.then(value => {\n  // success\n  console.log('同步过程执行完毕后才会执行')\n  // 可以继续返回Promise，则第二个then()会接收该实例\n  return new Promise((resolve, reject) => {})\n}, error => {\n  // failure可选，建议用catch()\n})\n.then(value2 =>{})\n.catch(error => {\n\t// rejected和异常建议统一在这里处理\n})\n.finally(() => {\n\t// 无论如何都会执行\n});\n```\n3)Promise.all()接收Promise数组，返回新的Promise实例。race()类似，但取最先返回的值为其成功结果\n```\nconst p = Promise.all([p1, p2, p3]);\np.then((arr) => {\n  // 返回成功数组\n}).catch(error => {\n  // 返回第一个失败原因\n});\n```\n4)Promise.resolve()和Promise.reject()都会直接返回一个Promise对象，只不过默认的状态不同\n### Iterator\n为不同的数据结构(Array,Set,Map[非obj],String)提供统一的访问机制.\n1)Array举例\n```\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\niter.next() // { value: 'a', done: false }\n```\n2）任何部署了Iterator的数据结构，都可用扩展运算符，将其转为数组。\n```\nlet arr = [...iterable];\n```\n3）都可用for...of遍历[建议停用其他循环方式]\n```\nfor (let key of Object.keys(someObject)) {\n  console.log(key + ': ' + someObject[key]);\n}\n```\n### Generator\n一种异步编程解决方案,其函数是状态机，返回的遍历器对象会遍历每个状态。\n1）举例说明Generator的基本结构,及运行原理\n```\n// 必须有“*”号，内部可以用yield表达式\nfunction* hiGenerator() {\n  // 状态1, yield表达式返回值总是undefined，故reset为undefined\n  let reset = yield 'hi';\n  // 状态2\n  return 'end';\n}\n// 调用该函数时，并不会直接运行，而是返回指向内部状态的指针\nlet hi = hiGenerator();\n// 每次调用next()，指针便向下移动一个状态,并返回yield后的值\n// 这里next传入的值会被reset变量接收,这为运行时注入不同的值，提供了解决方案\nhi.next('hi')   // { value: 'hi', done: false }\nhi.next()   // { value: 'end', done: true }\n```\n2）Generator函数的结果可以为Object提供Iterator遍历器函数，for...of遍历Generator函数(的结果)时，不再需要next触发,但不包含return值。\n```\nfunction* objectEntries() {\n  let propKeys = Object.keys(this);\n\n  for (let propKey of propKeys) {\n    yield [propKey, this[propKey]];\n  }\n}\nlet jane = { first: 'Jane', last: 'Doe' };\njane[Symbol.iterator] = objectEntries;\nfor (let [key, value] of jane) {\n  console.log(`${key}: ${value}`);\n}\n// 还可以解构赋值\nconsole.log([...obj]) // ['hi', 'end']\n```\n3)Generator函数不能直接像普通函数一样使用this和new,但可以变通使用:\n```\nfunction* F() {\n  this.a = 1;\n  yield this.b = 2;\n}\nvar f = F.call(F.prototype);\n\nf.next();  // Object {value: 2, done: false}\nf.next();  // Object {value: undefined, done: true}\n\nf.a // 1\nf.b // 2\n```\n4)Generator的状态机实现\n```\n// 传统状态机\nvar ticking = true;\nvar clock = function() {\n  if (ticking)\n    console.log('Tick!');\n  else\n    console.log('Tock!');\n  ticking = !ticking;\n}\n// Generator状态机\nvar clock = function* () {\n  while (true) {\n    console.log('Tick!');\n    yield;\n    console.log('Tock!');\n    yield;\n  }\n};\n```\n5)Generator与协程,上下文\n协程定义:一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。\nGenerator运行时的上下文:执行Generator函数，一旦遇到yield命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行next命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。\n6)Generator异步操作的同步化表达\n```\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = JSON.parse(result);\n    console.log(resp.value);\n}\n\nfunction request(url) {\n  makeAjaxCall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n```\n7)Generator控制流管理[对异步堆栈和队列的实现很有启发]\n假如有多个异步操作依次依赖,那么用回调函数如下:\n```\nstep1(function (value1) {\n  step2(value1, function(value2) {\n  });\n});\n```\n采用 Promise 改写如下:\n```\nPromise.then(step1)\n  .then(function (value2) {\n    // Do something with value2\n  })\n  .done();\n```\n采用 Generator 改写如下:\n```\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n  } catch (e) {\n    // Handle any error from step1 through step2\n  }\n}\n```\n8)可将Generator的返回值视为数组结构:\n```\nfunction* doStuff() {\n  yield fs.readFile.bind(null, 'hello.txt');\n  yield fs.readFile.bind(null, 'world.txt');\n  yield fs.readFile.bind(null, 'and-such.txt');\n}\nfor (task of doStuff()) {\n  // task是一个函数，可以像回调函数那样使用它\n}\n```\n### Async\n像同步一样处理异步问题\n异步解决方案：\n事件监听\n发布/订阅\ncallback\nPromise\nGenerator：基于callback返还指针控制权,继续执行next()\nAsync:基于Generator且内置执行器，返回值是Promise。async函数内部return值会成为then方法的参数\n继发关系(异步继发就是这么简单)：\nlet foo = await getFoo();\nlet bar = await getBar(foo);\n并列关系\nlet [foo, bar] = await Promise.all([getFoo(), getBar()]);\n### Class\n```\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n","slug":"es6","published":1,"updated":"2019-09-29T11:06:30.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8ezx4002gxijke7ld06jp","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一句话描述ES6新增核心语法</p>\n<h2 id=\"2-要点概述\"><a href=\"#2-要点概述\" class=\"headerlink\" title=\"2.要点概述\"></a>2.要点概述</h2><h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>类似数组但值唯一的数据结构</p>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>类似键值对对象但“键”可以是任意类型</p>\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><p>新增的一种表示独一无二的值的原始数据类型</p>\n<h3 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h3><p>用于修改某些操作的默认行为,可理解为“拦截代理”,eg对于obj的get和set操作</p>\n<h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><p>增强操作对象语言的内部方法</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>保存异步事件的结果，包含pending（进行中）、fulfilled（已成功）和rejected（已失败）三种状态。<br>状态凝固时称为resolved“已定型”，通常仅代指fulfilled。<br>1)其定义的异步过程就是将状态由pending变化为resolved的过程，抽象代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\t// resolve和reject其实就是两种状态的回调</span><br><span class=\"line\">        let _status = true; let _value = null; let _error = null</span><br><span class=\"line\">        console.log(&apos;新实例创建时就会立即执行&apos;)</span><br><span class=\"line\">        if (_status) &#123;</span><br><span class=\"line\">          return resolve(_value)</span><br><span class=\"line\">          // console.log(&apos;建议加return,否则该位置语句依然后执行，且在回调内容之前执行&apos;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          return reject(_error)</span><br><span class=\"line\">          // console.log(&apos;同上&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>2)实例可用then分别指定resolved和rejected的回调，抽象代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(value =&gt; &#123;</span><br><span class=\"line\">  // success</span><br><span class=\"line\">  console.log(&apos;同步过程执行完毕后才会执行&apos;)</span><br><span class=\"line\">  // 可以继续返回Promise，则第二个then()会接收该实例</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;&#125;)</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  // failure可选，建议用catch()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(value2 =&gt;&#123;&#125;)</span><br><span class=\"line\">.catch(error =&gt; &#123;</span><br><span class=\"line\">\t// rejected和异常建议统一在这里处理</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.finally(() =&gt; &#123;</span><br><span class=\"line\">\t// 无论如何都会执行</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>3)Promise.all()接收Promise数组，返回新的Promise实例。race()类似，但取最先返回的值为其成功结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p = Promise.all([p1, p2, p3]);</span><br><span class=\"line\">p.then((arr) =&gt; &#123;</span><br><span class=\"line\">  // 返回成功数组</span><br><span class=\"line\">&#125;).catch(error =&gt; &#123;</span><br><span class=\"line\">  // 返回第一个失败原因</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>4)Promise.resolve()和Promise.reject()都会直接返回一个Promise对象，只不过默认的状态不同</p>\n<h3 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h3><p>为不同的数据结构(Array,Set,Map[非obj],String)提供统一的访问机制.<br>1)Array举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">let iter = arr[Symbol.iterator]();</span><br><span class=\"line\">iter.next() // &#123; value: &apos;a&apos;, done: false &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2）任何部署了Iterator的数据结构，都可用扩展运算符，将其转为数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [...iterable];</span><br></pre></td></tr></table></figure></p>\n<p>3）都可用for…of遍历[建议停用其他循环方式]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let key of Object.keys(someObject)) &#123;</span><br><span class=\"line\">  console.log(key + &apos;: &apos; + someObject[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h3><p>一种异步编程解决方案,其函数是状态机，返回的遍历器对象会遍历每个状态。<br>1）举例说明Generator的基本结构,及运行原理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 必须有“*”号，内部可以用yield表达式</span><br><span class=\"line\">function* hiGenerator() &#123;</span><br><span class=\"line\">  // 状态1, yield表达式返回值总是undefined，故reset为undefined</span><br><span class=\"line\">  let reset = yield &apos;hi&apos;;</span><br><span class=\"line\">  // 状态2</span><br><span class=\"line\">  return &apos;end&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用该函数时，并不会直接运行，而是返回指向内部状态的指针</span><br><span class=\"line\">let hi = hiGenerator();</span><br><span class=\"line\">// 每次调用next()，指针便向下移动一个状态,并返回yield后的值</span><br><span class=\"line\">// 这里next传入的值会被reset变量接收,这为运行时注入不同的值，提供了解决方案</span><br><span class=\"line\">hi.next(&apos;hi&apos;)   // &#123; value: &apos;hi&apos;, done: false &#125;</span><br><span class=\"line\">hi.next()   // &#123; value: &apos;end&apos;, done: true &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2）Generator函数的结果可以为Object提供Iterator遍历器函数，for…of遍历Generator函数(的结果)时，不再需要next触发,但不包含return值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* objectEntries() &#123;</span><br><span class=\"line\">  let propKeys = Object.keys(this);</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let propKey of propKeys) &#123;</span><br><span class=\"line\">    yield [propKey, this[propKey]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let jane = &#123; first: &apos;Jane&apos;, last: &apos;Doe&apos; &#125;;</span><br><span class=\"line\">jane[Symbol.iterator] = objectEntries;</span><br><span class=\"line\">for (let [key, value] of jane) &#123;</span><br><span class=\"line\">  console.log(`$&#123;key&#125;: $&#123;value&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 还可以解构赋值</span><br><span class=\"line\">console.log([...obj]) // [&apos;hi&apos;, &apos;end&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>3)Generator函数不能直接像普通函数一样使用this和new,但可以变通使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* F() &#123;</span><br><span class=\"line\">  this.a = 1;</span><br><span class=\"line\">  yield this.b = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f = F.call(F.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">f.next();  // Object &#123;value: 2, done: false&#125;</span><br><span class=\"line\">f.next();  // Object &#123;value: undefined, done: true&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f.a // 1</span><br><span class=\"line\">f.b // 2</span><br></pre></td></tr></table></figure></p>\n<p>4)Generator的状态机实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传统状态机</span><br><span class=\"line\">var ticking = true;</span><br><span class=\"line\">var clock = function() &#123;</span><br><span class=\"line\">  if (ticking)</span><br><span class=\"line\">    console.log(&apos;Tick!&apos;);</span><br><span class=\"line\">  else</span><br><span class=\"line\">    console.log(&apos;Tock!&apos;);</span><br><span class=\"line\">  ticking = !ticking;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// Generator状态机</span><br><span class=\"line\">var clock = function* () &#123;</span><br><span class=\"line\">  while (true) &#123;</span><br><span class=\"line\">    console.log(&apos;Tick!&apos;);</span><br><span class=\"line\">    yield;</span><br><span class=\"line\">    console.log(&apos;Tock!&apos;);</span><br><span class=\"line\">    yield;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>5)Generator与协程,上下文<br>协程定义:一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。<br>Generator运行时的上下文:执行Generator函数，一旦遇到yield命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行next命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。<br>6)Generator异步操作的同步化表达<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* main() &#123;</span><br><span class=\"line\">  var result = yield request(&quot;http://some.url&quot;);</span><br><span class=\"line\">  var resp = JSON.parse(result);</span><br><span class=\"line\">    console.log(resp.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function request(url) &#123;</span><br><span class=\"line\">  makeAjaxCall(url, function(response)&#123;</span><br><span class=\"line\">    it.next(response);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var it = main();</span><br><span class=\"line\">it.next();</span><br></pre></td></tr></table></figure></p>\n<p>7)Generator控制流管理[对异步堆栈和队列的实现很有启发]<br>假如有多个异步操作依次依赖,那么用回调函数如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">step1(function (value1) &#123;</span><br><span class=\"line\">  step2(value1, function(value2) &#123;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>采用 Promise 改写如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.then(step1)</span><br><span class=\"line\">  .then(function (value2) &#123;</span><br><span class=\"line\">    // Do something with value2</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .done();</span><br></pre></td></tr></table></figure></p>\n<p>采用 Generator 改写如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* longRunningTask(value1) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    var value2 = yield step1(value1);</span><br><span class=\"line\">    var value3 = yield step2(value2);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">    // Handle any error from step1 through step2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>8)可将Generator的返回值视为数组结构:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* doStuff() &#123;</span><br><span class=\"line\">  yield fs.readFile.bind(null, &apos;hello.txt&apos;);</span><br><span class=\"line\">  yield fs.readFile.bind(null, &apos;world.txt&apos;);</span><br><span class=\"line\">  yield fs.readFile.bind(null, &apos;and-such.txt&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (task of doStuff()) &#123;</span><br><span class=\"line\">  // task是一个函数，可以像回调函数那样使用它</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"Async\"></a>Async</h3><p>像同步一样处理异步问题<br>异步解决方案：<br>事件监听<br>发布/订阅<br>callback<br>Promise<br>Generator：基于callback返还指针控制权,继续执行next()<br>Async:基于Generator且内置执行器，返回值是Promise。async函数内部return值会成为then方法的参数<br>继发关系(异步继发就是这么简单)：<br>let foo = await getFoo();<br>let bar = await getBar(foo);<br>并列关系<br>let [foo, bar] = await Promise.all([getFoo(), getBar()]);</p>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ColorPoint extends Point &#123;</span><br><span class=\"line\">  constructor(x, y, color) &#123;</span><br><span class=\"line\">    super(x, y); // 调用父类的constructor(x, y)</span><br><span class=\"line\">    this.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return this.color + &apos; &apos; + super.toString(); // 调用父类的toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一句话描述ES6新增核心语法</p>\n<h2 id=\"2-要点概述\"><a href=\"#2-要点概述\" class=\"headerlink\" title=\"2.要点概述\"></a>2.要点概述</h2><h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p>类似数组但值唯一的数据结构</p>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>类似键值对对象但“键”可以是任意类型</p>\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><p>新增的一种表示独一无二的值的原始数据类型</p>\n<h3 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h3><p>用于修改某些操作的默认行为,可理解为“拦截代理”,eg对于obj的get和set操作</p>\n<h3 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h3><p>增强操作对象语言的内部方法</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>保存异步事件的结果，包含pending（进行中）、fulfilled（已成功）和rejected（已失败）三种状态。<br>状态凝固时称为resolved“已定型”，通常仅代指fulfilled。<br>1)其定义的异步过程就是将状态由pending变化为resolved的过程，抽象代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t\t// resolve和reject其实就是两种状态的回调</span><br><span class=\"line\">        let _status = true; let _value = null; let _error = null</span><br><span class=\"line\">        console.log(&apos;新实例创建时就会立即执行&apos;)</span><br><span class=\"line\">        if (_status) &#123;</span><br><span class=\"line\">          return resolve(_value)</span><br><span class=\"line\">          // console.log(&apos;建议加return,否则该位置语句依然后执行，且在回调内容之前执行&apos;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          return reject(_error)</span><br><span class=\"line\">          // console.log(&apos;同上&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>2)实例可用then分别指定resolved和rejected的回调，抽象代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(value =&gt; &#123;</span><br><span class=\"line\">  // success</span><br><span class=\"line\">  console.log(&apos;同步过程执行完毕后才会执行&apos;)</span><br><span class=\"line\">  // 可以继续返回Promise，则第二个then()会接收该实例</span><br><span class=\"line\">  return new Promise((resolve, reject) =&gt; &#123;&#125;)</span><br><span class=\"line\">&#125;, error =&gt; &#123;</span><br><span class=\"line\">  // failure可选，建议用catch()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(value2 =&gt;&#123;&#125;)</span><br><span class=\"line\">.catch(error =&gt; &#123;</span><br><span class=\"line\">\t// rejected和异常建议统一在这里处理</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.finally(() =&gt; &#123;</span><br><span class=\"line\">\t// 无论如何都会执行</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>3)Promise.all()接收Promise数组，返回新的Promise实例。race()类似，但取最先返回的值为其成功结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const p = Promise.all([p1, p2, p3]);</span><br><span class=\"line\">p.then((arr) =&gt; &#123;</span><br><span class=\"line\">  // 返回成功数组</span><br><span class=\"line\">&#125;).catch(error =&gt; &#123;</span><br><span class=\"line\">  // 返回第一个失败原因</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>4)Promise.resolve()和Promise.reject()都会直接返回一个Promise对象，只不过默认的状态不同</p>\n<h3 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h3><p>为不同的数据结构(Array,Set,Map[非obj],String)提供统一的访问机制.<br>1)Array举例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class=\"line\">let iter = arr[Symbol.iterator]();</span><br><span class=\"line\">iter.next() // &#123; value: &apos;a&apos;, done: false &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2）任何部署了Iterator的数据结构，都可用扩展运算符，将其转为数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [...iterable];</span><br></pre></td></tr></table></figure></p>\n<p>3）都可用for…of遍历[建议停用其他循环方式]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let key of Object.keys(someObject)) &#123;</span><br><span class=\"line\">  console.log(key + &apos;: &apos; + someObject[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h3><p>一种异步编程解决方案,其函数是状态机，返回的遍历器对象会遍历每个状态。<br>1）举例说明Generator的基本结构,及运行原理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 必须有“*”号，内部可以用yield表达式</span><br><span class=\"line\">function* hiGenerator() &#123;</span><br><span class=\"line\">  // 状态1, yield表达式返回值总是undefined，故reset为undefined</span><br><span class=\"line\">  let reset = yield &apos;hi&apos;;</span><br><span class=\"line\">  // 状态2</span><br><span class=\"line\">  return &apos;end&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用该函数时，并不会直接运行，而是返回指向内部状态的指针</span><br><span class=\"line\">let hi = hiGenerator();</span><br><span class=\"line\">// 每次调用next()，指针便向下移动一个状态,并返回yield后的值</span><br><span class=\"line\">// 这里next传入的值会被reset变量接收,这为运行时注入不同的值，提供了解决方案</span><br><span class=\"line\">hi.next(&apos;hi&apos;)   // &#123; value: &apos;hi&apos;, done: false &#125;</span><br><span class=\"line\">hi.next()   // &#123; value: &apos;end&apos;, done: true &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2）Generator函数的结果可以为Object提供Iterator遍历器函数，for…of遍历Generator函数(的结果)时，不再需要next触发,但不包含return值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* objectEntries() &#123;</span><br><span class=\"line\">  let propKeys = Object.keys(this);</span><br><span class=\"line\"></span><br><span class=\"line\">  for (let propKey of propKeys) &#123;</span><br><span class=\"line\">    yield [propKey, this[propKey]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let jane = &#123; first: &apos;Jane&apos;, last: &apos;Doe&apos; &#125;;</span><br><span class=\"line\">jane[Symbol.iterator] = objectEntries;</span><br><span class=\"line\">for (let [key, value] of jane) &#123;</span><br><span class=\"line\">  console.log(`$&#123;key&#125;: $&#123;value&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 还可以解构赋值</span><br><span class=\"line\">console.log([...obj]) // [&apos;hi&apos;, &apos;end&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>3)Generator函数不能直接像普通函数一样使用this和new,但可以变通使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* F() &#123;</span><br><span class=\"line\">  this.a = 1;</span><br><span class=\"line\">  yield this.b = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f = F.call(F.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">f.next();  // Object &#123;value: 2, done: false&#125;</span><br><span class=\"line\">f.next();  // Object &#123;value: undefined, done: true&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f.a // 1</span><br><span class=\"line\">f.b // 2</span><br></pre></td></tr></table></figure></p>\n<p>4)Generator的状态机实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传统状态机</span><br><span class=\"line\">var ticking = true;</span><br><span class=\"line\">var clock = function() &#123;</span><br><span class=\"line\">  if (ticking)</span><br><span class=\"line\">    console.log(&apos;Tick!&apos;);</span><br><span class=\"line\">  else</span><br><span class=\"line\">    console.log(&apos;Tock!&apos;);</span><br><span class=\"line\">  ticking = !ticking;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// Generator状态机</span><br><span class=\"line\">var clock = function* () &#123;</span><br><span class=\"line\">  while (true) &#123;</span><br><span class=\"line\">    console.log(&apos;Tick!&apos;);</span><br><span class=\"line\">    yield;</span><br><span class=\"line\">    console.log(&apos;Tock!&apos;);</span><br><span class=\"line\">    yield;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>5)Generator与协程,上下文<br>协程定义:一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。<br>Generator运行时的上下文:执行Generator函数，一旦遇到yield命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行next命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。<br>6)Generator异步操作的同步化表达<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* main() &#123;</span><br><span class=\"line\">  var result = yield request(&quot;http://some.url&quot;);</span><br><span class=\"line\">  var resp = JSON.parse(result);</span><br><span class=\"line\">    console.log(resp.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function request(url) &#123;</span><br><span class=\"line\">  makeAjaxCall(url, function(response)&#123;</span><br><span class=\"line\">    it.next(response);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var it = main();</span><br><span class=\"line\">it.next();</span><br></pre></td></tr></table></figure></p>\n<p>7)Generator控制流管理[对异步堆栈和队列的实现很有启发]<br>假如有多个异步操作依次依赖,那么用回调函数如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">step1(function (value1) &#123;</span><br><span class=\"line\">  step2(value1, function(value2) &#123;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>采用 Promise 改写如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.then(step1)</span><br><span class=\"line\">  .then(function (value2) &#123;</span><br><span class=\"line\">    // Do something with value2</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .done();</span><br></pre></td></tr></table></figure></p>\n<p>采用 Generator 改写如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* longRunningTask(value1) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    var value2 = yield step1(value1);</span><br><span class=\"line\">    var value3 = yield step2(value2);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">    // Handle any error from step1 through step2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>8)可将Generator的返回值视为数组结构:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* doStuff() &#123;</span><br><span class=\"line\">  yield fs.readFile.bind(null, &apos;hello.txt&apos;);</span><br><span class=\"line\">  yield fs.readFile.bind(null, &apos;world.txt&apos;);</span><br><span class=\"line\">  yield fs.readFile.bind(null, &apos;and-such.txt&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (task of doStuff()) &#123;</span><br><span class=\"line\">  // task是一个函数，可以像回调函数那样使用它</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Async\"><a href=\"#Async\" class=\"headerlink\" title=\"Async\"></a>Async</h3><p>像同步一样处理异步问题<br>异步解决方案：<br>事件监听<br>发布/订阅<br>callback<br>Promise<br>Generator：基于callback返还指针控制权,继续执行next()<br>Async:基于Generator且内置执行器，返回值是Promise。async函数内部return值会成为then方法的参数<br>继发关系(异步继发就是这么简单)：<br>let foo = await getFoo();<br>let bar = await getBar(foo);<br>并列关系<br>let [foo, bar] = await Promise.all([getFoo(), getBar()]);</p>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ColorPoint extends Point &#123;</span><br><span class=\"line\">  constructor(x, y, color) &#123;</span><br><span class=\"line\">    super(x, y); // 调用父类的constructor(x, y)</span><br><span class=\"line\">    this.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toString() &#123;</span><br><span class=\"line\">    return this.color + &apos; &apos; + super.toString(); // 调用父类的toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vuex","date":"2019-10-15T02:24:02.000Z","_content":"## 1.文档目的\n一句话精简描述概念,简单语法实例快速入手\n\n## 2.概念梳理\nvuex 状态管理\n### 2.1 state\n唯一状态树\n***mapState 简化state映射到局部计算属性***\n```\ncomputed: {\n\tlocalComputed () { /* ... */ },\n\t// 使用对象展开运算符将状态对象混入到外部对象中 \n\t...mapState([\n  \t\t// 映射 this.count 为 store.state.count\n  \t\t'count'\n\t])\n}\n```\n### 2.2 getters\nstate在store层面上的计算属性\n```\ngetters: {\n\t// 接受state作为其第一个参数\n    doneTodos: state => {\n      return state.todos.filter(todo => todo.done)\n    }\n}\n```\n***mapGetters 简化getter映射到局部计算属性***\n```\ncomputed: {\n\tlocalComputed () { /* ... */ },\n\t// 使用对象展开运算符将状态对象混入到外部对象中\n\t...mapGetters([\n\t\t// 映射 this.doneTodos 为 store.getters.doneTodos\n\t\t'doneTodos'\n\t])\n}\n```\n### 2.3 mutations\n更改state的***唯一***方法是提交mutation(必须是同步的)\n```\n// 定义\nmutations: {\n    increment (state, payload) {\n    \t// 状态变更\n    \tstate.count += payload.amount\n  \t}\n}\n// 调用\nstore.commit('increment', { amount: 10 })\n或者 \nstore.commit({\n  type: 'increment',\n  amount: 10\n})\n```\n***mapMutations 简化mutations映射到局部methods***\n```\nmethods: {\n\t...mapMutations([\n\t\t// 映射 this.increment(amount) 为 this.$store.commit('increment', amount)\n\t\t'increment'\n\t])\n}\n```\n### 2.4 actions\n可通过异步操作并提交mutation的方式变更state状态\n```\nactions: {\n\t// context参数类似于store\n    increment (context) {\n      context.commit('increment')\n    }\n}\n// 或者\nactions: {\n\t// 简化\n  \tincrement ({ commit }) {\n    \tcommit('increment')\n  \t}\n}\n// 触发action\nstore.dispatch('incrementAsync', { amount: 10 })\n// 或者\nstore.dispatch({\n  type: 'incrementAsync',\n  amount: 10\n})\n```\n***mapActions 简化actions映射到局部methods***\n```\nmethods: {\n\t...mapActions([\n\t\t// 映射 this.increment(amount) 为 this.$store.dispatch('increment', amount)\n\t\t'increment'\n\t])\n}\n```\n多个actions复杂交互(Action通常是异步的，store.dispatch返回Promise)\n```\n// 假设 getData() 和 getOtherData() 返回的是 Promise\nactions: {\n  async actionA ({ commit }) {\n    commit('gotData', await getData()) // 等待异步完成\n  },\n  async actionB ({ dispatch, commit }) { // 第一个参数可以是dispatch\n    await dispatch('actionA') // 等待 actionA 完成\n    commit('gotOtherData', await getOtherData()) // 像同步一样等待第二个异步完成\n  }\n}\n```\n### 2.5 module模块和plugins插件\n(插件暴露每个mutation钩子。就是一个以store为唯一参数的函数)\n```\nconst store = new Vuex.Store({\n  modules: {\n    moduleA,\n    moduleB\n  },\n  plugins: [createPersistedState({\n  \tstorage: window.localStorage,\n  \t// 持久化模块配置\n    reducer (state) {\n      return {\n        user: state.user\n      }\n    }\n  })]\n})\n// store.state.moduleA // -> moduleA 的状态\n```\n","source":"_posts/2019-10-15-vuex.md","raw":"---\ntitle: vuex\ndate: 2019-10-15 10:24:02\ntags: Vue\n---\n## 1.文档目的\n一句话精简描述概念,简单语法实例快速入手\n\n## 2.概念梳理\nvuex 状态管理\n### 2.1 state\n唯一状态树\n***mapState 简化state映射到局部计算属性***\n```\ncomputed: {\n\tlocalComputed () { /* ... */ },\n\t// 使用对象展开运算符将状态对象混入到外部对象中 \n\t...mapState([\n  \t\t// 映射 this.count 为 store.state.count\n  \t\t'count'\n\t])\n}\n```\n### 2.2 getters\nstate在store层面上的计算属性\n```\ngetters: {\n\t// 接受state作为其第一个参数\n    doneTodos: state => {\n      return state.todos.filter(todo => todo.done)\n    }\n}\n```\n***mapGetters 简化getter映射到局部计算属性***\n```\ncomputed: {\n\tlocalComputed () { /* ... */ },\n\t// 使用对象展开运算符将状态对象混入到外部对象中\n\t...mapGetters([\n\t\t// 映射 this.doneTodos 为 store.getters.doneTodos\n\t\t'doneTodos'\n\t])\n}\n```\n### 2.3 mutations\n更改state的***唯一***方法是提交mutation(必须是同步的)\n```\n// 定义\nmutations: {\n    increment (state, payload) {\n    \t// 状态变更\n    \tstate.count += payload.amount\n  \t}\n}\n// 调用\nstore.commit('increment', { amount: 10 })\n或者 \nstore.commit({\n  type: 'increment',\n  amount: 10\n})\n```\n***mapMutations 简化mutations映射到局部methods***\n```\nmethods: {\n\t...mapMutations([\n\t\t// 映射 this.increment(amount) 为 this.$store.commit('increment', amount)\n\t\t'increment'\n\t])\n}\n```\n### 2.4 actions\n可通过异步操作并提交mutation的方式变更state状态\n```\nactions: {\n\t// context参数类似于store\n    increment (context) {\n      context.commit('increment')\n    }\n}\n// 或者\nactions: {\n\t// 简化\n  \tincrement ({ commit }) {\n    \tcommit('increment')\n  \t}\n}\n// 触发action\nstore.dispatch('incrementAsync', { amount: 10 })\n// 或者\nstore.dispatch({\n  type: 'incrementAsync',\n  amount: 10\n})\n```\n***mapActions 简化actions映射到局部methods***\n```\nmethods: {\n\t...mapActions([\n\t\t// 映射 this.increment(amount) 为 this.$store.dispatch('increment', amount)\n\t\t'increment'\n\t])\n}\n```\n多个actions复杂交互(Action通常是异步的，store.dispatch返回Promise)\n```\n// 假设 getData() 和 getOtherData() 返回的是 Promise\nactions: {\n  async actionA ({ commit }) {\n    commit('gotData', await getData()) // 等待异步完成\n  },\n  async actionB ({ dispatch, commit }) { // 第一个参数可以是dispatch\n    await dispatch('actionA') // 等待 actionA 完成\n    commit('gotOtherData', await getOtherData()) // 像同步一样等待第二个异步完成\n  }\n}\n```\n### 2.5 module模块和plugins插件\n(插件暴露每个mutation钩子。就是一个以store为唯一参数的函数)\n```\nconst store = new Vuex.Store({\n  modules: {\n    moduleA,\n    moduleB\n  },\n  plugins: [createPersistedState({\n  \tstorage: window.localStorage,\n  \t// 持久化模块配置\n    reducer (state) {\n      return {\n        user: state.user\n      }\n    }\n  })]\n})\n// store.state.moduleA // -> moduleA 的状态\n```\n","slug":"vuex","published":1,"updated":"2019-10-15T02:49:04.659Z","_id":"ck1r8ezx5002ixijkrn5ygawd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一句话精简描述概念,简单语法实例快速入手</p>\n<h2 id=\"2-概念梳理\"><a href=\"#2-概念梳理\" class=\"headerlink\" title=\"2.概念梳理\"></a>2.概念梳理</h2><p>vuex 状态管理</p>\n<h3 id=\"2-1-state\"><a href=\"#2-1-state\" class=\"headerlink\" title=\"2.1 state\"></a>2.1 state</h3><p>唯一状态树<br><strong><em>mapState 简化state映射到局部计算属性</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">\tlocalComputed () &#123; /* ... */ &#125;,</span><br><span class=\"line\">\t// 使用对象展开运算符将状态对象混入到外部对象中 </span><br><span class=\"line\">\t...mapState([</span><br><span class=\"line\">  \t\t// 映射 this.count 为 store.state.count</span><br><span class=\"line\">  \t\t&apos;count&apos;</span><br><span class=\"line\">\t])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-getters\"><a href=\"#2-2-getters\" class=\"headerlink\" title=\"2.2 getters\"></a>2.2 getters</h3><p>state在store层面上的计算属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">\t// 接受state作为其第一个参数</span><br><span class=\"line\">    doneTodos: state =&gt; &#123;</span><br><span class=\"line\">      return state.todos.filter(todo =&gt; todo.done)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>mapGetters 简化getter映射到局部计算属性</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">\tlocalComputed () &#123; /* ... */ &#125;,</span><br><span class=\"line\">\t// 使用对象展开运算符将状态对象混入到外部对象中</span><br><span class=\"line\">\t...mapGetters([</span><br><span class=\"line\">\t\t// 映射 this.doneTodos 为 store.getters.doneTodos</span><br><span class=\"line\">\t\t&apos;doneTodos&apos;</span><br><span class=\"line\">\t])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-mutations\"><a href=\"#2-3-mutations\" class=\"headerlink\" title=\"2.3 mutations\"></a>2.3 mutations</h3><p>更改state的<strong><em>唯一</em></strong>方法是提交mutation(必须是同步的)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义</span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">    increment (state, payload) &#123;</span><br><span class=\"line\">    \t// 状态变更</span><br><span class=\"line\">    \tstate.count += payload.amount</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用</span><br><span class=\"line\">store.commit(&apos;increment&apos;, &#123; amount: 10 &#125;)</span><br><span class=\"line\">或者 </span><br><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: &apos;increment&apos;,</span><br><span class=\"line\">  amount: 10</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>mapMutations 简化mutations映射到局部methods</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">\t...mapMutations([</span><br><span class=\"line\">\t\t// 映射 this.increment(amount) 为 this.$store.commit(&apos;increment&apos;, amount)</span><br><span class=\"line\">\t\t&apos;increment&apos;</span><br><span class=\"line\">\t])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-4-actions\"><a href=\"#2-4-actions\" class=\"headerlink\" title=\"2.4 actions\"></a>2.4 actions</h3><p>可通过异步操作并提交mutation的方式变更state状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">\t// context参数类似于store</span><br><span class=\"line\">    increment (context) &#123;</span><br><span class=\"line\">      context.commit(&apos;increment&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 或者</span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">\t// 简化</span><br><span class=\"line\">  \tincrement (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    \tcommit(&apos;increment&apos;)</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 触发action</span><br><span class=\"line\">store.dispatch(&apos;incrementAsync&apos;, &#123; amount: 10 &#125;)</span><br><span class=\"line\">// 或者</span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: &apos;incrementAsync&apos;,</span><br><span class=\"line\">  amount: 10</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>mapActions 简化actions映射到局部methods</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">\t...mapActions([</span><br><span class=\"line\">\t\t// 映射 this.increment(amount) 为 this.$store.dispatch(&apos;increment&apos;, amount)</span><br><span class=\"line\">\t\t&apos;increment&apos;</span><br><span class=\"line\">\t])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>多个actions复杂交互(Action通常是异步的，store.dispatch返回Promise)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 假设 getData() 和 getOtherData() 返回的是 Promise</span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  async actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(&apos;gotData&apos;, await getData()) // 等待异步完成</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  async actionB (&#123; dispatch, commit &#125;) &#123; // 第一个参数可以是dispatch</span><br><span class=\"line\">    await dispatch(&apos;actionA&apos;) // 等待 actionA 完成</span><br><span class=\"line\">    commit(&apos;gotOtherData&apos;, await getOtherData()) // 像同步一样等待第二个异步完成</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-module模块和plugins插件\"><a href=\"#2-5-module模块和plugins插件\" class=\"headerlink\" title=\"2.5 module模块和plugins插件\"></a>2.5 module模块和plugins插件</h3><p>(插件暴露每个mutation钩子。就是一个以store为唯一参数的函数)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const store = new Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    moduleA,</span><br><span class=\"line\">    moduleB</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [createPersistedState(&#123;</span><br><span class=\"line\">  \tstorage: window.localStorage,</span><br><span class=\"line\">  \t// 持久化模块配置</span><br><span class=\"line\">    reducer (state) &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        user: state.user</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// store.state.moduleA // -&gt; moduleA 的状态</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>一句话精简描述概念,简单语法实例快速入手</p>\n<h2 id=\"2-概念梳理\"><a href=\"#2-概念梳理\" class=\"headerlink\" title=\"2.概念梳理\"></a>2.概念梳理</h2><p>vuex 状态管理</p>\n<h3 id=\"2-1-state\"><a href=\"#2-1-state\" class=\"headerlink\" title=\"2.1 state\"></a>2.1 state</h3><p>唯一状态树<br><strong><em>mapState 简化state映射到局部计算属性</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">\tlocalComputed () &#123; /* ... */ &#125;,</span><br><span class=\"line\">\t// 使用对象展开运算符将状态对象混入到外部对象中 </span><br><span class=\"line\">\t...mapState([</span><br><span class=\"line\">  \t\t// 映射 this.count 为 store.state.count</span><br><span class=\"line\">  \t\t&apos;count&apos;</span><br><span class=\"line\">\t])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-getters\"><a href=\"#2-2-getters\" class=\"headerlink\" title=\"2.2 getters\"></a>2.2 getters</h3><p>state在store层面上的计算属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters: &#123;</span><br><span class=\"line\">\t// 接受state作为其第一个参数</span><br><span class=\"line\">    doneTodos: state =&gt; &#123;</span><br><span class=\"line\">      return state.todos.filter(todo =&gt; todo.done)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>mapGetters 简化getter映射到局部计算属性</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">\tlocalComputed () &#123; /* ... */ &#125;,</span><br><span class=\"line\">\t// 使用对象展开运算符将状态对象混入到外部对象中</span><br><span class=\"line\">\t...mapGetters([</span><br><span class=\"line\">\t\t// 映射 this.doneTodos 为 store.getters.doneTodos</span><br><span class=\"line\">\t\t&apos;doneTodos&apos;</span><br><span class=\"line\">\t])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-mutations\"><a href=\"#2-3-mutations\" class=\"headerlink\" title=\"2.3 mutations\"></a>2.3 mutations</h3><p>更改state的<strong><em>唯一</em></strong>方法是提交mutation(必须是同步的)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义</span><br><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">    increment (state, payload) &#123;</span><br><span class=\"line\">    \t// 状态变更</span><br><span class=\"line\">    \tstate.count += payload.amount</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 调用</span><br><span class=\"line\">store.commit(&apos;increment&apos;, &#123; amount: 10 &#125;)</span><br><span class=\"line\">或者 </span><br><span class=\"line\">store.commit(&#123;</span><br><span class=\"line\">  type: &apos;increment&apos;,</span><br><span class=\"line\">  amount: 10</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>mapMutations 简化mutations映射到局部methods</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">\t...mapMutations([</span><br><span class=\"line\">\t\t// 映射 this.increment(amount) 为 this.$store.commit(&apos;increment&apos;, amount)</span><br><span class=\"line\">\t\t&apos;increment&apos;</span><br><span class=\"line\">\t])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-4-actions\"><a href=\"#2-4-actions\" class=\"headerlink\" title=\"2.4 actions\"></a>2.4 actions</h3><p>可通过异步操作并提交mutation的方式变更state状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">\t// context参数类似于store</span><br><span class=\"line\">    increment (context) &#123;</span><br><span class=\"line\">      context.commit(&apos;increment&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 或者</span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">\t// 简化</span><br><span class=\"line\">  \tincrement (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    \tcommit(&apos;increment&apos;)</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 触发action</span><br><span class=\"line\">store.dispatch(&apos;incrementAsync&apos;, &#123; amount: 10 &#125;)</span><br><span class=\"line\">// 或者</span><br><span class=\"line\">store.dispatch(&#123;</span><br><span class=\"line\">  type: &apos;incrementAsync&apos;,</span><br><span class=\"line\">  amount: 10</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>mapActions 简化actions映射到局部methods</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">\t...mapActions([</span><br><span class=\"line\">\t\t// 映射 this.increment(amount) 为 this.$store.dispatch(&apos;increment&apos;, amount)</span><br><span class=\"line\">\t\t&apos;increment&apos;</span><br><span class=\"line\">\t])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>多个actions复杂交互(Action通常是异步的，store.dispatch返回Promise)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 假设 getData() 和 getOtherData() 返回的是 Promise</span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  async actionA (&#123; commit &#125;) &#123;</span><br><span class=\"line\">    commit(&apos;gotData&apos;, await getData()) // 等待异步完成</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  async actionB (&#123; dispatch, commit &#125;) &#123; // 第一个参数可以是dispatch</span><br><span class=\"line\">    await dispatch(&apos;actionA&apos;) // 等待 actionA 完成</span><br><span class=\"line\">    commit(&apos;gotOtherData&apos;, await getOtherData()) // 像同步一样等待第二个异步完成</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-module模块和plugins插件\"><a href=\"#2-5-module模块和plugins插件\" class=\"headerlink\" title=\"2.5 module模块和plugins插件\"></a>2.5 module模块和plugins插件</h3><p>(插件暴露每个mutation钩子。就是一个以store为唯一参数的函数)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const store = new Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    moduleA,</span><br><span class=\"line\">    moduleB</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [createPersistedState(&#123;</span><br><span class=\"line\">  \tstorage: window.localStorage,</span><br><span class=\"line\">  \t// 持久化模块配置</span><br><span class=\"line\">    reducer (state) &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        user: state.user</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// store.state.moduleA // -&gt; moduleA 的状态</span><br></pre></td></tr></table></figure></p>\n"},{"title":"设计模式解读","date":"2019-06-15T07:35:34.000Z","_content":"## 1.文档目的\n设计模式的意义在于:最佳实践提高代码重用，易于理解和维护\n参考网址：[w3c设计模式](https://www.w3cschool.cn/deep_learn_javascript/deep_learn_javascript-ljp4285i.html)\n\n## 2.设计原则\n### 2.1单一职责原则SRP\n属性及其相关操作\n```\n/**\n *function: 产品添加到购物车\n *前提认知：对象(属性及其对属性的操作)\n *分析：产品(对象[id，desc])----添加到【事件驱动】--->购物车(对象[被添加产品的集合，添加商品的func])\n *添加行为分析：\n * 首先得到若干产品实体，得到一个购物车实体\n * 实体列表渲染在页面上，通过点击触发‘产品添加到购物车’的行为\n * 思考：如何解耦业务？MVC思想：model实体，view展示，contralter控制器\n *   进一步抽象：将公共行为抽象，统一方式触发\n */\nfunction Event (name) {\n  var handlers = []\n\n  this.getName = function () {\n    return name\n  }\n\n  this.addHandler = function (handler) {\n    handlers.push(handler)\n  }\n\n  this.removeHandler = function (handler) {\n    for (var i = 0; i < handlers.length; i++) {\n      if (handlers[i] == handler) {\n        handlers.splice(i, 1)\n        break\n      }\n    }\n  }\n\n  this.fire = function (eventArgs) {\n    handlers.forEach(function (h) {\n      h(eventArgs)\n    })\n  }\n}\n\nfunction EventAggregator () {\n  var events = []\n\n  function getEvent (eventName) {\n    return $.grep(events, function (event) {\n      return event.getName() === eventName\n    })[0]\n  }\n\n  this.publish = function (eventName, eventArgs) {\n    var event = getEvent(eventName)\n\n    if (!event) {\n      event = new Event(eventName)\n      events.push(event)\n    }\n    event.fire(eventArgs)\n  }\n\n  this.subscribe = function (eventName, handler) {\n    var event = getEvent(eventName)\n\n    if (!event) {\n      event = new Event(eventName)\n      events.push(event)\n    }\n\n    event.addHandler(handler)\n  }\n}\n\nfunction Product (id, description) {\n  this.getId = function () {\n    return id\n  }\n  this.getDescription = function () {\n    return description\n  }\n}\n\nfunction Cart (eventAggregator) {\n  var items = []\n\n  this.addItem = function (item) {\n    items.push(item)\n    // 这个操作，购物车添加产品的时候触发相关操作（由控制器处理）\n    eventAggregator.publish('itemAdded', item)\n  }\n}\n\nfunction CartController (cart, eventAggregator) {\n  // 控制器监听\n  eventAggregator.subscribe('itemAdded', function (eventArgs) {\n    var newItem = $('<li></li>')\n      .html(eventArgs.getDescription())\n      .attr('id-cart', eventArgs.getId())\n      .appendTo('#cart')\n  })\n\n  eventAggregator.subscribe('productSelected', function (eventArgs) {\n    cart.addItem(eventArgs.product)\n  })\n}\n// 封装Model层，产品实体的获得可以通过任何形式，请求等\nfunction ProductRepository () {\n  var products = [new Product(1, 'Star Wars Lego Ship'), new Product(2, 'Barbie Doll'), new Product(3, 'Remote Control Airplane')]\n\n  this.getProducts = function () {\n    return products\n  }\n}\n// 封装产品控制器，拿到产品并对产品操作(生成产品节点，并绑定事件)\nfunction ProductController (eventAggregator, productRepository) {\n  var products = productRepository.getProducts()\n\n  function onProductSelected () {\n    var productId = $(this).attr('id')\n    var product = $.grep(products, function (x) {\n      return x.getId() == productId\n    })[0]\n    // 触发事件【同一类的事情，用同一类方式，对行为的封装】\n    eventAggregator.publish('productSelected', {\n      product: product\n    })\n  }\n\n  products.forEach(function (product) {\n    var newItem = $('<li></li>')\n      .html(product.getDescription())\n      .attr('id', product.getId())\n      .dblclick(onProductSelected)\n      .appendTo('#products')\n  })\n}\n// 最外层执行，只是一系列的声明，逻辑就隐藏在内部\n;(function () {\n  var eventAggregator = new EventAggregator()\n  var cart = new Cart(eventAggregator)\n  var cartController = new CartController(cart, eventAggregator)\n  var productRepository = new ProductRepository()\n  var productController = new ProductController(eventAggregator, productRepository)\n})()\n```\n### 2.2最少知道原则\n一个实体应当尽量少地与其他实体之间发生相互作用，强调降低耦合\n\n### 2.3接口隔离原则\n使用多个隔离的接口，比使用单个接口要好，强调降低耦合\n```\nvar exampleBinder = {}\nexampleBinder.modelObserver = (function () {\n  ;/ 私有变量 /\n  return {\n    observe: function (model) {\n      ;/ 代码 /\n      return newModel\n    },\n    onChange: function (callback) {\n      ;/ 代码 /\n    }\n  }\n})()\n\nexampleBinder.viewAdaptor = (function () {\n  ;/ 私有变量 /\n  return {\n    bind: function (model) {\n      ;/ 代码 /\n    }\n  }\n})()\n\nexampleBinder.bind = function (model) {\n  ;/ 私有变量 /\n  exampleBinder.modelObserver.onChange(/ 回调callback /)\n  var om = exampleBinder.modelObserver.observe(model)\n  exampleBinder.viewAdaptor.bind(om)\n  return om\n}\n```\n### 2.4开闭原则\n对扩展开放，对修改关闭\n```\nfunction questionCreator (spec, my) {\n  var that = {}\n\n  my = my || {}\n  my.label = spec.label\n\n  my.renderInput = function () {\n    throw 'not implemented'\n  }\n\n  that.render = function (target) {\n    var questionWrapper = document.createElement('div')\n    questionWrapper.className = 'question'\n\n    var questionLabel = document.createElement('div')\n    questionLabel.className = 'question-label'\n    var label = document.createTextNode(spec.label)\n    questionLabel.appendChild(label)\n\n    var answer = my.renderInput()\n\n    questionWrapper.appendChild(questionLabel)\n    questionWrapper.appendChild(answer)\n    return questionWrapper\n  }\n\n  return that\n}\n\nfunction choiceQuestionCreator (spec) {\n  var my = {}\n  var that = questionCreator(spec, my)\n\n  my.renderInput = function () {\n    var input = document.createElement('select')\n    var len = spec.choices.length\n    for (var i = 0; i < len; i++) {\n      var option = document.createElement('option')\n      option.text = spec.choices[i]\n      option.value = spec.choices[i]\n      input.appendChild(option)\n    }\n\n    return input\n  }\n\n  return that\n}\n\nfunction inputQuestionCreator (spec) {\n  var my = {}\n  var that = questionCreator(spec, my)\n\n  my.renderInput = function () {\n    var input = document.createElement('input')\n    input.type = 'text'\n    return input\n  }\n\n  return that\n}\n\nvar view = {\n  render: function (target, questions) {\n    for (var i = 0; i < questions.length; i++) {\n      target.appendChild(questions[i].render())\n    }\n  }\n}\n\nvar questions = [\n  choiceQuestionCreator({\n    label: 'Have you used tobacco products within the last 30 days?',\n    choices: ['Yes', 'No']\n  }),\n  inputQuestionCreator({\n    label: 'What medications are you currently using?'\n  })\n]\n\nvar questionRegion = document.getElementById('questions')\n\nview.render(questionRegion, questions)\n```\n### 2.5里氏代换原则\n任何基类可以出现的地方，子类一定可以出现\n### 2.6依赖倒转原则\n依赖于抽象而不依赖于具体\n### 2.7合成复用原则\n尽量组合，而非继承\n\n## 3.设计模式分类\n### 3.1创建型模式\n用于创建对象\n**构造函数模式**：模拟类，用于创建特定类型（类）的对象\n**原型模式**：通过拷贝原型创建新对象，比如js里的prototype\n**单例模式**：在某空间提供唯一的访问点，保证一个类只有一个实例\n**工厂模式**：定义一个用于创建对象的接口，由子类决定实例化哪个类（厂长负责实施子类发出的任务）\n**建造者模式**：使同样的构建过程（eg:回调机制）可以创建不同的表示，而不用关注细节（回调的实现原理）\n**模板方法**：定义操作的算法的骨架（抽象类），而将步骤实现延迟到子类中（子类重写父类方法）\n### 3.2结构型模式\n组合继承获得新功能\n**组合模式**：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。（eg:Dom都有增删改子节点的通用功能）\n**桥接模式**: 若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系\n**代理模式**：为其他对象提供一种代理以控制对这个对象的访问（eg：大叔代替小明送给女孩儿鲜花）\n**适配器模式**：将一个类（对象）的接口（方法或属性）转化成客户希望的另外一个接口（比如：电脑充电器）\n**外观模式**：为一组接口提供一个高层接口，使得接口更容易使用\n**装饰者模式**：包装同接口的对象，通过重载方法的形式添加新功能（调用原始对象方法并扩展）\n### 3.3行为型模式\n对象通信\n**中介者模式**：[多对多]比如多架飞机的通讯都是通过中控系统进行\n**观察者模式**：[一对多]发布订阅模式\n**策略模式**：算法的相互替换不会影响到使用算法的客户\n**命令模式**：用于将一个请求方法封装成一个对象（参数不同，命令不同）\n**职责链模式**：使多个对象都有机会处理请求\n**迭代器模式**：为遍历不同的集合结构提供一个统一的接口\n\n## 4.实例研读\n### 构造函数模式\n构造函数模式：用于创建特定类型（类）的对象[可接收参数以便第一次创建对象时设置成员值]\n```\n// 注：这里将属性和方法都写在构造函数中，那么每个新的实例都会不同，若需共享，应绑定至prototype\nfunction Animal(name) {\n    this.name = name;\n}\n//注意：这里我们使用了Object.prototype.方法名，而不是Object.prototype\n//主要是用来避免重写定义原型prototype对象\nAnimal.prototype.getName= function () {\n    return '该动物的名称' + this.name\n};\nvar animal = new Animal(\"老虎\");\nconsole.log(animal.getName());\n```\n### 原型模式\n通过拷贝原型创建新对象[在上面构造函数的基础上利用原型模式实现继承]\n```\nfunction Cat(){}\n// 拷贝继承\nCat.prototype = Animal.prototype;\n// 恢复constructor\nCat.prototype.constructor = Cat;\n// 实例化\nvar cat = new Cat(\"花小猫\");\nconsole.log(cat.getName()) // 花小猫\n```\n### 单例模式\n单例模式：保证一个类只有一个实例\n实现的方法是先判断实例是否存在，若存在则直接返回，否则再创建\n用途：单例作为命名空间提供者，保证在某空间中提供一个唯一的访问点\n```\nvar SingletonTester = (function () {\n    //参数：传递给单例的一个参数集合\n    function Singleton(args) {\n        //设置args变量为接收的参数或者为空（如果没有提供的话）\n        var args = args || {};\n        //设置name参数\n        this.name = 'SingletonTester';\n        //设置pointX的值\n        this.pointX = args.pointX || 6; //从接收的参数里获取，或者设置为默认值\n        //设置pointY的值\n        this.pointY = args.pointY || 10;\n    }\n    //实例容器\n    var instance;\n    var _static = {\n        name: 'SingletonTester',\n        //获取实例的方法\n        //返回Singleton的实例\n        getInstance: function (args) {\n            if (instance === undefined) {\n                instance = new Singleton(args);\n            }\n            return instance;\n        }\n    };\n    return _static;\n})();\nvar singletonTest = SingletonTester.getInstance({ pointX: 5 });\nconsole.log(singletonTest.pointX); // 输出 5 \n```\n### 工厂模式\n工厂模式定义了一个用于创建对象的接口(做的是同一类事情)，这个接口由子类决定实例化哪一个类(子类决定具体的不同实现)。\n该模式使一个类的实例化延迟到了子类。\n工程模式应该有厂长，负责调度实施任务\neg:switch动态匹配就是该模式\n```\n// 对象方式\nvar productManager = {};\n<!-- A类型实现 -->\nproductManager.createProductA = function () {\n    console.log('ProductA');\n}\n<!-- B类型实现 -->\nproductManager.createProductB = function () {\n    console.log('ProductB');\n}\n<!-- 厂长负责调度 -->\nproductManager.factory = function (typeType) {\n    return new productManager[typeType];\n}\nproductManager.factory(\"createProductA\");\n// 方法方式的\"厂长\"调度器\nfunction switchFun(type){\n  switch(type){\n    case 'ProductA':\n      console.log('ProductA')\n      break\n    case 'ProductB':\n      console.log('ProductB')\n      break\n    default:\n      console.log('nothing')\n  }\n}\nswitchFun(\"ProductA\");\n```\n### 建造者模式\n回调是个很好的例子,将不变的构建算法封装起来(eg:getBeerById),变化的回调处理部分分离出去(callback之后的定制化操作),不用关心构建的具体过程和回调的调用地方,\n而且可以存着多个回调,比如ajax的success,error回调等,只需要使用,而不用关心其相对稳定的建造细节\n```\n<!-- 封装相对稳定的建造算法 -->\nfunction getBeerById(id, callback) {\n    <!-- 调用者不用关心内部实现细节 -->\n    asyncRequest('GET', 'beer.uri?id=' + id, function (resp) {\n        // 不用关心回调执行的地方\n        callback(resp.responseText);\n    });\n}\n\nvar el = document.querySelector('#test');\nel.addEventListener('click', getBeerByIdBridge, false);\n\nfunction getBeerByIdBridge(e) {\n    <!-- 回调调用 -->\n    getBeerById(this.id, function (beer) {\n        <!-- 关心的部分 -->\n        console.log('Requested Beer: ' + beer);\n    });\n}\n```\n### 模板方法\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类重写\n```\n<script>\n    // 抽象步骤\n    var MakeDrink = function() {}\n    MakeDrink.prototype.step = function() {\n      this.boilWater()\n      this.addDrink()\n      this.cover()\n    }\n    MakeDrink.prototype.boilWater = function() {\n      console.log('将水烧开!')\n    }\n    MakeDrink.prototype.addDrink = function() {\n      throw new Error('该方法必须重写!')\n    }\n    MakeDrink.prototype.cover = function() {\n      console.log('盖上盖子!')\n    }\n\n    // 冲咖啡\n    var Coffee = function() {\n      MakeDrink.apply(this)\n    }\n    Coffee.prototype = new MakeDrink()\n    Coffee.prototype.addDrink = function() {\n      console.log('添加咖啡!')\n    }\n\n    //冲茶叶\n    var Tea = function() {\n      MakeDrink.apply(this)\n    }\n    Tea.prototype = new MakeDrink()\n    Tea.prototype.addDrink = function() {\n      console.log('添加茶叶!')\n    }\n\n    // 验证调用\n    var coffee1 = new Coffee()\n    coffee1.step()\n    console.log('--------分割线----------')\n    var tea1 = new Tea()\n    tea1.step()\n  </script>\n```\n\n### 组合模式\n菜单和菜单项都有类似的公共行为:“整体-部分”的层次结构,用户对单个对象和组合对象的使用具有一致性\n```\n<script>\n  // 抽象类\n  var MenuComponent = function() {}\n  MenuComponent.prototype.getName = function() {\n    throw new Error('该方法必须重写!')\n  }\n  MenuComponent.prototype.print = function() {\n    throw new Error('该方法必须重写!')\n  }\n  MenuComponent.prototype.add = function() {\n    throw new Error('该方法必须重写!')\n  }\n  // 菜单\n  var Menu = function(sName) {\n    MenuComponent.apply(this)\n    this.aMenuComponents = []\n    this.sName = sName\n  }\n  Menu.prototype = new MenuComponent()\n  Menu.prototype.getName = function() {\n    return this.sName\n  }\n  Menu.prototype.print = function() {\n    console.log('-----菜单名称:' + this.getName())\n    this.aMenuComponents.forEach(function(item) {\n      item.print()\n    })\n  }\n  Menu.prototype.add = function(oMenuComponent) {\n    this.aMenuComponents.push(oMenuComponent)\n  }\n  // 菜单项\n  var MenuItem = function(sName) {\n    MenuComponent.apply(this)\n    this.sName = sName\n  }\n  MenuItem.prototype = new MenuComponent()\n  MenuItem.prototype.getName = function() {\n    return this.sName\n  }\n  MenuItem.prototype.print = function() {\n    console.log('-----菜单项名称:' + this.getName())\n  }\n\n  // 调用测试\n  var menu1 = new Menu('菜单一')\n  menu1.add(new MenuItem('菜单项一'))\n  menu1.add(new MenuItem('菜单项二'))\n  menu1.print()\n</script>\n```\n### 桥接模式\n若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系。\n```\n// 事件绑定与处理事件的方法定义\n<script>\n  // 抽象代码不可直接运行\n  function getBeerById(id, callback) {\n    asyncRequest('GET', 'beer.uri?id=' + id, function(resp) {\n      callback(resp.responseText)\n    })\n  }\n  // getBeerByIdBridge桥接原理:将addEvent直接调用getBeerById的定义分离\n  // addEvent只是调用了一个桥,桥只是'调用了getBeerById',而getBeerById的定义则被抽离\n  // 优点:使得处理事件的方法实现得以分离,则该方法方便被重用,而且getBeerByIdBridge也方便调用其他处理事件的方法\n  addEvent(element, 'click', getBeerByIdBridge)\n  function getBeerByIdBridge(e) {\n    getBeerById(this.id, function(res) {\n      console.log('Requested:' + res)\n    })\n  }\n</script>\n```\n### 代理模式\n大叔代理小明送给美女鲜花\n```\n<script>\n  var Girl = function(name) {\n    this.name = name\n  }\n  var Xiaoming = function(girl) {\n    this.girl = girl\n    this.sendFlower = function(flower) {\n      console.log('Hi ' + girl.name + ', xiaoming送你一个礼物：' + flower)\n    }\n  }\n  // 大叔代理\n  var ProxyMan = function(girl) {\n    this.girl = girl\n    this.sendFlower = function(flower) {\n      new Xiaoming(girl).sendFlower(flower) //代替小明送花咯\n    }\n  }\n  // 测试\n  var proxyMan = new ProxyMan(new Girl('酸奶小妹'))\n  proxyMan.sendFlower('999朵玫瑰')\n</script>\n```\n### 适配器模式\n鸭子和狗都有行走(fly,run)和叫声(sound)行为\n```\n<script>\n  // 抽象行为\n  var Duck = function() {}\n  Duck.prototype.fly = function() {\n    throw new Error('该方法必须被重写!')\n  }\n  var Dog = function() {}\n  Dog.prototype.run = function() {\n    throw new Error(' 该方法必须被重写!')\n  }\n  // 定义构造函数\n  var DuckObj = function() {\n    Duck.apply(this)\n  }\n  DuckObj.prototype = new Duck()\n  DuckObj.prototype.fly = function() {\n    console.log('鸭子可以飞起来!')\n  }\n  var DogObj = function() {\n    Dog.apply(this)\n  }\n  DogObj.prototype = new Dog()\n  DogObj.prototype.run = function() {\n    console.log('狗可以跑的很快!')\n  }\n  // 鸭子适配器:使得鸭子可以支持狗的run方法,同时使其自身飞的快5倍\n  var DuckAdapter = function(oDuck) {\n    Duck.apply(this)\n    this.oDuck = oDuck\n  }\n  DuckAdapter.prototype = new Duck()\n  DuckAdapter.prototype.run = function() {\n    // 虽然方法名字是dog的run,但是内部实现可以任意,只是为了适配\n    this.oDuck.fly()\n  }\n  // 重新定义fly实现,相当于对fly进行了重写\n  DuckAdapter.prototype.fly = function() {\n    var nFly = 0\n    var nLenFly = 3\n    for (; nFly < nLenFly; ) {\n      this.oDuck.fly()\n      nFly = nFly + 1\n    }\n  }\n  // 测试\n  var oDuck = new DuckObj()\n  var oDug = new DogObj()\n  var oDuckAdapter = new DuckAdapter(oDuck)\n\n  console.log('---------原有的鸭子行为-------')\n  oDuck.fly()\n  console.log('---------原有的狗行为-------')\n  oDug.run()\n  console.log('---------适配器鸭子的行为（鸭子调用狗的方法名称）-------')\n  oDuckAdapter.run()\n  console.log('---------适配器鸭子的行为（鸭子原有fly行为被重写,调用了3遍）-------')\n  oDuckAdapter.fly()\n</script>\n```\n### 外观模式\n如果需要调用一组接口实现一个更大的功能,那么就把这些方法放在一起组成一个新的方法,从而简化调用\neg:阻止事件默认行为\n```\nfunction handleClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n}\n```\n### 装饰者模式\n比继承更有弹性的替代方案,通过重载方法的形式扩展功能\n```\n<!-- 实例1:重写原方法 -->\n<script>\n  function Macbook() {\n    this.cost = function() {\n      return 1000\n    }\n  }\n  function Memory(macbook) {\n    this.cost = function() {\n      return macbook.cost() + 75\n    }\n  }\n  // \n  var myMacbook = new Memory(new Macbook())\n  console.log(myMacbook.cost())\n</script>\n<!-- 实例二:重写原方法的一部分(有调用点的方法调用) -->\n<script>\n  // 被装饰者\n  function ConcreteClass() {\n    this.performTask = function() {\n      this.preTask()\n      console.log('doing something')\n      this.postTask()\n    }\n    this.preTask = function() {\n      console.log('原有执行之前...')\n    }\n    this.postTask = function() {\n      console.log('原有执行之后...')\n    }\n  }\n  // 抽象装饰\n  function AbstractDecorator(decorated) {\n    this.performTask = function() {\n      decorated.performTask()\n    }\n  }\n  // 定义具体装饰:重写preTask和postTask\n  function ConcreteDecoratorClass(decorated) {\n    this.base = AbstractDecorator\n    this.base(decorated)\n    decorated.preTask = function() {\n      console.log('装饰执行之前...')\n    }\n    decorated.postTask = function() {\n      console.log('装饰执行之后...')\n    }\n  }\n  // 测试\n  var decorator1 = new ConcreteDecoratorClass(new ConcreteClass())\n  decorator1.performTask()\n</script>\n<!-- 实例三:重写原方法的一部分(无调用点) -->\n<script>\n  var tree = {}\n  tree.decorate = function() {\n    console.log('树木初始化...')\n  }\n  // 添加装饰器定义\n  tree.addDecorator = function(deco) {\n    tree[deco].prototype = this\n    return new tree[deco]()\n  }\n  tree.Leaves = function() {\n    this.decorate = function() {\n      this.Leaves.prototype.decorate()\n      console.log('添加一些树叶...')\n    }\n  }\n  tree.Flower = function() {\n    this.decorate = function() {\n      this.Flower.prototype.decorate()\n      console.log('添加一些花朵...')\n    }\n  }\n  // 测试\n  tree = tree.addDecorator('Leaves')\n  tree = tree.addDecorator('Flower')\n  tree.decorate() //执行Flower的decorate方法,并依次向上递归调用\n</script>\n```\n\n### 中介者模式\n中介者模式处理多对多场景.eg:MVC模型中,控制层便是位于表现层与模型层之间的中介者\n```\nfunction View() {\n      this.el = document.createElement('div')\n      this.getEl = function() {\n        return this.el\n      }\n    }\n    function Model(data) {\n      this.save = function() {\n        console.log('保存数据:' + data)\n      }\n    }\n    // 定义控制器,中介者\n    function Ctrl(view, model) {\n      this.view = view\n      this.model = model\n      this.relative = function() {\n        this.view.getEl().onclick = function() {\n          this.model.save()\n        }\n      }\n    }\n\n    // 测试\n    let view1 = new View()\n    let model1 = new Model('test_data1')\n\n    let view2 = new View()\n    let model2 = new Model('test_data2')\n\n    // 中介调度,可以有多组不同view和model,相互交叉关联\n    let ctrl1 = new Ctrl(view1, model1)\n    let ctrl2 = new Ctrl(view2, model2)\n    let ctrl3 = new Ctrl(view1, model2)\n```\n### 观察者模式\n让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己\n```\n// 定义观察者\n    function Observer() {\n      // 所有已订阅的方法集合\n      this.fns = []\n    }\n    Observer.prototype = {\n      subscribe: function(fn) {\n        this.fns.push(fn)\n      },\n      unsubscribe: function(fn) {\n        this.fns = this.fns.filter(function(el) {\n          if (el !== fn) {\n            return el\n          }\n        })\n      },\n      // 定义触发方法:(主题对象)状态发生变化时,触发update\n      update: function(data, thisObj) {\n        var scope = thisObj || window\n        // 将已经订阅的方法都遍历执行一遍\n        this.fns.forEach(function(el) {\n          el.call(scope, data)\n        })\n      }\n    }\n\n    //测试\n    let observer = new Observer()\n\n    // 声明\n    const fun1 = function(data) {\n      console.log('观察者fun1得到的主题对象参数是: ' + data)\n    }\n    const fun2 = function(data) {\n      console.log('观察者fun2得到的主题对象参数是: ' + data)\n    }\n    // 订阅\n    observer.subscribe(fun1)\n    observer.subscribe(fun2)\n    // 触发\n    observer.update('主题对象参数A')\n    console.log('--------------------华丽的分割线--------------------')\n    //退订f1\n    observer.unsubscribe(fun1)\n    //再次触发,验证退订\n    observer.update('主题对象参数B')\n```\n### 策略模式\n校验表单\n```\n<script>\n  // 策略处理类\n  let validator = {\n    types: {}, // 验证规则处理类,后面会扩展各种规则的定义\n    config: {}, // 定义需要使用的验证类型\n    messages: [], // 验证所对应的错误消息集合\n    validate: function(data) {\n      // 暴露的公开验证方法,参数类型为obj,data是原始数据\n      let msg, type, validateTypeFun, result_ok\n      this.messages = [] // 清空所有的错误信息\n      for (let key in data) {\n        if (data.hasOwnProperty(key)) { //原始数据中是否包含可枚举的字段key\n          type = this.config[key] // 用户为字段key配置的验证规则是什么?比如isNonEmpty\n          validateTypeFun = this.types[type] // 获取验证规则对应的验证方法是否已定义\n          if (!type) {\n            continue // 如果针对key的验证规则未配置，则不处理\n          }\n          if (!validateTypeFun) { // 如果验证方法为定义，抛出异常\n            throw {\n              name: 'ValidationError',\n              message: '该类型无对应处理方法:' + type\n            }\n          }\n          result_ok = validateTypeFun.validate(data[key]) //正常验证\n          if (!result_ok) {\n            msg = '非法值' + key + ', ' + validateTypeFun.instructions\n            this.messages.push(msg)\n          }\n        }\n      }\n      return this.hasErrors()\n    },\n\n    // helper\n    hasErrors: function() {\n      return this.messages.length !== 0\n    }\n  }\n\n  // 验证给定的值是否不为空\n  validator.types.isNotEmpty = {\n    validate: function(value) {\n      return value !== ''\n    },\n    instructions: '传入的值不能为空'\n  }\n  // 验证给定的值是否是数字\n  validator.types.isNumber = {\n    validate: function(value) {\n      return !isNaN(value)\n    },\n    instructions: '传入的值只能是合法的数字，例如：1, 3.14 or 2010'\n  }\n\n  // 定义需要验证的数据集合和需要验证的规则类型\n  var data = {\n    first_name: '',\n    age: 'unknown'\n  }\n  validator.config = {\n    first_name: 'isNotEmpty',\n    age: 'isNumber'\n  }\n\n  // 测试获取验证结果\n  validator.validate(data)\n  if (validator.hasErrors()) {\n    console.log(validator.messages.join('\\n'))\n  }\n</script>\n```\n### 命令模式\n将请求封装成一个对象，可用不同的请求参数满足客户的需求(将一系列任务封装成一个对象,由参数决定具体执行哪个任务命令)\n```\n   var NumMng = {\n      // 请求数字\n      requestNum: function(num) {\n        console.log('我请求的数字是:' + num)\n      },\n\n      // 得到数字\n      readNum: function(num) {\n        console.log('我操作的数字是:' + num)\n      },\n\n      // 删除数字\n      delNum: function(num) {\n        console.log('我要删除的数字是:' + num)\n      }\n    }\n\n    /**\n     * @function  命令执行器\n     * @param  command {obj}\n     **/\n    NumMng.execute = function(command) {\n      return NumMng[command.commandType](command.operand)\n    }\n\n    // execute执行,operand操作数\n    NumMng.execute({ commandType: 'requestNum', operand: '2' })\n    NumMng.execute({ commandType: 'readNum', operand: '2' })\n    NumMng.execute({ commandType: 'delNum', operand: '2' })\n```\n### 职责链模式\n多个对象都有机会处理请求,这些对象连成一条链，请求沿着这条链传递，链中收到请求的对象要么亲自处理它，要么转发给链中的下一个候选者,直到有一个对象处理他为止\n```\n// 定义职责链\n    function Handler(s) {\n      this.successor = s || null\n    }\n    Handler.prototype = {\n      run: function() {\n        if (this.successor) {\n          this.successor.run()\n        }\n      }\n    }\n\n    // 最外层\n    let app = new Handler(\n      {\n        run: function() {\n          console.log('最外层...')\n        }\n      },\n      3\n    )\n    // 中间层\n    let dialog = new Handler(app, 1)\n    dialog.run = function() {\n      console.log('中间层执行前...')\n      // 这里做具体的处理操作\n      Handler.prototype.run.call(this) //继续往上走,调用app的handle方法\n      console.log('中间层执行后...')\n    }\n    // 最内层\n    let button = new Handler(dialog, 2)\n    button.run = function() {\n      console.log('最内层执行前...')\n      // 这里做具体的处理操作\n      Handler.prototype.run.call(this) // 继续往上走,调用dialog的handle方法\n      console.log('最内层执行后...')\n    }\n\n    // 调用\n    button.run()\n```\n### 迭代器模式\n提供一种方法顺序访问一个聚合对象中的各个节点,一般迭代至少有hasNext()和next()两个方法\n```\n    // 封装迭代引擎\n    function IteratorEngine(arr) {\n      this.arr = arr\n      this.index = 0\n    }\n    IteratorEngine.prototype.hasNext = function() {\n      return this.index < this.arr.length\n    }\n    IteratorEngine.prototype.next = function() {\n      let _ele = null\n      if (!this.hasNext()) {\n        return null\n      }\n      _ele = this.arr[this.index]\n      this.index += 1\n      return '迭代节点:' + _ele\n    }\n \n    // 聚合对象\n    let arrList = [1, 2, 3, 4, 5]\n    let iteratorEngine = new IteratorEngine(arrList)\n\n    while (iteratorEngine.hasNext()) {\n      console.log(iteratorEngine.next())\n    }\n```\n\n\n## 5.备注\n**适配**器则意味着改变一个**已有对象**的接口。\n**代理**模式在不改变原有接口的条件下，用另一个对象定义了一个代理\n装饰者模式**增强**了其它对象的功能而同时又不改变它的接口\n桥接的目的是将接口部分和实现部分分离，从而对他们可以更为容易也相对独立的加以改变。\n工厂模式：switch逻辑外部定义一个统一的接口，通过参数决定具体执行路线，比如Redux中action的调用\n观察者模式:比如点击事件就是一种最常见的发布订阅模式addEventListener，再比如vue中的data和rn中的state,对其改变时，依赖它的对象都将得到通知和更新\n策略模式：比如表单校验中针对不同的表单类型进行不同的校验实现\n","source":"_posts/2019-06-15-design.md","raw":"---\ntitle: 设计模式解读\ndate: 2019-06-15 15:35:34\ntags: JS\n---\n## 1.文档目的\n设计模式的意义在于:最佳实践提高代码重用，易于理解和维护\n参考网址：[w3c设计模式](https://www.w3cschool.cn/deep_learn_javascript/deep_learn_javascript-ljp4285i.html)\n\n## 2.设计原则\n### 2.1单一职责原则SRP\n属性及其相关操作\n```\n/**\n *function: 产品添加到购物车\n *前提认知：对象(属性及其对属性的操作)\n *分析：产品(对象[id，desc])----添加到【事件驱动】--->购物车(对象[被添加产品的集合，添加商品的func])\n *添加行为分析：\n * 首先得到若干产品实体，得到一个购物车实体\n * 实体列表渲染在页面上，通过点击触发‘产品添加到购物车’的行为\n * 思考：如何解耦业务？MVC思想：model实体，view展示，contralter控制器\n *   进一步抽象：将公共行为抽象，统一方式触发\n */\nfunction Event (name) {\n  var handlers = []\n\n  this.getName = function () {\n    return name\n  }\n\n  this.addHandler = function (handler) {\n    handlers.push(handler)\n  }\n\n  this.removeHandler = function (handler) {\n    for (var i = 0; i < handlers.length; i++) {\n      if (handlers[i] == handler) {\n        handlers.splice(i, 1)\n        break\n      }\n    }\n  }\n\n  this.fire = function (eventArgs) {\n    handlers.forEach(function (h) {\n      h(eventArgs)\n    })\n  }\n}\n\nfunction EventAggregator () {\n  var events = []\n\n  function getEvent (eventName) {\n    return $.grep(events, function (event) {\n      return event.getName() === eventName\n    })[0]\n  }\n\n  this.publish = function (eventName, eventArgs) {\n    var event = getEvent(eventName)\n\n    if (!event) {\n      event = new Event(eventName)\n      events.push(event)\n    }\n    event.fire(eventArgs)\n  }\n\n  this.subscribe = function (eventName, handler) {\n    var event = getEvent(eventName)\n\n    if (!event) {\n      event = new Event(eventName)\n      events.push(event)\n    }\n\n    event.addHandler(handler)\n  }\n}\n\nfunction Product (id, description) {\n  this.getId = function () {\n    return id\n  }\n  this.getDescription = function () {\n    return description\n  }\n}\n\nfunction Cart (eventAggregator) {\n  var items = []\n\n  this.addItem = function (item) {\n    items.push(item)\n    // 这个操作，购物车添加产品的时候触发相关操作（由控制器处理）\n    eventAggregator.publish('itemAdded', item)\n  }\n}\n\nfunction CartController (cart, eventAggregator) {\n  // 控制器监听\n  eventAggregator.subscribe('itemAdded', function (eventArgs) {\n    var newItem = $('<li></li>')\n      .html(eventArgs.getDescription())\n      .attr('id-cart', eventArgs.getId())\n      .appendTo('#cart')\n  })\n\n  eventAggregator.subscribe('productSelected', function (eventArgs) {\n    cart.addItem(eventArgs.product)\n  })\n}\n// 封装Model层，产品实体的获得可以通过任何形式，请求等\nfunction ProductRepository () {\n  var products = [new Product(1, 'Star Wars Lego Ship'), new Product(2, 'Barbie Doll'), new Product(3, 'Remote Control Airplane')]\n\n  this.getProducts = function () {\n    return products\n  }\n}\n// 封装产品控制器，拿到产品并对产品操作(生成产品节点，并绑定事件)\nfunction ProductController (eventAggregator, productRepository) {\n  var products = productRepository.getProducts()\n\n  function onProductSelected () {\n    var productId = $(this).attr('id')\n    var product = $.grep(products, function (x) {\n      return x.getId() == productId\n    })[0]\n    // 触发事件【同一类的事情，用同一类方式，对行为的封装】\n    eventAggregator.publish('productSelected', {\n      product: product\n    })\n  }\n\n  products.forEach(function (product) {\n    var newItem = $('<li></li>')\n      .html(product.getDescription())\n      .attr('id', product.getId())\n      .dblclick(onProductSelected)\n      .appendTo('#products')\n  })\n}\n// 最外层执行，只是一系列的声明，逻辑就隐藏在内部\n;(function () {\n  var eventAggregator = new EventAggregator()\n  var cart = new Cart(eventAggregator)\n  var cartController = new CartController(cart, eventAggregator)\n  var productRepository = new ProductRepository()\n  var productController = new ProductController(eventAggregator, productRepository)\n})()\n```\n### 2.2最少知道原则\n一个实体应当尽量少地与其他实体之间发生相互作用，强调降低耦合\n\n### 2.3接口隔离原则\n使用多个隔离的接口，比使用单个接口要好，强调降低耦合\n```\nvar exampleBinder = {}\nexampleBinder.modelObserver = (function () {\n  ;/ 私有变量 /\n  return {\n    observe: function (model) {\n      ;/ 代码 /\n      return newModel\n    },\n    onChange: function (callback) {\n      ;/ 代码 /\n    }\n  }\n})()\n\nexampleBinder.viewAdaptor = (function () {\n  ;/ 私有变量 /\n  return {\n    bind: function (model) {\n      ;/ 代码 /\n    }\n  }\n})()\n\nexampleBinder.bind = function (model) {\n  ;/ 私有变量 /\n  exampleBinder.modelObserver.onChange(/ 回调callback /)\n  var om = exampleBinder.modelObserver.observe(model)\n  exampleBinder.viewAdaptor.bind(om)\n  return om\n}\n```\n### 2.4开闭原则\n对扩展开放，对修改关闭\n```\nfunction questionCreator (spec, my) {\n  var that = {}\n\n  my = my || {}\n  my.label = spec.label\n\n  my.renderInput = function () {\n    throw 'not implemented'\n  }\n\n  that.render = function (target) {\n    var questionWrapper = document.createElement('div')\n    questionWrapper.className = 'question'\n\n    var questionLabel = document.createElement('div')\n    questionLabel.className = 'question-label'\n    var label = document.createTextNode(spec.label)\n    questionLabel.appendChild(label)\n\n    var answer = my.renderInput()\n\n    questionWrapper.appendChild(questionLabel)\n    questionWrapper.appendChild(answer)\n    return questionWrapper\n  }\n\n  return that\n}\n\nfunction choiceQuestionCreator (spec) {\n  var my = {}\n  var that = questionCreator(spec, my)\n\n  my.renderInput = function () {\n    var input = document.createElement('select')\n    var len = spec.choices.length\n    for (var i = 0; i < len; i++) {\n      var option = document.createElement('option')\n      option.text = spec.choices[i]\n      option.value = spec.choices[i]\n      input.appendChild(option)\n    }\n\n    return input\n  }\n\n  return that\n}\n\nfunction inputQuestionCreator (spec) {\n  var my = {}\n  var that = questionCreator(spec, my)\n\n  my.renderInput = function () {\n    var input = document.createElement('input')\n    input.type = 'text'\n    return input\n  }\n\n  return that\n}\n\nvar view = {\n  render: function (target, questions) {\n    for (var i = 0; i < questions.length; i++) {\n      target.appendChild(questions[i].render())\n    }\n  }\n}\n\nvar questions = [\n  choiceQuestionCreator({\n    label: 'Have you used tobacco products within the last 30 days?',\n    choices: ['Yes', 'No']\n  }),\n  inputQuestionCreator({\n    label: 'What medications are you currently using?'\n  })\n]\n\nvar questionRegion = document.getElementById('questions')\n\nview.render(questionRegion, questions)\n```\n### 2.5里氏代换原则\n任何基类可以出现的地方，子类一定可以出现\n### 2.6依赖倒转原则\n依赖于抽象而不依赖于具体\n### 2.7合成复用原则\n尽量组合，而非继承\n\n## 3.设计模式分类\n### 3.1创建型模式\n用于创建对象\n**构造函数模式**：模拟类，用于创建特定类型（类）的对象\n**原型模式**：通过拷贝原型创建新对象，比如js里的prototype\n**单例模式**：在某空间提供唯一的访问点，保证一个类只有一个实例\n**工厂模式**：定义一个用于创建对象的接口，由子类决定实例化哪个类（厂长负责实施子类发出的任务）\n**建造者模式**：使同样的构建过程（eg:回调机制）可以创建不同的表示，而不用关注细节（回调的实现原理）\n**模板方法**：定义操作的算法的骨架（抽象类），而将步骤实现延迟到子类中（子类重写父类方法）\n### 3.2结构型模式\n组合继承获得新功能\n**组合模式**：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。（eg:Dom都有增删改子节点的通用功能）\n**桥接模式**: 若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系\n**代理模式**：为其他对象提供一种代理以控制对这个对象的访问（eg：大叔代替小明送给女孩儿鲜花）\n**适配器模式**：将一个类（对象）的接口（方法或属性）转化成客户希望的另外一个接口（比如：电脑充电器）\n**外观模式**：为一组接口提供一个高层接口，使得接口更容易使用\n**装饰者模式**：包装同接口的对象，通过重载方法的形式添加新功能（调用原始对象方法并扩展）\n### 3.3行为型模式\n对象通信\n**中介者模式**：[多对多]比如多架飞机的通讯都是通过中控系统进行\n**观察者模式**：[一对多]发布订阅模式\n**策略模式**：算法的相互替换不会影响到使用算法的客户\n**命令模式**：用于将一个请求方法封装成一个对象（参数不同，命令不同）\n**职责链模式**：使多个对象都有机会处理请求\n**迭代器模式**：为遍历不同的集合结构提供一个统一的接口\n\n## 4.实例研读\n### 构造函数模式\n构造函数模式：用于创建特定类型（类）的对象[可接收参数以便第一次创建对象时设置成员值]\n```\n// 注：这里将属性和方法都写在构造函数中，那么每个新的实例都会不同，若需共享，应绑定至prototype\nfunction Animal(name) {\n    this.name = name;\n}\n//注意：这里我们使用了Object.prototype.方法名，而不是Object.prototype\n//主要是用来避免重写定义原型prototype对象\nAnimal.prototype.getName= function () {\n    return '该动物的名称' + this.name\n};\nvar animal = new Animal(\"老虎\");\nconsole.log(animal.getName());\n```\n### 原型模式\n通过拷贝原型创建新对象[在上面构造函数的基础上利用原型模式实现继承]\n```\nfunction Cat(){}\n// 拷贝继承\nCat.prototype = Animal.prototype;\n// 恢复constructor\nCat.prototype.constructor = Cat;\n// 实例化\nvar cat = new Cat(\"花小猫\");\nconsole.log(cat.getName()) // 花小猫\n```\n### 单例模式\n单例模式：保证一个类只有一个实例\n实现的方法是先判断实例是否存在，若存在则直接返回，否则再创建\n用途：单例作为命名空间提供者，保证在某空间中提供一个唯一的访问点\n```\nvar SingletonTester = (function () {\n    //参数：传递给单例的一个参数集合\n    function Singleton(args) {\n        //设置args变量为接收的参数或者为空（如果没有提供的话）\n        var args = args || {};\n        //设置name参数\n        this.name = 'SingletonTester';\n        //设置pointX的值\n        this.pointX = args.pointX || 6; //从接收的参数里获取，或者设置为默认值\n        //设置pointY的值\n        this.pointY = args.pointY || 10;\n    }\n    //实例容器\n    var instance;\n    var _static = {\n        name: 'SingletonTester',\n        //获取实例的方法\n        //返回Singleton的实例\n        getInstance: function (args) {\n            if (instance === undefined) {\n                instance = new Singleton(args);\n            }\n            return instance;\n        }\n    };\n    return _static;\n})();\nvar singletonTest = SingletonTester.getInstance({ pointX: 5 });\nconsole.log(singletonTest.pointX); // 输出 5 \n```\n### 工厂模式\n工厂模式定义了一个用于创建对象的接口(做的是同一类事情)，这个接口由子类决定实例化哪一个类(子类决定具体的不同实现)。\n该模式使一个类的实例化延迟到了子类。\n工程模式应该有厂长，负责调度实施任务\neg:switch动态匹配就是该模式\n```\n// 对象方式\nvar productManager = {};\n<!-- A类型实现 -->\nproductManager.createProductA = function () {\n    console.log('ProductA');\n}\n<!-- B类型实现 -->\nproductManager.createProductB = function () {\n    console.log('ProductB');\n}\n<!-- 厂长负责调度 -->\nproductManager.factory = function (typeType) {\n    return new productManager[typeType];\n}\nproductManager.factory(\"createProductA\");\n// 方法方式的\"厂长\"调度器\nfunction switchFun(type){\n  switch(type){\n    case 'ProductA':\n      console.log('ProductA')\n      break\n    case 'ProductB':\n      console.log('ProductB')\n      break\n    default:\n      console.log('nothing')\n  }\n}\nswitchFun(\"ProductA\");\n```\n### 建造者模式\n回调是个很好的例子,将不变的构建算法封装起来(eg:getBeerById),变化的回调处理部分分离出去(callback之后的定制化操作),不用关心构建的具体过程和回调的调用地方,\n而且可以存着多个回调,比如ajax的success,error回调等,只需要使用,而不用关心其相对稳定的建造细节\n```\n<!-- 封装相对稳定的建造算法 -->\nfunction getBeerById(id, callback) {\n    <!-- 调用者不用关心内部实现细节 -->\n    asyncRequest('GET', 'beer.uri?id=' + id, function (resp) {\n        // 不用关心回调执行的地方\n        callback(resp.responseText);\n    });\n}\n\nvar el = document.querySelector('#test');\nel.addEventListener('click', getBeerByIdBridge, false);\n\nfunction getBeerByIdBridge(e) {\n    <!-- 回调调用 -->\n    getBeerById(this.id, function (beer) {\n        <!-- 关心的部分 -->\n        console.log('Requested Beer: ' + beer);\n    });\n}\n```\n### 模板方法\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类重写\n```\n<script>\n    // 抽象步骤\n    var MakeDrink = function() {}\n    MakeDrink.prototype.step = function() {\n      this.boilWater()\n      this.addDrink()\n      this.cover()\n    }\n    MakeDrink.prototype.boilWater = function() {\n      console.log('将水烧开!')\n    }\n    MakeDrink.prototype.addDrink = function() {\n      throw new Error('该方法必须重写!')\n    }\n    MakeDrink.prototype.cover = function() {\n      console.log('盖上盖子!')\n    }\n\n    // 冲咖啡\n    var Coffee = function() {\n      MakeDrink.apply(this)\n    }\n    Coffee.prototype = new MakeDrink()\n    Coffee.prototype.addDrink = function() {\n      console.log('添加咖啡!')\n    }\n\n    //冲茶叶\n    var Tea = function() {\n      MakeDrink.apply(this)\n    }\n    Tea.prototype = new MakeDrink()\n    Tea.prototype.addDrink = function() {\n      console.log('添加茶叶!')\n    }\n\n    // 验证调用\n    var coffee1 = new Coffee()\n    coffee1.step()\n    console.log('--------分割线----------')\n    var tea1 = new Tea()\n    tea1.step()\n  </script>\n```\n\n### 组合模式\n菜单和菜单项都有类似的公共行为:“整体-部分”的层次结构,用户对单个对象和组合对象的使用具有一致性\n```\n<script>\n  // 抽象类\n  var MenuComponent = function() {}\n  MenuComponent.prototype.getName = function() {\n    throw new Error('该方法必须重写!')\n  }\n  MenuComponent.prototype.print = function() {\n    throw new Error('该方法必须重写!')\n  }\n  MenuComponent.prototype.add = function() {\n    throw new Error('该方法必须重写!')\n  }\n  // 菜单\n  var Menu = function(sName) {\n    MenuComponent.apply(this)\n    this.aMenuComponents = []\n    this.sName = sName\n  }\n  Menu.prototype = new MenuComponent()\n  Menu.prototype.getName = function() {\n    return this.sName\n  }\n  Menu.prototype.print = function() {\n    console.log('-----菜单名称:' + this.getName())\n    this.aMenuComponents.forEach(function(item) {\n      item.print()\n    })\n  }\n  Menu.prototype.add = function(oMenuComponent) {\n    this.aMenuComponents.push(oMenuComponent)\n  }\n  // 菜单项\n  var MenuItem = function(sName) {\n    MenuComponent.apply(this)\n    this.sName = sName\n  }\n  MenuItem.prototype = new MenuComponent()\n  MenuItem.prototype.getName = function() {\n    return this.sName\n  }\n  MenuItem.prototype.print = function() {\n    console.log('-----菜单项名称:' + this.getName())\n  }\n\n  // 调用测试\n  var menu1 = new Menu('菜单一')\n  menu1.add(new MenuItem('菜单项一'))\n  menu1.add(new MenuItem('菜单项二'))\n  menu1.print()\n</script>\n```\n### 桥接模式\n若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系。\n```\n// 事件绑定与处理事件的方法定义\n<script>\n  // 抽象代码不可直接运行\n  function getBeerById(id, callback) {\n    asyncRequest('GET', 'beer.uri?id=' + id, function(resp) {\n      callback(resp.responseText)\n    })\n  }\n  // getBeerByIdBridge桥接原理:将addEvent直接调用getBeerById的定义分离\n  // addEvent只是调用了一个桥,桥只是'调用了getBeerById',而getBeerById的定义则被抽离\n  // 优点:使得处理事件的方法实现得以分离,则该方法方便被重用,而且getBeerByIdBridge也方便调用其他处理事件的方法\n  addEvent(element, 'click', getBeerByIdBridge)\n  function getBeerByIdBridge(e) {\n    getBeerById(this.id, function(res) {\n      console.log('Requested:' + res)\n    })\n  }\n</script>\n```\n### 代理模式\n大叔代理小明送给美女鲜花\n```\n<script>\n  var Girl = function(name) {\n    this.name = name\n  }\n  var Xiaoming = function(girl) {\n    this.girl = girl\n    this.sendFlower = function(flower) {\n      console.log('Hi ' + girl.name + ', xiaoming送你一个礼物：' + flower)\n    }\n  }\n  // 大叔代理\n  var ProxyMan = function(girl) {\n    this.girl = girl\n    this.sendFlower = function(flower) {\n      new Xiaoming(girl).sendFlower(flower) //代替小明送花咯\n    }\n  }\n  // 测试\n  var proxyMan = new ProxyMan(new Girl('酸奶小妹'))\n  proxyMan.sendFlower('999朵玫瑰')\n</script>\n```\n### 适配器模式\n鸭子和狗都有行走(fly,run)和叫声(sound)行为\n```\n<script>\n  // 抽象行为\n  var Duck = function() {}\n  Duck.prototype.fly = function() {\n    throw new Error('该方法必须被重写!')\n  }\n  var Dog = function() {}\n  Dog.prototype.run = function() {\n    throw new Error(' 该方法必须被重写!')\n  }\n  // 定义构造函数\n  var DuckObj = function() {\n    Duck.apply(this)\n  }\n  DuckObj.prototype = new Duck()\n  DuckObj.prototype.fly = function() {\n    console.log('鸭子可以飞起来!')\n  }\n  var DogObj = function() {\n    Dog.apply(this)\n  }\n  DogObj.prototype = new Dog()\n  DogObj.prototype.run = function() {\n    console.log('狗可以跑的很快!')\n  }\n  // 鸭子适配器:使得鸭子可以支持狗的run方法,同时使其自身飞的快5倍\n  var DuckAdapter = function(oDuck) {\n    Duck.apply(this)\n    this.oDuck = oDuck\n  }\n  DuckAdapter.prototype = new Duck()\n  DuckAdapter.prototype.run = function() {\n    // 虽然方法名字是dog的run,但是内部实现可以任意,只是为了适配\n    this.oDuck.fly()\n  }\n  // 重新定义fly实现,相当于对fly进行了重写\n  DuckAdapter.prototype.fly = function() {\n    var nFly = 0\n    var nLenFly = 3\n    for (; nFly < nLenFly; ) {\n      this.oDuck.fly()\n      nFly = nFly + 1\n    }\n  }\n  // 测试\n  var oDuck = new DuckObj()\n  var oDug = new DogObj()\n  var oDuckAdapter = new DuckAdapter(oDuck)\n\n  console.log('---------原有的鸭子行为-------')\n  oDuck.fly()\n  console.log('---------原有的狗行为-------')\n  oDug.run()\n  console.log('---------适配器鸭子的行为（鸭子调用狗的方法名称）-------')\n  oDuckAdapter.run()\n  console.log('---------适配器鸭子的行为（鸭子原有fly行为被重写,调用了3遍）-------')\n  oDuckAdapter.fly()\n</script>\n```\n### 外观模式\n如果需要调用一组接口实现一个更大的功能,那么就把这些方法放在一起组成一个新的方法,从而简化调用\neg:阻止事件默认行为\n```\nfunction handleClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n}\n```\n### 装饰者模式\n比继承更有弹性的替代方案,通过重载方法的形式扩展功能\n```\n<!-- 实例1:重写原方法 -->\n<script>\n  function Macbook() {\n    this.cost = function() {\n      return 1000\n    }\n  }\n  function Memory(macbook) {\n    this.cost = function() {\n      return macbook.cost() + 75\n    }\n  }\n  // \n  var myMacbook = new Memory(new Macbook())\n  console.log(myMacbook.cost())\n</script>\n<!-- 实例二:重写原方法的一部分(有调用点的方法调用) -->\n<script>\n  // 被装饰者\n  function ConcreteClass() {\n    this.performTask = function() {\n      this.preTask()\n      console.log('doing something')\n      this.postTask()\n    }\n    this.preTask = function() {\n      console.log('原有执行之前...')\n    }\n    this.postTask = function() {\n      console.log('原有执行之后...')\n    }\n  }\n  // 抽象装饰\n  function AbstractDecorator(decorated) {\n    this.performTask = function() {\n      decorated.performTask()\n    }\n  }\n  // 定义具体装饰:重写preTask和postTask\n  function ConcreteDecoratorClass(decorated) {\n    this.base = AbstractDecorator\n    this.base(decorated)\n    decorated.preTask = function() {\n      console.log('装饰执行之前...')\n    }\n    decorated.postTask = function() {\n      console.log('装饰执行之后...')\n    }\n  }\n  // 测试\n  var decorator1 = new ConcreteDecoratorClass(new ConcreteClass())\n  decorator1.performTask()\n</script>\n<!-- 实例三:重写原方法的一部分(无调用点) -->\n<script>\n  var tree = {}\n  tree.decorate = function() {\n    console.log('树木初始化...')\n  }\n  // 添加装饰器定义\n  tree.addDecorator = function(deco) {\n    tree[deco].prototype = this\n    return new tree[deco]()\n  }\n  tree.Leaves = function() {\n    this.decorate = function() {\n      this.Leaves.prototype.decorate()\n      console.log('添加一些树叶...')\n    }\n  }\n  tree.Flower = function() {\n    this.decorate = function() {\n      this.Flower.prototype.decorate()\n      console.log('添加一些花朵...')\n    }\n  }\n  // 测试\n  tree = tree.addDecorator('Leaves')\n  tree = tree.addDecorator('Flower')\n  tree.decorate() //执行Flower的decorate方法,并依次向上递归调用\n</script>\n```\n\n### 中介者模式\n中介者模式处理多对多场景.eg:MVC模型中,控制层便是位于表现层与模型层之间的中介者\n```\nfunction View() {\n      this.el = document.createElement('div')\n      this.getEl = function() {\n        return this.el\n      }\n    }\n    function Model(data) {\n      this.save = function() {\n        console.log('保存数据:' + data)\n      }\n    }\n    // 定义控制器,中介者\n    function Ctrl(view, model) {\n      this.view = view\n      this.model = model\n      this.relative = function() {\n        this.view.getEl().onclick = function() {\n          this.model.save()\n        }\n      }\n    }\n\n    // 测试\n    let view1 = new View()\n    let model1 = new Model('test_data1')\n\n    let view2 = new View()\n    let model2 = new Model('test_data2')\n\n    // 中介调度,可以有多组不同view和model,相互交叉关联\n    let ctrl1 = new Ctrl(view1, model1)\n    let ctrl2 = new Ctrl(view2, model2)\n    let ctrl3 = new Ctrl(view1, model2)\n```\n### 观察者模式\n让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己\n```\n// 定义观察者\n    function Observer() {\n      // 所有已订阅的方法集合\n      this.fns = []\n    }\n    Observer.prototype = {\n      subscribe: function(fn) {\n        this.fns.push(fn)\n      },\n      unsubscribe: function(fn) {\n        this.fns = this.fns.filter(function(el) {\n          if (el !== fn) {\n            return el\n          }\n        })\n      },\n      // 定义触发方法:(主题对象)状态发生变化时,触发update\n      update: function(data, thisObj) {\n        var scope = thisObj || window\n        // 将已经订阅的方法都遍历执行一遍\n        this.fns.forEach(function(el) {\n          el.call(scope, data)\n        })\n      }\n    }\n\n    //测试\n    let observer = new Observer()\n\n    // 声明\n    const fun1 = function(data) {\n      console.log('观察者fun1得到的主题对象参数是: ' + data)\n    }\n    const fun2 = function(data) {\n      console.log('观察者fun2得到的主题对象参数是: ' + data)\n    }\n    // 订阅\n    observer.subscribe(fun1)\n    observer.subscribe(fun2)\n    // 触发\n    observer.update('主题对象参数A')\n    console.log('--------------------华丽的分割线--------------------')\n    //退订f1\n    observer.unsubscribe(fun1)\n    //再次触发,验证退订\n    observer.update('主题对象参数B')\n```\n### 策略模式\n校验表单\n```\n<script>\n  // 策略处理类\n  let validator = {\n    types: {}, // 验证规则处理类,后面会扩展各种规则的定义\n    config: {}, // 定义需要使用的验证类型\n    messages: [], // 验证所对应的错误消息集合\n    validate: function(data) {\n      // 暴露的公开验证方法,参数类型为obj,data是原始数据\n      let msg, type, validateTypeFun, result_ok\n      this.messages = [] // 清空所有的错误信息\n      for (let key in data) {\n        if (data.hasOwnProperty(key)) { //原始数据中是否包含可枚举的字段key\n          type = this.config[key] // 用户为字段key配置的验证规则是什么?比如isNonEmpty\n          validateTypeFun = this.types[type] // 获取验证规则对应的验证方法是否已定义\n          if (!type) {\n            continue // 如果针对key的验证规则未配置，则不处理\n          }\n          if (!validateTypeFun) { // 如果验证方法为定义，抛出异常\n            throw {\n              name: 'ValidationError',\n              message: '该类型无对应处理方法:' + type\n            }\n          }\n          result_ok = validateTypeFun.validate(data[key]) //正常验证\n          if (!result_ok) {\n            msg = '非法值' + key + ', ' + validateTypeFun.instructions\n            this.messages.push(msg)\n          }\n        }\n      }\n      return this.hasErrors()\n    },\n\n    // helper\n    hasErrors: function() {\n      return this.messages.length !== 0\n    }\n  }\n\n  // 验证给定的值是否不为空\n  validator.types.isNotEmpty = {\n    validate: function(value) {\n      return value !== ''\n    },\n    instructions: '传入的值不能为空'\n  }\n  // 验证给定的值是否是数字\n  validator.types.isNumber = {\n    validate: function(value) {\n      return !isNaN(value)\n    },\n    instructions: '传入的值只能是合法的数字，例如：1, 3.14 or 2010'\n  }\n\n  // 定义需要验证的数据集合和需要验证的规则类型\n  var data = {\n    first_name: '',\n    age: 'unknown'\n  }\n  validator.config = {\n    first_name: 'isNotEmpty',\n    age: 'isNumber'\n  }\n\n  // 测试获取验证结果\n  validator.validate(data)\n  if (validator.hasErrors()) {\n    console.log(validator.messages.join('\\n'))\n  }\n</script>\n```\n### 命令模式\n将请求封装成一个对象，可用不同的请求参数满足客户的需求(将一系列任务封装成一个对象,由参数决定具体执行哪个任务命令)\n```\n   var NumMng = {\n      // 请求数字\n      requestNum: function(num) {\n        console.log('我请求的数字是:' + num)\n      },\n\n      // 得到数字\n      readNum: function(num) {\n        console.log('我操作的数字是:' + num)\n      },\n\n      // 删除数字\n      delNum: function(num) {\n        console.log('我要删除的数字是:' + num)\n      }\n    }\n\n    /**\n     * @function  命令执行器\n     * @param  command {obj}\n     **/\n    NumMng.execute = function(command) {\n      return NumMng[command.commandType](command.operand)\n    }\n\n    // execute执行,operand操作数\n    NumMng.execute({ commandType: 'requestNum', operand: '2' })\n    NumMng.execute({ commandType: 'readNum', operand: '2' })\n    NumMng.execute({ commandType: 'delNum', operand: '2' })\n```\n### 职责链模式\n多个对象都有机会处理请求,这些对象连成一条链，请求沿着这条链传递，链中收到请求的对象要么亲自处理它，要么转发给链中的下一个候选者,直到有一个对象处理他为止\n```\n// 定义职责链\n    function Handler(s) {\n      this.successor = s || null\n    }\n    Handler.prototype = {\n      run: function() {\n        if (this.successor) {\n          this.successor.run()\n        }\n      }\n    }\n\n    // 最外层\n    let app = new Handler(\n      {\n        run: function() {\n          console.log('最外层...')\n        }\n      },\n      3\n    )\n    // 中间层\n    let dialog = new Handler(app, 1)\n    dialog.run = function() {\n      console.log('中间层执行前...')\n      // 这里做具体的处理操作\n      Handler.prototype.run.call(this) //继续往上走,调用app的handle方法\n      console.log('中间层执行后...')\n    }\n    // 最内层\n    let button = new Handler(dialog, 2)\n    button.run = function() {\n      console.log('最内层执行前...')\n      // 这里做具体的处理操作\n      Handler.prototype.run.call(this) // 继续往上走,调用dialog的handle方法\n      console.log('最内层执行后...')\n    }\n\n    // 调用\n    button.run()\n```\n### 迭代器模式\n提供一种方法顺序访问一个聚合对象中的各个节点,一般迭代至少有hasNext()和next()两个方法\n```\n    // 封装迭代引擎\n    function IteratorEngine(arr) {\n      this.arr = arr\n      this.index = 0\n    }\n    IteratorEngine.prototype.hasNext = function() {\n      return this.index < this.arr.length\n    }\n    IteratorEngine.prototype.next = function() {\n      let _ele = null\n      if (!this.hasNext()) {\n        return null\n      }\n      _ele = this.arr[this.index]\n      this.index += 1\n      return '迭代节点:' + _ele\n    }\n \n    // 聚合对象\n    let arrList = [1, 2, 3, 4, 5]\n    let iteratorEngine = new IteratorEngine(arrList)\n\n    while (iteratorEngine.hasNext()) {\n      console.log(iteratorEngine.next())\n    }\n```\n\n\n## 5.备注\n**适配**器则意味着改变一个**已有对象**的接口。\n**代理**模式在不改变原有接口的条件下，用另一个对象定义了一个代理\n装饰者模式**增强**了其它对象的功能而同时又不改变它的接口\n桥接的目的是将接口部分和实现部分分离，从而对他们可以更为容易也相对独立的加以改变。\n工厂模式：switch逻辑外部定义一个统一的接口，通过参数决定具体执行路线，比如Redux中action的调用\n观察者模式:比如点击事件就是一种最常见的发布订阅模式addEventListener，再比如vue中的data和rn中的state,对其改变时，依赖它的对象都将得到通知和更新\n策略模式：比如表单校验中针对不同的表单类型进行不同的校验实现\n","slug":"design","published":1,"updated":"2019-09-15T08:50:52.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1r8f01x002qxijk72p1dtt8","content":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>设计模式的意义在于:最佳实践提高代码重用，易于理解和维护<br>参考网址：<a href=\"https://www.w3cschool.cn/deep_learn_javascript/deep_learn_javascript-ljp4285i.html\" target=\"_blank\" rel=\"noopener\">w3c设计模式</a></p>\n<h2 id=\"2-设计原则\"><a href=\"#2-设计原则\" class=\"headerlink\" title=\"2.设计原则\"></a>2.设计原则</h2><h3 id=\"2-1单一职责原则SRP\"><a href=\"#2-1单一职责原则SRP\" class=\"headerlink\" title=\"2.1单一职责原则SRP\"></a>2.1单一职责原则SRP</h3><p>属性及其相关操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *function: 产品添加到购物车</span><br><span class=\"line\"> *前提认知：对象(属性及其对属性的操作)</span><br><span class=\"line\"> *分析：产品(对象[id，desc])----添加到【事件驱动】---&gt;购物车(对象[被添加产品的集合，添加商品的func])</span><br><span class=\"line\"> *添加行为分析：</span><br><span class=\"line\"> * 首先得到若干产品实体，得到一个购物车实体</span><br><span class=\"line\"> * 实体列表渲染在页面上，通过点击触发‘产品添加到购物车’的行为</span><br><span class=\"line\"> * 思考：如何解耦业务？MVC思想：model实体，view展示，contralter控制器</span><br><span class=\"line\"> *   进一步抽象：将公共行为抽象，统一方式触发</span><br><span class=\"line\"> */</span><br><span class=\"line\">function Event (name) &#123;</span><br><span class=\"line\">  var handlers = []</span><br><span class=\"line\"></span><br><span class=\"line\">  this.getName = function () &#123;</span><br><span class=\"line\">    return name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.addHandler = function (handler) &#123;</span><br><span class=\"line\">    handlers.push(handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.removeHandler = function (handler) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; handlers.length; i++) &#123;</span><br><span class=\"line\">      if (handlers[i] == handler) &#123;</span><br><span class=\"line\">        handlers.splice(i, 1)</span><br><span class=\"line\">        break</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.fire = function (eventArgs) &#123;</span><br><span class=\"line\">    handlers.forEach(function (h) &#123;</span><br><span class=\"line\">      h(eventArgs)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function EventAggregator () &#123;</span><br><span class=\"line\">  var events = []</span><br><span class=\"line\"></span><br><span class=\"line\">  function getEvent (eventName) &#123;</span><br><span class=\"line\">    return $.grep(events, function (event) &#123;</span><br><span class=\"line\">      return event.getName() === eventName</span><br><span class=\"line\">    &#125;)[0]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.publish = function (eventName, eventArgs) &#123;</span><br><span class=\"line\">    var event = getEvent(eventName)</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!event) &#123;</span><br><span class=\"line\">      event = new Event(eventName)</span><br><span class=\"line\">      events.push(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    event.fire(eventArgs)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.subscribe = function (eventName, handler) &#123;</span><br><span class=\"line\">    var event = getEvent(eventName)</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!event) &#123;</span><br><span class=\"line\">      event = new Event(eventName)</span><br><span class=\"line\">      events.push(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event.addHandler(handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Product (id, description) &#123;</span><br><span class=\"line\">  this.getId = function () &#123;</span><br><span class=\"line\">    return id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.getDescription = function () &#123;</span><br><span class=\"line\">    return description</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Cart (eventAggregator) &#123;</span><br><span class=\"line\">  var items = []</span><br><span class=\"line\"></span><br><span class=\"line\">  this.addItem = function (item) &#123;</span><br><span class=\"line\">    items.push(item)</span><br><span class=\"line\">    // 这个操作，购物车添加产品的时候触发相关操作（由控制器处理）</span><br><span class=\"line\">    eventAggregator.publish(&apos;itemAdded&apos;, item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function CartController (cart, eventAggregator) &#123;</span><br><span class=\"line\">  // 控制器监听</span><br><span class=\"line\">  eventAggregator.subscribe(&apos;itemAdded&apos;, function (eventArgs) &#123;</span><br><span class=\"line\">    var newItem = $(&apos;&lt;li&gt;&lt;/li&gt;&apos;)</span><br><span class=\"line\">      .html(eventArgs.getDescription())</span><br><span class=\"line\">      .attr(&apos;id-cart&apos;, eventArgs.getId())</span><br><span class=\"line\">      .appendTo(&apos;#cart&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  eventAggregator.subscribe(&apos;productSelected&apos;, function (eventArgs) &#123;</span><br><span class=\"line\">    cart.addItem(eventArgs.product)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 封装Model层，产品实体的获得可以通过任何形式，请求等</span><br><span class=\"line\">function ProductRepository () &#123;</span><br><span class=\"line\">  var products = [new Product(1, &apos;Star Wars Lego Ship&apos;), new Product(2, &apos;Barbie Doll&apos;), new Product(3, &apos;Remote Control Airplane&apos;)]</span><br><span class=\"line\"></span><br><span class=\"line\">  this.getProducts = function () &#123;</span><br><span class=\"line\">    return products</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 封装产品控制器，拿到产品并对产品操作(生成产品节点，并绑定事件)</span><br><span class=\"line\">function ProductController (eventAggregator, productRepository) &#123;</span><br><span class=\"line\">  var products = productRepository.getProducts()</span><br><span class=\"line\"></span><br><span class=\"line\">  function onProductSelected () &#123;</span><br><span class=\"line\">    var productId = $(this).attr(&apos;id&apos;)</span><br><span class=\"line\">    var product = $.grep(products, function (x) &#123;</span><br><span class=\"line\">      return x.getId() == productId</span><br><span class=\"line\">    &#125;)[0]</span><br><span class=\"line\">    // 触发事件【同一类的事情，用同一类方式，对行为的封装】</span><br><span class=\"line\">    eventAggregator.publish(&apos;productSelected&apos;, &#123;</span><br><span class=\"line\">      product: product</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  products.forEach(function (product) &#123;</span><br><span class=\"line\">    var newItem = $(&apos;&lt;li&gt;&lt;/li&gt;&apos;)</span><br><span class=\"line\">      .html(product.getDescription())</span><br><span class=\"line\">      .attr(&apos;id&apos;, product.getId())</span><br><span class=\"line\">      .dblclick(onProductSelected)</span><br><span class=\"line\">      .appendTo(&apos;#products&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 最外层执行，只是一系列的声明，逻辑就隐藏在内部</span><br><span class=\"line\">;(function () &#123;</span><br><span class=\"line\">  var eventAggregator = new EventAggregator()</span><br><span class=\"line\">  var cart = new Cart(eventAggregator)</span><br><span class=\"line\">  var cartController = new CartController(cart, eventAggregator)</span><br><span class=\"line\">  var productRepository = new ProductRepository()</span><br><span class=\"line\">  var productController = new ProductController(eventAggregator, productRepository)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2最少知道原则\"><a href=\"#2-2最少知道原则\" class=\"headerlink\" title=\"2.2最少知道原则\"></a>2.2最少知道原则</h3><p>一个实体应当尽量少地与其他实体之间发生相互作用，强调降低耦合</p>\n<h3 id=\"2-3接口隔离原则\"><a href=\"#2-3接口隔离原则\" class=\"headerlink\" title=\"2.3接口隔离原则\"></a>2.3接口隔离原则</h3><p>使用多个隔离的接口，比使用单个接口要好，强调降低耦合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var exampleBinder = &#123;&#125;</span><br><span class=\"line\">exampleBinder.modelObserver = (function () &#123;</span><br><span class=\"line\">  ;/ 私有变量 /</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    observe: function (model) &#123;</span><br><span class=\"line\">      ;/ 代码 /</span><br><span class=\"line\">      return newModel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onChange: function (callback) &#123;</span><br><span class=\"line\">      ;/ 代码 /</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">exampleBinder.viewAdaptor = (function () &#123;</span><br><span class=\"line\">  ;/ 私有变量 /</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    bind: function (model) &#123;</span><br><span class=\"line\">      ;/ 代码 /</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">exampleBinder.bind = function (model) &#123;</span><br><span class=\"line\">  ;/ 私有变量 /</span><br><span class=\"line\">  exampleBinder.modelObserver.onChange(/ 回调callback /)</span><br><span class=\"line\">  var om = exampleBinder.modelObserver.observe(model)</span><br><span class=\"line\">  exampleBinder.viewAdaptor.bind(om)</span><br><span class=\"line\">  return om</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-4开闭原则\"><a href=\"#2-4开闭原则\" class=\"headerlink\" title=\"2.4开闭原则\"></a>2.4开闭原则</h3><p>对扩展开放，对修改关闭<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function questionCreator (spec, my) &#123;</span><br><span class=\"line\">  var that = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  my = my || &#123;&#125;</span><br><span class=\"line\">  my.label = spec.label</span><br><span class=\"line\"></span><br><span class=\"line\">  my.renderInput = function () &#123;</span><br><span class=\"line\">    throw &apos;not implemented&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  that.render = function (target) &#123;</span><br><span class=\"line\">    var questionWrapper = document.createElement(&apos;div&apos;)</span><br><span class=\"line\">    questionWrapper.className = &apos;question&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    var questionLabel = document.createElement(&apos;div&apos;)</span><br><span class=\"line\">    questionLabel.className = &apos;question-label&apos;</span><br><span class=\"line\">    var label = document.createTextNode(spec.label)</span><br><span class=\"line\">    questionLabel.appendChild(label)</span><br><span class=\"line\"></span><br><span class=\"line\">    var answer = my.renderInput()</span><br><span class=\"line\"></span><br><span class=\"line\">    questionWrapper.appendChild(questionLabel)</span><br><span class=\"line\">    questionWrapper.appendChild(answer)</span><br><span class=\"line\">    return questionWrapper</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function choiceQuestionCreator (spec) &#123;</span><br><span class=\"line\">  var my = &#123;&#125;</span><br><span class=\"line\">  var that = questionCreator(spec, my)</span><br><span class=\"line\"></span><br><span class=\"line\">  my.renderInput = function () &#123;</span><br><span class=\"line\">    var input = document.createElement(&apos;select&apos;)</span><br><span class=\"line\">    var len = spec.choices.length</span><br><span class=\"line\">    for (var i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">      var option = document.createElement(&apos;option&apos;)</span><br><span class=\"line\">      option.text = spec.choices[i]</span><br><span class=\"line\">      option.value = spec.choices[i]</span><br><span class=\"line\">      input.appendChild(option)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return input</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function inputQuestionCreator (spec) &#123;</span><br><span class=\"line\">  var my = &#123;&#125;</span><br><span class=\"line\">  var that = questionCreator(spec, my)</span><br><span class=\"line\"></span><br><span class=\"line\">  my.renderInput = function () &#123;</span><br><span class=\"line\">    var input = document.createElement(&apos;input&apos;)</span><br><span class=\"line\">    input.type = &apos;text&apos;</span><br><span class=\"line\">    return input</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var view = &#123;</span><br><span class=\"line\">  render: function (target, questions) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; questions.length; i++) &#123;</span><br><span class=\"line\">      target.appendChild(questions[i].render())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var questions = [</span><br><span class=\"line\">  choiceQuestionCreator(&#123;</span><br><span class=\"line\">    label: &apos;Have you used tobacco products within the last 30 days?&apos;,</span><br><span class=\"line\">    choices: [&apos;Yes&apos;, &apos;No&apos;]</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  inputQuestionCreator(&#123;</span><br><span class=\"line\">    label: &apos;What medications are you currently using?&apos;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">var questionRegion = document.getElementById(&apos;questions&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">view.render(questionRegion, questions)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5里氏代换原则\"><a href=\"#2-5里氏代换原则\" class=\"headerlink\" title=\"2.5里氏代换原则\"></a>2.5里氏代换原则</h3><p>任何基类可以出现的地方，子类一定可以出现</p>\n<h3 id=\"2-6依赖倒转原则\"><a href=\"#2-6依赖倒转原则\" class=\"headerlink\" title=\"2.6依赖倒转原则\"></a>2.6依赖倒转原则</h3><p>依赖于抽象而不依赖于具体</p>\n<h3 id=\"2-7合成复用原则\"><a href=\"#2-7合成复用原则\" class=\"headerlink\" title=\"2.7合成复用原则\"></a>2.7合成复用原则</h3><p>尽量组合，而非继承</p>\n<h2 id=\"3-设计模式分类\"><a href=\"#3-设计模式分类\" class=\"headerlink\" title=\"3.设计模式分类\"></a>3.设计模式分类</h2><h3 id=\"3-1创建型模式\"><a href=\"#3-1创建型模式\" class=\"headerlink\" title=\"3.1创建型模式\"></a>3.1创建型模式</h3><p>用于创建对象<br><strong>构造函数模式</strong>：模拟类，用于创建特定类型（类）的对象<br><strong>原型模式</strong>：通过拷贝原型创建新对象，比如js里的prototype<br><strong>单例模式</strong>：在某空间提供唯一的访问点，保证一个类只有一个实例<br><strong>工厂模式</strong>：定义一个用于创建对象的接口，由子类决定实例化哪个类（厂长负责实施子类发出的任务）<br><strong>建造者模式</strong>：使同样的构建过程（eg:回调机制）可以创建不同的表示，而不用关注细节（回调的实现原理）<br><strong>模板方法</strong>：定义操作的算法的骨架（抽象类），而将步骤实现延迟到子类中（子类重写父类方法）</p>\n<h3 id=\"3-2结构型模式\"><a href=\"#3-2结构型模式\" class=\"headerlink\" title=\"3.2结构型模式\"></a>3.2结构型模式</h3><p>组合继承获得新功能<br><strong>组合模式</strong>：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。（eg:Dom都有增删改子节点的通用功能）<br><strong>桥接模式</strong>: 若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系<br><strong>代理模式</strong>：为其他对象提供一种代理以控制对这个对象的访问（eg：大叔代替小明送给女孩儿鲜花）<br><strong>适配器模式</strong>：将一个类（对象）的接口（方法或属性）转化成客户希望的另外一个接口（比如：电脑充电器）<br><strong>外观模式</strong>：为一组接口提供一个高层接口，使得接口更容易使用<br><strong>装饰者模式</strong>：包装同接口的对象，通过重载方法的形式添加新功能（调用原始对象方法并扩展）</p>\n<h3 id=\"3-3行为型模式\"><a href=\"#3-3行为型模式\" class=\"headerlink\" title=\"3.3行为型模式\"></a>3.3行为型模式</h3><p>对象通信<br><strong>中介者模式</strong>：[多对多]比如多架飞机的通讯都是通过中控系统进行<br><strong>观察者模式</strong>：[一对多]发布订阅模式<br><strong>策略模式</strong>：算法的相互替换不会影响到使用算法的客户<br><strong>命令模式</strong>：用于将一个请求方法封装成一个对象（参数不同，命令不同）<br><strong>职责链模式</strong>：使多个对象都有机会处理请求<br><strong>迭代器模式</strong>：为遍历不同的集合结构提供一个统一的接口</p>\n<h2 id=\"4-实例研读\"><a href=\"#4-实例研读\" class=\"headerlink\" title=\"4.实例研读\"></a>4.实例研读</h2><h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>构造函数模式：用于创建特定类型（类）的对象[可接收参数以便第一次创建对象时设置成员值]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注：这里将属性和方法都写在构造函数中，那么每个新的实例都会不同，若需共享，应绑定至prototype</span><br><span class=\"line\">function Animal(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//注意：这里我们使用了Object.prototype.方法名，而不是Object.prototype</span><br><span class=\"line\">//主要是用来避免重写定义原型prototype对象</span><br><span class=\"line\">Animal.prototype.getName= function () &#123;</span><br><span class=\"line\">    return &apos;该动物的名称&apos; + this.name</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var animal = new Animal(&quot;老虎&quot;);</span><br><span class=\"line\">console.log(animal.getName());</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>通过拷贝原型创建新对象[在上面构造函数的基础上利用原型模式实现继承]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Cat()&#123;&#125;</span><br><span class=\"line\">// 拷贝继承</span><br><span class=\"line\">Cat.prototype = Animal.prototype;</span><br><span class=\"line\">// 恢复constructor</span><br><span class=\"line\">Cat.prototype.constructor = Cat;</span><br><span class=\"line\">// 实例化</span><br><span class=\"line\">var cat = new Cat(&quot;花小猫&quot;);</span><br><span class=\"line\">console.log(cat.getName()) // 花小猫</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>单例模式：保证一个类只有一个实例<br>实现的方法是先判断实例是否存在，若存在则直接返回，否则再创建<br>用途：单例作为命名空间提供者，保证在某空间中提供一个唯一的访问点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var SingletonTester = (function () &#123;</span><br><span class=\"line\">    //参数：传递给单例的一个参数集合</span><br><span class=\"line\">    function Singleton(args) &#123;</span><br><span class=\"line\">        //设置args变量为接收的参数或者为空（如果没有提供的话）</span><br><span class=\"line\">        var args = args || &#123;&#125;;</span><br><span class=\"line\">        //设置name参数</span><br><span class=\"line\">        this.name = &apos;SingletonTester&apos;;</span><br><span class=\"line\">        //设置pointX的值</span><br><span class=\"line\">        this.pointX = args.pointX || 6; //从接收的参数里获取，或者设置为默认值</span><br><span class=\"line\">        //设置pointY的值</span><br><span class=\"line\">        this.pointY = args.pointY || 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //实例容器</span><br><span class=\"line\">    var instance;</span><br><span class=\"line\">    var _static = &#123;</span><br><span class=\"line\">        name: &apos;SingletonTester&apos;,</span><br><span class=\"line\">        //获取实例的方法</span><br><span class=\"line\">        //返回Singleton的实例</span><br><span class=\"line\">        getInstance: function (args) &#123;</span><br><span class=\"line\">            if (instance === undefined) &#123;</span><br><span class=\"line\">                instance = new Singleton(args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return _static;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">var singletonTest = SingletonTester.getInstance(&#123; pointX: 5 &#125;);</span><br><span class=\"line\">console.log(singletonTest.pointX); // 输出 5</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式定义了一个用于创建对象的接口(做的是同一类事情)，这个接口由子类决定实例化哪一个类(子类决定具体的不同实现)。<br>该模式使一个类的实例化延迟到了子类。<br>工程模式应该有厂长，负责调度实施任务<br>eg:switch动态匹配就是该模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对象方式</span><br><span class=\"line\">var productManager = &#123;&#125;;</span><br><span class=\"line\">&lt;!-- A类型实现 --&gt;</span><br><span class=\"line\">productManager.createProductA = function () &#123;</span><br><span class=\"line\">    console.log(&apos;ProductA&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- B类型实现 --&gt;</span><br><span class=\"line\">productManager.createProductB = function () &#123;</span><br><span class=\"line\">    console.log(&apos;ProductB&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 厂长负责调度 --&gt;</span><br><span class=\"line\">productManager.factory = function (typeType) &#123;</span><br><span class=\"line\">    return new productManager[typeType];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">productManager.factory(&quot;createProductA&quot;);</span><br><span class=\"line\">// 方法方式的&quot;厂长&quot;调度器</span><br><span class=\"line\">function switchFun(type)&#123;</span><br><span class=\"line\">  switch(type)&#123;</span><br><span class=\"line\">    case &apos;ProductA&apos;:</span><br><span class=\"line\">      console.log(&apos;ProductA&apos;)</span><br><span class=\"line\">      break</span><br><span class=\"line\">    case &apos;ProductB&apos;:</span><br><span class=\"line\">      console.log(&apos;ProductB&apos;)</span><br><span class=\"line\">      break</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      console.log(&apos;nothing&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">switchFun(&quot;ProductA&quot;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>回调是个很好的例子,将不变的构建算法封装起来(eg:getBeerById),变化的回调处理部分分离出去(callback之后的定制化操作),不用关心构建的具体过程和回调的调用地方,<br>而且可以存着多个回调,比如ajax的success,error回调等,只需要使用,而不用关心其相对稳定的建造细节<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 封装相对稳定的建造算法 --&gt;</span><br><span class=\"line\">function getBeerById(id, callback) &#123;</span><br><span class=\"line\">    &lt;!-- 调用者不用关心内部实现细节 --&gt;</span><br><span class=\"line\">    asyncRequest(&apos;GET&apos;, &apos;beer.uri?id=&apos; + id, function (resp) &#123;</span><br><span class=\"line\">        // 不用关心回调执行的地方</span><br><span class=\"line\">        callback(resp.responseText);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var el = document.querySelector(&apos;#test&apos;);</span><br><span class=\"line\">el.addEventListener(&apos;click&apos;, getBeerByIdBridge, false);</span><br><span class=\"line\"></span><br><span class=\"line\">function getBeerByIdBridge(e) &#123;</span><br><span class=\"line\">    &lt;!-- 回调调用 --&gt;</span><br><span class=\"line\">    getBeerById(this.id, function (beer) &#123;</span><br><span class=\"line\">        &lt;!-- 关心的部分 --&gt;</span><br><span class=\"line\">        console.log(&apos;Requested Beer: &apos; + beer);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"模板方法\"><a href=\"#模板方法\" class=\"headerlink\" title=\"模板方法\"></a>模板方法</h3><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类重写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 抽象步骤</span><br><span class=\"line\">    var MakeDrink = function() &#123;&#125;</span><br><span class=\"line\">    MakeDrink.prototype.step = function() &#123;</span><br><span class=\"line\">      this.boilWater()</span><br><span class=\"line\">      this.addDrink()</span><br><span class=\"line\">      this.cover()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MakeDrink.prototype.boilWater = function() &#123;</span><br><span class=\"line\">      console.log(&apos;将水烧开!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MakeDrink.prototype.addDrink = function() &#123;</span><br><span class=\"line\">      throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MakeDrink.prototype.cover = function() &#123;</span><br><span class=\"line\">      console.log(&apos;盖上盖子!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 冲咖啡</span><br><span class=\"line\">    var Coffee = function() &#123;</span><br><span class=\"line\">      MakeDrink.apply(this)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Coffee.prototype = new MakeDrink()</span><br><span class=\"line\">    Coffee.prototype.addDrink = function() &#123;</span><br><span class=\"line\">      console.log(&apos;添加咖啡!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //冲茶叶</span><br><span class=\"line\">    var Tea = function() &#123;</span><br><span class=\"line\">      MakeDrink.apply(this)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Tea.prototype = new MakeDrink()</span><br><span class=\"line\">    Tea.prototype.addDrink = function() &#123;</span><br><span class=\"line\">      console.log(&apos;添加茶叶!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 验证调用</span><br><span class=\"line\">    var coffee1 = new Coffee()</span><br><span class=\"line\">    coffee1.step()</span><br><span class=\"line\">    console.log(&apos;--------分割线----------&apos;)</span><br><span class=\"line\">    var tea1 = new Tea()</span><br><span class=\"line\">    tea1.step()</span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>菜单和菜单项都有类似的公共行为:“整体-部分”的层次结构,用户对单个对象和组合对象的使用具有一致性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 抽象类</span><br><span class=\"line\">  var MenuComponent = function() &#123;&#125;</span><br><span class=\"line\">  MenuComponent.prototype.getName = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MenuComponent.prototype.print = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MenuComponent.prototype.add = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 菜单</span><br><span class=\"line\">  var Menu = function(sName) &#123;</span><br><span class=\"line\">    MenuComponent.apply(this)</span><br><span class=\"line\">    this.aMenuComponents = []</span><br><span class=\"line\">    this.sName = sName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Menu.prototype = new MenuComponent()</span><br><span class=\"line\">  Menu.prototype.getName = function() &#123;</span><br><span class=\"line\">    return this.sName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Menu.prototype.print = function() &#123;</span><br><span class=\"line\">    console.log(&apos;-----菜单名称:&apos; + this.getName())</span><br><span class=\"line\">    this.aMenuComponents.forEach(function(item) &#123;</span><br><span class=\"line\">      item.print()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Menu.prototype.add = function(oMenuComponent) &#123;</span><br><span class=\"line\">    this.aMenuComponents.push(oMenuComponent)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 菜单项</span><br><span class=\"line\">  var MenuItem = function(sName) &#123;</span><br><span class=\"line\">    MenuComponent.apply(this)</span><br><span class=\"line\">    this.sName = sName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MenuItem.prototype = new MenuComponent()</span><br><span class=\"line\">  MenuItem.prototype.getName = function() &#123;</span><br><span class=\"line\">    return this.sName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MenuItem.prototype.print = function() &#123;</span><br><span class=\"line\">    console.log(&apos;-----菜单项名称:&apos; + this.getName())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 调用测试</span><br><span class=\"line\">  var menu1 = new Menu(&apos;菜单一&apos;)</span><br><span class=\"line\">  menu1.add(new MenuItem(&apos;菜单项一&apos;))</span><br><span class=\"line\">  menu1.add(new MenuItem(&apos;菜单项二&apos;))</span><br><span class=\"line\">  menu1.print()</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><p>若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 事件绑定与处理事件的方法定义</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 抽象代码不可直接运行</span><br><span class=\"line\">  function getBeerById(id, callback) &#123;</span><br><span class=\"line\">    asyncRequest(&apos;GET&apos;, &apos;beer.uri?id=&apos; + id, function(resp) &#123;</span><br><span class=\"line\">      callback(resp.responseText)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // getBeerByIdBridge桥接原理:将addEvent直接调用getBeerById的定义分离</span><br><span class=\"line\">  // addEvent只是调用了一个桥,桥只是&apos;调用了getBeerById&apos;,而getBeerById的定义则被抽离</span><br><span class=\"line\">  // 优点:使得处理事件的方法实现得以分离,则该方法方便被重用,而且getBeerByIdBridge也方便调用其他处理事件的方法</span><br><span class=\"line\">  addEvent(element, &apos;click&apos;, getBeerByIdBridge)</span><br><span class=\"line\">  function getBeerByIdBridge(e) &#123;</span><br><span class=\"line\">    getBeerById(this.id, function(res) &#123;</span><br><span class=\"line\">      console.log(&apos;Requested:&apos; + res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>大叔代理小明送给美女鲜花<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var Girl = function(name) &#123;</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var Xiaoming = function(girl) &#123;</span><br><span class=\"line\">    this.girl = girl</span><br><span class=\"line\">    this.sendFlower = function(flower) &#123;</span><br><span class=\"line\">      console.log(&apos;Hi &apos; + girl.name + &apos;, xiaoming送你一个礼物：&apos; + flower)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 大叔代理</span><br><span class=\"line\">  var ProxyMan = function(girl) &#123;</span><br><span class=\"line\">    this.girl = girl</span><br><span class=\"line\">    this.sendFlower = function(flower) &#123;</span><br><span class=\"line\">      new Xiaoming(girl).sendFlower(flower) //代替小明送花咯</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 测试</span><br><span class=\"line\">  var proxyMan = new ProxyMan(new Girl(&apos;酸奶小妹&apos;))</span><br><span class=\"line\">  proxyMan.sendFlower(&apos;999朵玫瑰&apos;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>鸭子和狗都有行走(fly,run)和叫声(sound)行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 抽象行为</span><br><span class=\"line\">  var Duck = function() &#123;&#125;</span><br><span class=\"line\">  Duck.prototype.fly = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos;该方法必须被重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var Dog = function() &#123;&#125;</span><br><span class=\"line\">  Dog.prototype.run = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos; 该方法必须被重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 定义构造函数</span><br><span class=\"line\">  var DuckObj = function() &#123;</span><br><span class=\"line\">    Duck.apply(this)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DuckObj.prototype = new Duck()</span><br><span class=\"line\">  DuckObj.prototype.fly = function() &#123;</span><br><span class=\"line\">    console.log(&apos;鸭子可以飞起来!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var DogObj = function() &#123;</span><br><span class=\"line\">    Dog.apply(this)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DogObj.prototype = new Dog()</span><br><span class=\"line\">  DogObj.prototype.run = function() &#123;</span><br><span class=\"line\">    console.log(&apos;狗可以跑的很快!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 鸭子适配器:使得鸭子可以支持狗的run方法,同时使其自身飞的快5倍</span><br><span class=\"line\">  var DuckAdapter = function(oDuck) &#123;</span><br><span class=\"line\">    Duck.apply(this)</span><br><span class=\"line\">    this.oDuck = oDuck</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DuckAdapter.prototype = new Duck()</span><br><span class=\"line\">  DuckAdapter.prototype.run = function() &#123;</span><br><span class=\"line\">    // 虽然方法名字是dog的run,但是内部实现可以任意,只是为了适配</span><br><span class=\"line\">    this.oDuck.fly()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 重新定义fly实现,相当于对fly进行了重写</span><br><span class=\"line\">  DuckAdapter.prototype.fly = function() &#123;</span><br><span class=\"line\">    var nFly = 0</span><br><span class=\"line\">    var nLenFly = 3</span><br><span class=\"line\">    for (; nFly &lt; nLenFly; ) &#123;</span><br><span class=\"line\">      this.oDuck.fly()</span><br><span class=\"line\">      nFly = nFly + 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 测试</span><br><span class=\"line\">  var oDuck = new DuckObj()</span><br><span class=\"line\">  var oDug = new DogObj()</span><br><span class=\"line\">  var oDuckAdapter = new DuckAdapter(oDuck)</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(&apos;---------原有的鸭子行为-------&apos;)</span><br><span class=\"line\">  oDuck.fly()</span><br><span class=\"line\">  console.log(&apos;---------原有的狗行为-------&apos;)</span><br><span class=\"line\">  oDug.run()</span><br><span class=\"line\">  console.log(&apos;---------适配器鸭子的行为（鸭子调用狗的方法名称）-------&apos;)</span><br><span class=\"line\">  oDuckAdapter.run()</span><br><span class=\"line\">  console.log(&apos;---------适配器鸭子的行为（鸭子原有fly行为被重写,调用了3遍）-------&apos;)</span><br><span class=\"line\">  oDuckAdapter.fly()</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h3><p>如果需要调用一组接口实现一个更大的功能,那么就把这些方法放在一起组成一个新的方法,从而简化调用<br>eg:阻止事件默认行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function handleClick(e) &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    e.stopPropagation();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h3><p>比继承更有弹性的替代方案,通过重载方法的形式扩展功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 实例1:重写原方法 --&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  function Macbook() &#123;</span><br><span class=\"line\">    this.cost = function() &#123;</span><br><span class=\"line\">      return 1000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function Memory(macbook) &#123;</span><br><span class=\"line\">    this.cost = function() &#123;</span><br><span class=\"line\">      return macbook.cost() + 75</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // </span><br><span class=\"line\">  var myMacbook = new Memory(new Macbook())</span><br><span class=\"line\">  console.log(myMacbook.cost())</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 实例二:重写原方法的一部分(有调用点的方法调用) --&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 被装饰者</span><br><span class=\"line\">  function ConcreteClass() &#123;</span><br><span class=\"line\">    this.performTask = function() &#123;</span><br><span class=\"line\">      this.preTask()</span><br><span class=\"line\">      console.log(&apos;doing something&apos;)</span><br><span class=\"line\">      this.postTask()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.preTask = function() &#123;</span><br><span class=\"line\">      console.log(&apos;原有执行之前...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.postTask = function() &#123;</span><br><span class=\"line\">      console.log(&apos;原有执行之后...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 抽象装饰</span><br><span class=\"line\">  function AbstractDecorator(decorated) &#123;</span><br><span class=\"line\">    this.performTask = function() &#123;</span><br><span class=\"line\">      decorated.performTask()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 定义具体装饰:重写preTask和postTask</span><br><span class=\"line\">  function ConcreteDecoratorClass(decorated) &#123;</span><br><span class=\"line\">    this.base = AbstractDecorator</span><br><span class=\"line\">    this.base(decorated)</span><br><span class=\"line\">    decorated.preTask = function() &#123;</span><br><span class=\"line\">      console.log(&apos;装饰执行之前...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    decorated.postTask = function() &#123;</span><br><span class=\"line\">      console.log(&apos;装饰执行之后...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 测试</span><br><span class=\"line\">  var decorator1 = new ConcreteDecoratorClass(new ConcreteClass())</span><br><span class=\"line\">  decorator1.performTask()</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 实例三:重写原方法的一部分(无调用点) --&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var tree = &#123;&#125;</span><br><span class=\"line\">  tree.decorate = function() &#123;</span><br><span class=\"line\">    console.log(&apos;树木初始化...&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 添加装饰器定义</span><br><span class=\"line\">  tree.addDecorator = function(deco) &#123;</span><br><span class=\"line\">    tree[deco].prototype = this</span><br><span class=\"line\">    return new tree[deco]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tree.Leaves = function() &#123;</span><br><span class=\"line\">    this.decorate = function() &#123;</span><br><span class=\"line\">      this.Leaves.prototype.decorate()</span><br><span class=\"line\">      console.log(&apos;添加一些树叶...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tree.Flower = function() &#123;</span><br><span class=\"line\">    this.decorate = function() &#123;</span><br><span class=\"line\">      this.Flower.prototype.decorate()</span><br><span class=\"line\">      console.log(&apos;添加一些花朵...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 测试</span><br><span class=\"line\">  tree = tree.addDecorator(&apos;Leaves&apos;)</span><br><span class=\"line\">  tree = tree.addDecorator(&apos;Flower&apos;)</span><br><span class=\"line\">  tree.decorate() //执行Flower的decorate方法,并依次向上递归调用</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><p>中介者模式处理多对多场景.eg:MVC模型中,控制层便是位于表现层与模型层之间的中介者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function View() &#123;</span><br><span class=\"line\">      this.el = document.createElement(&apos;div&apos;)</span><br><span class=\"line\">      this.getEl = function() &#123;</span><br><span class=\"line\">        return this.el</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function Model(data) &#123;</span><br><span class=\"line\">      this.save = function() &#123;</span><br><span class=\"line\">        console.log(&apos;保存数据:&apos; + data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 定义控制器,中介者</span><br><span class=\"line\">    function Ctrl(view, model) &#123;</span><br><span class=\"line\">      this.view = view</span><br><span class=\"line\">      this.model = model</span><br><span class=\"line\">      this.relative = function() &#123;</span><br><span class=\"line\">        this.view.getEl().onclick = function() &#123;</span><br><span class=\"line\">          this.model.save()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试</span><br><span class=\"line\">    let view1 = new View()</span><br><span class=\"line\">    let model1 = new Model(&apos;test_data1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    let view2 = new View()</span><br><span class=\"line\">    let model2 = new Model(&apos;test_data2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 中介调度,可以有多组不同view和model,相互交叉关联</span><br><span class=\"line\">    let ctrl1 = new Ctrl(view1, model1)</span><br><span class=\"line\">    let ctrl2 = new Ctrl(view2, model2)</span><br><span class=\"line\">    let ctrl3 = new Ctrl(view1, model2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义观察者</span><br><span class=\"line\">    function Observer() &#123;</span><br><span class=\"line\">      // 所有已订阅的方法集合</span><br><span class=\"line\">      this.fns = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Observer.prototype = &#123;</span><br><span class=\"line\">      subscribe: function(fn) &#123;</span><br><span class=\"line\">        this.fns.push(fn)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      unsubscribe: function(fn) &#123;</span><br><span class=\"line\">        this.fns = this.fns.filter(function(el) &#123;</span><br><span class=\"line\">          if (el !== fn) &#123;</span><br><span class=\"line\">            return el</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      // 定义触发方法:(主题对象)状态发生变化时,触发update</span><br><span class=\"line\">      update: function(data, thisObj) &#123;</span><br><span class=\"line\">        var scope = thisObj || window</span><br><span class=\"line\">        // 将已经订阅的方法都遍历执行一遍</span><br><span class=\"line\">        this.fns.forEach(function(el) &#123;</span><br><span class=\"line\">          el.call(scope, data)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //测试</span><br><span class=\"line\">    let observer = new Observer()</span><br><span class=\"line\"></span><br><span class=\"line\">    // 声明</span><br><span class=\"line\">    const fun1 = function(data) &#123;</span><br><span class=\"line\">      console.log(&apos;观察者fun1得到的主题对象参数是: &apos; + data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const fun2 = function(data) &#123;</span><br><span class=\"line\">      console.log(&apos;观察者fun2得到的主题对象参数是: &apos; + data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 订阅</span><br><span class=\"line\">    observer.subscribe(fun1)</span><br><span class=\"line\">    observer.subscribe(fun2)</span><br><span class=\"line\">    // 触发</span><br><span class=\"line\">    observer.update(&apos;主题对象参数A&apos;)</span><br><span class=\"line\">    console.log(&apos;--------------------华丽的分割线--------------------&apos;)</span><br><span class=\"line\">    //退订f1</span><br><span class=\"line\">    observer.unsubscribe(fun1)</span><br><span class=\"line\">    //再次触发,验证退订</span><br><span class=\"line\">    observer.update(&apos;主题对象参数B&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>校验表单<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 策略处理类</span><br><span class=\"line\">  let validator = &#123;</span><br><span class=\"line\">    types: &#123;&#125;, // 验证规则处理类,后面会扩展各种规则的定义</span><br><span class=\"line\">    config: &#123;&#125;, // 定义需要使用的验证类型</span><br><span class=\"line\">    messages: [], // 验证所对应的错误消息集合</span><br><span class=\"line\">    validate: function(data) &#123;</span><br><span class=\"line\">      // 暴露的公开验证方法,参数类型为obj,data是原始数据</span><br><span class=\"line\">      let msg, type, validateTypeFun, result_ok</span><br><span class=\"line\">      this.messages = [] // 清空所有的错误信息</span><br><span class=\"line\">      for (let key in data) &#123;</span><br><span class=\"line\">        if (data.hasOwnProperty(key)) &#123; //原始数据中是否包含可枚举的字段key</span><br><span class=\"line\">          type = this.config[key] // 用户为字段key配置的验证规则是什么?比如isNonEmpty</span><br><span class=\"line\">          validateTypeFun = this.types[type] // 获取验证规则对应的验证方法是否已定义</span><br><span class=\"line\">          if (!type) &#123;</span><br><span class=\"line\">            continue // 如果针对key的验证规则未配置，则不处理</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (!validateTypeFun) &#123; // 如果验证方法为定义，抛出异常</span><br><span class=\"line\">            throw &#123;</span><br><span class=\"line\">              name: &apos;ValidationError&apos;,</span><br><span class=\"line\">              message: &apos;该类型无对应处理方法:&apos; + type</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          result_ok = validateTypeFun.validate(data[key]) //正常验证</span><br><span class=\"line\">          if (!result_ok) &#123;</span><br><span class=\"line\">            msg = &apos;非法值&apos; + key + &apos;, &apos; + validateTypeFun.instructions</span><br><span class=\"line\">            this.messages.push(msg)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return this.hasErrors()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // helper</span><br><span class=\"line\">    hasErrors: function() &#123;</span><br><span class=\"line\">      return this.messages.length !== 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 验证给定的值是否不为空</span><br><span class=\"line\">  validator.types.isNotEmpty = &#123;</span><br><span class=\"line\">    validate: function(value) &#123;</span><br><span class=\"line\">      return value !== &apos;&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    instructions: &apos;传入的值不能为空&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 验证给定的值是否是数字</span><br><span class=\"line\">  validator.types.isNumber = &#123;</span><br><span class=\"line\">    validate: function(value) &#123;</span><br><span class=\"line\">      return !isNaN(value)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    instructions: &apos;传入的值只能是合法的数字，例如：1, 3.14 or 2010&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 定义需要验证的数据集合和需要验证的规则类型</span><br><span class=\"line\">  var data = &#123;</span><br><span class=\"line\">    first_name: &apos;&apos;,</span><br><span class=\"line\">    age: &apos;unknown&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  validator.config = &#123;</span><br><span class=\"line\">    first_name: &apos;isNotEmpty&apos;,</span><br><span class=\"line\">    age: &apos;isNumber&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 测试获取验证结果</span><br><span class=\"line\">  validator.validate(data)</span><br><span class=\"line\">  if (validator.hasErrors()) &#123;</span><br><span class=\"line\">    console.log(validator.messages.join(&apos;\\n&apos;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><p>将请求封装成一个对象，可用不同的请求参数满足客户的需求(将一系列任务封装成一个对象,由参数决定具体执行哪个任务命令)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NumMng = &#123;</span><br><span class=\"line\">   // 请求数字</span><br><span class=\"line\">   requestNum: function(num) &#123;</span><br><span class=\"line\">     console.log(&apos;我请求的数字是:&apos; + num)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">   // 得到数字</span><br><span class=\"line\">   readNum: function(num) &#123;</span><br><span class=\"line\">     console.log(&apos;我操作的数字是:&apos; + num)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">   // 删除数字</span><br><span class=\"line\">   delNum: function(num) &#123;</span><br><span class=\"line\">     console.log(&apos;我要删除的数字是:&apos; + num)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> /**</span><br><span class=\"line\">  * @function  命令执行器</span><br><span class=\"line\">  * @param  command &#123;obj&#125;</span><br><span class=\"line\">  **/</span><br><span class=\"line\"> NumMng.execute = function(command) &#123;</span><br><span class=\"line\">   return NumMng[command.commandType](command.operand)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> // execute执行,operand操作数</span><br><span class=\"line\"> NumMng.execute(&#123; commandType: &apos;requestNum&apos;, operand: &apos;2&apos; &#125;)</span><br><span class=\"line\"> NumMng.execute(&#123; commandType: &apos;readNum&apos;, operand: &apos;2&apos; &#125;)</span><br><span class=\"line\"> NumMng.execute(&#123; commandType: &apos;delNum&apos;, operand: &apos;2&apos; &#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h3><p>多个对象都有机会处理请求,这些对象连成一条链，请求沿着这条链传递，链中收到请求的对象要么亲自处理它，要么转发给链中的下一个候选者,直到有一个对象处理他为止<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义职责链</span><br><span class=\"line\">    function Handler(s) &#123;</span><br><span class=\"line\">      this.successor = s || null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Handler.prototype = &#123;</span><br><span class=\"line\">      run: function() &#123;</span><br><span class=\"line\">        if (this.successor) &#123;</span><br><span class=\"line\">          this.successor.run()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 最外层</span><br><span class=\"line\">    let app = new Handler(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        run: function() &#123;</span><br><span class=\"line\">          console.log(&apos;最外层...&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      3</span><br><span class=\"line\">    )</span><br><span class=\"line\">    // 中间层</span><br><span class=\"line\">    let dialog = new Handler(app, 1)</span><br><span class=\"line\">    dialog.run = function() &#123;</span><br><span class=\"line\">      console.log(&apos;中间层执行前...&apos;)</span><br><span class=\"line\">      // 这里做具体的处理操作</span><br><span class=\"line\">      Handler.prototype.run.call(this) //继续往上走,调用app的handle方法</span><br><span class=\"line\">      console.log(&apos;中间层执行后...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 最内层</span><br><span class=\"line\">    let button = new Handler(dialog, 2)</span><br><span class=\"line\">    button.run = function() &#123;</span><br><span class=\"line\">      console.log(&apos;最内层执行前...&apos;)</span><br><span class=\"line\">      // 这里做具体的处理操作</span><br><span class=\"line\">      Handler.prototype.run.call(this) // 继续往上走,调用dialog的handle方法</span><br><span class=\"line\">      console.log(&apos;最内层执行后...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 调用</span><br><span class=\"line\">    button.run()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>提供一种方法顺序访问一个聚合对象中的各个节点,一般迭代至少有hasNext()和next()两个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 封装迭代引擎</span><br><span class=\"line\">function IteratorEngine(arr) &#123;</span><br><span class=\"line\">  this.arr = arr</span><br><span class=\"line\">  this.index = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">IteratorEngine.prototype.hasNext = function() &#123;</span><br><span class=\"line\">  return this.index &lt; this.arr.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">IteratorEngine.prototype.next = function() &#123;</span><br><span class=\"line\">  let _ele = null</span><br><span class=\"line\">  if (!this.hasNext()) &#123;</span><br><span class=\"line\">    return null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _ele = this.arr[this.index]</span><br><span class=\"line\">  this.index += 1</span><br><span class=\"line\">  return &apos;迭代节点:&apos; + _ele</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 聚合对象</span><br><span class=\"line\">let arrList = [1, 2, 3, 4, 5]</span><br><span class=\"line\">let iteratorEngine = new IteratorEngine(arrList)</span><br><span class=\"line\"></span><br><span class=\"line\">while (iteratorEngine.hasNext()) &#123;</span><br><span class=\"line\">  console.log(iteratorEngine.next())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-备注\"><a href=\"#5-备注\" class=\"headerlink\" title=\"5.备注\"></a>5.备注</h2><p><strong>适配</strong>器则意味着改变一个<strong>已有对象</strong>的接口。<br><strong>代理</strong>模式在不改变原有接口的条件下，用另一个对象定义了一个代理<br>装饰者模式<strong>增强</strong>了其它对象的功能而同时又不改变它的接口<br>桥接的目的是将接口部分和实现部分分离，从而对他们可以更为容易也相对独立的加以改变。<br>工厂模式：switch逻辑外部定义一个统一的接口，通过参数决定具体执行路线，比如Redux中action的调用<br>观察者模式:比如点击事件就是一种最常见的发布订阅模式addEventListener，再比如vue中的data和rn中的state,对其改变时，依赖它的对象都将得到通知和更新<br>策略模式：比如表单校验中针对不同的表单类型进行不同的校验实现</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-文档目的\"><a href=\"#1-文档目的\" class=\"headerlink\" title=\"1.文档目的\"></a>1.文档目的</h2><p>设计模式的意义在于:最佳实践提高代码重用，易于理解和维护<br>参考网址：<a href=\"https://www.w3cschool.cn/deep_learn_javascript/deep_learn_javascript-ljp4285i.html\" target=\"_blank\" rel=\"noopener\">w3c设计模式</a></p>\n<h2 id=\"2-设计原则\"><a href=\"#2-设计原则\" class=\"headerlink\" title=\"2.设计原则\"></a>2.设计原则</h2><h3 id=\"2-1单一职责原则SRP\"><a href=\"#2-1单一职责原则SRP\" class=\"headerlink\" title=\"2.1单一职责原则SRP\"></a>2.1单一职责原则SRP</h3><p>属性及其相关操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *function: 产品添加到购物车</span><br><span class=\"line\"> *前提认知：对象(属性及其对属性的操作)</span><br><span class=\"line\"> *分析：产品(对象[id，desc])----添加到【事件驱动】---&gt;购物车(对象[被添加产品的集合，添加商品的func])</span><br><span class=\"line\"> *添加行为分析：</span><br><span class=\"line\"> * 首先得到若干产品实体，得到一个购物车实体</span><br><span class=\"line\"> * 实体列表渲染在页面上，通过点击触发‘产品添加到购物车’的行为</span><br><span class=\"line\"> * 思考：如何解耦业务？MVC思想：model实体，view展示，contralter控制器</span><br><span class=\"line\"> *   进一步抽象：将公共行为抽象，统一方式触发</span><br><span class=\"line\"> */</span><br><span class=\"line\">function Event (name) &#123;</span><br><span class=\"line\">  var handlers = []</span><br><span class=\"line\"></span><br><span class=\"line\">  this.getName = function () &#123;</span><br><span class=\"line\">    return name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.addHandler = function (handler) &#123;</span><br><span class=\"line\">    handlers.push(handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.removeHandler = function (handler) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; handlers.length; i++) &#123;</span><br><span class=\"line\">      if (handlers[i] == handler) &#123;</span><br><span class=\"line\">        handlers.splice(i, 1)</span><br><span class=\"line\">        break</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.fire = function (eventArgs) &#123;</span><br><span class=\"line\">    handlers.forEach(function (h) &#123;</span><br><span class=\"line\">      h(eventArgs)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function EventAggregator () &#123;</span><br><span class=\"line\">  var events = []</span><br><span class=\"line\"></span><br><span class=\"line\">  function getEvent (eventName) &#123;</span><br><span class=\"line\">    return $.grep(events, function (event) &#123;</span><br><span class=\"line\">      return event.getName() === eventName</span><br><span class=\"line\">    &#125;)[0]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.publish = function (eventName, eventArgs) &#123;</span><br><span class=\"line\">    var event = getEvent(eventName)</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!event) &#123;</span><br><span class=\"line\">      event = new Event(eventName)</span><br><span class=\"line\">      events.push(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    event.fire(eventArgs)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  this.subscribe = function (eventName, handler) &#123;</span><br><span class=\"line\">    var event = getEvent(eventName)</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!event) &#123;</span><br><span class=\"line\">      event = new Event(eventName)</span><br><span class=\"line\">      events.push(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event.addHandler(handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Product (id, description) &#123;</span><br><span class=\"line\">  this.getId = function () &#123;</span><br><span class=\"line\">    return id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.getDescription = function () &#123;</span><br><span class=\"line\">    return description</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Cart (eventAggregator) &#123;</span><br><span class=\"line\">  var items = []</span><br><span class=\"line\"></span><br><span class=\"line\">  this.addItem = function (item) &#123;</span><br><span class=\"line\">    items.push(item)</span><br><span class=\"line\">    // 这个操作，购物车添加产品的时候触发相关操作（由控制器处理）</span><br><span class=\"line\">    eventAggregator.publish(&apos;itemAdded&apos;, item)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function CartController (cart, eventAggregator) &#123;</span><br><span class=\"line\">  // 控制器监听</span><br><span class=\"line\">  eventAggregator.subscribe(&apos;itemAdded&apos;, function (eventArgs) &#123;</span><br><span class=\"line\">    var newItem = $(&apos;&lt;li&gt;&lt;/li&gt;&apos;)</span><br><span class=\"line\">      .html(eventArgs.getDescription())</span><br><span class=\"line\">      .attr(&apos;id-cart&apos;, eventArgs.getId())</span><br><span class=\"line\">      .appendTo(&apos;#cart&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  eventAggregator.subscribe(&apos;productSelected&apos;, function (eventArgs) &#123;</span><br><span class=\"line\">    cart.addItem(eventArgs.product)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 封装Model层，产品实体的获得可以通过任何形式，请求等</span><br><span class=\"line\">function ProductRepository () &#123;</span><br><span class=\"line\">  var products = [new Product(1, &apos;Star Wars Lego Ship&apos;), new Product(2, &apos;Barbie Doll&apos;), new Product(3, &apos;Remote Control Airplane&apos;)]</span><br><span class=\"line\"></span><br><span class=\"line\">  this.getProducts = function () &#123;</span><br><span class=\"line\">    return products</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 封装产品控制器，拿到产品并对产品操作(生成产品节点，并绑定事件)</span><br><span class=\"line\">function ProductController (eventAggregator, productRepository) &#123;</span><br><span class=\"line\">  var products = productRepository.getProducts()</span><br><span class=\"line\"></span><br><span class=\"line\">  function onProductSelected () &#123;</span><br><span class=\"line\">    var productId = $(this).attr(&apos;id&apos;)</span><br><span class=\"line\">    var product = $.grep(products, function (x) &#123;</span><br><span class=\"line\">      return x.getId() == productId</span><br><span class=\"line\">    &#125;)[0]</span><br><span class=\"line\">    // 触发事件【同一类的事情，用同一类方式，对行为的封装】</span><br><span class=\"line\">    eventAggregator.publish(&apos;productSelected&apos;, &#123;</span><br><span class=\"line\">      product: product</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  products.forEach(function (product) &#123;</span><br><span class=\"line\">    var newItem = $(&apos;&lt;li&gt;&lt;/li&gt;&apos;)</span><br><span class=\"line\">      .html(product.getDescription())</span><br><span class=\"line\">      .attr(&apos;id&apos;, product.getId())</span><br><span class=\"line\">      .dblclick(onProductSelected)</span><br><span class=\"line\">      .appendTo(&apos;#products&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 最外层执行，只是一系列的声明，逻辑就隐藏在内部</span><br><span class=\"line\">;(function () &#123;</span><br><span class=\"line\">  var eventAggregator = new EventAggregator()</span><br><span class=\"line\">  var cart = new Cart(eventAggregator)</span><br><span class=\"line\">  var cartController = new CartController(cart, eventAggregator)</span><br><span class=\"line\">  var productRepository = new ProductRepository()</span><br><span class=\"line\">  var productController = new ProductController(eventAggregator, productRepository)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2最少知道原则\"><a href=\"#2-2最少知道原则\" class=\"headerlink\" title=\"2.2最少知道原则\"></a>2.2最少知道原则</h3><p>一个实体应当尽量少地与其他实体之间发生相互作用，强调降低耦合</p>\n<h3 id=\"2-3接口隔离原则\"><a href=\"#2-3接口隔离原则\" class=\"headerlink\" title=\"2.3接口隔离原则\"></a>2.3接口隔离原则</h3><p>使用多个隔离的接口，比使用单个接口要好，强调降低耦合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var exampleBinder = &#123;&#125;</span><br><span class=\"line\">exampleBinder.modelObserver = (function () &#123;</span><br><span class=\"line\">  ;/ 私有变量 /</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    observe: function (model) &#123;</span><br><span class=\"line\">      ;/ 代码 /</span><br><span class=\"line\">      return newModel</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    onChange: function (callback) &#123;</span><br><span class=\"line\">      ;/ 代码 /</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">exampleBinder.viewAdaptor = (function () &#123;</span><br><span class=\"line\">  ;/ 私有变量 /</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    bind: function (model) &#123;</span><br><span class=\"line\">      ;/ 代码 /</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">exampleBinder.bind = function (model) &#123;</span><br><span class=\"line\">  ;/ 私有变量 /</span><br><span class=\"line\">  exampleBinder.modelObserver.onChange(/ 回调callback /)</span><br><span class=\"line\">  var om = exampleBinder.modelObserver.observe(model)</span><br><span class=\"line\">  exampleBinder.viewAdaptor.bind(om)</span><br><span class=\"line\">  return om</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-4开闭原则\"><a href=\"#2-4开闭原则\" class=\"headerlink\" title=\"2.4开闭原则\"></a>2.4开闭原则</h3><p>对扩展开放，对修改关闭<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function questionCreator (spec, my) &#123;</span><br><span class=\"line\">  var that = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  my = my || &#123;&#125;</span><br><span class=\"line\">  my.label = spec.label</span><br><span class=\"line\"></span><br><span class=\"line\">  my.renderInput = function () &#123;</span><br><span class=\"line\">    throw &apos;not implemented&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  that.render = function (target) &#123;</span><br><span class=\"line\">    var questionWrapper = document.createElement(&apos;div&apos;)</span><br><span class=\"line\">    questionWrapper.className = &apos;question&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    var questionLabel = document.createElement(&apos;div&apos;)</span><br><span class=\"line\">    questionLabel.className = &apos;question-label&apos;</span><br><span class=\"line\">    var label = document.createTextNode(spec.label)</span><br><span class=\"line\">    questionLabel.appendChild(label)</span><br><span class=\"line\"></span><br><span class=\"line\">    var answer = my.renderInput()</span><br><span class=\"line\"></span><br><span class=\"line\">    questionWrapper.appendChild(questionLabel)</span><br><span class=\"line\">    questionWrapper.appendChild(answer)</span><br><span class=\"line\">    return questionWrapper</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function choiceQuestionCreator (spec) &#123;</span><br><span class=\"line\">  var my = &#123;&#125;</span><br><span class=\"line\">  var that = questionCreator(spec, my)</span><br><span class=\"line\"></span><br><span class=\"line\">  my.renderInput = function () &#123;</span><br><span class=\"line\">    var input = document.createElement(&apos;select&apos;)</span><br><span class=\"line\">    var len = spec.choices.length</span><br><span class=\"line\">    for (var i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">      var option = document.createElement(&apos;option&apos;)</span><br><span class=\"line\">      option.text = spec.choices[i]</span><br><span class=\"line\">      option.value = spec.choices[i]</span><br><span class=\"line\">      input.appendChild(option)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return input</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function inputQuestionCreator (spec) &#123;</span><br><span class=\"line\">  var my = &#123;&#125;</span><br><span class=\"line\">  var that = questionCreator(spec, my)</span><br><span class=\"line\"></span><br><span class=\"line\">  my.renderInput = function () &#123;</span><br><span class=\"line\">    var input = document.createElement(&apos;input&apos;)</span><br><span class=\"line\">    input.type = &apos;text&apos;</span><br><span class=\"line\">    return input</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return that</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var view = &#123;</span><br><span class=\"line\">  render: function (target, questions) &#123;</span><br><span class=\"line\">    for (var i = 0; i &lt; questions.length; i++) &#123;</span><br><span class=\"line\">      target.appendChild(questions[i].render())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var questions = [</span><br><span class=\"line\">  choiceQuestionCreator(&#123;</span><br><span class=\"line\">    label: &apos;Have you used tobacco products within the last 30 days?&apos;,</span><br><span class=\"line\">    choices: [&apos;Yes&apos;, &apos;No&apos;]</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  inputQuestionCreator(&#123;</span><br><span class=\"line\">    label: &apos;What medications are you currently using?&apos;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">var questionRegion = document.getElementById(&apos;questions&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">view.render(questionRegion, questions)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5里氏代换原则\"><a href=\"#2-5里氏代换原则\" class=\"headerlink\" title=\"2.5里氏代换原则\"></a>2.5里氏代换原则</h3><p>任何基类可以出现的地方，子类一定可以出现</p>\n<h3 id=\"2-6依赖倒转原则\"><a href=\"#2-6依赖倒转原则\" class=\"headerlink\" title=\"2.6依赖倒转原则\"></a>2.6依赖倒转原则</h3><p>依赖于抽象而不依赖于具体</p>\n<h3 id=\"2-7合成复用原则\"><a href=\"#2-7合成复用原则\" class=\"headerlink\" title=\"2.7合成复用原则\"></a>2.7合成复用原则</h3><p>尽量组合，而非继承</p>\n<h2 id=\"3-设计模式分类\"><a href=\"#3-设计模式分类\" class=\"headerlink\" title=\"3.设计模式分类\"></a>3.设计模式分类</h2><h3 id=\"3-1创建型模式\"><a href=\"#3-1创建型模式\" class=\"headerlink\" title=\"3.1创建型模式\"></a>3.1创建型模式</h3><p>用于创建对象<br><strong>构造函数模式</strong>：模拟类，用于创建特定类型（类）的对象<br><strong>原型模式</strong>：通过拷贝原型创建新对象，比如js里的prototype<br><strong>单例模式</strong>：在某空间提供唯一的访问点，保证一个类只有一个实例<br><strong>工厂模式</strong>：定义一个用于创建对象的接口，由子类决定实例化哪个类（厂长负责实施子类发出的任务）<br><strong>建造者模式</strong>：使同样的构建过程（eg:回调机制）可以创建不同的表示，而不用关注细节（回调的实现原理）<br><strong>模板方法</strong>：定义操作的算法的骨架（抽象类），而将步骤实现延迟到子类中（子类重写父类方法）</p>\n<h3 id=\"3-2结构型模式\"><a href=\"#3-2结构型模式\" class=\"headerlink\" title=\"3.2结构型模式\"></a>3.2结构型模式</h3><p>组合继承获得新功能<br><strong>组合模式</strong>：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。（eg:Dom都有增删改子节点的通用功能）<br><strong>桥接模式</strong>: 若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系<br><strong>代理模式</strong>：为其他对象提供一种代理以控制对这个对象的访问（eg：大叔代替小明送给女孩儿鲜花）<br><strong>适配器模式</strong>：将一个类（对象）的接口（方法或属性）转化成客户希望的另外一个接口（比如：电脑充电器）<br><strong>外观模式</strong>：为一组接口提供一个高层接口，使得接口更容易使用<br><strong>装饰者模式</strong>：包装同接口的对象，通过重载方法的形式添加新功能（调用原始对象方法并扩展）</p>\n<h3 id=\"3-3行为型模式\"><a href=\"#3-3行为型模式\" class=\"headerlink\" title=\"3.3行为型模式\"></a>3.3行为型模式</h3><p>对象通信<br><strong>中介者模式</strong>：[多对多]比如多架飞机的通讯都是通过中控系统进行<br><strong>观察者模式</strong>：[一对多]发布订阅模式<br><strong>策略模式</strong>：算法的相互替换不会影响到使用算法的客户<br><strong>命令模式</strong>：用于将一个请求方法封装成一个对象（参数不同，命令不同）<br><strong>职责链模式</strong>：使多个对象都有机会处理请求<br><strong>迭代器模式</strong>：为遍历不同的集合结构提供一个统一的接口</p>\n<h2 id=\"4-实例研读\"><a href=\"#4-实例研读\" class=\"headerlink\" title=\"4.实例研读\"></a>4.实例研读</h2><h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>构造函数模式：用于创建特定类型（类）的对象[可接收参数以便第一次创建对象时设置成员值]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注：这里将属性和方法都写在构造函数中，那么每个新的实例都会不同，若需共享，应绑定至prototype</span><br><span class=\"line\">function Animal(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//注意：这里我们使用了Object.prototype.方法名，而不是Object.prototype</span><br><span class=\"line\">//主要是用来避免重写定义原型prototype对象</span><br><span class=\"line\">Animal.prototype.getName= function () &#123;</span><br><span class=\"line\">    return &apos;该动物的名称&apos; + this.name</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var animal = new Animal(&quot;老虎&quot;);</span><br><span class=\"line\">console.log(animal.getName());</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>通过拷贝原型创建新对象[在上面构造函数的基础上利用原型模式实现继承]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Cat()&#123;&#125;</span><br><span class=\"line\">// 拷贝继承</span><br><span class=\"line\">Cat.prototype = Animal.prototype;</span><br><span class=\"line\">// 恢复constructor</span><br><span class=\"line\">Cat.prototype.constructor = Cat;</span><br><span class=\"line\">// 实例化</span><br><span class=\"line\">var cat = new Cat(&quot;花小猫&quot;);</span><br><span class=\"line\">console.log(cat.getName()) // 花小猫</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>单例模式：保证一个类只有一个实例<br>实现的方法是先判断实例是否存在，若存在则直接返回，否则再创建<br>用途：单例作为命名空间提供者，保证在某空间中提供一个唯一的访问点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var SingletonTester = (function () &#123;</span><br><span class=\"line\">    //参数：传递给单例的一个参数集合</span><br><span class=\"line\">    function Singleton(args) &#123;</span><br><span class=\"line\">        //设置args变量为接收的参数或者为空（如果没有提供的话）</span><br><span class=\"line\">        var args = args || &#123;&#125;;</span><br><span class=\"line\">        //设置name参数</span><br><span class=\"line\">        this.name = &apos;SingletonTester&apos;;</span><br><span class=\"line\">        //设置pointX的值</span><br><span class=\"line\">        this.pointX = args.pointX || 6; //从接收的参数里获取，或者设置为默认值</span><br><span class=\"line\">        //设置pointY的值</span><br><span class=\"line\">        this.pointY = args.pointY || 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //实例容器</span><br><span class=\"line\">    var instance;</span><br><span class=\"line\">    var _static = &#123;</span><br><span class=\"line\">        name: &apos;SingletonTester&apos;,</span><br><span class=\"line\">        //获取实例的方法</span><br><span class=\"line\">        //返回Singleton的实例</span><br><span class=\"line\">        getInstance: function (args) &#123;</span><br><span class=\"line\">            if (instance === undefined) &#123;</span><br><span class=\"line\">                instance = new Singleton(args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return _static;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">var singletonTest = SingletonTester.getInstance(&#123; pointX: 5 &#125;);</span><br><span class=\"line\">console.log(singletonTest.pointX); // 输出 5</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式定义了一个用于创建对象的接口(做的是同一类事情)，这个接口由子类决定实例化哪一个类(子类决定具体的不同实现)。<br>该模式使一个类的实例化延迟到了子类。<br>工程模式应该有厂长，负责调度实施任务<br>eg:switch动态匹配就是该模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对象方式</span><br><span class=\"line\">var productManager = &#123;&#125;;</span><br><span class=\"line\">&lt;!-- A类型实现 --&gt;</span><br><span class=\"line\">productManager.createProductA = function () &#123;</span><br><span class=\"line\">    console.log(&apos;ProductA&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- B类型实现 --&gt;</span><br><span class=\"line\">productManager.createProductB = function () &#123;</span><br><span class=\"line\">    console.log(&apos;ProductB&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 厂长负责调度 --&gt;</span><br><span class=\"line\">productManager.factory = function (typeType) &#123;</span><br><span class=\"line\">    return new productManager[typeType];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">productManager.factory(&quot;createProductA&quot;);</span><br><span class=\"line\">// 方法方式的&quot;厂长&quot;调度器</span><br><span class=\"line\">function switchFun(type)&#123;</span><br><span class=\"line\">  switch(type)&#123;</span><br><span class=\"line\">    case &apos;ProductA&apos;:</span><br><span class=\"line\">      console.log(&apos;ProductA&apos;)</span><br><span class=\"line\">      break</span><br><span class=\"line\">    case &apos;ProductB&apos;:</span><br><span class=\"line\">      console.log(&apos;ProductB&apos;)</span><br><span class=\"line\">      break</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      console.log(&apos;nothing&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">switchFun(&quot;ProductA&quot;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>回调是个很好的例子,将不变的构建算法封装起来(eg:getBeerById),变化的回调处理部分分离出去(callback之后的定制化操作),不用关心构建的具体过程和回调的调用地方,<br>而且可以存着多个回调,比如ajax的success,error回调等,只需要使用,而不用关心其相对稳定的建造细节<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 封装相对稳定的建造算法 --&gt;</span><br><span class=\"line\">function getBeerById(id, callback) &#123;</span><br><span class=\"line\">    &lt;!-- 调用者不用关心内部实现细节 --&gt;</span><br><span class=\"line\">    asyncRequest(&apos;GET&apos;, &apos;beer.uri?id=&apos; + id, function (resp) &#123;</span><br><span class=\"line\">        // 不用关心回调执行的地方</span><br><span class=\"line\">        callback(resp.responseText);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var el = document.querySelector(&apos;#test&apos;);</span><br><span class=\"line\">el.addEventListener(&apos;click&apos;, getBeerByIdBridge, false);</span><br><span class=\"line\"></span><br><span class=\"line\">function getBeerByIdBridge(e) &#123;</span><br><span class=\"line\">    &lt;!-- 回调调用 --&gt;</span><br><span class=\"line\">    getBeerById(this.id, function (beer) &#123;</span><br><span class=\"line\">        &lt;!-- 关心的部分 --&gt;</span><br><span class=\"line\">        console.log(&apos;Requested Beer: &apos; + beer);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"模板方法\"><a href=\"#模板方法\" class=\"headerlink\" title=\"模板方法\"></a>模板方法</h3><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类重写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    // 抽象步骤</span><br><span class=\"line\">    var MakeDrink = function() &#123;&#125;</span><br><span class=\"line\">    MakeDrink.prototype.step = function() &#123;</span><br><span class=\"line\">      this.boilWater()</span><br><span class=\"line\">      this.addDrink()</span><br><span class=\"line\">      this.cover()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MakeDrink.prototype.boilWater = function() &#123;</span><br><span class=\"line\">      console.log(&apos;将水烧开!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MakeDrink.prototype.addDrink = function() &#123;</span><br><span class=\"line\">      throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MakeDrink.prototype.cover = function() &#123;</span><br><span class=\"line\">      console.log(&apos;盖上盖子!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 冲咖啡</span><br><span class=\"line\">    var Coffee = function() &#123;</span><br><span class=\"line\">      MakeDrink.apply(this)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Coffee.prototype = new MakeDrink()</span><br><span class=\"line\">    Coffee.prototype.addDrink = function() &#123;</span><br><span class=\"line\">      console.log(&apos;添加咖啡!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //冲茶叶</span><br><span class=\"line\">    var Tea = function() &#123;</span><br><span class=\"line\">      MakeDrink.apply(this)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Tea.prototype = new MakeDrink()</span><br><span class=\"line\">    Tea.prototype.addDrink = function() &#123;</span><br><span class=\"line\">      console.log(&apos;添加茶叶!&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 验证调用</span><br><span class=\"line\">    var coffee1 = new Coffee()</span><br><span class=\"line\">    coffee1.step()</span><br><span class=\"line\">    console.log(&apos;--------分割线----------&apos;)</span><br><span class=\"line\">    var tea1 = new Tea()</span><br><span class=\"line\">    tea1.step()</span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>菜单和菜单项都有类似的公共行为:“整体-部分”的层次结构,用户对单个对象和组合对象的使用具有一致性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 抽象类</span><br><span class=\"line\">  var MenuComponent = function() &#123;&#125;</span><br><span class=\"line\">  MenuComponent.prototype.getName = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MenuComponent.prototype.print = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MenuComponent.prototype.add = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 菜单</span><br><span class=\"line\">  var Menu = function(sName) &#123;</span><br><span class=\"line\">    MenuComponent.apply(this)</span><br><span class=\"line\">    this.aMenuComponents = []</span><br><span class=\"line\">    this.sName = sName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Menu.prototype = new MenuComponent()</span><br><span class=\"line\">  Menu.prototype.getName = function() &#123;</span><br><span class=\"line\">    return this.sName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Menu.prototype.print = function() &#123;</span><br><span class=\"line\">    console.log(&apos;-----菜单名称:&apos; + this.getName())</span><br><span class=\"line\">    this.aMenuComponents.forEach(function(item) &#123;</span><br><span class=\"line\">      item.print()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Menu.prototype.add = function(oMenuComponent) &#123;</span><br><span class=\"line\">    this.aMenuComponents.push(oMenuComponent)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 菜单项</span><br><span class=\"line\">  var MenuItem = function(sName) &#123;</span><br><span class=\"line\">    MenuComponent.apply(this)</span><br><span class=\"line\">    this.sName = sName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MenuItem.prototype = new MenuComponent()</span><br><span class=\"line\">  MenuItem.prototype.getName = function() &#123;</span><br><span class=\"line\">    return this.sName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  MenuItem.prototype.print = function() &#123;</span><br><span class=\"line\">    console.log(&apos;-----菜单项名称:&apos; + this.getName())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 调用测试</span><br><span class=\"line\">  var menu1 = new Menu(&apos;菜单一&apos;)</span><br><span class=\"line\">  menu1.add(new MenuItem(&apos;菜单项一&apos;))</span><br><span class=\"line\">  menu1.add(new MenuItem(&apos;菜单项二&apos;))</span><br><span class=\"line\">  menu1.print()</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><p>若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 事件绑定与处理事件的方法定义</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 抽象代码不可直接运行</span><br><span class=\"line\">  function getBeerById(id, callback) &#123;</span><br><span class=\"line\">    asyncRequest(&apos;GET&apos;, &apos;beer.uri?id=&apos; + id, function(resp) &#123;</span><br><span class=\"line\">      callback(resp.responseText)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // getBeerByIdBridge桥接原理:将addEvent直接调用getBeerById的定义分离</span><br><span class=\"line\">  // addEvent只是调用了一个桥,桥只是&apos;调用了getBeerById&apos;,而getBeerById的定义则被抽离</span><br><span class=\"line\">  // 优点:使得处理事件的方法实现得以分离,则该方法方便被重用,而且getBeerByIdBridge也方便调用其他处理事件的方法</span><br><span class=\"line\">  addEvent(element, &apos;click&apos;, getBeerByIdBridge)</span><br><span class=\"line\">  function getBeerByIdBridge(e) &#123;</span><br><span class=\"line\">    getBeerById(this.id, function(res) &#123;</span><br><span class=\"line\">      console.log(&apos;Requested:&apos; + res)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>大叔代理小明送给美女鲜花<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var Girl = function(name) &#123;</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var Xiaoming = function(girl) &#123;</span><br><span class=\"line\">    this.girl = girl</span><br><span class=\"line\">    this.sendFlower = function(flower) &#123;</span><br><span class=\"line\">      console.log(&apos;Hi &apos; + girl.name + &apos;, xiaoming送你一个礼物：&apos; + flower)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 大叔代理</span><br><span class=\"line\">  var ProxyMan = function(girl) &#123;</span><br><span class=\"line\">    this.girl = girl</span><br><span class=\"line\">    this.sendFlower = function(flower) &#123;</span><br><span class=\"line\">      new Xiaoming(girl).sendFlower(flower) //代替小明送花咯</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 测试</span><br><span class=\"line\">  var proxyMan = new ProxyMan(new Girl(&apos;酸奶小妹&apos;))</span><br><span class=\"line\">  proxyMan.sendFlower(&apos;999朵玫瑰&apos;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>鸭子和狗都有行走(fly,run)和叫声(sound)行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 抽象行为</span><br><span class=\"line\">  var Duck = function() &#123;&#125;</span><br><span class=\"line\">  Duck.prototype.fly = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos;该方法必须被重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var Dog = function() &#123;&#125;</span><br><span class=\"line\">  Dog.prototype.run = function() &#123;</span><br><span class=\"line\">    throw new Error(&apos; 该方法必须被重写!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 定义构造函数</span><br><span class=\"line\">  var DuckObj = function() &#123;</span><br><span class=\"line\">    Duck.apply(this)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DuckObj.prototype = new Duck()</span><br><span class=\"line\">  DuckObj.prototype.fly = function() &#123;</span><br><span class=\"line\">    console.log(&apos;鸭子可以飞起来!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var DogObj = function() &#123;</span><br><span class=\"line\">    Dog.apply(this)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DogObj.prototype = new Dog()</span><br><span class=\"line\">  DogObj.prototype.run = function() &#123;</span><br><span class=\"line\">    console.log(&apos;狗可以跑的很快!&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 鸭子适配器:使得鸭子可以支持狗的run方法,同时使其自身飞的快5倍</span><br><span class=\"line\">  var DuckAdapter = function(oDuck) &#123;</span><br><span class=\"line\">    Duck.apply(this)</span><br><span class=\"line\">    this.oDuck = oDuck</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DuckAdapter.prototype = new Duck()</span><br><span class=\"line\">  DuckAdapter.prototype.run = function() &#123;</span><br><span class=\"line\">    // 虽然方法名字是dog的run,但是内部实现可以任意,只是为了适配</span><br><span class=\"line\">    this.oDuck.fly()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 重新定义fly实现,相当于对fly进行了重写</span><br><span class=\"line\">  DuckAdapter.prototype.fly = function() &#123;</span><br><span class=\"line\">    var nFly = 0</span><br><span class=\"line\">    var nLenFly = 3</span><br><span class=\"line\">    for (; nFly &lt; nLenFly; ) &#123;</span><br><span class=\"line\">      this.oDuck.fly()</span><br><span class=\"line\">      nFly = nFly + 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 测试</span><br><span class=\"line\">  var oDuck = new DuckObj()</span><br><span class=\"line\">  var oDug = new DogObj()</span><br><span class=\"line\">  var oDuckAdapter = new DuckAdapter(oDuck)</span><br><span class=\"line\"></span><br><span class=\"line\">  console.log(&apos;---------原有的鸭子行为-------&apos;)</span><br><span class=\"line\">  oDuck.fly()</span><br><span class=\"line\">  console.log(&apos;---------原有的狗行为-------&apos;)</span><br><span class=\"line\">  oDug.run()</span><br><span class=\"line\">  console.log(&apos;---------适配器鸭子的行为（鸭子调用狗的方法名称）-------&apos;)</span><br><span class=\"line\">  oDuckAdapter.run()</span><br><span class=\"line\">  console.log(&apos;---------适配器鸭子的行为（鸭子原有fly行为被重写,调用了3遍）-------&apos;)</span><br><span class=\"line\">  oDuckAdapter.fly()</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h3><p>如果需要调用一组接口实现一个更大的功能,那么就把这些方法放在一起组成一个新的方法,从而简化调用<br>eg:阻止事件默认行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function handleClick(e) &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    e.stopPropagation();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式\"></a>装饰者模式</h3><p>比继承更有弹性的替代方案,通过重载方法的形式扩展功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 实例1:重写原方法 --&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  function Macbook() &#123;</span><br><span class=\"line\">    this.cost = function() &#123;</span><br><span class=\"line\">      return 1000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function Memory(macbook) &#123;</span><br><span class=\"line\">    this.cost = function() &#123;</span><br><span class=\"line\">      return macbook.cost() + 75</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // </span><br><span class=\"line\">  var myMacbook = new Memory(new Macbook())</span><br><span class=\"line\">  console.log(myMacbook.cost())</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 实例二:重写原方法的一部分(有调用点的方法调用) --&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 被装饰者</span><br><span class=\"line\">  function ConcreteClass() &#123;</span><br><span class=\"line\">    this.performTask = function() &#123;</span><br><span class=\"line\">      this.preTask()</span><br><span class=\"line\">      console.log(&apos;doing something&apos;)</span><br><span class=\"line\">      this.postTask()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.preTask = function() &#123;</span><br><span class=\"line\">      console.log(&apos;原有执行之前...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.postTask = function() &#123;</span><br><span class=\"line\">      console.log(&apos;原有执行之后...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 抽象装饰</span><br><span class=\"line\">  function AbstractDecorator(decorated) &#123;</span><br><span class=\"line\">    this.performTask = function() &#123;</span><br><span class=\"line\">      decorated.performTask()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 定义具体装饰:重写preTask和postTask</span><br><span class=\"line\">  function ConcreteDecoratorClass(decorated) &#123;</span><br><span class=\"line\">    this.base = AbstractDecorator</span><br><span class=\"line\">    this.base(decorated)</span><br><span class=\"line\">    decorated.preTask = function() &#123;</span><br><span class=\"line\">      console.log(&apos;装饰执行之前...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    decorated.postTask = function() &#123;</span><br><span class=\"line\">      console.log(&apos;装饰执行之后...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 测试</span><br><span class=\"line\">  var decorator1 = new ConcreteDecoratorClass(new ConcreteClass())</span><br><span class=\"line\">  decorator1.performTask()</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;!-- 实例三:重写原方法的一部分(无调用点) --&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var tree = &#123;&#125;</span><br><span class=\"line\">  tree.decorate = function() &#123;</span><br><span class=\"line\">    console.log(&apos;树木初始化...&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 添加装饰器定义</span><br><span class=\"line\">  tree.addDecorator = function(deco) &#123;</span><br><span class=\"line\">    tree[deco].prototype = this</span><br><span class=\"line\">    return new tree[deco]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tree.Leaves = function() &#123;</span><br><span class=\"line\">    this.decorate = function() &#123;</span><br><span class=\"line\">      this.Leaves.prototype.decorate()</span><br><span class=\"line\">      console.log(&apos;添加一些树叶...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tree.Flower = function() &#123;</span><br><span class=\"line\">    this.decorate = function() &#123;</span><br><span class=\"line\">      this.Flower.prototype.decorate()</span><br><span class=\"line\">      console.log(&apos;添加一些花朵...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 测试</span><br><span class=\"line\">  tree = tree.addDecorator(&apos;Leaves&apos;)</span><br><span class=\"line\">  tree = tree.addDecorator(&apos;Flower&apos;)</span><br><span class=\"line\">  tree.decorate() //执行Flower的decorate方法,并依次向上递归调用</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><p>中介者模式处理多对多场景.eg:MVC模型中,控制层便是位于表现层与模型层之间的中介者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function View() &#123;</span><br><span class=\"line\">      this.el = document.createElement(&apos;div&apos;)</span><br><span class=\"line\">      this.getEl = function() &#123;</span><br><span class=\"line\">        return this.el</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    function Model(data) &#123;</span><br><span class=\"line\">      this.save = function() &#123;</span><br><span class=\"line\">        console.log(&apos;保存数据:&apos; + data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 定义控制器,中介者</span><br><span class=\"line\">    function Ctrl(view, model) &#123;</span><br><span class=\"line\">      this.view = view</span><br><span class=\"line\">      this.model = model</span><br><span class=\"line\">      this.relative = function() &#123;</span><br><span class=\"line\">        this.view.getEl().onclick = function() &#123;</span><br><span class=\"line\">          this.model.save()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 测试</span><br><span class=\"line\">    let view1 = new View()</span><br><span class=\"line\">    let model1 = new Model(&apos;test_data1&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    let view2 = new View()</span><br><span class=\"line\">    let model2 = new Model(&apos;test_data2&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 中介调度,可以有多组不同view和model,相互交叉关联</span><br><span class=\"line\">    let ctrl1 = new Ctrl(view1, model1)</span><br><span class=\"line\">    let ctrl2 = new Ctrl(view2, model2)</span><br><span class=\"line\">    let ctrl3 = new Ctrl(view1, model2)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义观察者</span><br><span class=\"line\">    function Observer() &#123;</span><br><span class=\"line\">      // 所有已订阅的方法集合</span><br><span class=\"line\">      this.fns = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Observer.prototype = &#123;</span><br><span class=\"line\">      subscribe: function(fn) &#123;</span><br><span class=\"line\">        this.fns.push(fn)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      unsubscribe: function(fn) &#123;</span><br><span class=\"line\">        this.fns = this.fns.filter(function(el) &#123;</span><br><span class=\"line\">          if (el !== fn) &#123;</span><br><span class=\"line\">            return el</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      // 定义触发方法:(主题对象)状态发生变化时,触发update</span><br><span class=\"line\">      update: function(data, thisObj) &#123;</span><br><span class=\"line\">        var scope = thisObj || window</span><br><span class=\"line\">        // 将已经订阅的方法都遍历执行一遍</span><br><span class=\"line\">        this.fns.forEach(function(el) &#123;</span><br><span class=\"line\">          el.call(scope, data)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //测试</span><br><span class=\"line\">    let observer = new Observer()</span><br><span class=\"line\"></span><br><span class=\"line\">    // 声明</span><br><span class=\"line\">    const fun1 = function(data) &#123;</span><br><span class=\"line\">      console.log(&apos;观察者fun1得到的主题对象参数是: &apos; + data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const fun2 = function(data) &#123;</span><br><span class=\"line\">      console.log(&apos;观察者fun2得到的主题对象参数是: &apos; + data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 订阅</span><br><span class=\"line\">    observer.subscribe(fun1)</span><br><span class=\"line\">    observer.subscribe(fun2)</span><br><span class=\"line\">    // 触发</span><br><span class=\"line\">    observer.update(&apos;主题对象参数A&apos;)</span><br><span class=\"line\">    console.log(&apos;--------------------华丽的分割线--------------------&apos;)</span><br><span class=\"line\">    //退订f1</span><br><span class=\"line\">    observer.unsubscribe(fun1)</span><br><span class=\"line\">    //再次触发,验证退订</span><br><span class=\"line\">    observer.update(&apos;主题对象参数B&apos;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>校验表单<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  // 策略处理类</span><br><span class=\"line\">  let validator = &#123;</span><br><span class=\"line\">    types: &#123;&#125;, // 验证规则处理类,后面会扩展各种规则的定义</span><br><span class=\"line\">    config: &#123;&#125;, // 定义需要使用的验证类型</span><br><span class=\"line\">    messages: [], // 验证所对应的错误消息集合</span><br><span class=\"line\">    validate: function(data) &#123;</span><br><span class=\"line\">      // 暴露的公开验证方法,参数类型为obj,data是原始数据</span><br><span class=\"line\">      let msg, type, validateTypeFun, result_ok</span><br><span class=\"line\">      this.messages = [] // 清空所有的错误信息</span><br><span class=\"line\">      for (let key in data) &#123;</span><br><span class=\"line\">        if (data.hasOwnProperty(key)) &#123; //原始数据中是否包含可枚举的字段key</span><br><span class=\"line\">          type = this.config[key] // 用户为字段key配置的验证规则是什么?比如isNonEmpty</span><br><span class=\"line\">          validateTypeFun = this.types[type] // 获取验证规则对应的验证方法是否已定义</span><br><span class=\"line\">          if (!type) &#123;</span><br><span class=\"line\">            continue // 如果针对key的验证规则未配置，则不处理</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (!validateTypeFun) &#123; // 如果验证方法为定义，抛出异常</span><br><span class=\"line\">            throw &#123;</span><br><span class=\"line\">              name: &apos;ValidationError&apos;,</span><br><span class=\"line\">              message: &apos;该类型无对应处理方法:&apos; + type</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          result_ok = validateTypeFun.validate(data[key]) //正常验证</span><br><span class=\"line\">          if (!result_ok) &#123;</span><br><span class=\"line\">            msg = &apos;非法值&apos; + key + &apos;, &apos; + validateTypeFun.instructions</span><br><span class=\"line\">            this.messages.push(msg)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return this.hasErrors()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // helper</span><br><span class=\"line\">    hasErrors: function() &#123;</span><br><span class=\"line\">      return this.messages.length !== 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 验证给定的值是否不为空</span><br><span class=\"line\">  validator.types.isNotEmpty = &#123;</span><br><span class=\"line\">    validate: function(value) &#123;</span><br><span class=\"line\">      return value !== &apos;&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    instructions: &apos;传入的值不能为空&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 验证给定的值是否是数字</span><br><span class=\"line\">  validator.types.isNumber = &#123;</span><br><span class=\"line\">    validate: function(value) &#123;</span><br><span class=\"line\">      return !isNaN(value)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    instructions: &apos;传入的值只能是合法的数字，例如：1, 3.14 or 2010&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 定义需要验证的数据集合和需要验证的规则类型</span><br><span class=\"line\">  var data = &#123;</span><br><span class=\"line\">    first_name: &apos;&apos;,</span><br><span class=\"line\">    age: &apos;unknown&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  validator.config = &#123;</span><br><span class=\"line\">    first_name: &apos;isNotEmpty&apos;,</span><br><span class=\"line\">    age: &apos;isNumber&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 测试获取验证结果</span><br><span class=\"line\">  validator.validate(data)</span><br><span class=\"line\">  if (validator.hasErrors()) &#123;</span><br><span class=\"line\">    console.log(validator.messages.join(&apos;\\n&apos;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><p>将请求封装成一个对象，可用不同的请求参数满足客户的需求(将一系列任务封装成一个对象,由参数决定具体执行哪个任务命令)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NumMng = &#123;</span><br><span class=\"line\">   // 请求数字</span><br><span class=\"line\">   requestNum: function(num) &#123;</span><br><span class=\"line\">     console.log(&apos;我请求的数字是:&apos; + num)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">   // 得到数字</span><br><span class=\"line\">   readNum: function(num) &#123;</span><br><span class=\"line\">     console.log(&apos;我操作的数字是:&apos; + num)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">   // 删除数字</span><br><span class=\"line\">   delNum: function(num) &#123;</span><br><span class=\"line\">     console.log(&apos;我要删除的数字是:&apos; + num)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> /**</span><br><span class=\"line\">  * @function  命令执行器</span><br><span class=\"line\">  * @param  command &#123;obj&#125;</span><br><span class=\"line\">  **/</span><br><span class=\"line\"> NumMng.execute = function(command) &#123;</span><br><span class=\"line\">   return NumMng[command.commandType](command.operand)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> // execute执行,operand操作数</span><br><span class=\"line\"> NumMng.execute(&#123; commandType: &apos;requestNum&apos;, operand: &apos;2&apos; &#125;)</span><br><span class=\"line\"> NumMng.execute(&#123; commandType: &apos;readNum&apos;, operand: &apos;2&apos; &#125;)</span><br><span class=\"line\"> NumMng.execute(&#123; commandType: &apos;delNum&apos;, operand: &apos;2&apos; &#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h3><p>多个对象都有机会处理请求,这些对象连成一条链，请求沿着这条链传递，链中收到请求的对象要么亲自处理它，要么转发给链中的下一个候选者,直到有一个对象处理他为止<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 定义职责链</span><br><span class=\"line\">    function Handler(s) &#123;</span><br><span class=\"line\">      this.successor = s || null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Handler.prototype = &#123;</span><br><span class=\"line\">      run: function() &#123;</span><br><span class=\"line\">        if (this.successor) &#123;</span><br><span class=\"line\">          this.successor.run()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 最外层</span><br><span class=\"line\">    let app = new Handler(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        run: function() &#123;</span><br><span class=\"line\">          console.log(&apos;最外层...&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      3</span><br><span class=\"line\">    )</span><br><span class=\"line\">    // 中间层</span><br><span class=\"line\">    let dialog = new Handler(app, 1)</span><br><span class=\"line\">    dialog.run = function() &#123;</span><br><span class=\"line\">      console.log(&apos;中间层执行前...&apos;)</span><br><span class=\"line\">      // 这里做具体的处理操作</span><br><span class=\"line\">      Handler.prototype.run.call(this) //继续往上走,调用app的handle方法</span><br><span class=\"line\">      console.log(&apos;中间层执行后...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 最内层</span><br><span class=\"line\">    let button = new Handler(dialog, 2)</span><br><span class=\"line\">    button.run = function() &#123;</span><br><span class=\"line\">      console.log(&apos;最内层执行前...&apos;)</span><br><span class=\"line\">      // 这里做具体的处理操作</span><br><span class=\"line\">      Handler.prototype.run.call(this) // 继续往上走,调用dialog的handle方法</span><br><span class=\"line\">      console.log(&apos;最内层执行后...&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 调用</span><br><span class=\"line\">    button.run()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>提供一种方法顺序访问一个聚合对象中的各个节点,一般迭代至少有hasNext()和next()两个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 封装迭代引擎</span><br><span class=\"line\">function IteratorEngine(arr) &#123;</span><br><span class=\"line\">  this.arr = arr</span><br><span class=\"line\">  this.index = 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">IteratorEngine.prototype.hasNext = function() &#123;</span><br><span class=\"line\">  return this.index &lt; this.arr.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">IteratorEngine.prototype.next = function() &#123;</span><br><span class=\"line\">  let _ele = null</span><br><span class=\"line\">  if (!this.hasNext()) &#123;</span><br><span class=\"line\">    return null</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _ele = this.arr[this.index]</span><br><span class=\"line\">  this.index += 1</span><br><span class=\"line\">  return &apos;迭代节点:&apos; + _ele</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 聚合对象</span><br><span class=\"line\">let arrList = [1, 2, 3, 4, 5]</span><br><span class=\"line\">let iteratorEngine = new IteratorEngine(arrList)</span><br><span class=\"line\"></span><br><span class=\"line\">while (iteratorEngine.hasNext()) &#123;</span><br><span class=\"line\">  console.log(iteratorEngine.next())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-备注\"><a href=\"#5-备注\" class=\"headerlink\" title=\"5.备注\"></a>5.备注</h2><p><strong>适配</strong>器则意味着改变一个<strong>已有对象</strong>的接口。<br><strong>代理</strong>模式在不改变原有接口的条件下，用另一个对象定义了一个代理<br>装饰者模式<strong>增强</strong>了其它对象的功能而同时又不改变它的接口<br>桥接的目的是将接口部分和实现部分分离，从而对他们可以更为容易也相对独立的加以改变。<br>工厂模式：switch逻辑外部定义一个统一的接口，通过参数决定具体执行路线，比如Redux中action的调用<br>观察者模式:比如点击事件就是一种最常见的发布订阅模式addEventListener，再比如vue中的data和rn中的state,对其改变时，依赖它的对象都将得到通知和更新<br>策略模式：比如表单校验中针对不同的表单类型进行不同的校验实现</p>\n"}],"PostAsset":[{"_id":"source/_posts/2019-03-26-theme/image001.png","slug":"image001.png","post":"ck1r8ezwe0014xijktql0srr5","modified":0,"renderable":0},{"_id":"source/_posts/2019-06-15-prototype/image001.jpg","slug":"image001.jpg","post":"ck1r8ezww001zxijkx3iv6pt9","modified":0,"renderable":0},{"_id":"source/_posts/2019-03-19-android-apk/image001.png","slug":"image001.png","post":"ck1r8ezwf0016xijkonmwyqa2","modified":0,"renderable":0},{"_id":"source/_posts/2019-03-19-android-apk/image002.png","slug":"image002.png","post":"ck1r8ezwf0016xijkonmwyqa2","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git3/image001.png","slug":"image001.png","post":"ck1r8ezvl0004xijkxozuxbrm","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git3/image002.png","slug":"image002.png","post":"ck1r8ezvl0004xijkxozuxbrm","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git3/image003.png","slug":"image003.png","post":"ck1r8ezvl0004xijkxozuxbrm","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git4/image001.png","slug":"image001.png","post":"ck1r8ezvn0005xijkuzx5ry9s","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git4/image002.png","slug":"image002.png","post":"ck1r8ezvn0005xijkuzx5ry9s","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git4/image003.png","slug":"image003.png","post":"ck1r8ezvn0005xijkuzx5ry9s","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image001.png","slug":"image001.png","post":"ck1r8ezvg0002xijktfg1jpz9","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image002.png","slug":"image002.png","post":"ck1r8ezvg0002xijktfg1jpz9","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image003.png","slug":"image003.png","post":"ck1r8ezvg0002xijktfg1jpz9","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git2/image004.png","slug":"image004.png","post":"ck1r8ezvg0002xijktfg1jpz9","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image001.png","slug":"image001.png","post":"ck1r8ezvq0006xijko1vcpo4d","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image002.png","slug":"image002.png","post":"ck1r8ezvq0006xijko1vcpo4d","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image003.png","slug":"image003.png","post":"ck1r8ezvq0006xijko1vcpo4d","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image004.png","slug":"image004.png","post":"ck1r8ezvq0006xijko1vcpo4d","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image005.png","slug":"image005.png","post":"ck1r8ezvq0006xijko1vcpo4d","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-14-git5/image006.png","slug":"image006.png","post":"ck1r8ezvq0006xijko1vcpo4d","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image001.png","slug":"image001.png","post":"ck1r8ezv80000xijkdbtehwie","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image002.png","slug":"image002.png","post":"ck1r8ezv80000xijkdbtehwie","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image003.png","slug":"image003.png","post":"ck1r8ezv80000xijkdbtehwie","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image004.png","slug":"image004.png","post":"ck1r8ezv80000xijkdbtehwie","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image005.png","slug":"image005.png","post":"ck1r8ezv80000xijkdbtehwie","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image006.png","slug":"image006.png","post":"ck1r8ezv80000xijkdbtehwie","modified":0,"renderable":0},{"_id":"source/_posts/2018-06-13-git1/image007.png","slug":"image007.png","post":"ck1r8ezv80000xijkdbtehwie","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck1r8ezvn0005xijkuzx5ry9s","tag_id":"ck1r8ezvj0003xijkl6h9o5bh","_id":"ck1r8ezvt0008xijkfipd5gal"},{"post_id":"ck1r8ezv80000xijkdbtehwie","tag_id":"ck1r8ezvj0003xijkl6h9o5bh","_id":"ck1r8ezvw000axijkb4h7cg52"},{"post_id":"ck1r8ezvq0006xijko1vcpo4d","tag_id":"ck1r8ezvj0003xijkl6h9o5bh","_id":"ck1r8ezvy000dxijkq8yu9paw"},{"post_id":"ck1r8ezvt0009xijkpwpqoafw","tag_id":"ck1r8ezvj0003xijkl6h9o5bh","_id":"ck1r8ezw0000fxijkcev56k69"},{"post_id":"ck1r8ezvg0002xijktfg1jpz9","tag_id":"ck1r8ezvj0003xijkl6h9o5bh","_id":"ck1r8ezw1000ixijkhlrtrj6m"},{"post_id":"ck1r8ezvl0004xijkxozuxbrm","tag_id":"ck1r8ezvj0003xijkl6h9o5bh","_id":"ck1r8ezw2000kxijktwrv9mb2"},{"post_id":"ck1r8ezw1000jxijk3pwifqj2","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezw4000nxijkw07xrge1"},{"post_id":"ck1r8ezvw000bxijkpgv9y7do","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezw5000pxijkodcmd55i"},{"post_id":"ck1r8ezw2000lxijk2emxbxt5","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezw6000sxijkrrkuxw7v"},{"post_id":"ck1r8ezw4000oxijkqaslcxu3","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezw7000uxijky162gx6u"},{"post_id":"ck1r8ezvy000exijk751ltf2d","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezw9000wxijknv7swjbk"},{"post_id":"ck1r8ezw5000qxijkq435pqkw","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezwb000yxijkhnq5n8wk"},{"post_id":"ck1r8ezw6000txijk9yrlt2mm","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezwc0011xijk8hq7m1y1"},{"post_id":"ck1r8ezw0000gxijk3t61yk0a","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezwe0013xijk7wyhjikp"},{"post_id":"ck1r8ezw8000vxijkb2a10fyx","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezwf0015xijkmm29nglr"},{"post_id":"ck1r8ezw9000xxijkgvzei3ie","tag_id":"ck1r8ezwc0010xijkwkq10xfu","_id":"ck1r8ezwh0018xijkj8lcnnfu"},{"post_id":"ck1r8ezwh0019xijkwnclldix","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezwk001cxijkcqm1uv7i"},{"post_id":"ck1r8ezwb000zxijk12u0dz4b","tag_id":"ck1r8ezwg0017xijk5i4doec3","_id":"ck1r8ezwl001exijk0izpkuk8"},{"post_id":"ck1r8ezwi001axijk1miuz2m3","tag_id":"ck1r8ezwg0017xijk5i4doec3","_id":"ck1r8ezwn001hxijk5lcni04b"},{"post_id":"ck1r8ezwk001dxijk0ge3i5wk","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezwo001jxijkahwceehv"},{"post_id":"ck1r8ezwd0012xijktf5yt8qn","tag_id":"ck1r8ezwg0017xijk5i4doec3","_id":"ck1r8ezwp001mxijkilajlo0n"},{"post_id":"ck1r8ezwl001fxijkd8st90um","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezwq001oxijk0xd7pdwi"},{"post_id":"ck1r8ezwn001ixijkiighq8x0","tag_id":"ck1r8ezwg0017xijk5i4doec3","_id":"ck1r8ezwr001qxijkv01u9fj6"},{"post_id":"ck1r8ezwe0014xijktql0srr5","tag_id":"ck1r8ezwm001gxijknexc4syh","_id":"ck1r8ezws001sxijka4gtqpwe"},{"post_id":"ck1r8ezwo001kxijke9bto0zw","tag_id":"ck1r8ezwm001gxijknexc4syh","_id":"ck1r8ezwt001uxijkyeikorlj"},{"post_id":"ck1r8ezwp001nxijka7devi79","tag_id":"ck1r8ezwm001gxijknexc4syh","_id":"ck1r8ezwu001wxijkjlog1hnn"},{"post_id":"ck1r8ezwf0016xijkonmwyqa2","tag_id":"ck1r8ezwg0017xijk5i4doec3","_id":"ck1r8ezwv001yxijkelokfsh1"},{"post_id":"ck1r8ezwq001pxijkph78i7iw","tag_id":"ck1r8ezwm001gxijknexc4syh","_id":"ck1r8ezww0020xijk4xjbuioo"},{"post_id":"ck1r8ezwr001rxijkivz3athd","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezwx0022xijk0xe6gm1h"},{"post_id":"ck1r8ezws001txijk3i5zvbi1","tag_id":"ck1r8ezwm001gxijknexc4syh","_id":"ck1r8ezwy0024xijkx33up5ui"},{"post_id":"ck1r8ezwt001vxijk9qw8euqt","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezx00026xijkwngmpvtx"},{"post_id":"ck1r8ezwu001xxijkxtrzf53i","tag_id":"ck1r8ezwg0017xijk5i4doec3","_id":"ck1r8ezx10028xijkj22m8988"},{"post_id":"ck1r8ezww001zxijkx3iv6pt9","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezx2002axijkzl83mq7j"},{"post_id":"ck1r8ezwx0021xijk6r6mi2wy","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezx3002dxijkz4eoqwbr"},{"post_id":"ck1r8ezwy0023xijk8j6mdc76","tag_id":"ck1r8ezwg0017xijk5i4doec3","_id":"ck1r8ezx4002fxijkr4vfjjhy"},{"post_id":"ck1r8ezwz0025xijkmvxj03c8","tag_id":"ck1r8ezwg0017xijk5i4doec3","_id":"ck1r8ezx5002hxijkfncf4sk3"},{"post_id":"ck1r8ezx00027xijkf9sxl1v6","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezx7002kxijkczyttz59"},{"post_id":"ck1r8ezx2002bxijkfpflue0x","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezx7002lxijkg5jmvksj"},{"post_id":"ck1r8ezx4002gxijke7ld06jp","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8ezx7002mxijkn5w7zi8h"},{"post_id":"ck1r8ezx10029xijkg9w7jhjb","tag_id":"ck1r8ezx3002cxijkjprfp566","_id":"ck1r8ezx7002nxijkz9pklc99"},{"post_id":"ck1r8ezx5002ixijkrn5ygawd","tag_id":"ck1r8ezx3002cxijkjprfp566","_id":"ck1r8ezx8002oxijk361h38hs"},{"post_id":"ck1r8ezx3002exijk605tblod","tag_id":"ck1r8ezx3002cxijkjprfp566","_id":"ck1r8ezx8002pxijkoeazzk58"},{"post_id":"ck1r8f01x002qxijk72p1dtt8","tag_id":"ck1r8ezw1000hxijkp1gc1jou","_id":"ck1r8f023002rxijkkbggle1e"}],"Tag":[{"name":"Git","_id":"ck1r8ezvj0003xijkl6h9o5bh"},{"name":"JS","_id":"ck1r8ezw1000hxijkp1gc1jou"},{"name":"life","_id":"ck1r8ezwc0010xijkwkq10xfu"},{"name":"React","_id":"ck1r8ezwg0017xijk5i4doec3"},{"name":"css","_id":"ck1r8ezwm001gxijknexc4syh"},{"name":"Vue","_id":"ck1r8ezx3002cxijkjprfp566"}]}}