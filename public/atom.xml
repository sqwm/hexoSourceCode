<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LepinHeiker</title>
  
  <subtitle>吾生也有涯，而知也无涯！以有涯随无涯，殆已；已而为知者，殆而已矣。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-27T05:34:47.519Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xiaobo Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>像素级还原设计稿</title>
    <link href="http://yoursite.com/2019/05/27/px/"/>
    <id>http://yoursite.com/2019/05/27/px/</id>
    <published>2019-05-27T05:24:47.000Z</published>
    <updated>2019-05-27T05:34:47.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>精准清晰的理论基础有助于培养技术自信。<br>参考网址:<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">rem</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>H5适配手机主要有两个维度：<br>（1）适配不同像素密度(1像素对应多少物理像素,比如3倍屏@3x, 即1px对应9个物理像素[3x3])<br>（2）适配不同大小屏幕<br>问题一：图片如何在3倍屏和2倍屏上显示不失真？<br>答：1个图片像素对应1个物理像素，图片就不会失真[精准匹配需要借助媒体查询等手段]，简单粗暴的适配方案，就是针对所有屏幕，都只提供最高清图片。<br>问题二：如何适配不同大小屏幕？<br>答：原则是确保页面布局的度量与屏幕大小保持一定比例。例如通常设计稿是750像素，我们需要按比例还原（x / 750，eg: 75 / 750 = 10% ）。<br>实践中不能直接用百分比，因为它总是需要一个参照量，而且边框不支持百分比等问题。<br>rem:等于根元素font-size属性的计算值<br>vw/vh: 1vw= 1%屏幕宽度 完美方案。<br>问题三：如何方便将px转换为vw?<br>答：<a href="https://www.npmjs.com/package/postcss-px-to-viewport" target="_blank" rel="noopener">postcss-px-to-viewport插件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;精准清晰的理论基础有助于培养技术自信。&lt;br&gt;参考网址:&lt;a href=&quot;https://github.co
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>layout</title>
    <link href="http://yoursite.com/2019/05/04/layout/"/>
    <id>http://yoursite.com/2019/05/04/layout/</id>
    <published>2019-05-04T08:46:46.000Z</published>
    <updated>2019-05-06T03:49:03.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>总结css布局规则,首先强调一点是布局由“定位”和“盒模型”两部分组成，这是两个不同的概念。<br>本文首先阐述“定位”与“盒模型”两者之间的关系，然后分别梳理弹性盒子flex，网格布局grid,文档流和定位方式，浮动，盒子模型，媒体查询等主要技能点，不断总结，熟能生巧。<br>参考网址:<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">弹性盒子Flex</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout" target="_blank" rel="noopener">网格布局Grid</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D" target="_blank" rel="noopener">文档流和定位方式</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noopener">盒子模型</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><h3 id="2-1“定位”与“盒模型”"><a href="#2-1“定位”与“盒模型”" class="headerlink" title="2.1“定位”与“盒模型”"></a>2.1“定位”与“盒模型”</h3><p>“定位”和“盒模型”是两个完全不同的概念，但是两者共同作用决定了元素的最终布局。</p><h3 id="2-2关于“定位”的相关问题"><a href="#2-2关于“定位”的相关问题" class="headerlink" title="2.2关于“定位”的相关问题"></a>2.2关于“定位”的相关问题</h3><h4 id="2-2-1Flex布局"><a href="#2-2-1Flex布局" class="headerlink" title="2.2.1Flex布局"></a>2.2.1Flex布局</h4><p>阮一峰老师对<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">弹性盒子flex布局</a>的讲解很清楚，也很详细，这里不再赘述。下面仅列出通用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- flex布局 --&gt;</span><br><span class="line">.flex-box &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">    flex-wrap: nowrap;</span><br><span class="line">    justify-content: flex-start;</span><br><span class="line">    /*  副轴对齐方式  */</span><br><span class="line">    align-items: center;</span><br><span class="line">    /*  多行对齐方式  */</span><br><span class="line">    align-content: flex-start;</span><br><span class="line">&#125;</span><br><span class="line">.flex-item &#123;</span><br><span class="line">    /*  排序  */</span><br><span class="line">    order: 0;</span><br><span class="line">    /*   放大比例   */</span><br><span class="line">    flex-grow: 0;</span><br><span class="line">    /*   缩小比例   */</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    /*  项目占据主轴空间 auto    */</span><br><span class="line">    flex-basis： 350px;</span><br><span class="line">    /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */</span><br><span class="line">    align-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-2Grid布局"><a href="#2-2-2Grid布局" class="headerlink" title="2.2.2Grid布局"></a>2.2.2Grid布局</h4><p>网格布局Grid也是非常常用的布局之一，这里主要强调它与弹性盒模型Flex布局的区别：<br><strong>区别一</strong>：弹性盒模型主要用于一维布局（按行或按列），网格布局更适用于二维布局（同时考虑行和列）<br><strong>区别二</strong>：弹性盒模型主要从内容出发（内容多少影响布局），网格布局从布局入手（一旦定义，布局确定）<br>下面列出一个常见的基本用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;One&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;Two&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;Three&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;Four&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;Five&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.wrapper &#123; </span><br><span class="line">    display: grid; </span><br><span class="line">    grid-template-columns: repeat(3, 1fr); </span><br><span class="line">    grid-auto-rows: 100px; </span><br><span class="line">&#125; </span><br><span class="line">.box1 &#123; </span><br><span class="line">    grid-column-start: 1; </span><br><span class="line">    grid-column-end: 4; </span><br><span class="line">    grid-row-start: 1; </span><br><span class="line">    grid-row-end: 3; </span><br><span class="line">&#125; </span><br><span class="line">.box2 &#123; </span><br><span class="line">    grid-column-start: 1; </span><br><span class="line">    grid-row-start: 3; </span><br><span class="line">    grid-row-end: 5; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-3文档流和定位方式"><a href="#2-2-3文档流和定位方式" class="headerlink" title="2.2.3文档流和定位方式"></a>2.2.3文档流和定位方式</h4><p>该内容是定位的基础，之所以放在第三个讨论的位置，是因为我觉得这个没有什么可讨论的，必须严格掌握。<br>如果非要说点什么的话，那就是下面几种定位方式有着循序渐进的关系,z-index扩展到了三维空间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.positioned &#123;</span><br><span class="line">    position: static;</span><br><span class="line">    position: absolute;</span><br><span class="line">    position: fixed;</span><br><span class="line">    z-index: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3关于“盒模型”的相关问题"><a href="#2-3关于“盒模型”的相关问题" class="headerlink" title="2.3关于“盒模型”的相关问题"></a>2.3关于“盒模型”的相关问题</h3><p>盒子模型除了最基本的属性外，需要强调的是box-sizing对width的影响。当需要明确width便于计算时，建议设置box-sizing为border-box<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    margin: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;总结css布局规则,首先强调一点是布局由“定位”和“盒模型”两部分组成，这是两个不同的概念。&lt;br&gt;本文首先
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>icon</title>
    <link href="http://yoursite.com/2019/04/21/icon/"/>
    <id>http://yoursite.com/2019/04/21/icon/</id>
    <published>2019-04-21T09:10:14.000Z</published>
    <updated>2019-05-17T09:09:17.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。<br>参考网址:<br><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里图标库iconfont</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;http://at.alicdn.com/t/font_803606_60a86mpe3nt.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>在项目中使用图标如下（可通过css改变图标大小和颜色）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;iconfont icon-jiazheng&quot; style=&quot;color:red;font-size: 55px;&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。&lt;br&gt;参考网址
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>style</title>
    <link href="http://yoursite.com/2019/04/21/style/"/>
    <id>http://yoursite.com/2019/04/21/style/</id>
    <published>2019-04-21T08:08:26.000Z</published>
    <updated>2019-05-23T01:55:55.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。<br>官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等<br>参考网址:<br><a href="https://v3.bootcss.com/css/" target="_blank" rel="noopener">BootStrap全局css样式</a>，<a href="https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw" target="_blank" rel="noopener">bootstrap.min.css 提取码：he9a</a>，<a href="https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew" target="_blank" rel="noopener">bootstrap.css 提取码：khav</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>提取通用样式类如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 容器 --&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">    min-width: 992px !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- flex布局 --&gt;</span><br><span class="line">.flex-box &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">    flex-wrap: nowrap;</span><br><span class="line">    justify-content: flex-start;</span><br><span class="line">    /*  副轴对齐方式  */</span><br><span class="line">    align-items: center;</span><br><span class="line">    /*  多行对齐方式  */</span><br><span class="line">    align-content: flex-start;</span><br><span class="line">&#125;</span><br><span class="line">.flex-item &#123;</span><br><span class="line">    /*  排序  */</span><br><span class="line">    order: 0;</span><br><span class="line">    /*   放大比例   */</span><br><span class="line">    flex-grow: 0;</span><br><span class="line">    /*   缩小比例   */</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    /*  项目占据主轴空间 auto    */</span><br><span class="line">    flex-basis： 350px;</span><br><span class="line">    /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */</span><br><span class="line">    align-self: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 按钮 --&gt;</span><br><span class="line">.btn &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    text-align: center;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    border: 1px solid transparent;</span><br><span class="line">    padding: 0.375rem 0.75rem;</span><br><span class="line">    font-size: 1rem;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">    border-radius: 0.25rem;</span><br><span class="line">    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line">.btn.focus .btn:focus, &#123;</span><br><span class="line">    outline: 0;</span><br><span class="line">    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);</span><br><span class="line">&#125;</span><br><span class="line">.btn.disabled, .btn:disabled &#123;</span><br><span class="line">    opacity: 0.65;</span><br><span class="line">&#125;</span><br><span class="line">.btn:not(:disabled):not(.disabled) &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.btn:hover, .btn:focus &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">.btn-default &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">.btn-primary &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #337ab7;</span><br><span class="line">    border-color: #2e6da4;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 文本 --&gt;</span><br><span class="line"> .text-primary &#123;</span><br><span class="line">    color: #007bff !important;</span><br><span class="line">&#125;</span><br><span class="line">.text-light &#123;</span><br><span class="line">    color: #f8f9fa !important;</span><br><span class="line">&#125;</span><br><span class="line">.text-dark &#123;</span><br><span class="line">    color: #343a40 !important;</span><br><span class="line">&#125;</span><br><span class="line">.font-weight-light &#123;</span><br><span class="line">    font-weight: 300 !important;</span><br><span class="line">&#125;</span><br><span class="line">.font-weight-normal &#123;</span><br><span class="line">    font-weight: 400 !important;</span><br><span class="line">&#125;</span><br><span class="line">.font-weight-bold &#123;</span><br><span class="line">    font-weight: 700 !important;</span><br><span class="line">&#125;</span><br><span class="line">.font-h1 &#123;</span><br><span class="line">  font-size: 22px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h2 &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h3 &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h4 &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h5 &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h6 &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 超链接 --&gt;</span><br><span class="line">&lt;!-- link 未被访问</span><br><span class="line">visited 已被访问</span><br><span class="line">hover  鼠标指针移动到链接上</span><br><span class="line">active 正在被点击的链接</span><br><span class="line">focus 元素获取焦点 --&gt;</span><br><span class="line">a.text-primary:link,</span><br><span class="line">a.text-primary:visited,</span><br><span class="line">a.text-primary:hover,</span><br><span class="line">a.text-primary:active,</span><br><span class="line">a.text-primary:focus &#123;</span><br><span class="line">    color: #007bff !important;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>json</title>
    <link href="http://yoursite.com/2019/04/11/json-server/"/>
    <id>http://yoursite.com/2019/04/11/json-server/</id>
    <published>2019-04-11T04:14:03.000Z</published>
    <updated>2019-04-12T01:44:18.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>汇总前端JSON数据模拟技术,本文介绍三种技术:<strong>json server, Easy mock, github api v3</strong>.<br>json server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求<br>Easy Mock: 在线json模拟数据生成管理平台<br>github api v3:获取并操作github账号下个人相关信息的接口服务<br>实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.<br>参考网址: <a href="https://blog.csdn.net/weixin_40817115/article/details/81237128" target="_blank" rel="noopener">json-server的使用</a>,<a href="http://easymock.xys12345.cn/login" target="_blank" rel="noopener">Easy Mock官网</a>,<a href="https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0" target="_blank" rel="noopener">github api讲解</a>,<a href="https://developer.github.com/" target="_blank" rel="noopener">github api官方文档</a></p><h2 id="2-实践过程"><a href="#2-实践过程" class="headerlink" title="2.实践过程"></a>2.实践过程</h2><h3 id="2-1-json-server"><a href="#2-1-json-server" class="headerlink" title="2.1 json server"></a>2.1 json server</h3><p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure></p><p>查看版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server -v</span><br></pre></td></tr></table></figure></p><p>创建db.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;posts&quot;: [</span><br><span class="line">    &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;comments&quot;: [</span><br><span class="line">    &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server db.json</span><br></pre></td></tr></table></figure></p><p>在postman或浏览器中访问接口,比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000</span><br></pre></td></tr></table></figure></p><h3 id="2-2-East-Mock"><a href="#2-2-East-Mock" class="headerlink" title="2.2 East Mock"></a>2.2 East Mock</h3><p>只需要打开<a href="http://easymock.xys12345.cn/login" target="_blank" rel="noopener">East Mock官网</a>,登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可</p><h3 id="2-3-github-api"><a href="#2-3-github-api" class="headerlink" title="2.3 github api"></a>2.3 github api</h3><p>该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用<br><strong>用户信息[详情信息]</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/users/ruanyf</span><br></pre></td></tr></table></figure></p><p><strong>列表信息[分页/不分页]</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/users/ruanyf/followers?page=1&amp;per_page=10</span><br></pre></td></tr></table></figure></p><p><strong>占位图</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://temp.im/288x288</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;汇总前端JSON数据模拟技术,本文介绍三种技术:&lt;strong&gt;json server, Easy mock
      
    
    </summary>
    
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>基于React Native在应用中查看PDF文档</title>
    <link href="http://yoursite.com/2019/04/04/pdf-view/"/>
    <id>http://yoursite.com/2019/04/04/pdf-view/</id>
    <published>2019-04-04T04:30:06.000Z</published>
    <updated>2019-04-04T04:43:38.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.<br>[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]<br>参考网址: <a href="https://www.jianshu.com/p/acf5a502f999" target="_blank" rel="noopener">react-native-fs文件下载</a>,<a href="https://www.npmjs.com/package/react-native-pdf" target="_blank" rel="noopener">react-native-pdf PDF查看</a></p><h2 id="2-实践过程"><a href="#2-实践过程" class="headerlink" title="2.实践过程"></a>2.实践过程</h2><p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-native-fs</span><br></pre></td></tr></table></figure></p><p>挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native link react-native-fs</span><br></pre></td></tr></table></figure></p><p>然后即可在项目中引入使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import RNFS from &apos;react-native-fs&apos;;</span><br></pre></td></tr></table></figure></p><p>下载文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">/*下载文件*/</span><br><span class="line">    downloadFile() &#123;</span><br><span class="line">        // On Android, use &quot;RNFS.DocumentDirectoryPath&quot; (MainBundlePath is not defined)</span><br><span class="line"></span><br><span class="line">        // 图片</span><br><span class="line">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.jpg`;</span><br><span class="line">        // const formUrl = &apos;http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg&apos;;</span><br><span class="line"></span><br><span class="line">        // 文件</span><br><span class="line">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.zip`;</span><br><span class="line">        // const formUrl = &apos;http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip&apos;;</span><br><span class="line"></span><br><span class="line">        // 视频</span><br><span class="line">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp4`;</span><br><span class="line">        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&amp;</span><br><span class="line">        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&amp;</span><br><span class="line">        // const formUrl = &apos;https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&amp;&apos;;</span><br><span class="line"></span><br><span class="line">        // 音频</span><br><span class="line">        const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp3`;</span><br><span class="line">        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3</span><br><span class="line">        const formUrl = &apos;http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3&apos;;</span><br><span class="line"></span><br><span class="line">        const options = &#123;</span><br><span class="line">            fromUrl: formUrl,</span><br><span class="line">            toFile: downloadDest,</span><br><span class="line">            background: true,</span><br><span class="line">            begin: (res) =&gt; &#123;</span><br><span class="line">                console.log(&apos;begin&apos;, res);</span><br><span class="line">                console.log(&apos;contentLength:&apos;, res.contentLength / 1024 / 1024, &apos;M&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">            progress: (res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">                let pro = res.bytesWritten / res.contentLength;</span><br><span class="line"></span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    progressNum: pro,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        try &#123;</span><br><span class="line">            const ret = RNFS.downloadFile(options);</span><br><span class="line">            ret.promise.then(res =&gt; &#123;</span><br><span class="line">                console.log(&apos;success&apos;, res);</span><br><span class="line"></span><br><span class="line">                console.log(&apos;file://&apos; + downloadDest)</span><br><span class="line"></span><br><span class="line">                // 例如保存图片</span><br><span class="line">                CameraRoll.saveToCameraRoll(downloadDest)</span><br><span class="line">                    .then(()=&gt;&#123;</span><br><span class="line">                        Toast.showShortCenter(&apos;图片已保存到相册&apos;)</span><br><span class="line">                    &#125;).catch(()=&gt;&#123;</span><br><span class="line">                        Toast.showShortCenter(&apos;图片保存失败&apos;)</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;).catch(err =&gt; &#123;</span><br><span class="line">                console.log(&apos;err&apos;, err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (e) &#123;</span><br><span class="line">            console.log(error);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>PDF文档的查看,首先也要安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn add rn-fetch-blob</span><br><span class="line">yarn add react-native-pdf</span><br><span class="line"></span><br><span class="line">react-native link rn-fetch-blob</span><br><span class="line">react-native link react-native-pdf</span><br></pre></td></tr></table></figure></p><p>然后就可以尝试显示PDF资源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; StyleSheet, Dimensions, View &#125; from &apos;react-native&apos;;</span><br><span class="line"> </span><br><span class="line">import Pdf from &apos;react-native-pdf&apos;;</span><br><span class="line"> </span><br><span class="line">export default class PDFExample extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const source = &#123;uri:&apos;http://samples.leanpub.com/thereactnativebook-sample.pdf&apos;,cache:true&#125;;</span><br><span class="line">        //const source = require(&apos;./test.pdf&apos;);  // ios only</span><br><span class="line">        //const source = &#123;uri:&apos;bundle-assets://test.pdf&apos;&#125;;</span><br><span class="line"> </span><br><span class="line">        //const source = &#123;uri:&apos;file:///sdcard/test.pdf&apos;&#125;;</span><br><span class="line">        //const source = &#123;uri:&quot;data:application/pdf;base64,...&quot;&#125;;</span><br><span class="line"> </span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &lt;Pdf</span><br><span class="line">                    source=&#123;source&#125;</span><br><span class="line">                    onLoadComplete=&#123;(numberOfPages,filePath)=&gt;&#123;</span><br><span class="line">                        console.log(`number of pages: $&#123;numberOfPages&#125;`);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    onPageChanged=&#123;(page,numberOfPages)=&gt;&#123;</span><br><span class="line">                        console.log(`current page: $&#123;page&#125;`);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    onError=&#123;(error)=&gt;&#123;</span><br><span class="line">                        console.log(error);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    style=&#123;styles.pdf&#125;/&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">    container: &#123;</span><br><span class="line">        flex: 1,</span><br><span class="line">        justifyContent: &apos;flex-start&apos;,</span><br><span class="line">        alignItems: &apos;center&apos;,</span><br><span class="line">        marginTop: 25,</span><br><span class="line">    &#125;,</span><br><span class="line">    pdf: &#123;</span><br><span class="line">        flex:1,</span><br><span class="line">        width:Dimensions.get(&apos;window&apos;).width,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.&lt;b
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>echarts</title>
    <link href="http://yoursite.com/2019/03/27/echarts/"/>
    <id>http://yoursite.com/2019/03/27/echarts/</id>
    <published>2019-03-27T04:23:39.000Z</published>
    <updated>2019-03-27T09:41:28.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>维护一个简单的图表模板,积累常用参数,便于快速配置图表<br>参考网址:<a href="https://echarts.baidu.com/" target="_blank" rel="noopener">echarts门户网站</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>图表基础模板(基于vue):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;chart demo&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/mint-ui.css&quot; /&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/global.css&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;chart&quot; class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- chart1 条形图 --&gt;</span><br><span class="line">      &lt;div ref=&quot;chart1&quot; style=&quot;width: 100%;height:300px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;!-- chart2 饼状图 --&gt;</span><br><span class="line">      &lt;div ref=&quot;chart2&quot; style=&quot;width: 100%; height: 270px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=&quot;../../script/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../../script/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../../script/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../../script/httpRequest.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../../script/constants.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      window.onload = () =&gt; &#123;</span><br><span class="line">        document.addEventListener(&apos;message&apos;, (&#123; data &#125;) =&gt; &#123;</span><br><span class="line">          const &#123; token, areaId &#125; = JSON.parse(data)</span><br><span class="line">          if (window.postMessage) &#123;</span><br><span class="line">            let message = &#123; loadFinish: true &#125;</span><br><span class="line">            window.postMessage(JSON.stringify(message))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      let indexVue = new Vue(&#123;</span><br><span class="line">        el: &apos;#chart&apos;,</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          initChart() &#123;</span><br><span class="line">            // 条形图</span><br><span class="line">            let chart1 = echarts.init(this.$refs[&apos;chart1&apos;])</span><br><span class="line">            let chartOptions1 = &#123;</span><br><span class="line">              title: &#123;</span><br><span class="line">                text: &apos;大国人口&apos;,</span><br><span class="line">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              color: [</span><br><span class="line">                &apos;#7199D6&apos;,</span><br><span class="line">                &apos;#DB7D36&apos;,</span><br><span class="line">                &apos;#82AB4E&apos;,</span><br><span class="line">                &apos;#9CABE1&apos;,</span><br><span class="line">                &apos;#F0B885&apos;,</span><br><span class="line">                &apos;#739BD6&apos;,</span><br><span class="line">                &apos;#72C4CC&apos;,</span><br><span class="line">                &apos;#B1A3DE&apos;,</span><br><span class="line">                &apos;#78B0ED&apos;,</span><br><span class="line">                &apos;#E0A1B6&apos;,</span><br><span class="line">                &apos;#F1C026&apos;</span><br><span class="line">              ],</span><br><span class="line">               // 对点击时显示的tip就行配置</span><br><span class="line">               tooltip: &#123;</span><br><span class="line">                trigger: &apos;item&apos;,</span><br><span class="line">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125;&apos;</span><br><span class="line">              &#125;,</span><br><span class="line">              // 配置图例边距留白距离,是否包含坐标轴刻度</span><br><span class="line">              grid: &#123; left: &apos;3%&apos;, right: &apos;4%&apos;, bottom: &apos;3%&apos;, containLabel: true &#125;,</span><br><span class="line">              xAxis: &#123;</span><br><span class="line">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              yAxis: &#123;</span><br><span class="line">                data: [&apos;巴西&apos;, &apos;印尼&apos;, &apos;美国&apos;, &apos;印度&apos;, &apos;中国&apos;],</span><br><span class="line">                // 对y坐标轴显示的刻度进行配置</span><br><span class="line">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              series: [</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;人数&apos;,</span><br><span class="line">                  type: &apos;bar&apos;,</span><br><span class="line">                  data: [18203, 23489, 29034, 104970, 131744]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">            chart1.setOption(chartOptions1)</span><br><span class="line"></span><br><span class="line">            // 饼状图</span><br><span class="line">            let chart2 = echarts.init(this.$refs[&apos;chart2&apos;])</span><br><span class="line">            let chartOptions2 = &#123;</span><br><span class="line">              title: &#123;</span><br><span class="line">                text: &apos;社会资源分布&apos;,</span><br><span class="line">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              color: [</span><br><span class="line">                &apos;#7199D6&apos;,</span><br><span class="line">                &apos;#DB7D36&apos;,</span><br><span class="line">                &apos;#82AB4E&apos;,</span><br><span class="line">                &apos;#9CABE1&apos;,</span><br><span class="line">                &apos;#F0B885&apos;,</span><br><span class="line">                &apos;#739BD6&apos;,</span><br><span class="line">                &apos;#72C4CC&apos;,</span><br><span class="line">                &apos;#B1A3DE&apos;,</span><br><span class="line">                &apos;#78B0ED&apos;,</span><br><span class="line">                &apos;#E0A1B6&apos;,</span><br><span class="line">                &apos;#F1C026&apos;</span><br><span class="line">              ],</span><br><span class="line">              // 对点击时显示的tip就行配置</span><br><span class="line">              tooltip: &#123;</span><br><span class="line">                trigger: &apos;item&apos;,</span><br><span class="line">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&apos;</span><br><span class="line">              &#125;,</span><br><span class="line">              // 对图例的显示位置等内容进行配置</span><br><span class="line">              legend: &#123;</span><br><span class="line">                // horizontal, vertical</span><br><span class="line">                orient: &apos;horizontal&apos;,</span><br><span class="line">                bottom: &apos;5%&apos;</span><br><span class="line">              &#125;,</span><br><span class="line">              series: [</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;占比&apos;,</span><br><span class="line">                  type: &apos;pie&apos;,</span><br><span class="line">                  radius: &apos;50%&apos;,</span><br><span class="line">                  center: [&apos;50%&apos;, &apos;40%&apos;],</span><br><span class="line">                  data: [</span><br><span class="line">                    &#123; value: 335, name: &apos;直接访问&apos; &#125;,</span><br><span class="line">                    &#123; value: 310, name: &apos;邮件营销&apos; &#125;,</span><br><span class="line">                    &#123; value: 234, name: &apos;联盟广告&apos; &#125;,</span><br><span class="line">                    &#123; value: 135, name: &apos;视频广告&apos; &#125;,</span><br><span class="line">                    &#123; value: 1548, name: &apos;搜索引擎&apos; &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  label: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                      // 是否显示每个扇形指示</span><br><span class="line">                      show: false,</span><br><span class="line">                      // 若显示,则对过长内容格式化处理</span><br><span class="line">                      formatter(v) &#123;</span><br><span class="line">                        let text = v.name</span><br><span class="line">                        return text.length &lt; 4 ? text : `$&#123;text.slice(0, 4)&#125;\n$&#123;text.slice(4)&#125;`</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">            chart2.setOption(chartOptions2)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">          this.initChart()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;维护一个简单的图表模板,积累常用参数,便于快速配置图表&lt;br&gt;参考网址:&lt;a href=&quot;https://e
      
    
    </summary>
    
    
      <category term="echarts" scheme="http://yoursite.com/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>color</title>
    <link href="http://yoursite.com/2019/03/26/theme/"/>
    <id>http://yoursite.com/2019/03/26/theme/</id>
    <published>2019-03-26T04:32:40.000Z</published>
    <updated>2019-05-06T03:49:03.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>收集整理常用样式,便于通用配置出简约大气的页面，下面仅选取Flat UI库作为代表性的颜色值，举一反三，当前项目使用了什么UI库，那么自己也应该抽取该库中Colors文件中的颜色值，作为项目的全局颜色值，这样有利于保持项目色调的统一（例如BootStrap主题色）。<br>参考网址:<br><a href="https://flatuicolors.com/palette/defo" target="_blank" rel="noopener">Flat UI 色表</a>,<a href="https://metrocolor.live/index.html" target="_blank" rel="noopener">香港地铁色</a>,<a href="https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers" target="_blank" rel="noopener">经验配色法则</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>经验配色法效果图及其颜色值如下：<br><img src="/2019/03/26/theme/image001.png" title="this is first image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;图层灰:背景, 列表项&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #aaaaaa&quot;&gt;aaaaaa&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #bbbbbb&quot;&gt;bbbbbb&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #cccccc&quot;&gt;cccccc&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #dddddd&quot;&gt;dddddd&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #eeeeee&quot;&gt;eeeeee&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;文字黑: 分级标题&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #1a2a3a&quot;&gt;1a2a3a&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #2a3a4a&quot;&gt;2a3a4a&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #333333&quot;&gt;333333&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #3a4a5a&quot;&gt;3a4a5a&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #4a5a6a&quot;&gt;4a5a6a&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;主题深:cf69&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #9966ff&quot;&gt;9966ff&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #6666ff&quot;&gt;6666ff&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #66ff99&quot;&gt;66ff99&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #6699ff&quot;&gt;6699ff&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;主题浅:cf69&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #ffff66&quot;&gt;ffff66&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #ffcc66&quot;&gt;ffcc66&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #ff9966&quot;&gt;ff9966&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #ff6666&quot;&gt;ff6666&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;主题灰:abcdef&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #abcdef&quot;&gt;abcdef&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #bedcaf&quot;&gt;bedcaf&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #cafedb&quot;&gt;cafedb&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #decafb&quot;&gt;decafb&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.flex-box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.flex-box span&#123;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;收集整理常用样式,便于通用配置出简约大气的页面，下面仅选取Flat UI库作为代表性的颜色值，举一反三，当前
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>基于RN的安卓权限配置</title>
    <link href="http://yoursite.com/2019/03/25/android-manifest/"/>
    <id>http://yoursite.com/2019/03/25/android-manifest/</id>
    <published>2019-03-25T04:26:09.000Z</published>
    <updated>2019-03-27T09:40:58.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑</p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_getCurrentLocation = async () =&gt; &#123;</span><br><span class="line">   navigator.geolocation.getCurrentPosition(location =&gt; &#123;</span><br><span class="line">     console.log(location)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>基于React Native的android打包</title>
    <link href="http://yoursite.com/2019/03/19/android-apk/"/>
    <id>http://yoursite.com/2019/03/19/android-apk/</id>
    <published>2019-03-19T04:39:12.000Z</published>
    <updated>2019-03-27T09:40:49.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.<br>打包IOS，需要有打包证书支持,这里先不做探究.<br>打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。</p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>步骤一:配置android/app/build.gradle文件,如图一所示<br><img src="/2019/03/19/android-apk/image001.png" title="this is first image"></p><p><center><strong>图（1）</strong></center><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class="line">            storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class="line">            keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class="line">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">signingConfig signingConfigs.release</span><br></pre></td></tr></table></figure></p><p>步骤二:配置android/gradle.properties文件,如图二所示<br><img src="/2019/03/19/android-apk/image002.png" title="this is first image"></p><p><center><strong>图（2）</strong></center><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class="line"></span><br><span class="line">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class="line"></span><br><span class="line">MYAPP_RELEASE_STORE_PASSWORD=123456789</span><br><span class="line"></span><br><span class="line">MYAPP_RELEASE_KEY_PASSWORD=123456789</span><br></pre></td></tr></table></figure></p><p>步骤三:在android/app/文件夹下添加key文件<br><a href="https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA" target="_blank" rel="noopener">my-release-key.keystore 提取码: ncpe</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.&lt;br&gt;打包IOS，需要有打包证书支持
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>基于React Native的热更新</title>
    <link href="http://yoursite.com/2019/03/15/code-push/"/>
    <id>http://yoursite.com/2019/03/15/code-push/</id>
    <published>2019-03-15T04:56:32.000Z</published>
    <updated>2019-04-04T04:26:37.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法<br>参考网址: <a href="https://www.jianshu.com/p/8f7ae770a5ac" target="_blank" rel="noopener">react-native-code-push常用命令</a></p><h2 id="2-发布热更新等常用命令"><a href="#2-发布热更新等常用命令" class="headerlink" title="2.发布热更新等常用命令"></a>2.发布热更新等常用命令</h2><p>查看服务器app部署情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app list</span><br></pre></td></tr></table></figure></p><p>查看发布信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment ls Rasog-android -k</span><br></pre></td></tr></table></figure></p><p>发布命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push release-react Rasog-android android --t 1.0.0 --d Staging --des &quot;1.调整新增整治清单字段\n2.调整编辑整治清单时照片可删除&quot; --m true</span><br></pre></td></tr></table></figure></p><p>其他常用命令</p><ul><li><code>code-push app add</code> 在账号里面添加一个新的app</li><li><code>code-push app remove</code> 或者 rm 在账号里移除一个app</li><li><code>code-push app rename</code> 重命名一个存在app</li><li><code>code-push app list</code> 或则 ls 列出账号下面的所有app</li><li><code>code-push app transfer</code> 把app的所有权转移到另外一个账号</li><li>code-push app ls 查看已注册的应用</li><li>code-push deployment ls appName -k  查看应用key</li><li>code-push login 登陆 </li><li>code-push loout 注销</li><li>code-push access-key ls 列出登陆的token</li><li>code-push access-key rm <accesskye> 删除某个 access-key</accesskye></li><li>code-push app add <appname> <platform> react-native  在账号里面添加一个新的app</platform></appname></li><li>code-push app remove 或者 rm 在账号里移除一个 app</li><li>code-push app rename 重命名一个存在 app</li><li>code-push app list 或则 ls 列出账号下面的所有 app</li><li>code-push app transfer 把app的所有权转移到另外一个账号</li><li>code-push deployment add <appname> 部署</appname></li><li>code-push deployment rm <appname> 删除部署</appname></li><li>code-push deployment rename <appname> 重命名</appname></li><li>code-push deployment ls <appname> 列出应用的部署情况</appname></li><li>code-push deployment ls <appname> -k 查看部署的key</appname></li><li>code-push deployment history <appname> <deploymentname> 查看历史版本<h2 id="3-配置本地部署"><a href="#3-配置本地部署" class="headerlink" title="3.配置本地部署"></a>3.配置本地部署</h2></deploymentname></appname></li></ul><ol><li><p>登录本地服务</p><blockquote><p><code>code-push login http://61.185.20.20:2312/</code> （公网地址）、</p><p>会自动打开浏览器  登录后 点击获取token，</p><p>在 <code>Enter your token from the browser:</code> 输入 获取的token</p><p><code>Successfully logged-in. Your session file was written to /Users/xxxx/.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session.</code></p></blockquote></li><li><p>本地私有化部署方案参考：<code>https://www.cnblogs.com/shuoer/p/9581886.html</code></p></li><li><p>在<code>CodePush</code>服务器注册app，为了让CodePush服务器知道你的app，我们需要向它注册app：</p><p>在终端输入<code>code-push app add &lt;appName&gt;</code>即可完成注册；私有化服务器要求的参数更多<code>code-push app add &lt;appName&gt; &lt;os&gt; &lt;platform&gt;</code>，并且<code>appName</code>要加<code>-android</code>或者<code>-ios</code>结尾，然后是平台，最后加上是<code>react-native</code>或者<code>Cordova</code>，因为<code>code-push</code>支持这两种应用,例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app add Rasog-android android react-native</span><br></pre></td></tr></table></figure><p>成功后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Successfully added the <span class="string">"Rasog-android"</span> app, along with the following default deployments:</span><br><span class="line">┌────────────┬───────────────────────────────────────┐</span><br><span class="line">│ Name       │ Deployment Key                        │</span><br><span class="line">├────────────┼───────────────────────────────────────┤</span><br><span class="line">│ Production │ 4ZfN5udhhOftT2ND95gHZr98nmyA4ksvOXqog │</span><br><span class="line">├────────────┼───────────────────────────────────────┤</span><br><span class="line">│ Staging    │ ZymGYYCM6PMwHlwDWef9zCXu8LbC4ksvOXqog │</span><br><span class="line">└────────────┴───────────────────────────────────────┘</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>注册完成之后会返回一套<code>deployment key</code>，分为生成环境<code>Production</code>和<code>Staging</code>，该<code>key</code>在后面客户端集成sdk中会用到。</li></ol><h3 id="集成CodePush-SDK-for-Android"><a href="#集成CodePush-SDK-for-Android" class="headerlink" title="集成CodePush SDK (for Android)"></a>集成CodePush SDK (for Android)</h3><ol><li><p>在项目中安装<code>react-native-code-push</code>插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-native-code-push</span><br><span class="line">react-native link react-native-code-push</span><br></pre></td></tr></table></figure><blockquote><p>在终端运行此命令之后，终端会提示让你输入<code>deployment key</code>，这是你只需将你的<code>deployment Staging key</code>输入进去即可</p></blockquote></li><li><p>Link 完成后会自动添加一些代码。因为服务是私有部署，需要修改 更新地址。修改<code>android/app/src/main/java/MainApplication.java</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected List&lt;ReactPackage&gt; <span class="function"><span class="title">getPackages</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">          new MainReactPackage(),</span><br><span class="line">            new CodePush(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey), getApplicationContext(), BuildConfig.DEBUG,<span class="string">"http://61.185.20.20:2312"</span>),</span><br><span class="line">            .....</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在<code>new CodePush()</code>最后添加一个参数就是本地服务的地址。</p></li><li><p>修改rn工程的 入口文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入code-push</span></span><br><span class="line"><span class="keyword">import</span> CodePush <span class="keyword">from</span> <span class="string">'react-native-code-push'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> codePushOptions = &#123; <span class="attr">checkFrequency</span>: CodePush.CheckFrequency.ON_APP_RESUME &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CodePush 是一个高阶组件  还包含一些方法。</span></span><br><span class="line"><span class="comment">// sync</span></span><br><span class="line">componentDidMount () &#123;</span><br><span class="line">    <span class="keyword">this</span>._updateApp()</span><br><span class="line">    AppState.addEventListener(<span class="string">'change'</span>, newState =&gt; &#123;</span><br><span class="line">      newState === <span class="string">'active'</span> &amp;&amp; <span class="keyword">this</span>._updateApp()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// code-push 热更新</span></span><br><span class="line">  _updateApp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    CodePush.sync(&#123;</span><br><span class="line">      installMode: CodePush.InstallMode.IMMEDIATE, <span class="comment">// 启动模式三种：ON_NEXT_RESUME、ON_NEXT_RESTART、IMMEDIATE</span></span><br><span class="line">      updateDialog: &#123;</span><br><span class="line">        appendReleaseDescription: <span class="literal">true</span>, <span class="comment">// 是否显示更新description，默认为false</span></span><br><span class="line">        descriptionPrefix: <span class="string">'更新内容：\n'</span>, <span class="comment">// 更新说明的前缀。 默认是” Description:</span></span><br><span class="line">        mandatoryContinueButtonLabel: <span class="string">'立即更新'</span>, <span class="comment">// 强制更新的按钮文字，默认为continue</span></span><br><span class="line">        mandatoryUpdateMessage: <span class="string">''</span>, <span class="comment">// - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.</span></span><br><span class="line">        optionalIgnoreButtonLabel: <span class="string">'稍后'</span>, <span class="comment">// 非强制更新时，取消按钮文字,默认是ignore</span></span><br><span class="line">        optionalInstallButtonLabel: <span class="string">'更新'</span>, <span class="comment">// 非强制更新时，确认文字. Defaults to “Install”</span></span><br><span class="line">        optionalUpdateMessage: <span class="string">'有新版本了，是否更新？\n'</span>, <span class="comment">// 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.</span></span><br><span class="line">        title: <span class="string">'更新提示'</span> <span class="comment">// 要显示的更新通知的标题. Defaults to “Update available”.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后导出组件时，需要被CodePush包裹</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CodePush(codePushOptions)(App)</span><br></pre></td></tr></table></figure></li></ol><p>至此就完成了 code-push for android 的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push release-react MyAppAndroid android --t 1.0.0 --dev <span class="literal">false</span> --d Production --des <span class="string">"更新测试"</span> --m <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>serve静态资源服务器</title>
    <link href="http://yoursite.com/2019/03/14/serve/"/>
    <id>http://yoursite.com/2019/03/14/serve/</id>
    <published>2019-03-14T04:36:57.000Z</published>
    <updated>2019-03-27T09:40:21.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用</p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>全局安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add serve</span><br></pre></td></tr></table></figure></p><p>查看版本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serve --version</span><br></pre></td></tr></table></figure></p><p>进入需要开启服务的文件夹,启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serve .</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能
      
    
    </summary>
    
    
      <category term="Serve" scheme="http://yoursite.com/tags/Serve/"/>
    
  </entry>
  
  <entry>
    <title>React+Redux模式</title>
    <link href="http://yoursite.com/2018/12/26/react1/"/>
    <id>http://yoursite.com/2018/12/26/react1/</id>
    <published>2018-12-25T22:15:26.000Z</published>
    <updated>2019-03-14T04:52:58.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>学习并理解React+Redux模式<br>参考网址：<a href="https://www.imooc.com/learn/744" target="_blank" rel="noopener">慕课网:在React中使用Redux数据流</a></p><h2 id="2-概念笔记"><a href="#2-概念笔记" class="headerlink" title="2.概念笔记"></a>2.概念笔记</h2><p>1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），<br>需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）<br>2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，<br>实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;学习并理解React+Redux模式&lt;br&gt;参考网址：&lt;a href=&quot;https://www.imooc.
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="http://yoursite.com/2018/12/21/axios/"/>
    <id>http://yoursite.com/2018/12/21/axios/</id>
    <published>2018-12-20T23:11:54.000Z</published>
    <updated>2019-03-27T09:40:01.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作<br>参考网址：<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">axios</a></p><h2 id="2-实践要点分析"><a href="#2-实践要点分析" class="headerlink" title="2.实践要点分析"></a>2.实践要点分析</h2><p>1.get请求直接拼接动态数据<br>get请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）<br>例如在Swagger UI上看到的形式为：<br><strong>【GET】   /resourceApply/get/{id}</strong><br><strong>(Parameters)  id[required]  string</strong><br>那么前端的请求方法声明就应该如下（即：将参数直接拼接）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDepartById = id =&gt; this.get(`/resourceApply/get/$&#123;id&#125;`)</span><br></pre></td></tr></table></figure></p><p>对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DepartApi.getDepartById(rowId)</span><br></pre></td></tr></table></figure></p><p>2.get等请求params参数形式<br>params参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中<br>例如在Swagger UI上看到的get请求形式为：<br><strong>【GET】   /role/findPermsByRoleId</strong><br><strong>(Parameters)  roleId[required]  string</strong><br>那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">findPermsByRoleId = (params) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, params)</span><br><span class="line">DepartApi.findPermsByRoleId(&#123;roleId: this.$route.param.id&#125;)</span><br></pre></td></tr></table></figure></p><p>或如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId &#125;)</span><br><span class="line">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p><p>或如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId: roleId &#125;)</span><br><span class="line">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p><p>post请求也是可以有params参数的(data可以默认为{}，来占位)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subAudit = (data, params) =&gt; this.post(&apos;/dce-res/resourceDB/subAudit&apos;, data, params)</span><br><span class="line">DbRegisterApi.subAudit(&#123;&#125;, &#123; resourceDBId: params.row.id &#125;)</span><br></pre></td></tr></table></figure></p><p>3.post等请求data参数形式<br><code>data</code> 是作为请求主体被发送的数据，只适用于这些请求方法 ‘PUT’, ‘POST’, 和 ‘PATCH’<br>必须是以下类型之一：</p><ul><li>string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</li><li>浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]</li><li>Node 专属： Stream<br>例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：<br><strong>【POST】   /dce-admin/depart</strong><br><strong>(Parameters)  depart[required]  body</strong><br>那么前端的请求方法声明和调用方法就应该如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addDepart = data =&gt; this.post(&apos;/dce-admin/depart&apos;, data)</span><br><span class="line">DepartApi.addDepart(this.formValidate)</span><br></pre></td></tr></table></figure></li></ul><p>当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变<br>4.跨域等问题的处理<br>跨域原因：<br>浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据<br>解决方案（在axios请求配置中加入如下配置）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// &apos;proxy&apos; 定义代理服务器的主机名称和端口</span><br><span class="line">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class="line">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: &apos;127.0.0.1&apos;,</span><br><span class="line">    port: 9000,</span><br><span class="line">    auth: : &#123;</span><br><span class="line">      username: &apos;mikeymike&apos;,</span><br><span class="line">      password: &apos;rapunz3l&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作&lt;br&gt;参考网址：&lt;a href
      
    
    </summary>
    
    
      <category term="Axios" scheme="http://yoursite.com/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>coding-quality</title>
    <link href="http://yoursite.com/2018/12/19/coding-quality/"/>
    <id>http://yoursite.com/2018/12/19/coding-quality/</id>
    <published>2018-12-18T22:43:00.000Z</published>
    <updated>2019-03-27T09:39:41.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助<br>参考网址：<br><a href="https://www.jianshu.com/p/4cbcd202a591" target="_blank" rel="noopener">雅虎军规35条</a>、<br><a href="https://github.com/yuche/javascript" target="_blank" rel="noopener">JavaScript 编码规范</a>、<br><a href="http://eslint.cn/docs/rules/" target="_blank" rel="noopener">eslint规则</a>、<br><a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html" target="_blank" rel="noopener">js编码风格（阮一峰）</a><br><a href="http://es6.ruanyifeng.com/#docs/style" target="_blank" rel="noopener">ES6编程风格</a></p><h2 id="2-心得"><a href="#2-心得" class="headerlink" title="2.心得"></a>2.心得</h2><p>编程讲究章法，要心中有想法，才能动手编码，正所谓”三思而后行”，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5<br>基于node开发环境转换：<a href="https://www.jianshu.com/p/647950617a6d" target="_blank" rel="noopener">Babel</a><br>在线转换：<a href="https://babeljs.io/repl" target="_blank" rel="noopener">Babel</a>、<a href="https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22" target="_blank" rel="noopener">Traceur</a><br>1、前端的发展讲究”工程化”，”模块化”和”组件化”，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，<br>工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等<br>模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写<br>组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面<br>2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等</p><h2 id="3-编程命名规则介绍"><a href="#3-编程命名规则介绍" class="headerlink" title="3.编程命名规则介绍"></a>3.编程命名规则介绍</h2><p>驼峰命名法：如exampleName<br>帕斯卡命名法：如ExampleName<br>下划线命名法：如example_name<br>中划线命名法：如example-name<br>匈牙利命名法(体现类型)：如g_example_name或aExampleNames</p><h2 id="3-整理实用条款"><a href="#3-整理实用条款" class="headerlink" title="3.整理实用条款"></a>3.整理实用条款</h2><p>1、工程化，模块化，组件化的思想<br>2、项目命名使用中划线命名法,比如twitter-bootstrap<br>3、项目中文件夹命名使用中划线命名法：比如global-api<br>3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js<br>3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from ‘./CheckBox’<br>4、类名用帕斯卡命名法：比如AdminUser{}<br>5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()<br>6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法<br>7、常量命名原则：全部大写且用下划线连接，如USER_TYPE</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一
      
    
    </summary>
    
    
      <category term="CodingQuality" scheme="http://yoursite.com/tags/CodingQuality/"/>
    
  </entry>
  
  <entry>
    <title>sleep-quality</title>
    <link href="http://yoursite.com/2018/12/19/sleep-quality/"/>
    <id>http://yoursite.com/2018/12/19/sleep-quality/</id>
    <published>2018-12-18T22:24:35.000Z</published>
    <updated>2019-03-14T04:52:58.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量<br>参考网址：<a href="https://m.leha.com/health/59359" target="_blank" rel="noopener">乐哈健康:提升睡眠质量</a></p><h2 id="2-提升睡眠质量九大原则"><a href="#2-提升睡眠质量九大原则" class="headerlink" title="2.提升睡眠质量九大原则"></a>2.提升睡眠质量九大原则</h2><p>1、改掉睡前吃东西的习惯<br>2、调整睡眠环境<br>3、改变睡姿<br>4、睡前梳梳头<br>5、睡前用热水泡泡脚<br>6、蜂蜜加牛奶改善睡眠质量<br>7、临睡前要注意放松心情<br>8、睡前舒缓运动消除疲劳<br>9、睡觉时枕头别垫太高</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量&lt;br&gt;参考网址：&lt;a href=&quot;https://m.l
      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>string</title>
    <link href="http://yoursite.com/2018/11/19/string/"/>
    <id>http://yoursite.com/2018/11/19/string/</id>
    <published>2018-11-19T12:04:20.000Z</published>
    <updated>2019-03-14T04:52:58.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>熟练掌握js字符串属性和方法，熟能生巧<br>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener">MDN String</a></p><h2 id="2-String一览"><a href="#2-String一览" class="headerlink" title="2.String一览"></a>2.String一览</h2><p>String.prototype.constructor<br>String.prototype.length  返回了字符串的长度<br>N  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）<br>String()   将其它对象转化为字符串</p><p>【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串<br>【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。<br>【布尔类型】String.prototype.lastIndexOf() 同上，相反<br>【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符<br>【布尔类型】String.prototype.endsWith()  同上，相反<br>【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较<br>【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。<br>【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。<br>【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。<br>【新字符串】String.prototype.padEnd()  同上，相反<br>【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。<br>【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。<br>【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符<br>【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。<br>【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。<br>String.prototype.charAt()  返回特定位置的字符。<br>String.prototype.split()  将字符串对象分割成字符串数组。</p><p>String.prototype.toLowerCase() 转化为小写<br>String.prototype.toLocaleLowerCase() 转为本地化小写<br>String.prototype.toUpperCase() 同上，相反<br>String.prototype.toLocaleUpperCase() 同上，相反<br>String.prototype.trim()  从字符串的开始和结尾去除空格。<br>String.prototype.trimLeft()   从字符串的左侧去除空格<br>String.prototype.trimRight()   从字符串的右侧去除空格</p><p>String.prototype.toString()  返回用字符串对象的字符串值<br>String.prototype.valueOf()  返回特定对象的原始值（同toString()）</p><p>String是基本类型，Array是引用类型</p><p><strong>总结:</strong><br>1.一些列布尔类型的方法<br>2.一些列对值的增删改查及遍历<br>3.数组和字符串可以相互转化<br>toString join 和 split<br>有空多看看，熟能生巧</p><p>扩展学习:splice 和 sort</p><p>forEach() 遍历数组<br>for .. in  遍历obj的key<br>for… of  遍历obj的value</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;熟练掌握js字符串属性和方法，熟能生巧&lt;br&gt;参考文档：&lt;a href=&quot;https://developer
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>array</title>
    <link href="http://yoursite.com/2018/11/19/array/"/>
    <id>http://yoursite.com/2018/11/19/array/</id>
    <published>2018-11-19T11:55:59.000Z</published>
    <updated>2019-03-14T04:52:58.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>熟练掌握js数组属性和方法，熟能生巧<br>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN Array</a></p><h2 id="2-Array一览"><a href="#2-Array一览" class="headerlink" title="2.Array一览"></a>2.Array一览</h2><p>array    数组 【联想记忆法:部署兵力，我就是将军】<br>【方法的分类方法，是否改变数组自身，是否是判断类型的】<br>Array.length<br>Array.prototype<br>【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象<br>【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例<br>【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型</p><p><strong>修改器方法</strong><br>会改变调用它们的对象自身的值：<br>Array.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素<br>Array.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素<br>Array.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。<br>Array.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素<br>Array.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br>Array.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值<br>Array.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序</p><p><strong>访问方法</strong><br>不会改变调用它们的对象的值<br>【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。<br>【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1<br>【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。<br>【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。<br>【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。<br>Array.prototype.toString() 返回一个由所有数组元素组合而成的字符串<br>Array.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串<br>Array.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。</p><p><strong>迭代方法</strong><br>【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined<br>【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改<br>【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。<br>【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。<br>Array.prototype.forEach() 为数组中的每个元素执行一次回调函数。<br>【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。<br>【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回<br>Array.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br>Array.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键<br>Array.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值<br>Array.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值<br>Array.prototype.reduceRight() 从右到左，同上</p><p>小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮<br>console.table(values)</p><p>思考：【数组，字符串，对象 相互转化】</p><p>// 字符串转数组 split<br>// 数组转字符串 toString/join</p><p>字符串可以当做数组直接用查看某个位置字符</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;熟练掌握js数组属性和方法，熟能生巧&lt;br&gt;参考文档：&lt;a href=&quot;https://developer.
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>npm淘宝镜像</title>
    <link href="http://yoursite.com/2018/11/15/npm/"/>
    <id>http://yoursite.com/2018/11/15/npm/</id>
    <published>2018-11-15T13:18:51.000Z</published>
    <updated>2019-03-27T09:38:33.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>该文档用于解释说明npm淘宝镜像的使用<br>参考网址：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝npm镜像</a>、<a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">react native环境搭建</a>、<a href="https://blog.csdn.net/quuqu/article/details/64121812" target="_blank" rel="noopener">淘宝镜像说明</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>淘宝镜像使用目的：加快访问速度<br>使用方式及其对比：</p><ul><li>npm切换镜像源（加快访问速度）：<br><strong>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> –global</strong><br><strong>npm config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="noopener">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>npm config list</strong><br><strong>npm config get registry</strong><br><strong>npm config get disturl</strong></li><li>yarn方式[推荐]<br>yarn安装：<br><strong>npm install -g yarn</strong><br>yarn配置镜像源：<br><strong>yarn config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> –global</strong><br><strong>yarn config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="noopener">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>yarn config list</strong><br><strong>yarn config get registry</strong><br><strong>yarn config get disturl</strong></li><li>cnpm方式[不推荐：安装的模块路径比较奇怪]<br><strong>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></strong></li></ul><h2 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3.扩展"></a>3.扩展</h2><p>查看npm全局安装默认路径（打开则可以看到具体安装的模块）：<br><strong>npm config get prefix</strong><br>全局安装模块：<br><strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>全局卸载已安装模块：<br><strong>npm uninstall vue-cli -g</strong>或<strong>yarn global remove vue-cli</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;该文档用于解释说明npm淘宝镜像的使用&lt;br&gt;参考网址：&lt;a href=&quot;http://npm.taobao
      
    
    </summary>
    
    
      <category term="Npm" scheme="http://yoursite.com/tags/Npm/"/>
    
  </entry>
  
  <entry>
    <title>vue组件快速原型开发</title>
    <link href="http://yoursite.com/2018/11/15/vueserve/"/>
    <id>http://yoursite.com/2018/11/15/vueserve/</id>
    <published>2018-11-15T12:56:20.000Z</published>
    <updated>2019-03-27T09:39:09.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件<br>参考网址：基于<a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">vue cli 3.0</a>中快速<a href="https://cli.vuejs.org/zh/guide/prototyping.html" target="_blank" rel="noopener">原型开发</a>模块</p><h2 id="2-快速原型开发"><a href="#2-快速原型开发" class="headerlink" title="2.快速原型开发"></a>2.快速原型开发</h2><p>检查是否安装了vue cli 3.0开发环境： <strong>vue –version</strong><br>安装vue cli 3.0环境: <strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>安装全局扩展： <strong>npm install -g @vue/cli-service-global</strong><br>编写App.vue组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>运行组件： <strong>vue serve</strong><br>编译构建组件： <strong>vue build</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件&lt;br&gt;参考网址：基于
      
    
    </summary>
    
    
      <category term="VueServe" scheme="http://yoursite.com/tags/VueServe/"/>
    
  </entry>
  
</feed>
