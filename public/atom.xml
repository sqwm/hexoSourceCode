<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LepinHeiker</title>
  
  <subtitle>吾生也有涯，而知也无涯！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-25T04:35:32.519Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xiaobo Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于RN的安卓权限配置</title>
    <link href="http://yoursite.com/2019/03/25/android-manifest/"/>
    <id>http://yoursite.com/2019/03/25/android-manifest/</id>
    <published>2019-03-25T04:26:09.000Z</published>
    <updated>2019-03-25T04:35:32.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限,比如拍照,定位,手机通讯录等,这里只记录添加安卓权限的例子,ios暂不考虑</p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>权限配置文件android/app/src/main/AndroidManifest.xml,添加对应权限如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>那么在具体逻辑中需要用到该权限时,手机就会自动询问用户是否允许开启该权限,具体逻辑如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_getCurrentLocation = async () =&gt; &#123;</span><br><span class="line">   navigator.geolocation.getCurrentPosition(location =&gt; &#123;</span><br><span class="line">     console.log(location)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;基于React Native的权限配置,在开发安卓app的过程中需要访问安卓手机硬件服务的时候,都会用到权限
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>基于React Native的android打包</title>
    <link href="http://yoursite.com/2019/03/19/android-apk/"/>
    <id>http://yoursite.com/2019/03/19/android-apk/</id>
    <published>2019-03-19T04:39:12.000Z</published>
    <updated>2019-03-19T04:58:51.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.<br>打包IOS，需要有打包证书支持,这里先不做探究.<br>打安卓包，默认初始化的RN项目，不修改任何配置的情况下，首次打包会下载很多依赖，而且会提示成功，但是并不会打包出apk安装包。经过以下配置之后，可以打包成功，并运行成功。</p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>步骤一:配置android/app/build.gradle文件,如图一所示<br><img src="/2019/03/19/android-apk/image001.png" title="this is first image"></p><p><center><strong>图（1）</strong></center><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class="line">            storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class="line">            keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class="line">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">signingConfig signingConfigs.release</span><br></pre></td></tr></table></figure></p><p>步骤二:配置android/gradle.properties文件,如图二所示<br><img src="/2019/03/19/android-apk/image002.png" title="this is first image"></p><p><center><strong>图（2）</strong></center><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class="line"></span><br><span class="line">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class="line"></span><br><span class="line">MYAPP_RELEASE_STORE_PASSWORD=123456789</span><br><span class="line"></span><br><span class="line">MYAPP_RELEASE_KEY_PASSWORD=123456789</span><br></pre></td></tr></table></figure></p><p>步骤三:在android/app/文件夹下添加key文件<br><a href="https://pan.baidu.com/s/1CLeFVOgJJfrXUh6Ydo05yA" target="_blank" rel="noopener">my-release-key.keystore 提取码: ncpe</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;打包生成apk安装包配置历来比较复杂,这里简单记录入门配置,方便查看.&lt;br&gt;打包IOS，需要有打包证书支持
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>基于React Native的热更新</title>
    <link href="http://yoursite.com/2019/03/15/code-push/"/>
    <id>http://yoursite.com/2019/03/15/code-push/</id>
    <published>2019-03-15T04:56:32.000Z</published>
    <updated>2019-03-15T05:01:50.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的用法,便于工作查阅,后期再逐步完善其配置和用法<br>参考网址: <a href="https://www.jianshu.com/p/8f7ae770a5ac" target="_blank" rel="noopener">react-native-code-push常用命令</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>查看服务器app部署情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push app list</span><br></pre></td></tr></table></figure></p><p>查看发布信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push deployment ls Rasog-android -k</span><br></pre></td></tr></table></figure></p><p>发布命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push release-react Rasog-android android --t 1.0.0 --d Staging --des &quot;1.调整新增整治清单字段\n2.调整编辑整治清单时照片可删除&quot; --m true</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;基于React Native的热更新,使用react-native-code-push,这里先记录其最基本的
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/03/14/hello-world/"/>
    <id>http://yoursite.com/2019/03/14/hello-world/</id>
    <published>2019-03-14T04:52:58.569Z</published>
    <updated>2019-03-14T04:52:58.569Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>serve静态资源服务器</title>
    <link href="http://yoursite.com/2019/03/14/serve/"/>
    <id>http://yoursite.com/2019/03/14/serve/</id>
    <published>2019-03-14T04:36:57.000Z</published>
    <updated>2019-03-14T04:52:58.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能只是打开静态文件了,这里介绍一款极为轻量级的前端静态服务器serve,便于后期查看使用</p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>全局安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add serve</span><br></pre></td></tr></table></figure></p><p>查看版本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serve --version</span><br></pre></td></tr></table></figure></p><p>进入需要开启服务的文件夹,启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serve .</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;前后端分离式的开发模式,使得前端独立于后端搭建开发模式至关重要,有些功能只能借助于服务器才能实现,此时就不能
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>React+Redux模式</title>
    <link href="http://yoursite.com/2018/12/26/react1/"/>
    <id>http://yoursite.com/2018/12/26/react1/</id>
    <published>2018-12-25T22:15:26.000Z</published>
    <updated>2019-03-14T04:52:58.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>学习并理解React+Redux模式<br>参考网址：<a href="https://www.imooc.com/learn/744" target="_blank" rel="noopener">慕课网:在React中使用Redux数据流</a></p><h2 id="2-概念笔记"><a href="#2-概念笔记" class="headerlink" title="2.概念笔记"></a>2.概念笔记</h2><p>1.React是纯V层框架（页面由容器组件和视图组件构成，本身是个类的定义，有props和state属性，reader和生命周期方法），<br>需要数据流支撑（用户行为和系统响应可预测的抽象，Redux是单向数据流的实现方式之一）<br>2.Redux由action(行为的抽象)和唯一的store[state(可预测,运行时产生)、Reducer(对响应抽象的纯方法，输入state和action,返回新的state)]组成，<br>实现时预先定义好action和reducer,reducer再生产store,action作用于store,store会促使reducer生成新的state</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;学习并理解React+Redux模式&lt;br&gt;参考网址：&lt;a href=&quot;https://www.imooc.
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="http://yoursite.com/2018/12/21/axios/"/>
    <id>http://yoursite.com/2018/12/21/axios/</id>
    <published>2018-12-20T23:11:54.000Z</published>
    <updated>2019-03-14T04:52:58.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作<br>参考网址：<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">axios</a></p><h2 id="2-实践要点分析"><a href="#2-实践要点分析" class="headerlink" title="2.实践要点分析"></a>2.实践要点分析</h2><p>1.get请求直接拼接动态数据<br>get请求是最常见的请求方式，但是根据后端接口的设计形式，前端请求的方式也是有所区别的，直接拼接动态参数相当于vue router中动态路由且用params传值的形式（如：root/:id）<br>例如在Swagger UI上看到的形式为：<br><strong>【GET】   /resourceApply/get/{id}</strong><br><strong>(Parameters)  id[required]  string</strong><br>那么前端的请求方法声明就应该如下（即：将参数直接拼接）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDepartById = id =&gt; this.get(`/resourceApply/get/$&#123;id&#125;`)</span><br></pre></td></tr></table></figure></p><p>对该方法的调用如下（即：通过形参将动态数据直接传到动态拼接的请求链接上）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DepartApi.getDepartById(rowId)</span><br></pre></td></tr></table></figure></p><p>2.get等请求params参数形式<br>params参数形式有别于直接链接拼接的形式,该形式会在链接中以？链接各个参数，相当于vue router中用query传值（不涉及路由），需要提醒的是该方式并不是get特有，其实任何请求方式都可以有该参数，包括post,只不过该参数传递的值会包括在请求头中，而data传递的值会在请求体中<br>例如在Swagger UI上看到的get请求形式为：<br><strong>【GET】   /role/findPermsByRoleId</strong><br><strong>(Parameters)  roleId[required]  string</strong><br>那么前端的请求方法声明和调用方法就应该如下(Swagger上非拼接方式，string形参要求参数名一一对应):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">findPermsByRoleId = (params) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, params)</span><br><span class="line">DepartApi.findPermsByRoleId(&#123;roleId: this.$route.param.id&#125;)</span><br></pre></td></tr></table></figure></p><p>或如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId &#125;)</span><br><span class="line">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p><p>或如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">findPermsByRoleId = (roleId) =&gt; this.get(&apos;dce-admin/role/findPermsByRoleId&apos;, &#123; roleId: roleId &#125;)</span><br><span class="line">DepartApi.findPermsByRoleId(this.$route.param.id)</span><br></pre></td></tr></table></figure></p><p>post请求也是可以有params参数的(data可以默认为{}，来占位)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subAudit = (data, params) =&gt; this.post(&apos;/dce-res/resourceDB/subAudit&apos;, data, params)</span><br><span class="line">DbRegisterApi.subAudit(&#123;&#125;, &#123; resourceDBId: params.row.id &#125;)</span><br></pre></td></tr></table></figure></p><p>3.post等请求data参数形式<br><code>data</code> 是作为请求主体被发送的数据，只适用于这些请求方法 ‘PUT’, ‘POST’, 和 ‘PATCH’<br>必须是以下类型之一：</p><ul><li>string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</li><li>浏览器专属：FormData, File, Blob[这些请求方式可能需要显示设置请求头或者对参数进行特殊处理]</li><li>Node 专属： Stream<br>例如在Swagger UI上看到的形式为(注意post请求体为body类型，故该参数不需要对应字段名称)：<br><strong>【POST】   /dce-admin/depart</strong><br><strong>(Parameters)  depart[required]  body</strong><br>那么前端的请求方法声明和调用方法就应该如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addDepart = data =&gt; this.post(&apos;/dce-admin/depart&apos;, data)</span><br><span class="line">DepartApi.addDepart(this.formValidate)</span><br></pre></td></tr></table></figure></li></ul><p>当然，更为复杂的请求形式多种多样，都是以上各种方式的组合，要理解其原理，方能随机应变<br>4.跨域等问题的处理<br>跨域原因：<br>浏览器对于javascript的同源策略【相同协议,相同域名,相同端口】的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据<br>解决方案（在axios请求配置中加入如下配置）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// &apos;proxy&apos; 定义代理服务器的主机名称和端口</span><br><span class="line">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br><span class="line">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: &apos;127.0.0.1&apos;,</span><br><span class="line">    port: 9000,</span><br><span class="line">    auth: : &#123;</span><br><span class="line">      username: &apos;mikeymike&apos;,</span><br><span class="line">      password: &apos;rapunz3l&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;通过对axios几个点的深入剖析和实践，进一步理解前后端配合完成接口对接工作&lt;br&gt;参考网址：&lt;a href
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>coding-quality</title>
    <link href="http://yoursite.com/2018/12/19/coding-quality/"/>
    <id>http://yoursite.com/2018/12/19/coding-quality/</id>
    <published>2018-12-18T22:43:00.000Z</published>
    <updated>2019-03-14T04:52:58.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一个有洁癖的人对于卫生环境的追求一样，作为一个编码人员也会对自己编写的代码有一种追求质量的情怀。可能这种追求并不是一两天或者几句话能说明白的事情，所有我会持续探究并完善这篇博文，希望可以有所帮助<br>参考网址：<br><a href="https://www.jianshu.com/p/4cbcd202a591" target="_blank" rel="noopener">雅虎军规35条</a>、<br><a href="https://github.com/yuche/javascript" target="_blank" rel="noopener">JavaScript 编码规范</a>、<br><a href="http://eslint.cn/docs/rules/" target="_blank" rel="noopener">eslint规则</a>、<br><a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html" target="_blank" rel="noopener">js编码风格（阮一峰）</a><br><a href="http://es6.ruanyifeng.com/#docs/style" target="_blank" rel="noopener">ES6编程风格</a></p><h2 id="2-心得"><a href="#2-心得" class="headerlink" title="2.心得"></a>2.心得</h2><p>编程讲究章法，要心中有想法，才能动手编码，正所谓”三思而后行”，而对于编程习惯，还是要尽可能准守一些普遍认同的规则好，而不必过于吹毛求疵，因为可能很多人有不同的观点，特别是看了阮一峰老师关于“js编码风格”一文，以及下方的评论时，感触很大，故此事不可过于偏执。另外需要特别提醒的一点是现在都用es6的编程风格了，但是上线之前都应该将代码统一处理成es5<br>基于node开发环境转换：<a href="https://www.jianshu.com/p/647950617a6d" target="_blank" rel="noopener">Babel</a><br>在线转换：<a href="https://babeljs.io/repl" target="_blank" rel="noopener">Babel</a>、<a href="https://google.github.io/traceur-compiler/demo/repl.html#let%20a%20%3D%20%22colbert%22" target="_blank" rel="noopener">Traceur</a><br>1、前端的发展讲究”工程化”，”模块化”和”组件化”，那么我们在编码之前，清晰地了解需求之后，就要从这三个维度去考虑实现方案，<br>工程化：用做工程的思维看待和开发自己的项目，而不再是直接撸起袖子一个页面一个页面开写，比如规划各种规范、技术选型、项目构建优化等等<br>模块化：强调功能的分离同时可以复用，比如ES6 Module,less mixin等，要写一个实现A功能的JS代码，这个功能在项目其他位置也需要用到，那么我们就可以把这个功能看成一个模块采用一定的方式进行模块化编写<br>组件化：强调视图的复用同时需用分离，比如vue公共组件的实现，页面只不过是组件的容器，负责组合组件形成功能完整的界面<br>2、细节决定了编码的质量，而强有力且公认的编码习惯则决定了代码的可读性，常见的编码习惯涉及到文件命名，变量命名，标点符号，注释，代码算法结构等</p><h2 id="3-编程命名规则介绍"><a href="#3-编程命名规则介绍" class="headerlink" title="3.编程命名规则介绍"></a>3.编程命名规则介绍</h2><p>驼峰命名法：如exampleName<br>帕斯卡命名法：如ExampleName<br>下划线命名法：如example_name<br>中划线命名法：如example-name<br>匈牙利命名法(体现类型)：如g_example_name或aExampleNames</p><h2 id="3-整理实用条款"><a href="#3-整理实用条款" class="headerlink" title="3.整理实用条款"></a>3.整理实用条款</h2><p>1、工程化，模块化，组件化的思想<br>2、项目命名使用中划线命名法,比如twitter-bootstrap<br>3、项目中文件夹命名使用中划线命名法：比如global-api<br>3、项目中文件名称命名（除特殊约定外：比如README.md）使用中划线：error-info.js<br>3.1、如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致，比如：import CheckBox from ‘./CheckBox’<br>4、类名用帕斯卡命名法：比如AdminUser{}<br>5、对象、函数、实例、普通变量应该使用驼峰命名法：比如getInit()<br>6、变量命名原则：尽可能短且体现值得类型，即普通变量更适合用匈牙利命名法<br>7、常量命名原则：全部大写且用下划线连接，如USER_TYPE</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;一直想写一篇关于编码习惯和编码质量的博文，却一直没有动手，今天终于开启了这个课题的探究，可能这种情怀就像是一
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>sleep-quality</title>
    <link href="http://yoursite.com/2018/12/19/sleep-quality/"/>
    <id>http://yoursite.com/2018/12/19/sleep-quality/</id>
    <published>2018-12-18T22:24:35.000Z</published>
    <updated>2019-03-14T04:52:58.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量<br>参考网址：<a href="https://m.leha.com/health/59359" target="_blank" rel="noopener">乐哈健康:提升睡眠质量</a></p><h2 id="2-提升睡眠质量九大原则"><a href="#2-提升睡眠质量九大原则" class="headerlink" title="2.提升睡眠质量九大原则"></a>2.提升睡眠质量九大原则</h2><p>1、改掉睡前吃东西的习惯<br>2、调整睡眠环境<br>3、改变睡姿<br>4、睡前梳梳头<br>5、睡前用热水泡泡脚<br>6、蜂蜜加牛奶改善睡眠质量<br>7、临睡前要注意放松心情<br>8、睡前舒缓运动消除疲劳<br>9、睡觉时枕头别垫太高</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;该文档用于提醒自己掌握科学的睡眠方法，提升睡眠质量&lt;br&gt;参考网址：&lt;a href=&quot;https://m.l
      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>string</title>
    <link href="http://yoursite.com/2018/11/19/string/"/>
    <id>http://yoursite.com/2018/11/19/string/</id>
    <published>2018-11-19T12:04:20.000Z</published>
    <updated>2019-03-14T04:52:58.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>熟练掌握js字符串属性和方法，熟能生巧<br>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener">MDN String</a></p><h2 id="2-String一览"><a href="#2-String一览" class="headerlink" title="2.String一览"></a>2.String一览</h2><p>String.prototype.constructor<br>String.prototype.length  返回了字符串的长度<br>N  用于访问第N个位置的字符，其中N是小于 length 和 0之间的正整数（小下标，起了大作用）<br>String()   将其它对象转化为字符串</p><p>【布尔类型】String.prototype.includes()  判断一个字符串里是否包含其他字符串<br>【布尔类型】String.prototype.indexOf() 返回首个被发现的给定值的索引值，如果没有找到则返回-1。<br>【布尔类型】String.prototype.lastIndexOf() 同上，相反<br>【布尔类型】String.prototype.startsWith() 判断一个字符串的结尾是否包含其他字符串中的字符<br>【布尔类型】String.prototype.endsWith()  同上，相反<br>【布尔类型】String.prototype.match()  使用正则表达式与字符串相比较<br>【布尔类型】String.prototype.search()  对正则表达式和指定字符串进行匹配，返回第一个出现的匹配项的下标。<br>【布尔类型】String.prototype.replace()  正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。<br>【新字符串】String.prototype.padStart()  在当前字符串头部填充指定的字符串， 达到指定的长度。 返回新字符串。<br>【新字符串】String.prototype.padEnd()  同上，相反<br>【新字符串】String.prototype.repeat()  返回指定重复次数的由元素组成的字符串对象。<br>【新字符串】String.prototype.slice()  摘取一个字符串区域，返回一个新的字符串。<br>【新字符串】String.prototype.substr() 返回一个字符串中从指定位置开始到指定字符数的字符<br>【新字符串】String.prototype.substring()  返回在字符串中指定两个下标之间的字符。<br>【新字符串】String.prototype.concat() 连接两个字符串文本，并返回一个新的字符串。<br>String.prototype.charAt()  返回特定位置的字符。<br>String.prototype.split()  将字符串对象分割成字符串数组。</p><p>String.prototype.toLowerCase() 转化为小写<br>String.prototype.toLocaleLowerCase() 转为本地化小写<br>String.prototype.toUpperCase() 同上，相反<br>String.prototype.toLocaleUpperCase() 同上，相反<br>String.prototype.trim()  从字符串的开始和结尾去除空格。<br>String.prototype.trimLeft()   从字符串的左侧去除空格<br>String.prototype.trimRight()   从字符串的右侧去除空格</p><p>String.prototype.toString()  返回用字符串对象的字符串值<br>String.prototype.valueOf()  返回特定对象的原始值（同toString()）</p><p>String是基本类型，Array是引用类型</p><p><strong>总结:</strong><br>1.一些列布尔类型的方法<br>2.一些列对值的增删改查及遍历<br>3.数组和字符串可以相互转化<br>toString join 和 split<br>有空多看看，熟能生巧</p><p>扩展学习:splice 和 sort</p><p>forEach() 遍历数组<br>for .. in  遍历obj的key<br>for… of  遍历obj的value</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;熟练掌握js字符串属性和方法，熟能生巧&lt;br&gt;参考文档：&lt;a href=&quot;https://developer
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>array</title>
    <link href="http://yoursite.com/2018/11/19/array/"/>
    <id>http://yoursite.com/2018/11/19/array/</id>
    <published>2018-11-19T11:55:59.000Z</published>
    <updated>2019-03-14T04:52:58.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>熟练掌握js数组属性和方法，熟能生巧<br>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN Array</a></p><h2 id="2-Array一览"><a href="#2-Array一览" class="headerlink" title="2.Array一览"></a>2.Array一览</h2><p>array    数组 【联想记忆法:部署兵力，我就是将军】<br>【方法的分类方法，是否改变数组自身，是否是判断类型的】<br>Array.length<br>Array.prototype<br>【布尔类型】Array.isArray()   用来判断某个变量是否是一个数组对象<br>【新数组】Array.from()   从类数组对象或者可迭代对象中创建一个新的数组实例<br>【新数组】Array.of()  根据一组参数来创建新的数组实例，支持任意的参数数量和类型</p><p><strong>修改器方法</strong><br>会改变调用它们的对象自身的值：<br>Array.prototype.shift()  【杀掉排头兵】删除数组的第一个元素，并返回这个元素<br>Array.prototype.unshift()  【不要杀掉排头兵，要新增】开头增加一个或多个元素<br>Array.prototype.push()  【push:增加,大规模增加兵力】在数组的末尾增加一个或多个元素，并返回数组的新长度。<br>Array.prototype.pop()   【pop:拿出来，剔除】删除数组的最后一个元素，并返回这个元素<br>Array.prototype.copyWithin()  在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。<br>Array.prototype.fill()    【fill:填满，装满】将数组中指定区间的所有元素的值，都替换成某个固定的值<br>Array.prototype.reverse() 【翻转排兵布阵】 颠倒数组中元素的排列顺序</p><p><strong>访问方法</strong><br>不会改变调用它们的对象的值<br>【布尔类型】Array.prototype.includes()   判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。<br>【布尔类型】Array.prototype.indexOf()  【index：标志，给兵编号】返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1<br>【布尔类型】Array.prototype.lastIndexOf()  返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。<br>【新数组】Array.prototype.slice() 【slice：分出一小队】抽取当前数组中的一段元素组合成一个新数组。<br>【新数组】Array.prototype.concat()  【concat：合并，会师】返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。<br>Array.prototype.toString() 返回一个由所有数组元素组合而成的字符串<br>Array.prototype.toLocaleString() 返回一个由所有数组元素组合而成的本地化后的字符串<br>Array.prototype.join()  【join：连接成绳索】连接所有数组元素组成一个字符串。</p><p><strong>迭代方法</strong><br>【布尔类型】Array.prototype.find() 找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined<br>【布尔类型】Array.prototype.findIndex() 找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1，不要尝试在遍历过程中对原数组进行任何修改<br>【布尔类型】Array.prototype.some() 如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。<br>【布尔类型】Array.prototype.every()  如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。<br>Array.prototype.forEach() 为数组中的每个元素执行一次回调函数。<br>【新数组】Array.prototype.map() 返回一个由回调函数的返回值组成的新数组。<br>【新数组】Array.prototype.filter()  将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回<br>Array.prototype.entries()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。<br>Array.prototype.keys()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的键<br>Array.prototype.values()   返回一个数组迭代器对象，该迭代器会包含所有数组元素的值<br>Array.prototype.reduce()  从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值<br>Array.prototype.reduceRight() 从右到左，同上</p><p>小技巧：并不是所有的都用console.log，数组用console.table就非常漂亮<br>console.table(values)</p><p>思考：【数组，字符串，对象 相互转化】</p><p>// 字符串转数组 split<br>// 数组转字符串 toString/join</p><p>字符串可以当做数组直接用查看某个位置字符</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;熟练掌握js数组属性和方法，熟能生巧&lt;br&gt;参考文档：&lt;a href=&quot;https://developer.
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>npm淘宝镜像</title>
    <link href="http://yoursite.com/2018/11/15/npm/"/>
    <id>http://yoursite.com/2018/11/15/npm/</id>
    <published>2018-11-15T13:18:51.000Z</published>
    <updated>2019-03-14T04:52:58.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>该文档用于解释说明npm淘宝镜像的使用<br>参考网址：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝npm镜像</a>、<a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">react native环境搭建</a>、<a href="https://blog.csdn.net/quuqu/article/details/64121812" target="_blank" rel="noopener">淘宝镜像说明</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>淘宝镜像使用目的：加快访问速度<br>使用方式及其对比：</p><ul><li>npm切换镜像源（加快访问速度）：<br><strong>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> –global</strong><br><strong>npm config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="noopener">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>npm config list</strong><br><strong>npm config get registry</strong><br><strong>npm config get disturl</strong></li><li>yarn方式[推荐]<br>yarn安装：<br><strong>npm install -g yarn</strong><br>yarn配置镜像源：<br><strong>yarn config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> –global</strong><br><strong>yarn config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="noopener">https://npm.taobao.org/dist</a> –global</strong><br>验证查看镜像源：<br><strong>yarn config list</strong><br><strong>yarn config get registry</strong><br><strong>yarn config get disturl</strong></li><li>cnpm方式[不推荐：安装的模块路径比较奇怪]<br><strong>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></strong></li></ul><h2 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3.扩展"></a>3.扩展</h2><p>查看npm全局安装默认路径（打开则可以看到具体安装的模块）：<br><strong>npm config get prefix</strong><br>全局安装模块：<br><strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>全局卸载已安装模块：<br><strong>npm uninstall vue-cli -g</strong>或<strong>yarn global remove vue-cli</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;该文档用于解释说明npm淘宝镜像的使用&lt;br&gt;参考网址：&lt;a href=&quot;http://npm.taobao
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>vue组件快速原型开发</title>
    <link href="http://yoursite.com/2018/11/15/vueserve/"/>
    <id>http://yoursite.com/2018/11/15/vueserve/</id>
    <published>2018-11-15T12:56:20.000Z</published>
    <updated>2019-03-14T04:52:58.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件<br>参考网址：基于<a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">vue cli 3.0</a>中快速<a href="https://cli.vuejs.org/zh/guide/prototyping.html" target="_blank" rel="noopener">原型开发</a>模块</p><h2 id="2-快速原型开发"><a href="#2-快速原型开发" class="headerlink" title="2.快速原型开发"></a>2.快速原型开发</h2><p>检查是否安装了vue cli 3.0开发环境： <strong>vue –version</strong><br>安装vue cli 3.0环境: <strong>npm install -g @vue/cli</strong>或<strong>yarn global add @vue/cli</strong><br>安装全局扩展： <strong>npm install -g @vue/cli-service-global</strong><br>编写App.vue组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Hello!&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>运行组件： <strong>vue serve</strong><br>编译构建组件： <strong>vue build</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;该文档用于快速开发vue组件，不用初始化完整的vue项目，就可以直接开发预览vue组件&lt;br&gt;参考网址：基于
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>keymap</title>
    <link href="http://yoursite.com/2018/11/15/keymap/"/>
    <id>http://yoursite.com/2018/11/15/keymap/</id>
    <published>2018-11-15T12:12:21.000Z</published>
    <updated>2019-03-14T04:52:58.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-windows平台常用快捷键"><a href="#1-windows平台常用快捷键" class="headerlink" title="1.windows平台常用快捷键"></a>1.windows平台常用快捷键</h2><p><strong>【win系统】</strong><br>无鼠标快捷操作电脑[win7]<br>[1]开启键盘操作鼠标<br>控制面板-&gt;轻松访问-&gt;鼠标更易用-&gt;设置鼠标键…<br>Alt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动<br>[2]常用系统快捷键<br>WIN 打开搜素程序和文件<br>WIN+E 我的电脑<br>WIN+T 切换任务栏<br>WIN+L 锁定计算机<br>WIN+D 显示桌面<br>WIN+M 最小化所有窗口<br>WIN+R 打开运行对话框<br>WIN+Tab 3D切换任务栏程序<br>WIN+空格键 预览桌面<br>WIN+方向键 最大/小化窗口/左右移动窗口<br>关闭活动应用程序:Alt+F4</p><p><strong>【Webstorm快捷键】</strong><br>多处编辑：Alt+左键单击<br>控制台：Alt+F12<br>打开任何文件：Double Shift<br>打开最近文件：Ctrl+E<br>全局搜索字符串：Ctrl+H<br>Settings:Ctrl+Alt+S<br>Format code:Ctrl+Alt+L<br>删除一行： Ctrl+X<br>复制行：Ctrl+D<br>查找行：Ctrl+G<br>折叠代码块： Ctrl+加减号<br>注释：Ctrl+/ 或 Ctrl+Shift+/<br>向上/下移动代码行：Shift+Alt+Up/Down<br>向上/下移动代码块：Ctrl+Shift+Up/Down<br>方法追踪：Ctrl+B或Ctrl+左键单击<br>跳转到变量实现处：Ctrl+B<br>跳转到方法实现处：Ctrl + Alt + B<br>打开定义快速查看：Ctrl + Shift + I<br>跳转到当前页面的上/下一个方法块：Alt + Up/Down<br>高亮错误或警告快速定位：F2<br>格式化代码：Ctrl+Alt+L<br>自动修正：Alt+Enter<br>查找文本：Ctrl+F<br>查找下/上一个：F3/Shift + F3<br>高亮显示选中文本：Ctrl+Shift+F7<br>替换文本：Ctrl+R<br>方法参数提示：Ctrl+P<br>显示方法注释：Ctrl+Q<br>打开配置窗口：Ctrl+Alt+S<br>文件名查找文件：Ctrl+Shift+N<br>通过字符快速查找：Ctrl+Shift+Alt+N<br>重新开始一行（无论光标在哪里）：Shift+Enter<br>surround with代码块：Ctrl+Alt+T<br>大小写转换：Ctrl+Shift+U<br>输出模板：Ctrl+J<br>匹配代码块括号：Ctrl+[<br>显示当前文件的结构：Ctrl+F12<br>折叠/展开代码块：Ctrl+”-“/“+”<br>返回至上次浏览的位置 Ctrl+Alt+ left/right<br>逐级向上选中代码：Ctrl+W</p><p><strong>【浏览器】</strong><br>打开新窗口:Ctrl+T<br>切换导航栏窗口:Ctrl+Tab<br>关闭活动页面:Ctrl+W<br>上下浏览网页:方向键和Page Up和Page Down</p><h2 id="2-mac平台常用快捷键"><a href="#2-mac平台常用快捷键" class="headerlink" title="2.mac平台常用快捷键"></a>2.mac平台常用快捷键</h2><p><strong>【mac系统】</strong><br>Command + Shift + c 打开我的电脑<br>Command + Shift + h 打开当前用户文件夹<br>Command + 向上箭头 打开包含当前文件夹的文件夹<br>Command + [ / ] 打开上一个文件夹/下一个文件夹<br>Command + w 关闭最前tab<br>Command + m  最小化当前应用窗口<br>Command + q 关闭当前应用<br>Command + T 打开多个tab 【eg:浏览器，Terminal】<br>Command + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】<br>control + tab 转向下一个标签页【eg:webStorm多个编辑窗口】<br>control + shift + tab 转向上一个标签页<br>Control + 向上向下 查看所有打开窗口<br><strong>【两个手指向下滑：向下滚动】</strong></p><p>Command + shift + n 新建文件夹<br>Command + N 新建文件【eg:sublime新文件，webStorm新文件】<br>Command + delete 删除<br>Return 重命名选中的文件或文件夹</p><p>Shift 搜狗输入法中英文切换<br>Command + , 当前应用的偏好设置</p><p><strong>【文件处理快捷键】</strong><br>Command + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾<br>Command + 左右 将光标移动到行首/行尾<br>Command + L 将光标移动到指定行<br>Command + shift + 上下左右 选中文本<br>alt + 上下 选取代码块<br>Shift + 上下左右 扩展选择区域<br>Command + f 查找<br>Command + r 替换<br>Delete 删除光标左边的字符<br>Fn + delete 删除光标右边的字符<br>Option + delete 删除光标左边的word</p><p><strong>【截图快捷键】</strong><br>Command + shift + 3                 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件<br>Command + shift + 4                 截取选中屏幕区域到文件<br>Command + shift + control + 3  截取全屏到剪贴板<br>Command + shift + control + 4  截取选中屏幕区域到剪贴板</p><p><strong>【Mac下浏览器快捷键】</strong><br>Command + L 光标直接跳至地址栏<br>Chrome 开发者模式  Command + alt + j<br>刷新 Command + r</p><p><strong>【Mac下webStorm快捷键】</strong><br>全局查找 Command + shift + f<br>格式整理 Command + alt + L<br>注释：Command + /<br>调整缩进 Shift +  tab<br>复制当前行 Command + d<br>删除当前行 Command + delete<br>快速换行 Shift + Enter<br>清除缩进变成单行 Command + Shift + J<br>光标在多处定位 Alt + 单击<br>大小写转换 Command + Shift + U</p><h2 id="3-其他工具"><a href="#3-其他工具" class="headerlink" title="3.其他工具"></a>3.其他工具</h2><p><strong>【sublime】</strong><br>sublime修炼：一款得心应手的开发软件<br>1.sublime官网下载，安装时勾选右键打开文件<br>2.快捷键设置Preferences-&gt;Key Bindings-User<br>打开浏览器：ctrl+alt+f<br>3.命令模式ctrl+shift+p，输入install package，安装命令包</p><p><strong>【VIM】</strong><br>【命令模式】<br>左下上右:HJKL<br>向右向下跳一个词:w/b<br>下/上一个句子/段落 （）/{}<br>跳转到行首/行尾：0/shift+$<br>跳转到最后一行/第一行：shift+G/gg<br>跳转到上一次编辑的地方：<br>跳转到上一次编辑的文件：ctrl+o/ctrl+i<br>整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行<br>非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行<br>删除选中内容:X<br>删除某行：DD / dl (L字符) /dw (w单词)<br>替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw<br>复制当前行：YY /yl /yw<br>复制一个词：YW<br>复制任意选中内容：先选中，再按Y<br>粘贴：P<br>撤销：U/u<br>代码格式化 选中，按=</p><p>【编辑模式】<br>进入/退出 :i/a/0/shift+o esc<br>自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全）</p><p>【扩展模式】<br>：! 命令 （叹号后面有个空格）<br>搜索：/searchText /搜索文本 回车确认 然后按N查找下一个<br>向前搜索：？searchText<br>退出搜索高亮：nohl<br>[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局<br>[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText<br>横屏分屏：sp 上下横屏切换ctrl+ww<br>竖屏分屏：vs 左右竖屏切换ctrl+ww<br>退出分屏：q<br>显示行号：set number</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-windows平台常用快捷键&quot;&gt;&lt;a href=&quot;#1-windows平台常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;1.windows平台常用快捷键&quot;&gt;&lt;/a&gt;1.windows平台常用快捷键&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【win系统
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用笔记</title>
    <link href="http://yoursite.com/2018/11/15/hexo/"/>
    <id>http://yoursite.com/2018/11/15/hexo/</id>
    <published>2018-11-15T11:44:41.000Z</published>
    <updated>2019-03-14T04:52:58.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>该文档用于自己及时查看，并快速上手继续写博客<br>参考网址：<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">hexo官方文挡</a></p><h2 id="2-快速编写博客"><a href="#2-快速编写博客" class="headerlink" title="2.快速编写博客"></a>2.快速编写博客</h2><p>1.查看自己远程博客：<a href="https://zhuxiaobotongxue.github.io/" target="_blank" rel="noopener">https://zhuxiaobotongxue.github.io/</a><br>2.本地化启动服务：<strong>hexo s</strong><br>3.如何生成一篇博客(如：git1)：<strong>hexo new post git1</strong><br>4.打开source文件夹并编辑博客，<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">markdown语法</a><br>5.编译博客： <strong>hexo g</strong><br>6.部署至远程：<strong>hexo d</strong><br>7.备份原代码：<strong>git add ./git commit -m ‘’/git push</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;该文档用于自己及时查看，并快速上手继续写博客&lt;br&gt;参考网址：&lt;a href=&quot;https://hexo.i
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>开发者工具</title>
    <link href="http://yoursite.com/2018/06/29/googledev/"/>
    <id>http://yoursite.com/2018/06/29/googledev/</id>
    <published>2018-06-29T12:49:28.000Z</published>
    <updated>2019-03-14T04:52:58.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Elements"><a href="#1-Elements" class="headerlink" title="1.Elements"></a>1.Elements</h2><p>ctrl+shift+c        选取dom元素<br>ESC                在Elements面板可以用打开Console<br>在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,<br>同时面包屑导航会给出层级结构,<br>按住并拖动节点可以移动节点位置,<br>查看元素事件侦听器,选中对应元素,打开Elements-&gt;Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,<br>单击节点,右键Break on可以为节点添加Dom事件监听,在Elements-&gt;DOM Breakpoints面板可以查看详情,<br>鼠标悬停在Elements-&gt;Styles面板对应css名称上可以查看受影响的Dom,<br>在对应css右下角有小图标可以调整颜色和阴影,<br>编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,<br>Ctrl+点击任何css属性可以直接跳转至对应文件相应行</p><h2 id="2-Console"><a href="#2-Console" class="headerlink" title="2.Console"></a>2.Console</h2><p>提供了一个命令行接口，用来与网页代码互动。<br>F12                打开DevTools<br>ctrl+shift+J        打开控制台并定位光标<br>ctrl+L            清空控制台<br>console.log(‘aaa’);<br>console.info(‘aaa’);<br>console.error(‘aaa’);<br>console.warn(‘aaa’);<br>分组日志<br>console.group(‘aaa’);<br>console.log(‘我是aaa小组的日志’);<br>console.groupEnd();<br>断言日志<br>console.assert(false,’当第一个参数为false时输出该条消息’);<br>统计执行次数日志<br>function myFun(){<br>    console.count(‘myFun被执行的次数’);<br>}<br>myFun();<br>myFun();<br>输出对象的属性和方法<br>console.dir(document.body);<br>统计代码执行时间<br>console.time(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.timeEnd(“Array initialize”);<br>查看代码执行对cpu的使用情况<br>console.profile(“Array initialize”);<br>var array=new Array(1000000);<br>for(var i=array.length - 1;i&gt;=0;i–){<br>    array[i] = new Object();<br>};<br>console.profileEnd(“Array initialize”);<br>执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息<br>复制选中的DOM结构至剪切板<br>copy(document.body);<br>输出对象的键或值对<br>var myObj = {name:’xiaoming’,sex:’female’};<br>keys(myObj);<br>values(myObj);<br>用表格样式输出json格式数组<br>var myArray = [{“name”:”xiaoming”},{“sex”:”12”}];<br>console.table(myArray);</p><p>console.log(‘%c This text is styled!’,<br>  ‘color: red; background: yellow; font-size: 24px;’<br>)</p><p>var number = 11 * 9;<br>var color = ‘red’;<br>console.log(‘%d %s balloons’, number, color);</p><p>%s 字符串<br>%d 整数<br>%i 整数<br>%f 浮点数<br>%o 对象的链接<br>%c CSS格式字符串</p><p>debugger</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Elements&quot;&gt;&lt;a href=&quot;#1-Elements&quot; class=&quot;headerlink&quot; title=&quot;1.Elements&quot;&gt;&lt;/a&gt;1.Elements&lt;/h2&gt;&lt;p&gt;ctrl+shift+c        选取dom元素&lt;br&gt;ESC    
      
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Git系列之命令一览</title>
    <link href="http://yoursite.com/2018/06/25/git6/"/>
    <id>http://yoursite.com/2018/06/25/git6/</id>
    <published>2018-06-25T12:30:27.000Z</published>
    <updated>2019-03-14T04:52:58.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-配置-初始化-常规操作"><a href="#1-配置-初始化-常规操作" class="headerlink" title="1.配置/初始化/常规操作"></a>1.配置/初始化/常规操作</h2><p>git –version<br>git help<br>git config –help<br>git config –list –global<br>git config –global –add user.name zhuxiaobotongxue<br>git init<br>git clone<br>git add .<br>git commit –m “this is a commit”<br>git push origin master<br>git pull origin self_branch<br>git fetch origin master  //拉取远程分支<br>git merge self_branch  //合并本地分支self_branch至当前分支<br>git checkout .  //撤销所有工作空间修改<br>git reset HEAD a.html  //撤销暂存区修改<br>git revert <commit>        //撤销指定的提交<br>git checkout self_branch  //切换分支<br>git checkout –d self_branch  //删除本地分支<br>git log –p fileName          //查看指定文件提交历史<br>git log –oneline –decorate –graph –all<br>git diff –cached<br>git mv oldName newName   //文件改名<br>git rm fileName              //删除文件<br>git branch –a           //查看所有分支</commit></p><h2 id="2-非频繁实用操作"><a href="#2-非频繁实用操作" class="headerlink" title="2.非频繁实用操作"></a>2.非频繁实用操作</h2><p>git clone -b self_branch <a href="http://mall-service.git" target="_blank" rel="noopener">http://mall-service.git</a>  //克隆指定分支<br>git reset –hard resetVersionHash    //将工作空间强制恢复至指定提交<br>git push -f origin currentBranch    //将本地分支强制推送至远程<br>git stash list<br>git stash pop stash@{0}<br>git remote add origin <a href="https://github.com/Test.git" target="_blank" rel="noopener">https://github.com/Test.git</a>     //将本地项目与远程建立联系<br>git push -u origin master    //首次推送项目至远程，指定origin为默认<br>git push –delete origin self_branch //删除远程分支<br>git update-index –assume-unchanged FILENAME //已入库文件不再监听<br>git update-index –no-assume-unchanged FILENAME //恢复已入库文件监听<br>git gui  //调出图形界面<br>ssh-keygen -t rsa -C ”<a href="mailto:zhuxiaobotongxue@gmail.com" target="_blank" rel="noopener">zhuxiaobotongxue@gmail.com</a>” //生成秘钥</p><h2 id="3-小专题探究"><a href="#3-小专题探究" class="headerlink" title="3.小专题探究"></a>3.小专题探究</h2><p><strong>拉取分支</strong><br>git pull origin self_branch:self_branch  //拉取远程self_branch分支至本地self_branch分支<br>等同于<br>git fetch origin online<br>git checkout online<br>git merge origin/self_branch     //将远程self_branch分支合并至当前分支<br><strong>创建本地分支并提交至远程</strong><br>git checkout –b self_branch      //从当前分支创建本地分支并切换<br>git push origin selft_branch        //将新分支提交至远程<br><strong>忽略文件</strong><br>.gitignore  //创建未入库文件忽略配置<br><em>.[oa]  表示忽略以o或者a结尾的文件</em>~ 表示忽略以~结尾的文件<br>*.pyc 表示忽略以.pyc结尾的文件<br>！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc<br>!test.py 同上，不忽略以！开头的！test.py文件<br>foo/ 意思是忽略foo文件夹<br>**/res 表示忽略顶层和任何层次的res文件夹<br>a 表示忽略a文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-配置-初始化-常规操作&quot;&gt;&lt;a href=&quot;#1-配置-初始化-常规操作&quot; class=&quot;headerlink&quot; title=&quot;1.配置/初始化/常规操作&quot;&gt;&lt;/a&gt;1.配置/初始化/常规操作&lt;/h2&gt;&lt;p&gt;git –version&lt;br&gt;git help&lt;b
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git系列之冲突详解</title>
    <link href="http://yoursite.com/2018/06/14/git5/"/>
    <id>http://yoursite.com/2018/06/14/git5/</id>
    <published>2018-06-14T15:52:59.000Z</published>
    <updated>2019-03-14T04:52:58.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-冲突产生的原因"><a href="#1-冲突产生的原因" class="headerlink" title="1.冲突产生的原因"></a>1.冲突产生的原因</h2><p>针对某个合并操作,<strong>HEAD仓库中被修改过的部分</strong>与<strong>工作目录中将被合并的修改部分</strong>为同一代码片段,此时git不知如何取舍,便会产生冲突.</p><h2 id="2-演示冲突的产生"><a href="#2-演示冲突的产生" class="headerlink" title="2.演示冲突的产生"></a>2.演示冲突的产生</h2><p>从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。<br><img src="/2018/06/14/git5/image001.png" title="this is first image"><br>我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。<br><img src="/2018/06/14/git5/image002.png" title="this is first image"><br>此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。<br>【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是<strong>直接从暂存区取出至缓存区</strong>】<br><img src="/2018/06/14/git5/image003.png" title="this is first image"></p><h2 id="3-冲突解决的原理"><a href="#3-冲突解决的原理" class="headerlink" title="3.冲突解决的原理"></a>3.冲突解决的原理</h2><p>人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。</p><h2 id="4-演示冲突的解决"><a href="#4-演示冲突的解决" class="headerlink" title="4.演示冲突的解决"></a>4.演示冲突的解决</h2><p>冲突文件中冲突区域如下图所示。<br><img src="/2018/06/14/git5/image004.png" title="this is first image"><br>我们调整冲突后，如下图所示。<br>【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】<br><img src="/2018/06/14/git5/image005.png" title="this is first image"><br>然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。<br><img src="/2018/06/14/git5/image006.png" title="this is first image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-冲突产生的原因&quot;&gt;&lt;a href=&quot;#1-冲突产生的原因&quot; class=&quot;headerlink&quot; title=&quot;1.冲突产生的原因&quot;&gt;&lt;/a&gt;1.冲突产生的原因&lt;/h2&gt;&lt;p&gt;针对某个合并操作,&lt;strong&gt;HEAD仓库中被修改过的部分&lt;/strong&gt;与&lt;
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git系列之分支</title>
    <link href="http://yoursite.com/2018/06/14/git4/"/>
    <id>http://yoursite.com/2018/06/14/git4/</id>
    <published>2018-06-14T14:21:52.000Z</published>
    <updated>2019-03-14T04:52:58.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建本地分支并推送至github"><a href="#1-创建本地分支并推送至github" class="headerlink" title="1.创建本地分支并推送至github"></a>1.创建本地分支并推送至github</h2><p>从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。<br><img src="/2018/06/14/git4/image001.png" title="this is first image"></p><p><center><strong>图（1）</strong></center><br>推送该分支至github，并查看所有分支，如图（2）所示。<br><img src="/2018/06/14/git4/image002.png" title="this is first image"></p><p><center><strong>图（2）</strong></center></p><h2 id="2-合并分支"><a href="#2-合并分支" class="headerlink" title="2.合并分支"></a>2.合并分支</h2><p>首先切换至master分支，将test_branch分支上所做的修改合并至master分支。<br>推送合并后的提交至远程，如下图所示。<br>【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】<br>【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】<br><img src="/2018/06/14/git4/image003.png" title="this is first image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建本地分支并推送至github&quot;&gt;&lt;a href=&quot;#1-创建本地分支并推送至github&quot; class=&quot;headerlink&quot; title=&quot;1.创建本地分支并推送至github&quot;&gt;&lt;/a&gt;1.创建本地分支并推送至github&lt;/h2&gt;&lt;p&gt;从maste
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git系列之撤销</title>
    <link href="http://yoursite.com/2018/06/14/git3/"/>
    <id>http://yoursite.com/2018/06/14/git3/</id>
    <published>2018-06-14T14:05:42.000Z</published>
    <updated>2019-03-14T04:52:58.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-工作流的状态"><a href="#1-工作流的状态" class="headerlink" title="1.工作流的状态"></a>1.工作流的状态</h2><p>要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。<br><img src="/2018/06/14/git3/image001.png" title="this is first image"></p><p><center><strong>图（1）</strong></center><br>本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】<br><strong>工作区</strong>，修改文档尚未添加至版本控制<br><strong>暂存区</strong>，修改文档已添加至版本控制，但尚未提交至版本库<br><strong>版本库</strong>，修改文档提交至版本库，文档状态变化<br>远程环境只有一种状态：<br><strong>远程分支</strong>，修改文档被提交至远程代码仓库<br>【名词辨识】<br>master/branch : 分支，master为项目默认分支，也叫主分支<br>head : 本地当前版本库的指针，指向最新的提交<br>origin : 默认的远程版本库名称</p><h2 id="2-工作区撤销修改"><a href="#2-工作区撤销修改" class="headerlink" title="2.工作区撤销修改"></a>2.工作区撤销修改</h2><p>该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。<br>撤销执行命令git checkout .即可。</p><h2 id="3-暂存区撤销修改"><a href="#3-暂存区撤销修改" class="headerlink" title="3.暂存区撤销修改"></a>3.暂存区撤销修改</h2><p>该状态已添加至版本控制，即已执行git add，修改内容处于暂存区<br>撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留</p><h2 id="4-版本库撤销修改"><a href="#4-版本库撤销修改" class="headerlink" title="4.版本库撤销修改"></a>4.版本库撤销修改</h2><p>该状态已添加至版本库，即已执行git commit,修改内容处于版本库。<br>撤销命令如下：<br>git reset –hard HEAD~1    撤销提交并删除修改<br>git reset –soft HEAD~1    撤销提交并将修改恢复至<strong>暂存区</strong><br>git reset HEAD~1        撤销提交并就修改恢复至<strong>工作区</strong></p><h2 id="5-远程分支撤销修改"><a href="#5-远程分支撤销修改" class="headerlink" title="5.远程分支撤销修改"></a>5.远程分支撤销修改</h2><p>思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。<br><img src="/2018/06/14/git3/image002.png" title="this is first image"><br>也可以用–soft保持修改内容至暂存区，如下图所示。<br><img src="/2018/06/14/git3/image003.png" title="this is first image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-工作流的状态&quot;&gt;&lt;a href=&quot;#1-工作流的状态&quot; class=&quot;headerlink&quot; title=&quot;1.工作流的状态&quot;&gt;&lt;/a&gt;1.工作流的状态&lt;/h2&gt;&lt;p&gt;要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。&lt;br
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
