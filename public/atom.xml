<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LepinHeiker</title>
  
  <subtitle>吾生也有涯，而知也无涯！以有涯随无涯，殆已；已而为知者，殆而已矣。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-31T08:02:10.347Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xiaobo Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于H5+的混合app</title>
    <link href="http://yoursite.com/2019/07/31/h5plus-app/"/>
    <id>http://yoursite.com/2019/07/31/h5plus-app/</id>
    <published>2019-07-31T05:11:06.000Z</published>
    <updated>2019-07-31T08:02:10.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-技术概述"><a href="#1-技术概述" class="headerlink" title="1.技术概述"></a>1.技术概述</h2><p>基于H5+的混合app开发模式很好的将传统开发web的方式应用于开发app,是一套代码同时适用于微信内页面,web端,手机H5,甚至App,而且低技术成本的解决方案.<br>本文记录vue cli3,h5+,Native.js相结合的方式,开发app[安卓,ios]<br>参考文档:<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">vue cli3.0</a>, <a href="https://youzan.github.io/vant/#/zh-CN/intro" target="_blank" rel="noopener">Vant</a>, <a href="http://www.html5plus.org/doc/h5p.html" target="_blank" rel="noopener">H5+</a>, <a href="http://ask.dcloud.net.cn/article/88" target="_blank" rel="noopener">Native.js入门指南</a>, <a href="https://ask.dcloud.net.cn/article/114" target="_blank" rel="noopener">Native.js示例汇总</a></p><h2 id="2-要点指引"><a href="#2-要点指引" class="headerlink" title="2.要点指引"></a>2.要点指引</h2><p>(1)用vue cli3.0搭建开发web端单页面的方式,用google调试开发移动端页面<br>(2)以上项目编译后用HBuilder打开,并右键单击转换为APP项目,此时可用mac自带模拟器打开,完善应用相关配置后,可打包应用.<br>(3)调用原生的能力基于H5+(注意必须放在plusready事件回调中),且可进一步借助Native.js调用原生能力.<br>(4)关于App项目IOS模拟器的调试参考<a href="https://ask.dcloud.net.cn/article/143" target="_blank" rel="noopener">调试混合app攻略</a>,基于Safari浏览器</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><p>(1)在vue的methods方法中编写H5+移动设备代码,只能在移动设备(包括模拟器)中测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-row&gt;</span><br><span class="line">      &lt;van-col span=&quot;8&quot;&gt;</span><br><span class="line">        &lt;van-button type=&quot;info&quot; @click=&quot;testNative&quot;&gt;测试原生方法&lt;/van-button&gt;</span><br><span class="line">      &lt;/van-col&gt;</span><br><span class="line">    &lt;/van-row&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    testNative () &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        // eslint-disable-next-line</span><br><span class="line">        if (plus.os.name === &apos;Android&apos;) &#123;</span><br><span class="line">          // H5+ 方法:返回系统版本</span><br><span class="line">          // eslint-disable-next-line</span><br><span class="line">          alert(plus.os.version)</span><br><span class="line">          // eslint-disable-next-line</span><br><span class="line">        &#125; else if (plus.os.name === &apos;iOS&apos;) &#123;</span><br><span class="line">          // 调用原生IOS方法:返回设备名称</span><br><span class="line">          // eslint-disable-next-line</span><br><span class="line">          let UIDevice = plus.ios.importClass(&apos;UIDevice&apos;)</span><br><span class="line">          let currentDevice = UIDevice.currentDevice()</span><br><span class="line">          alert(currentDevice.name())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        console.log(err.toString(), &apos;---原生语法请在对应移动设备测试&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.testNative()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">@import &apos;~../../style/global.less&apos;;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-技术概述&quot;&gt;&lt;a href=&quot;#1-技术概述&quot; class=&quot;headerlink&quot; title=&quot;1.技术概述&quot;&gt;&lt;/a&gt;1.技术概述&lt;/h2&gt;&lt;p&gt;基于H5+的混合app开发模式很好的将传统开发web的方式应用于开发app,是一套代码同时适用于微信内页面,
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>postMessage异步通讯</title>
    <link href="http://yoursite.com/2019/07/17/postMessage/"/>
    <id>http://yoursite.com/2019/07/17/postMessage/</id>
    <published>2019-07-17T06:17:04.000Z</published>
    <updated>2019-07-17T06:34:38.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>web端异步消息传递机制,特别是对于跨域情况下的通讯,显得尤其重要,主要应用场景iframe和webview</p><h2 id="2-实践积累"><a href="#2-实践积累" class="headerlink" title="2.实践积累"></a>2.实践积累</h2><p>iframe形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 父页面</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;p&gt;我是父页面&lt;/p&gt;</span><br><span class="line">    &lt;button id=&quot;btn&quot;&gt;获取子页面信息&lt;/button&gt;</span><br><span class="line">    &lt;iframe id=&quot;mapIframe&quot; height=&quot;850px&quot; width=&quot;1500px&quot; src=&quot;http://fp1.xys.gov.cn/map/index.html#/map&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // 触发事件</span><br><span class="line">      document.getElementById(&apos;btn&apos;).addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">        document.getElementById(&apos;mapIframe&apos;).contentWindow.postMessage(JSON.stringify(&#123; data: &apos;getLocation&apos; &#125;), &apos;*&apos;)</span><br><span class="line">      &#125;)</span><br><span class="line">      // 父页面监听事件</span><br><span class="line">      window.addEventListener(&apos;message&apos;,function(event) &#123;</span><br><span class="line">        console.log(JSON.parse(event.data), &apos;--父页面监听数据&apos;)</span><br><span class="line">      &#125;,false)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">// 子页面监听</span><br><span class="line">      window.addEventListener(&apos;message&apos;, function (event) &#123;</span><br><span class="line">        if (typeof (event.data) === &apos;string&apos;) &#123;</span><br><span class="line">          console.log(JSON.parse(event.data), &apos;--子页面接收的数据&apos;)</span><br><span class="line">          // 向父窗口发送事件</span><br><span class="line">          if (window.parent &amp;&amp; window.postMessage) &#123;</span><br><span class="line">            // let message = &#123; loadFinish: true &#125;</span><br><span class="line">            window.parent.postMessage(JSON.stringify(&#123; data: &apos;success&apos; &#125;), &apos;*&apos;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, false)</span><br></pre></td></tr></table></figure></p><p>webview形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// RN项目父页面</span><br><span class="line">import &#123; WebView &#125; from &apos;react-native-webview&apos;</span><br><span class="line">&lt;View style=&#123;&#123; flex: 1 &#125;&#125;&gt;</span><br><span class="line">        &lt;WebView</span><br><span class="line">          ref=&#123;ref =&gt; (this.webView = ref)&#125;</span><br><span class="line">          source=&#123;webviewUrl&#125;</span><br><span class="line">          startInLoadingState=&#123;true&#125;</span><br><span class="line">          renderLoading=&#123;() =&gt; &lt;Loading active /&gt;&#125;</span><br><span class="line">          javaScriptEnabled=&#123;true&#125;</span><br><span class="line">          domStorageEnabled=&#123;true&#125;</span><br><span class="line">          useWebKit=&#123;true&#125;</span><br><span class="line">          automaticallyAdjustContentInsets=&#123;false&#125;</span><br><span class="line">          onLoadEnd=&#123;this.onLoadEnd&#125;</span><br><span class="line">          onLoadStart=&#123;this.onLoadStart&#125;</span><br><span class="line">          obLoadEnd=&#123;this.onLoadEnd&#125;</span><br><span class="line">          onError=&#123;this.onLoadError&#125;</span><br><span class="line">          onMessage=&#123;this.onMessage&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line"></span><br><span class="line">   onLoadEnd = () =&gt; &#123;</span><br><span class="line">    this.webView.postMessage(JSON.stringify(&#123;data:&apos;hi&apos;&#125;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    onMessage = event =&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      let &#123; loadFinish &#125; = JSON.parse(event.nativeEvent.data)</span><br><span class="line">    &#125; catch (error) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">// web端子页面</span><br><span class="line">window.onload = () =&gt; &#123;</span><br><span class="line">  document.addEventListener(&apos;message&apos;, (&#123; data &#125;) =&gt; &#123;</span><br><span class="line">    const msg = JSON.parse(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  // 消息回传给rn端</span><br><span class="line">  if (window.postMessage) &#123;</span><br><span class="line">            let message = &#123; loadFinish: true &#125;;</span><br><span class="line">            window.postMessage(JSON.stringify(message));</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;web端异步消息传递机制,特别是对于跨域情况下的通讯,显得尤其重要,主要应用场景iframe和webview
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript和vue的完美整合</title>
    <link href="http://yoursite.com/2019/07/13/ts-vue/"/>
    <id>http://yoursite.com/2019/07/13/ts-vue/</id>
    <published>2019-07-13T08:03:54.000Z</published>
    <updated>2019-07-13T09:31:40.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>新技术架构的实践笔记<br>参考：<a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener">typescript教程</a>,<a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a>,<a href="https://github.com/kaorun343/vue-property-decorator" target="_blank" rel="noopener">vue-property-decorator</a>,<a href="https://juejin.im/post/5c173a84f265da610e7ffe44" target="_blank" rel="noopener">vue-property-decorator使用指南</a>,<a href="https://github.com/Microsoft/TypeScript-Vue-Starter#typescript-vue-starter" target="_blank" rel="noopener">typescript与vue的结合</a></p><h2 id="2-细节梳理"><a href="#2-细节梳理" class="headerlink" title="2.细节梳理"></a>2.细节梳理</h2><h3 id="2-1重新认知文件后缀"><a href="#2-1重新认知文件后缀" class="headerlink" title="2.1重新认知文件后缀"></a>2.1重新认知文件后缀</h3><p>.html文件中可以直接写<script></script>代码，然后用浏览器打开<br>.js文件可以用命令行中node test.js运行<br>.ts是js类型的超级，添加了类型检测等特性。可以在命令行中全局安装typescript，并编译tsc test.ts<br>jsx是一种嵌入式语法，可被转换成合法的JavaScript<br>.tsx是可支持jsx语法的ts文件<br>总结：ts,jsx，以及tsx都可转换为js</p><h3 id="2-2认识vue-class-component和vue-property-decorator"><a href="#2-2认识vue-class-component和vue-property-decorator" class="headerlink" title="2.2认识vue-class-component和vue-property-decorator"></a>2.2认识vue-class-component和vue-property-decorator</h3><p>为了适应typescript引入vue带来的变化，特意发展了这两个库对vue语法进一步做了包装，这就是两个语法糖。<br>vue-class-component定义了基本以class形式的书写方式，vue-property-decorator在前者基础上定义了更多的声明式语法糖</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;新技术架构的实践笔记&lt;br&gt;参考：&lt;a href=&quot;https://www.tslang.cn/docs/h
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>util工具方法</title>
    <link href="http://yoursite.com/2019/07/08/util/"/>
    <id>http://yoursite.com/2019/07/08/util/</id>
    <published>2019-07-08T06:09:03.000Z</published>
    <updated>2019-07-19T08:30:51.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>收集整理常用实现,积累总结经验</p><h2 id="2-实践积累"><a href="#2-实践积累" class="headerlink" title="2.实践积累"></a>2.实践积累</h2><h3 id="2-1对象结构循环"><a href="#2-1对象结构循环" class="headerlink" title="2.1对象结构循环"></a>2.1对象结构循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// JS形式</span><br><span class="line">for(let key in obj)&#123;</span><br><span class="line">console.log(key);</span><br><span class="line">console.log(obj[key]);</span><br><span class="line">&#125;</span><br><span class="line">// JSX形式</span><br><span class="line">&#123;Object.keys(obj).map((key, index) =&gt; (</span><br><span class="line">     &lt;ListItem key=&#123;`obj$&#123;index&#125;`&#125; text=&#123;key&#125; extra=&#123;obj[key]&#125;/&gt;</span><br><span class="line">))&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2模拟数据与接口数据转换-装饰者模式应用"><a href="#2-2模拟数据与接口数据转换-装饰者模式应用" class="headerlink" title="2.2模拟数据与接口数据转换[装饰者模式应用]"></a>2.2模拟数据与接口数据转换[装饰者模式应用]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 写在具体逻辑模块中</span><br><span class="line">transData(data)&#123;</span><br><span class="line">let &#123;userName1: name, userAge1: age&#125; = data</span><br><span class="line">let oInfo = &#123;name, age&#125;</span><br><span class="line">return oInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3动态创建数组"><a href="#2-3动态创建数组" class="headerlink" title="2.3动态创建数组"></a>2.3动态创建数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 简单数组</span><br><span class="line">[1,2,3]</span><br><span class="line">// 复杂重复数组</span><br><span class="line">new Array(8).fill(&#123;name: &apos;xiaoming&apos;, age: 12&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;收集整理常用实现,积累总结经验&lt;/p&gt;
&lt;h2 id=&quot;2-实践积累&quot;&gt;&lt;a href=&quot;#2-实践积累&quot; 
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>react概述</title>
    <link href="http://yoursite.com/2019/06/30/react/"/>
    <id>http://yoursite.com/2019/06/30/react/</id>
    <published>2019-06-30T00:53:51.000Z</published>
    <updated>2019-07-08T01:25:27.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>仔细阅读了React官方教程，对易疏忽的地方做个笔记，便于知识的整体梳理和消化<br>参考网址：<a href="https://zh-hans.reactjs.org/docs/hello-world.html" target="_blank" rel="noopener">React逐步学习指南</a>,<a href="https://zh-hans.reactjs.org/tutorial/tutorial.html" target="_blank" rel="noopener">React实践教程</a></p><h2 id="2-文档内容"><a href="#2-文档内容" class="headerlink" title="2.文档内容"></a>2.文档内容</h2><h3 id="2-1整体认知"><a href="#2-1整体认知" class="headerlink" title="2.1整体认知"></a>2.1整体认知</h3><p>React 是一个用于构建用户界面的 JavaScript 库，<br>以组件为最小单元，<br>以JSX为语法基础，<br>以单向（自上而下）数据流props维护组件关系<br>以私有state控制组件渲染和数据更新</p><h3 id="2-2安装或引入React"><a href="#2-2安装或引入React" class="headerlink" title="2.2安装或引入React"></a>2.2安装或引入React</h3><p>推荐的工具链方式：<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a><br>script标记引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 加载 React。--&gt;</span><br><span class="line"> &lt;!-- 注意: 部署时，将 &quot;development.js&quot; 替换为 &quot;production.min.js&quot;。--&gt;</span><br><span class="line"> &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 加载我们的 React 组件。--&gt;</span><br><span class="line"> &lt;script src=&quot;like_button.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2-2组件的实现方式"><a href="#2-2组件的实现方式" class="headerlink" title="2.2组件的实现方式"></a>2.2组件的实现方式</h3><p>组件有函数实现方式和class实现方式两种。<br>函数组件基本结构（无受控state）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Welcome(props) &#123;</span><br><span class="line">  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>class组件基本结构(可以有受控state)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Welcome extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;info: null&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;h1&gt;Hello, &#123;this.props.name&#125;, &#123;this.state.info&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3JSX语法"><a href="#2-3JSX语法" class="headerlink" title="2.3JSX语法"></a>2.3JSX语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">class Welcome extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    // 私有变量且受控</span><br><span class="line">    this.state = &#123;isShow: null, listData: null&#125;;</span><br><span class="line">    // 私有变量且非受控</span><br><span class="line">    this.title = null</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 函数用表达式形式的箭头函数，保证了this引用的正确，若非如此，则需要在constructor中显示bind(this)</span><br><span class="line">  _renderNode = () =&gt; &#123;</span><br><span class="line">      // JSX作为表达式当然可以使其等于一个变量</span><br><span class="line">      const nodeElement = &lt;Text&gt;Hello&lt;/Text&gt;</span><br><span class="line">      return (</span><br><span class="line">          &lt;View&gt;</span><br><span class="line">            // JSX中&#123;&#125;中可以是任何表达式，包括变量</span><br><span class="line">            &lt;Text&gt;问候语：&#123;nodeElement&#125;&lt;/Text&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _renderList = () =&gt; &#123;</span><br><span class="line">       let &#123;listData&#125; = this.state</span><br><span class="line">       return (</span><br><span class="line">           &lt;View&gt;</span><br><span class="line">                // JSX中循环结构可直接用map表达式，注意绑定key(尽量不直接用index)</span><br><span class="line">                &#123;listData.map(item =&gt;(&lt;View key=&#123;item.id&#125;&gt;</span><br><span class="line">                    &lt;Text&gt;&#123;item.name&#125;&lt;/Text&gt;</span><br><span class="line">                &lt;/View&gt;))&#125;</span><br><span class="line">           &lt;/View&gt;</span><br><span class="line">       )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    // 公有入参属性</span><br><span class="line">    let &#123;id&#125; = this.props</span><br><span class="line">    let &#123;isShow, listData&#125; = this.state</span><br><span class="line"></span><br><span class="line">    // JSX表达式可以作为函数的返回值(同样可以作为函数入参等任何变量/表达式可以在的地方)</span><br><span class="line">    return (</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">            // JSX中&#123;&#125;中可以是任何表达式，包括函数</span><br><span class="line">            &#123;this._renderNode()&#125;</span><br><span class="line">            // 一个表达式，只能是一个整体，不能是多个语句</span><br><span class="line">            // 选择结构，在JSX中直接用三元表达式</span><br><span class="line">            &#123;isShow ? &lt;View&gt;&lt;Text&gt;是&lt;/Text&gt;&lt;/View&gt; : &lt;View&gt;&lt;Text&gt;否&lt;/Text&gt;&lt;/View&gt;&#125;</span><br><span class="line">            // 布尔结构，在JSX中直接用&amp;&amp;运算符</span><br><span class="line">            &#123;listData &amp;&amp; this._renderList()&#125;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>1.JSX本身是个表达式，可以赋值给一个变量。即变量可以在的位置JSX表达式也可以。<br>2.JSX中可以用{}处理表达式(表达式的形式可以是一个变量，&amp;&amp;运算符，三元运算符，map()运算符，函数等形式)</p><h3 id="2-4其他要点"><a href="#2-4其他要点" class="headerlink" title="2.4其他要点"></a>2.4其他要点</h3><p>1.props和state都可以由生命周期控制<br>2.受控表单统一用value和onChange处理,多个表单项共用处理函数需要提供不同name值，且受控表单便于在处理函数中做校验<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;name1&quot; value=&#123;this.state.value1&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;name2&quot; value=&#123;this.state.value2&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="line"></span><br><span class="line"> handleChange(event) &#123;</span><br><span class="line">    const target = event.target;</span><br><span class="line">    const value = target.value;</span><br><span class="line">    const name = target.name;</span><br><span class="line"></span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      [name]: value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>若是同一个对象不同属性的绑定，则只需要设置setState中不同属性即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; value=&#123;this.state.oInfo.value1&#125; onChange=&#123;value1 =&gt; this.setState(&#123;oInfo: &#123;...oInfo, value1&#125;&#125;)&#125; /&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; value=&#123;this.state.oInfo.value2&#125; onChange=&#123;value2 =&gt; this.setState(&#123;oInfo: &#123;...oInfo, value2&#125;&#125;)&#125; /&gt;</span><br></pre></td></tr></table></figure></p><p>3.基于React构建页面的步骤：<br>第一步：将设计好的 UI 划分为组件层级<br>第二步：用 React 创建一个静态版本(仅用props)<br>第三步：确定 UI state 的最小（且完整）表示<br>第四步：确定 state 放置的位置（若多个组件共用state，则放置在它们最近的共同组件中）<br>第五步：添加反向数据流等其他数据逻辑</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;仔细阅读了React官方教程，对易疏忽的地方做个笔记，便于知识的整体梳理和消化&lt;br&gt;参考网址：&lt;a hre
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>基于React Native的android原生代码实现</title>
    <link href="http://yoursite.com/2019/06/30/native/"/>
    <id>http://yoursite.com/2019/06/30/native/</id>
    <published>2019-06-29T23:55:15.000Z</published>
    <updated>2019-07-08T01:25:27.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>React Native可以在其基础上直接调用原生代码，本文仅举一个简单的例子，更多内容需要多多实践<br>参考网址：<a href="https://reactnative.cn/docs/native-modules-android/" target="_blank" rel="noopener">RN中Android原生模块</a></p><h2 id="2-实例实践"><a href="#2-实例实践" class="headerlink" title="2.实例实践"></a>2.实例实践</h2><h3 id="2-1原生组件展示"><a href="#2-1原生组件展示" class="headerlink" title="2.1原生组件展示"></a>2.1原生组件展示</h3><p>假设我们希望可以从 RN 调用原生代码实现的一个 Toast 消息{ToastExample.show(‘Awesome’, ToastExample.SHORT);}，代码如下：<br>创建android/app/src/main/java/com/{your-app-name}/ToastModule.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.&#123;your-app-name&#125;;</span><br><span class="line"></span><br><span class="line">import android.widget.Toast;</span><br><span class="line">import com.facebook.react.bridge.NativeModule;</span><br><span class="line">import com.facebook.react.bridge.ReactApplicationContext;</span><br><span class="line">import com.facebook.react.bridge.ReactContext;</span><br><span class="line">import com.facebook.react.bridge.ReactContextBaseJavaModule;</span><br><span class="line">import com.facebook.react.bridge.ReactMethod;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">// 要求继承ReactContextBaseJavaModule</span><br><span class="line">public class ToastModule extends ReactContextBaseJavaModule &#123;</span><br><span class="line"></span><br><span class="line">  private static final String DURATION_SHORT_KEY = &quot;SHORT&quot;;</span><br><span class="line">  private static final String DURATION_LONG_KEY = &quot;LONG&quot;;</span><br><span class="line"></span><br><span class="line">  public ToastModule(ReactApplicationContext reactContext) &#123;</span><br><span class="line">    super(reactContext);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // ReactContextBaseJavaModule要求派生类实现getName方法,假如该方法返回‘ToastExample’，则RN通过NativeModules.ToastExample访问该模块</span><br><span class="line">   @Override</span><br><span class="line">  public String getName() &#123;</span><br><span class="line">    return &quot;ToastExample&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // getContants返回一些可以被RN同步访问的预定于的常量</span><br><span class="line">   @Override</span><br><span class="line">  public Map&lt;String, Object&gt; getConstants() &#123;</span><br><span class="line">    final Map&lt;String, Object&gt; constants = new HashMap&lt;&gt;();</span><br><span class="line">    constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);</span><br><span class="line">    constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);</span><br><span class="line">    return constants;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // RN访问java是异步的，只能通过回调或监听，这里返回必须使用@ReactMethod注解</span><br><span class="line">  @ReactMethod</span><br><span class="line">  public void show(String message, int duration) &#123;</span><br><span class="line">    Toast.makeText(getReactApplicationContext(), message, duration).show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 注册模块，创建android/app/src/main/java/com/{your-app-name}/CustomToastPackage.java<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.&#123;your-app-name&#125;;</span><br><span class="line"></span><br><span class="line">import com.facebook.react.ReactPackage;</span><br><span class="line">import com.facebook.react.bridge.NativeModule;</span><br><span class="line">import com.facebook.react.bridge.ReactApplicationContext;</span><br><span class="line">import com.facebook.react.uimanager.ViewManager;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class CustomToastPackage implements ReactPackage &#123;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</span><br><span class="line">    return Collections.emptyList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123;</span><br><span class="line">    List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    modules.add(new ToastModule(reactContext));</span><br><span class="line"></span><br><span class="line">    return modules;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 这个模块需要在MainApplication.java文件的getPackages方法中暴露给RN,具体路径是android/app/src/main/java/com/your-app-name/MainApplication.java<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> // MainApplication.java</span><br><span class="line">...</span><br><span class="line">import com.your-app-name.CustomToastPackage; // &lt;-- 引入你自己的包</span><br><span class="line">...</span><br><span class="line">protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class="line">    return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">            new MainReactPackage(),</span><br><span class="line">            new CustomToastPackage()); // &lt;-- 添加这一行，类名替换成你的Package类的名字.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 在RN端使用的代码,建议将原生模块提供的模块都统一管理<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NativeModules &#125; from &quot;react-native&quot;;</span><br><span class="line"></span><br><span class="line">let &#123;ToastExample&#125; = NativeModules</span><br><span class="line"></span><br><span class="line">export &#123;ToastExample&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="2-2回调返回计算值"><a href="#2-2回调返回计算值" class="headerlink" title="2.2回调返回计算值"></a>2.2回调返回计算值</h3><p>回调函数模式提供一个函数来把返回值传回给 JavaScript<br>在JAVA端定义函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import com.facebook.react.bridge.Callback;</span><br><span class="line"></span><br><span class="line">public class UIManagerModule extends ReactContextBaseJavaModule &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  @ReactMethod</span><br><span class="line">  public void measureLayout(</span><br><span class="line">      int tag,</span><br><span class="line">      int ancestorTag,</span><br><span class="line">      Callback errorCallback,</span><br><span class="line">      Callback successCallback) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      measureLayout(tag, ancestorTag, mMeasureBuffer);</span><br><span class="line">      float relativeX = PixelUtil.toDIPFromPixel(mMeasureBuffer[0]);</span><br><span class="line">      float relativeY = PixelUtil.toDIPFromPixel(mMeasureBuffer[1]);</span><br><span class="line">      float width = PixelUtil.toDIPFromPixel(mMeasureBuffer[2]);</span><br><span class="line">      float height = PixelUtil.toDIPFromPixel(mMeasureBuffer[3]);</span><br><span class="line">      successCallback.invoke(relativeX, relativeY, width, height);</span><br><span class="line">    &#125; catch (IllegalViewOperationException e) &#123;</span><br><span class="line">      errorCallback.invoke(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>在RN端调用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">UIManager.measureLayout(</span><br><span class="line">  100,</span><br><span class="line">  100,</span><br><span class="line">  msg =&gt; &#123;</span><br><span class="line">    console.log(msg);</span><br><span class="line">  &#125;,</span><br><span class="line">  (x, y, width, height) =&gt; &#123;</span><br><span class="line">    console.log(x + &quot;:&quot; + y + &quot;:&quot; + width + &quot;:&quot; + height);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>还有监听模式，Promises模式等更多功能实践，请参考官网…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;React Native可以在其基础上直接调用原生代码，本文仅举一个简单的例子，更多内容需要多多实践&lt;br&gt;
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>设计模式解读</title>
    <link href="http://yoursite.com/2019/06/15/design/"/>
    <id>http://yoursite.com/2019/06/15/design/</id>
    <published>2019-06-15T07:35:34.000Z</published>
    <updated>2019-09-15T05:51:52.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>设计模式的意义在于:最佳实践提高代码重用，易于理解和维护<br>参考网址：<a href="https://www.w3cschool.cn/deep_learn_javascript/deep_learn_javascript-ljp4285i.html" target="_blank" rel="noopener">w3c设计模式</a></p><h2 id="2-设计原则"><a href="#2-设计原则" class="headerlink" title="2.设计原则"></a>2.设计原则</h2><h3 id="2-1单一职责原则SRP"><a href="#2-1单一职责原则SRP" class="headerlink" title="2.1单一职责原则SRP"></a>2.1单一职责原则SRP</h3><p>属性及其相关操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *function: 产品添加到购物车</span><br><span class="line"> *前提认知：对象(属性及其对属性的操作)</span><br><span class="line"> *分析：产品(对象[id，desc])----添加到【事件驱动】---&gt;购物车(对象[被添加产品的集合，添加商品的func])</span><br><span class="line"> *添加行为分析：</span><br><span class="line"> * 首先得到若干产品实体，得到一个购物车实体</span><br><span class="line"> * 实体列表渲染在页面上，通过点击触发‘产品添加到购物车’的行为</span><br><span class="line"> * 思考：如何解耦业务？MVC思想：model实体，view展示，contralter控制器</span><br><span class="line"> *   进一步抽象：将公共行为抽象，统一方式触发</span><br><span class="line"> */</span><br><span class="line">function Event (name) &#123;</span><br><span class="line">  var handlers = []</span><br><span class="line"></span><br><span class="line">  this.getName = function () &#123;</span><br><span class="line">    return name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.addHandler = function (handler) &#123;</span><br><span class="line">    handlers.push(handler)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.removeHandler = function (handler) &#123;</span><br><span class="line">    for (var i = 0; i &lt; handlers.length; i++) &#123;</span><br><span class="line">      if (handlers[i] == handler) &#123;</span><br><span class="line">        handlers.splice(i, 1)</span><br><span class="line">        break</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.fire = function (eventArgs) &#123;</span><br><span class="line">    handlers.forEach(function (h) &#123;</span><br><span class="line">      h(eventArgs)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function EventAggregator () &#123;</span><br><span class="line">  var events = []</span><br><span class="line"></span><br><span class="line">  function getEvent (eventName) &#123;</span><br><span class="line">    return $.grep(events, function (event) &#123;</span><br><span class="line">      return event.getName() === eventName</span><br><span class="line">    &#125;)[0]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.publish = function (eventName, eventArgs) &#123;</span><br><span class="line">    var event = getEvent(eventName)</span><br><span class="line"></span><br><span class="line">    if (!event) &#123;</span><br><span class="line">      event = new Event(eventName)</span><br><span class="line">      events.push(event)</span><br><span class="line">    &#125;</span><br><span class="line">    event.fire(eventArgs)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this.subscribe = function (eventName, handler) &#123;</span><br><span class="line">    var event = getEvent(eventName)</span><br><span class="line"></span><br><span class="line">    if (!event) &#123;</span><br><span class="line">      event = new Event(eventName)</span><br><span class="line">      events.push(event)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event.addHandler(handler)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Product (id, description) &#123;</span><br><span class="line">  this.getId = function () &#123;</span><br><span class="line">    return id</span><br><span class="line">  &#125;</span><br><span class="line">  this.getDescription = function () &#123;</span><br><span class="line">    return description</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Cart (eventAggregator) &#123;</span><br><span class="line">  var items = []</span><br><span class="line"></span><br><span class="line">  this.addItem = function (item) &#123;</span><br><span class="line">    items.push(item)</span><br><span class="line">    // 这个操作，购物车添加产品的时候触发相关操作（由控制器处理）</span><br><span class="line">    eventAggregator.publish(&apos;itemAdded&apos;, item)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function CartController (cart, eventAggregator) &#123;</span><br><span class="line">  // 控制器监听</span><br><span class="line">  eventAggregator.subscribe(&apos;itemAdded&apos;, function (eventArgs) &#123;</span><br><span class="line">    var newItem = $(&apos;&lt;li&gt;&lt;/li&gt;&apos;)</span><br><span class="line">      .html(eventArgs.getDescription())</span><br><span class="line">      .attr(&apos;id-cart&apos;, eventArgs.getId())</span><br><span class="line">      .appendTo(&apos;#cart&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  eventAggregator.subscribe(&apos;productSelected&apos;, function (eventArgs) &#123;</span><br><span class="line">    cart.addItem(eventArgs.product)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 封装Model层，产品实体的获得可以通过任何形式，请求等</span><br><span class="line">function ProductRepository () &#123;</span><br><span class="line">  var products = [new Product(1, &apos;Star Wars Lego Ship&apos;), new Product(2, &apos;Barbie Doll&apos;), new Product(3, &apos;Remote Control Airplane&apos;)]</span><br><span class="line"></span><br><span class="line">  this.getProducts = function () &#123;</span><br><span class="line">    return products</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 封装产品控制器，拿到产品并对产品操作(生成产品节点，并绑定事件)</span><br><span class="line">function ProductController (eventAggregator, productRepository) &#123;</span><br><span class="line">  var products = productRepository.getProducts()</span><br><span class="line"></span><br><span class="line">  function onProductSelected () &#123;</span><br><span class="line">    var productId = $(this).attr(&apos;id&apos;)</span><br><span class="line">    var product = $.grep(products, function (x) &#123;</span><br><span class="line">      return x.getId() == productId</span><br><span class="line">    &#125;)[0]</span><br><span class="line">    // 触发事件【同一类的事情，用同一类方式，对行为的封装】</span><br><span class="line">    eventAggregator.publish(&apos;productSelected&apos;, &#123;</span><br><span class="line">      product: product</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  products.forEach(function (product) &#123;</span><br><span class="line">    var newItem = $(&apos;&lt;li&gt;&lt;/li&gt;&apos;)</span><br><span class="line">      .html(product.getDescription())</span><br><span class="line">      .attr(&apos;id&apos;, product.getId())</span><br><span class="line">      .dblclick(onProductSelected)</span><br><span class="line">      .appendTo(&apos;#products&apos;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 最外层执行，只是一系列的声明，逻辑就隐藏在内部</span><br><span class="line">;(function () &#123;</span><br><span class="line">  var eventAggregator = new EventAggregator()</span><br><span class="line">  var cart = new Cart(eventAggregator)</span><br><span class="line">  var cartController = new CartController(cart, eventAggregator)</span><br><span class="line">  var productRepository = new ProductRepository()</span><br><span class="line">  var productController = new ProductController(eventAggregator, productRepository)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h3 id="2-2最少知道原则"><a href="#2-2最少知道原则" class="headerlink" title="2.2最少知道原则"></a>2.2最少知道原则</h3><p>一个实体应当尽量少地与其他实体之间发生相互作用，强调降低耦合</p><h3 id="2-3接口隔离原则"><a href="#2-3接口隔离原则" class="headerlink" title="2.3接口隔离原则"></a>2.3接口隔离原则</h3><p>使用多个隔离的接口，比使用单个接口要好，强调降低耦合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var exampleBinder = &#123;&#125;</span><br><span class="line">exampleBinder.modelObserver = (function () &#123;</span><br><span class="line">  ;/ 私有变量 /</span><br><span class="line">  return &#123;</span><br><span class="line">    observe: function (model) &#123;</span><br><span class="line">      ;/ 代码 /</span><br><span class="line">      return newModel</span><br><span class="line">    &#125;,</span><br><span class="line">    onChange: function (callback) &#123;</span><br><span class="line">      ;/ 代码 /</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">exampleBinder.viewAdaptor = (function () &#123;</span><br><span class="line">  ;/ 私有变量 /</span><br><span class="line">  return &#123;</span><br><span class="line">    bind: function (model) &#123;</span><br><span class="line">      ;/ 代码 /</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">exampleBinder.bind = function (model) &#123;</span><br><span class="line">  ;/ 私有变量 /</span><br><span class="line">  exampleBinder.modelObserver.onChange(/ 回调callback /)</span><br><span class="line">  var om = exampleBinder.modelObserver.observe(model)</span><br><span class="line">  exampleBinder.viewAdaptor.bind(om)</span><br><span class="line">  return om</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-4开闭原则"><a href="#2-4开闭原则" class="headerlink" title="2.4开闭原则"></a>2.4开闭原则</h3><p>对扩展开放，对修改关闭<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">function questionCreator (spec, my) &#123;</span><br><span class="line">  var that = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  my = my || &#123;&#125;</span><br><span class="line">  my.label = spec.label</span><br><span class="line"></span><br><span class="line">  my.renderInput = function () &#123;</span><br><span class="line">    throw &apos;not implemented&apos;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  that.render = function (target) &#123;</span><br><span class="line">    var questionWrapper = document.createElement(&apos;div&apos;)</span><br><span class="line">    questionWrapper.className = &apos;question&apos;</span><br><span class="line"></span><br><span class="line">    var questionLabel = document.createElement(&apos;div&apos;)</span><br><span class="line">    questionLabel.className = &apos;question-label&apos;</span><br><span class="line">    var label = document.createTextNode(spec.label)</span><br><span class="line">    questionLabel.appendChild(label)</span><br><span class="line"></span><br><span class="line">    var answer = my.renderInput()</span><br><span class="line"></span><br><span class="line">    questionWrapper.appendChild(questionLabel)</span><br><span class="line">    questionWrapper.appendChild(answer)</span><br><span class="line">    return questionWrapper</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return that</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function choiceQuestionCreator (spec) &#123;</span><br><span class="line">  var my = &#123;&#125;</span><br><span class="line">  var that = questionCreator(spec, my)</span><br><span class="line"></span><br><span class="line">  my.renderInput = function () &#123;</span><br><span class="line">    var input = document.createElement(&apos;select&apos;)</span><br><span class="line">    var len = spec.choices.length</span><br><span class="line">    for (var i = 0; i &lt; len; i++) &#123;</span><br><span class="line">      var option = document.createElement(&apos;option&apos;)</span><br><span class="line">      option.text = spec.choices[i]</span><br><span class="line">      option.value = spec.choices[i]</span><br><span class="line">      input.appendChild(option)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return input</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return that</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function inputQuestionCreator (spec) &#123;</span><br><span class="line">  var my = &#123;&#125;</span><br><span class="line">  var that = questionCreator(spec, my)</span><br><span class="line"></span><br><span class="line">  my.renderInput = function () &#123;</span><br><span class="line">    var input = document.createElement(&apos;input&apos;)</span><br><span class="line">    input.type = &apos;text&apos;</span><br><span class="line">    return input</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return that</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var view = &#123;</span><br><span class="line">  render: function (target, questions) &#123;</span><br><span class="line">    for (var i = 0; i &lt; questions.length; i++) &#123;</span><br><span class="line">      target.appendChild(questions[i].render())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var questions = [</span><br><span class="line">  choiceQuestionCreator(&#123;</span><br><span class="line">    label: &apos;Have you used tobacco products within the last 30 days?&apos;,</span><br><span class="line">    choices: [&apos;Yes&apos;, &apos;No&apos;]</span><br><span class="line">  &#125;),</span><br><span class="line">  inputQuestionCreator(&#123;</span><br><span class="line">    label: &apos;What medications are you currently using?&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">var questionRegion = document.getElementById(&apos;questions&apos;)</span><br><span class="line"></span><br><span class="line">view.render(questionRegion, questions)</span><br></pre></td></tr></table></figure></p><h3 id="2-5里氏代换原则"><a href="#2-5里氏代换原则" class="headerlink" title="2.5里氏代换原则"></a>2.5里氏代换原则</h3><p>任何基类可以出现的地方，子类一定可以出现</p><h3 id="2-6依赖倒转原则"><a href="#2-6依赖倒转原则" class="headerlink" title="2.6依赖倒转原则"></a>2.6依赖倒转原则</h3><p>依赖于抽象而不依赖于具体</p><h3 id="2-7合成复用原则"><a href="#2-7合成复用原则" class="headerlink" title="2.7合成复用原则"></a>2.7合成复用原则</h3><p>尽量组合，而非继承</p><h2 id="3-设计模式分类"><a href="#3-设计模式分类" class="headerlink" title="3.设计模式分类"></a>3.设计模式分类</h2><h3 id="3-1创建型模式"><a href="#3-1创建型模式" class="headerlink" title="3.1创建型模式"></a>3.1创建型模式</h3><p>用于创建对象<br><strong>构造函数模式</strong>：模拟类，用于创建特定类型（类）的对象<br><strong>原型模式</strong>：通过拷贝原型创建新对象，比如js里的prototype<br><strong>单例模式</strong>：在某空间提供唯一的访问点，保证一个类只有一个实例<br><strong>工厂模式</strong>：定义一个用于创建对象的接口，由子类决定实例化哪个类（厂长负责实施子类发出的任务）<br><strong>建造者模式</strong>：使同样的构建过程（eg:回调机制）可以创建不同的表示，而不用关注细节（回调的实现原理）<br><strong>模板方法</strong>：定义操作的算法的骨架（抽象类），而将步骤实现延迟到子类中（子类重写父类方法）</p><h3 id="3-2结构型模式"><a href="#3-2结构型模式" class="headerlink" title="3.2结构型模式"></a>3.2结构型模式</h3><p>组合继承获得新功能<br><strong>组合模式</strong>：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。（eg:Dom都有增删改子节点的通用功能）<br><strong>桥接模式</strong>: 若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系<br><strong>代理模式</strong>：为其他对象提供一种代理以控制对这个对象的访问（eg：大叔代替小明送给女孩儿鲜花）<br><strong>适配器模式</strong>：将一个类（对象）的接口（方法或属性）转化成客户希望的另外一个接口（比如：电脑充电器）<br><strong>外观模式</strong>：为一组接口提供一个高层接口，使得接口更容易使用<br><strong>装饰者模式</strong>：包装同接口的对象，通过重载方法的形式添加新功能（调用原始对象方法并扩展）</p><h3 id="3-3行为型模式"><a href="#3-3行为型模式" class="headerlink" title="3.3行为型模式"></a>3.3行为型模式</h3><p>对象通信<br><strong>中介者模式</strong>：比如多架飞机的通讯都是通过中控系统进行<br><strong>观察者模式</strong>：发布订阅模式<br><strong>策略模式</strong>：算法的相互替换不会影响到使用算法的客户<br><strong>命令模式</strong>：用于将一个请求方法封装成一个对象（参数不同，命令不同）<br><strong>职责链模式</strong>：使多个对象都有机会处理请求<br><strong>迭代器模式</strong>：为遍历不同的集合结构提供一个统一的接口</p><h2 id="4-实例研读"><a href="#4-实例研读" class="headerlink" title="4.实例研读"></a>4.实例研读</h2><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>构造函数模式：用于创建特定类型（类）的对象[可接收参数以便第一次创建对象时设置成员值]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 注：这里将属性和方法都写在构造函数中，那么每个新的实例都会不同，若需共享，应绑定至prototype</span><br><span class="line">function Animal(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">//注意：这里我们使用了Object.prototype.方法名，而不是Object.prototype</span><br><span class="line">//主要是用来避免重写定义原型prototype对象</span><br><span class="line">Animal.prototype.getName= function () &#123;</span><br><span class="line">    return &apos;该动物的名称&apos; + this.name</span><br><span class="line">&#125;;</span><br><span class="line">var animal = new Animal(&quot;老虎&quot;);</span><br><span class="line">console.log(animal.getName());</span><br></pre></td></tr></table></figure></p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>通过拷贝原型创建新对象[在上面构造函数的基础上利用原型模式实现继承]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Cat()&#123;&#125;</span><br><span class="line">// 拷贝继承</span><br><span class="line">Cat.prototype = Animal.prototype;</span><br><span class="line">// 恢复constructor</span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line">// 实例化</span><br><span class="line">var cat = new Cat(&quot;花小猫&quot;);</span><br><span class="line">console.log(cat.getName()) // 花小猫</span><br></pre></td></tr></table></figure></p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式：保证一个类只有一个实例<br>实现的方法是先判断实例是否存在，若存在则直接返回，否则再创建<br>用途：单例作为命名空间提供者，保证在某空间中提供一个唯一的访问点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var SingletonTester = (function () &#123;</span><br><span class="line">    //参数：传递给单例的一个参数集合</span><br><span class="line">    function Singleton(args) &#123;</span><br><span class="line">        //设置args变量为接收的参数或者为空（如果没有提供的话）</span><br><span class="line">        var args = args || &#123;&#125;;</span><br><span class="line">        //设置name参数</span><br><span class="line">        this.name = &apos;SingletonTester&apos;;</span><br><span class="line">        //设置pointX的值</span><br><span class="line">        this.pointX = args.pointX || 6; //从接收的参数里获取，或者设置为默认值</span><br><span class="line">        //设置pointY的值</span><br><span class="line">        this.pointY = args.pointY || 10;</span><br><span class="line">    &#125;</span><br><span class="line">    //实例容器</span><br><span class="line">    var instance;</span><br><span class="line">    var _static = &#123;</span><br><span class="line">        name: &apos;SingletonTester&apos;,</span><br><span class="line">        //获取实例的方法</span><br><span class="line">        //返回Singleton的实例</span><br><span class="line">        getInstance: function (args) &#123;</span><br><span class="line">            if (instance === undefined) &#123;</span><br><span class="line">                instance = new Singleton(args);</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    return _static;</span><br><span class="line">&#125;)();</span><br><span class="line">var singletonTest = SingletonTester.getInstance(&#123; pointX: 5 &#125;);</span><br><span class="line">console.log(singletonTest.pointX); // 输出 5</span><br></pre></td></tr></table></figure></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式定义了一个用于创建对象的接口(做的是同一类事情)，这个接口由子类决定实例化哪一个类(子类决定具体的不同实现)。<br>该模式使一个类的实例化延迟到了子类。<br>工程模式应该有厂长，负责调度实施任务<br>eg:switch动态匹配就是该模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 对象方式</span><br><span class="line">var productManager = &#123;&#125;;</span><br><span class="line">&lt;!-- A类型实现 --&gt;</span><br><span class="line">productManager.createProductA = function () &#123;</span><br><span class="line">    console.log(&apos;ProductA&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- B类型实现 --&gt;</span><br><span class="line">productManager.createProductB = function () &#123;</span><br><span class="line">    console.log(&apos;ProductB&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 厂长负责调度 --&gt;</span><br><span class="line">productManager.factory = function (typeType) &#123;</span><br><span class="line">    return new productManager[typeType];</span><br><span class="line">&#125;</span><br><span class="line">productManager.factory(&quot;createProductA&quot;);</span><br><span class="line">// 方法方式的&quot;厂长&quot;调度器</span><br><span class="line">function switchFun(type)&#123;</span><br><span class="line">  switch(type)&#123;</span><br><span class="line">    case &apos;ProductA&apos;:</span><br><span class="line">      console.log(&apos;ProductA&apos;)</span><br><span class="line">      break</span><br><span class="line">    case &apos;ProductB&apos;:</span><br><span class="line">      console.log(&apos;ProductB&apos;)</span><br><span class="line">      break</span><br><span class="line">    default:</span><br><span class="line">      console.log(&apos;nothing&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">switchFun(&quot;ProductA&quot;);</span><br></pre></td></tr></table></figure></p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>回调是个很好的例子,将不变的构建算法封装起来(eg:getBeerById),变化的回调处理部分分离出去(callback之后的定制化操作),不用关心构建的具体过程和回调的调用地方,<br>而且可以存着多个回调,比如ajax的success,error回调等,只需要使用,而不用关心其相对稳定的建造细节<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 封装相对稳定的建造算法 --&gt;</span><br><span class="line">function getBeerById(id, callback) &#123;</span><br><span class="line">    &lt;!-- 调用者不用关心内部实现细节 --&gt;</span><br><span class="line">    asyncRequest(&apos;GET&apos;, &apos;beer.uri?id=&apos; + id, function (resp) &#123;</span><br><span class="line">        // 不用关心回调执行的地方</span><br><span class="line">        callback(resp.responseText);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var el = document.querySelector(&apos;#test&apos;);</span><br><span class="line">el.addEventListener(&apos;click&apos;, getBeerByIdBridge, false);</span><br><span class="line"></span><br><span class="line">function getBeerByIdBridge(e) &#123;</span><br><span class="line">    &lt;!-- 回调调用 --&gt;</span><br><span class="line">    getBeerById(this.id, function (beer) &#123;</span><br><span class="line">        &lt;!-- 关心的部分 --&gt;</span><br><span class="line">        console.log(&apos;Requested Beer: &apos; + beer);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类重写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 抽象步骤</span><br><span class="line">    var MakeDrink = function() &#123;&#125;</span><br><span class="line">    MakeDrink.prototype.step = function() &#123;</span><br><span class="line">      this.boilWater()</span><br><span class="line">      this.addDrink()</span><br><span class="line">      this.cover()</span><br><span class="line">    &#125;</span><br><span class="line">    MakeDrink.prototype.boilWater = function() &#123;</span><br><span class="line">      console.log(&apos;将水烧开!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    MakeDrink.prototype.addDrink = function() &#123;</span><br><span class="line">      throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    MakeDrink.prototype.cover = function() &#123;</span><br><span class="line">      console.log(&apos;盖上盖子!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 冲咖啡</span><br><span class="line">    var Coffee = function() &#123;</span><br><span class="line">      MakeDrink.apply(this)</span><br><span class="line">    &#125;</span><br><span class="line">    Coffee.prototype = new MakeDrink()</span><br><span class="line">    Coffee.prototype.addDrink = function() &#123;</span><br><span class="line">      console.log(&apos;添加咖啡!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //冲茶叶</span><br><span class="line">    var Tea = function() &#123;</span><br><span class="line">      MakeDrink.apply(this)</span><br><span class="line">    &#125;</span><br><span class="line">    Tea.prototype = new MakeDrink()</span><br><span class="line">    Tea.prototype.addDrink = function() &#123;</span><br><span class="line">      console.log(&apos;添加茶叶!&apos;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 验证调用</span><br><span class="line">    var coffee1 = new Coffee()</span><br><span class="line">    coffee1.step()</span><br><span class="line">    console.log(&apos;--------分割线----------&apos;)</span><br><span class="line">    var tea1 = new Tea()</span><br><span class="line">    tea1.step()</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>菜单和菜单项都有类似的公共行为:“整体-部分”的层次结构,用户对单个对象和组合对象的使用具有一致性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  // 抽象类</span><br><span class="line">  var MenuComponent = function() &#123;&#125;</span><br><span class="line">  MenuComponent.prototype.getName = function() &#123;</span><br><span class="line">    throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  MenuComponent.prototype.print = function() &#123;</span><br><span class="line">    throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  MenuComponent.prototype.add = function() &#123;</span><br><span class="line">    throw new Error(&apos;该方法必须重写!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 菜单</span><br><span class="line">  var Menu = function(sName) &#123;</span><br><span class="line">    MenuComponent.apply(this)</span><br><span class="line">    this.aMenuComponents = []</span><br><span class="line">    this.sName = sName</span><br><span class="line">  &#125;</span><br><span class="line">  Menu.prototype = new MenuComponent()</span><br><span class="line">  Menu.prototype.getName = function() &#123;</span><br><span class="line">    return this.sName</span><br><span class="line">  &#125;</span><br><span class="line">  Menu.prototype.print = function() &#123;</span><br><span class="line">    console.log(&apos;-----菜单名称:&apos; + this.getName())</span><br><span class="line">    this.aMenuComponents.forEach(function(item) &#123;</span><br><span class="line">      item.print()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  Menu.prototype.add = function(oMenuComponent) &#123;</span><br><span class="line">    this.aMenuComponents.push(oMenuComponent)</span><br><span class="line">  &#125;</span><br><span class="line">  // 菜单项</span><br><span class="line">  var MenuItem = function(sName) &#123;</span><br><span class="line">    MenuComponent.apply(this)</span><br><span class="line">    this.sName = sName</span><br><span class="line">  &#125;</span><br><span class="line">  MenuItem.prototype = new MenuComponent()</span><br><span class="line">  MenuItem.prototype.getName = function() &#123;</span><br><span class="line">    return this.sName</span><br><span class="line">  &#125;</span><br><span class="line">  MenuItem.prototype.print = function() &#123;</span><br><span class="line">    console.log(&apos;-----菜单项名称:&apos; + this.getName())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 调用测试</span><br><span class="line">  var menu1 = new Menu(&apos;菜单一&apos;)</span><br><span class="line">  menu1.add(new MenuItem(&apos;菜单项一&apos;))</span><br><span class="line">  menu1.add(new MenuItem(&apos;菜单项二&apos;))</span><br><span class="line">  menu1.print()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>若不希望两个层次之间耦合，桥接模式可以使它们建立一个关联关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 事件绑定与处理事件的方法定义</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 抽象代码不可直接运行</span><br><span class="line">  function getBeerById(id, callback) &#123;</span><br><span class="line">    asyncRequest(&apos;GET&apos;, &apos;beer.uri?id=&apos; + id, function(resp) &#123;</span><br><span class="line">      callback(resp.responseText)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  // getBeerByIdBridge桥接原理:将addEvent直接调用getBeerById的定义分离</span><br><span class="line">  // addEvent只是调用了一个桥,桥只是&apos;调用了getBeerById&apos;,而getBeerById的定义则被抽离</span><br><span class="line">  // 优点:使得处理事件的方法实现得以分离,则该方法方便被重用,而且getBeerByIdBridge也方便调用其他处理事件的方法</span><br><span class="line">  addEvent(element, &apos;click&apos;, getBeerByIdBridge)</span><br><span class="line">  function getBeerByIdBridge(e) &#123;</span><br><span class="line">    getBeerById(this.id, function(res) &#123;</span><br><span class="line">      console.log(&apos;Requested:&apos; + res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>大叔代理小明送给美女鲜花<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var Girl = function(name) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  var Xiaoming = function(girl) &#123;</span><br><span class="line">    this.girl = girl</span><br><span class="line">    this.sendFlower = function(flower) &#123;</span><br><span class="line">      console.log(&apos;Hi &apos; + girl.name + &apos;, xiaoming送你一个礼物：&apos; + flower)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 大叔代理</span><br><span class="line">  var ProxyMan = function(girl) &#123;</span><br><span class="line">    this.girl = girl</span><br><span class="line">    this.sendFlower = function(flower) &#123;</span><br><span class="line">      new Xiaoming(girl).sendFlower(flower) //代替小明送花咯</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 测试</span><br><span class="line">  var proxyMan = new ProxyMan(new Girl(&apos;酸奶小妹&apos;))</span><br><span class="line">  proxyMan.sendFlower(&apos;999朵玫瑰&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>鸭子和狗都有行走(fly,run)和叫声(sound)行为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  // 抽象行为</span><br><span class="line">  var Duck = function() &#123;&#125;</span><br><span class="line">  Duck.prototype.fly = function() &#123;</span><br><span class="line">    throw new Error(&apos;该方法必须被重写!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  var Dog = function() &#123;&#125;</span><br><span class="line">  Dog.prototype.run = function() &#123;</span><br><span class="line">    throw new Error(&apos; 该方法必须被重写!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 定义构造函数</span><br><span class="line">  var DuckObj = function() &#123;</span><br><span class="line">    Duck.apply(this)</span><br><span class="line">  &#125;</span><br><span class="line">  DuckObj.prototype = new Duck()</span><br><span class="line">  DuckObj.prototype.fly = function() &#123;</span><br><span class="line">    console.log(&apos;鸭子可以飞起来!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  var DogObj = function() &#123;</span><br><span class="line">    Dog.apply(this)</span><br><span class="line">  &#125;</span><br><span class="line">  DogObj.prototype = new Dog()</span><br><span class="line">  DogObj.prototype.run = function() &#123;</span><br><span class="line">    console.log(&apos;狗可以跑的很快!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 鸭子适配器:使得鸭子可以支持狗的run方法,同时使其自身飞的快5倍</span><br><span class="line">  var DuckAdapter = function(oDuck) &#123;</span><br><span class="line">    Duck.apply(this)</span><br><span class="line">    this.oDuck = oDuck</span><br><span class="line">  &#125;</span><br><span class="line">  DuckAdapter.prototype = new Duck()</span><br><span class="line">  DuckAdapter.prototype.run = function() &#123;</span><br><span class="line">    // 虽然方法名字是dog的run,但是内部实现可以任意,只是为了适配</span><br><span class="line">    this.oDuck.fly()</span><br><span class="line">  &#125;</span><br><span class="line">  // 重新定义fly实现,相当于对fly进行了重写</span><br><span class="line">  DuckAdapter.prototype.fly = function() &#123;</span><br><span class="line">    var nFly = 0</span><br><span class="line">    var nLenFly = 3</span><br><span class="line">    for (; nFly &lt; nLenFly; ) &#123;</span><br><span class="line">      this.oDuck.fly()</span><br><span class="line">      nFly = nFly + 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 测试</span><br><span class="line">  var oDuck = new DuckObj()</span><br><span class="line">  var oDug = new DogObj()</span><br><span class="line">  var oDuckAdapter = new DuckAdapter(oDuck)</span><br><span class="line"></span><br><span class="line">  console.log(&apos;---------原有的鸭子行为-------&apos;)</span><br><span class="line">  oDuck.fly()</span><br><span class="line">  console.log(&apos;---------原有的狗行为-------&apos;)</span><br><span class="line">  oDug.run()</span><br><span class="line">  console.log(&apos;---------适配器鸭子的行为（鸭子调用狗的方法名称）-------&apos;)</span><br><span class="line">  oDuckAdapter.run()</span><br><span class="line">  console.log(&apos;---------适配器鸭子的行为（鸭子原有fly行为被重写,调用了3遍）-------&apos;)</span><br><span class="line">  oDuckAdapter.fly()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>如果需要调用一组接口实现一个更大的功能,那么就把这些方法放在一起组成一个新的方法,从而简化调用<br>eg:阻止事件默认行为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function handleClick(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>比继承更有弹性的替代方案,通过重载方法的形式扩展功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 实例1:重写原方法 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function Macbook() &#123;</span><br><span class="line">    this.cost = function() &#123;</span><br><span class="line">      return 1000</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  function Memory(macbook) &#123;</span><br><span class="line">    this.cost = function() &#123;</span><br><span class="line">      return macbook.cost() + 75</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // </span><br><span class="line">  var myMacbook = new Memory(new Macbook())</span><br><span class="line">  console.log(myMacbook.cost())</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 实例二:重写原方法的一部分(有调用点的方法调用) --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 被装饰者</span><br><span class="line">  function ConcreteClass() &#123;</span><br><span class="line">    this.performTask = function() &#123;</span><br><span class="line">      this.preTask()</span><br><span class="line">      console.log(&apos;doing something&apos;)</span><br><span class="line">      this.postTask()</span><br><span class="line">    &#125;</span><br><span class="line">    this.preTask = function() &#123;</span><br><span class="line">      console.log(&apos;原有执行之前...&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    this.postTask = function() &#123;</span><br><span class="line">      console.log(&apos;原有执行之后...&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 抽象装饰</span><br><span class="line">  function AbstractDecorator(decorated) &#123;</span><br><span class="line">    this.performTask = function() &#123;</span><br><span class="line">      decorated.performTask()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 定义具体装饰:重写preTask和postTask</span><br><span class="line">  function ConcreteDecoratorClass(decorated) &#123;</span><br><span class="line">    this.base = AbstractDecorator</span><br><span class="line">    this.base(decorated)</span><br><span class="line">    decorated.preTask = function() &#123;</span><br><span class="line">      console.log(&apos;装饰执行之前...&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    decorated.postTask = function() &#123;</span><br><span class="line">      console.log(&apos;装饰执行之后...&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 测试</span><br><span class="line">  var decorator1 = new ConcreteDecoratorClass(new ConcreteClass())</span><br><span class="line">  decorator1.performTask()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 实例三:重写原方法的一部分(无调用点) --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var tree = &#123;&#125;</span><br><span class="line">  tree.decorate = function() &#123;</span><br><span class="line">    console.log(&apos;树木初始化...&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 添加装饰器定义</span><br><span class="line">  tree.addDecorator = function(deco) &#123;</span><br><span class="line">    tree[deco].prototype = this</span><br><span class="line">    return new tree[deco]()</span><br><span class="line">  &#125;</span><br><span class="line">  tree.Leaves = function() &#123;</span><br><span class="line">    this.decorate = function() &#123;</span><br><span class="line">      this.Leaves.prototype.decorate()</span><br><span class="line">      console.log(&apos;添加一些树叶...&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  tree.Flower = function() &#123;</span><br><span class="line">    this.decorate = function() &#123;</span><br><span class="line">      this.Flower.prototype.decorate()</span><br><span class="line">      console.log(&apos;添加一些花朵...&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 测试</span><br><span class="line">  tree = tree.addDecorator(&apos;Leaves&apos;)</span><br><span class="line">  tree = tree.addDecorator(&apos;Flower&apos;)</span><br><span class="line">  tree.decorate() //执行Flower的decorate方法,并依次向上递归调用</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>校验表单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  // 策略处理类</span><br><span class="line">  let validator = &#123;</span><br><span class="line">    types: &#123;&#125;, // 验证规则处理类,后面会扩展各种规则的定义</span><br><span class="line">    config: &#123;&#125;, // 定义需要使用的验证类型</span><br><span class="line">    messages: [], // 验证所对应的错误消息集合</span><br><span class="line">    validate: function(data) &#123;</span><br><span class="line">      // 暴露的公开验证方法,参数类型为obj,data是原始数据</span><br><span class="line">      let msg, type, validateTypeFun, result_ok</span><br><span class="line">      this.messages = [] // 清空所有的错误信息</span><br><span class="line">      for (let key in data) &#123;</span><br><span class="line">        if (data.hasOwnProperty(key)) &#123; //原始数据中是否包含可枚举的字段key</span><br><span class="line">          type = this.config[key] // 用户为字段key配置的验证规则是什么?比如isNonEmpty</span><br><span class="line">          validateTypeFun = this.types[type] // 获取验证规则对应的验证方法是否已定义</span><br><span class="line">          if (!type) &#123;</span><br><span class="line">            continue // 如果针对key的验证规则未配置，则不处理</span><br><span class="line">          &#125;</span><br><span class="line">          if (!validateTypeFun) &#123; // 如果验证方法为定义，抛出异常</span><br><span class="line">            throw &#123;</span><br><span class="line">              name: &apos;ValidationError&apos;,</span><br><span class="line">              message: &apos;该类型无对应处理方法:&apos; + type</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          result_ok = validateTypeFun.validate(data[key]) //正常验证</span><br><span class="line">          if (!result_ok) &#123;</span><br><span class="line">            msg = &apos;非法值&apos; + key + &apos;, &apos; + validateTypeFun.instructions</span><br><span class="line">            this.messages.push(msg)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return this.hasErrors()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // helper</span><br><span class="line">    hasErrors: function() &#123;</span><br><span class="line">      return this.messages.length !== 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 验证给定的值是否不为空</span><br><span class="line">  validator.types.isNotEmpty = &#123;</span><br><span class="line">    validate: function(value) &#123;</span><br><span class="line">      return value !== &apos;&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    instructions: &apos;传入的值不能为空&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  // 验证给定的值是否是数字</span><br><span class="line">  validator.types.isNumber = &#123;</span><br><span class="line">    validate: function(value) &#123;</span><br><span class="line">      return !isNaN(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    instructions: &apos;传入的值只能是合法的数字，例如：1, 3.14 or 2010&apos;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 定义需要验证的数据集合和需要验证的规则类型</span><br><span class="line">  var data = &#123;</span><br><span class="line">    first_name: &apos;&apos;,</span><br><span class="line">    age: &apos;unknown&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  validator.config = &#123;</span><br><span class="line">    first_name: &apos;isNotEmpty&apos;,</span><br><span class="line">    age: &apos;isNumber&apos;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 测试获取验证结果</span><br><span class="line">  validator.validate(data)</span><br><span class="line">  if (validator.hasErrors()) &#123;</span><br><span class="line">    console.log(validator.messages.join(&apos;\n&apos;))</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="5-备注"><a href="#5-备注" class="headerlink" title="5.备注"></a>5.备注</h2><p><strong>适配</strong>器则意味着改变一个<strong>已有对象</strong>的接口。<br><strong>代理</strong>模式在不改变原有接口的条件下，用另一个对象定义了一个代理<br>装饰者模式<strong>增强</strong>了其它对象的功能而同时又不改变它的接口<br>桥接的目的是将接口部分和实现部分分离，从而对他们可以更为容易也相对独立的加以改变。<br>工厂模式：switch逻辑外部定义一个统一的接口，通过参数决定具体执行路线，比如Redux中action的调用<br>观察者模式:比如点击事件就是一种最常见的发布订阅模式addEventListener，再比如vue中的data和rn中的state,对其改变时，依赖它的对象都将得到通知和更新<br>策略模式：比如表单校验中针对不同的表单类型进行不同的校验实现</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;设计模式的意义在于:最佳实践提高代码重用，易于理解和维护&lt;br&gt;参考网址：&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>prototype原型链与构造函数法模拟类</title>
    <link href="http://yoursite.com/2019/06/15/prototype/"/>
    <id>http://yoursite.com/2019/06/15/prototype/</id>
    <published>2019-06-15T04:06:28.000Z</published>
    <updated>2019-07-08T01:25:27.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>原型链：如果在第一个对象上没有找到需要的属性或方法，引擎就会继续在prototype关联的对象上继续查找。</p><h2 id="2-理论探究"><a href="#2-理论探究" class="headerlink" title="2.理论探究"></a>2.理论探究</h2><img src="/2019/06/15/prototype/image001.jpg" title="this is first image"><p><center><strong>图（1）</strong></center><br>1.在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。即：对象具有属性<strong>proto</strong>，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数(简单理解为“父类”)的原型prototype，这也保证了实例能够访问在构造函数原型(简单理解为“父类”)中定义的属性和方法。<br>2.方法(Function)这个特殊的对象，除了和其他对象一样有上述<em>proto</em>属性之外，还有自己特有的属性——原型属性（prototype），这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法（我们把这个对象叫做原型对象prototype）。原型对象也有一个属性，叫做constructor，这个属性包含了一个指针，指回原构造函数。<br>小结：<br>对象有属性<strong>proto</strong>,指向该对象的构造函数(简单理解为“父类”)的原型对象prototype。<br>方法除了有属性<strong>proto</strong>,还有属性prototype，prototype指向该方法的原型对象(所有实例共享的属性和方法)<br>3.模拟类：首先要明确面向对象语言中，对象实例化和继承都是通过“复制”实现的，即各个实例之间没有关联关系。<br>但是js中（var a= new Foo()）new[带new的函数调用被称为“构造函数调用”]一个新对象实际发生的却是将新对象a的<em>proto</em>属性指向Foo.prototype（同时：a.constructor === Foo === Foo.prototype.constructor）,即各个实例共享了属性和方法，相互之间建立了关联关系。<br>4.模拟继承（也叫“原型继承”）：实质是创建两个对象（父子）之间的关联关系，使得一个对象（子）可以通过委托访问另一个对象（父）的属性和函数，核心是apply()方法的应用<br>小结：<br>对象有属性constructor,指向的是对象关联的函数（Foo父类）[实质上是a.constructor === Foo.prototype.constructor]<br>new实例化的实质：”构造函数”会被调用，而绑定在prototype属性上的公共属性和方法会和实例的<em>proto</em>属性建立关联关系</p><p>实例：构造函数法模拟继承分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 父类</span><br><span class="line">  function Animal(species)&#123;</span><br><span class="line">     //实例化对象的过程中会通过new调用该“构造函数”执行，即初始化</span><br><span class="line">     //即：每个实例都会产生属于自己的species属性</span><br><span class="line">　　　　this.species = species;</span><br><span class="line">　　&#125;</span><br><span class="line">  // 子类:注意将父类需要的属性放前面，方便arguments正确对应</span><br><span class="line">　　function Cat(species,name)&#123;</span><br><span class="line">      Animal.apply(this, arguments); //通过apply方法将父类绑定到自身环境</span><br><span class="line">　　　　this.name = name;</span><br><span class="line">　　&#125;</span><br><span class="line">// 公共的不变的属性和方法直接绑定至prototype</span><br><span class="line">  // 即：prototype不属于构造函数，不会在new是被调用，而会被各个实例所共享</span><br><span class="line">  Cat.prototype.sound = &quot;喵喵喵...&quot;;</span><br><span class="line">  Cat.prototype.eat = function()&#123;console.log(&apos;猫爱吃鱼&apos;)&#125;;</span><br><span class="line"></span><br><span class="line">  //new调用实质：cat1.constructor = Cat.prototype.constructor，则产生不同的species实例变量</span><br><span class="line">  //同时：cat1._proto_ = Cat.prototype,保证了所有实例可以调用共享的绑定在prototype上的属性和方法</span><br><span class="line">　　var cat1 = new Cat(&quot;动物&quot;,&quot;大毛&quot;); </span><br><span class="line">  //调用</span><br><span class="line">  console.log(cat1.species, &apos;---我是继承父类的属性&apos;)</span><br><span class="line">  console.log(cat1.sound, &apos;---我是绑定在子类prototype上的公用属性&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1.概念&quot;&gt;&lt;/a&gt;1.概念&lt;/h2&gt;&lt;p&gt;原型链：如果在第一个对象上没有找到需要的属性或方法，引擎就会继续在prototype关联的对象上继续查找。&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>this和function</title>
    <link href="http://yoursite.com/2019/06/14/this/"/>
    <id>http://yoursite.com/2019/06/14/this/</id>
    <published>2019-06-14T08:00:41.000Z</published>
    <updated>2019-07-08T01:25:27.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>通过简单的实例分析this和function深层原理，便于对js加深理解<br>参考：<a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html" target="_blank" rel="noopener">this用法</a>，<a href="http://www.ruanyifeng.com/blog/2018/06/javascript-this.html" target="_blank" rel="noopener">this原理</a>,<a href="https://www.cnblogs.com/coco1s/p/4833199.html" target="_blank" rel="noopener">bind,apply,call动态改变this指向</a></p><h2 id="2-剖析"><a href="#2-剖析" class="headerlink" title="2.剖析"></a>2.剖析</h2><h3 id="2-1this的定义"><a href="#2-1this的定义" class="headerlink" title="2.1this的定义"></a>2.1this的定义</h3><p>this就是函数运行时所在的环境对象,强调“函数”内部，“运行”环境</p><h3 id="2-2明确几点前提条件"><a href="#2-2明确几点前提条件" class="headerlink" title="2.2明确几点前提条件"></a>2.2明确几点前提条件</h3><p>（1）首先需要明确的常识undefined是一个类型，也是一个值。而is not defined是报错<br>（2）全局变量的声明定义会被提升至顶端，而函数作用域的变量会被提升至函数顶部，js只有函数作用域，没有块作用域，但是let实现了块作用域，且不会对其进行提升。const同理，但其不可修改。function fun(){}和var变量一样，声明定义会被提升。但是fun=function (){}却不会被提升<br>（3）函数是在运行时编译[通常就在运行前的几微妙]的,函数未运行就不存在函数内部编译，更不存在内部报错.最外层会直接运行，不妨也将window环境视为一个全局函数体<br>（4）不成功的右查询RHS引用会导致抛出ReferenceError异常[非严格模式：不成功的左查询LHS会创建一个全局的变量]。ReferenceError同作用域判别相关，而TypeError则代表作用域判别成够了，但是对结果的操作是非法或不合理的。</p><h3 id="2-3实例解析"><a href="#2-3实例解析" class="headerlink" title="2.3实例解析"></a>2.3实例解析</h3><p>思考题1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//分析该函数行为，必须要等到运行时才有意义</span><br><span class="line">//当运行时，</span><br><span class="line">function fun()&#123;</span><br><span class="line">    //对x进行RHS,完全找不到[注：LHS才会重新定义变量并绑定到window上]，即没有定义过x变量本身[注：区别于x的value值]</span><br><span class="line">    //故报红：Uncaught ReferenceError: x is not defined</span><br><span class="line">    console.log(x) </span><br><span class="line"></span><br><span class="line">    //this.x可以编译为window.x[即window是存在的，其上并没有x,故window.x的value值为‘undefined’(未定义的变量，或变量值为undefined)]</span><br><span class="line">    console.log(this.x)</span><br><span class="line">&#125;</span><br><span class="line">fun() //运行时</span><br></pre></td></tr></table></figure></p><p>总结：复合变量的value值为undefined是指主变量存在，附变量未定义。而is not defined是指整个变量本身就不存在。<br>思考题2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; //obj的value是个对象的指针地址</span><br><span class="line">    //obj.foo的value是个function的指针地址</span><br><span class="line">    //函数内部只有this.bar,由于未在运行时，故this.bar暂不分析</span><br><span class="line">    foo: function () &#123; console.log(this.bar) &#125;,</span><br><span class="line">    bar: 1 //obj.bar的value是数值1</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var foo = obj.foo; //将obj.foo的value值[function的指针地址]赋值给window.foo的value值，即变量window.foo的value也是地址</span><br><span class="line">var bar = 2; //window.bar的value是数值2</span><br><span class="line"></span><br><span class="line">//小括号代表执行，即执行obj.foo的value,此时obj.foo的value是function的指针地址，即执行function本身。</span><br><span class="line">//由于函数是由obj调用,而obj中存在obj.bar的value为1，故执行结果为1</span><br><span class="line">obj.foo()</span><br><span class="line">//小括号代表执行，即执行window.foo的value,此时window.foo的value也是function的指针地址，即执行function本身。</span><br><span class="line">//由于函数是由window调用，而window中存在window.bar的value为2，故执行结果为2</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p><h3 id="2-4显示绑定this"><a href="#2-4显示绑定this" class="headerlink" title="2.4显示绑定this"></a>2.4显示绑定this</h3><p>bind、apply 、 call 三者都是用来改变函数的this对象的指向的<br>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 ，但两者接受参数的方式不同。<br>func.bind(this)()<br>func.call(this, arg1, arg2);<br>func.apply(this, [arg1, arg2])</p><h3 id="2-5箭头函数中的this"><a href="#2-5箭头函数中的this" class="headerlink" title="2.5箭头函数中的this"></a>2.5箭头函数中的this</h3><p>箭头函数的this总是指向定义时所在的对象，而不是使用时所在的对象。即this对象的指向是固定的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;id:&apos;, this.id);</span><br><span class="line">  &#125;, 100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var id = 21;</span><br><span class="line"></span><br><span class="line">foo.call(&#123; id: 42 &#125;);</span><br><span class="line">// id: 42</span><br></pre></td></tr></table></figure></p><p>上面代码中，setTimeout的参数是一个箭头函数，这个箭头函数的定义生效是在foo函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时this应该指向全局对象window，这时应该输出21。但是，箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是42。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;通过简单的实例分析this和function深层原理，便于对js加深理解&lt;br&gt;参考：&lt;a href=&quot;ht
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>js模拟class</title>
    <link href="http://yoursite.com/2019/06/12/class/"/>
    <id>http://yoursite.com/2019/06/12/class/</id>
    <published>2019-06-12T05:33:13.000Z</published>
    <updated>2019-07-08T01:25:27.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>类：数据及其行为的封装，可视为一种“类型”<br>对象：对象是类的实例。js中一切皆对象，没有类的概念，但可以通过对象来模拟类<br>实例：相对“类”来说，对象的另一种称谓，故常说“对象实例”，其实指同一事物<br>构造函数：类的一个特殊方法，用于在创建对象时初始化实例[通常会初始化实例属性]<br>参考网址: <a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html" target="_blank" rel="noopener">JS面向对象编程</a>,<a href="http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html" target="_blank" rel="noopener">传统JS模拟类定义</a>,<a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">ES6关于类定义</a></p><h2 id="2-要点梳理"><a href="#2-要点梳理" class="headerlink" title="2.要点梳理"></a>2.要点梳理</h2><p>2.1传统js中推荐使用极简主义法来模拟类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> // 父类</span><br><span class="line">　　var Animal = &#123;</span><br><span class="line">　　　　createNew: function()&#123;</span><br><span class="line">　　　　　　var animal = &#123;&#125;;</span><br><span class="line">　　　　　　animal.sleep = function()&#123; alert(&quot;睡懒觉&quot;); &#125;;</span><br><span class="line">　　　　　　return animal;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">// 子类继承父类</span><br><span class="line">　var Cat = &#123;</span><br><span class="line">     // 共享属性</span><br><span class="line">     voice : &quot;汪汪汪&quot;,</span><br><span class="line">　　　　createNew: function()&#123;</span><br><span class="line">　　　　　　var cat = Animal.createNew();</span><br><span class="line">        // 实例属性</span><br><span class="line">　　　　　　cat.name = &quot;大毛&quot;;</span><br><span class="line">        // 继承的方法重写</span><br><span class="line">        cat.sleep = function() &#123; alert(&quot;子类不想睡懒觉&quot;); &#125;</span><br><span class="line">        // 私有属性</span><br><span class="line">        var sound = &quot;喵喵喵&quot;;</span><br><span class="line">        // 获取私有属性</span><br><span class="line">　　　　　　cat.makeSound = function()&#123; alert(&quot;私有属性:&quot; + sound); &#125;;</span><br><span class="line">        // 修改共享属性</span><br><span class="line">        cat.changeVoice = function(x)&#123;Cat.voice = x;&#125;</span><br><span class="line">        // 获取共享属性</span><br><span class="line">        cat.getVoice = function()&#123; return Cat.voice &#125;</span><br><span class="line">　　　　　　return cat;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;;</span><br><span class="line">// 实例化对象</span><br><span class="line">var cat1 = Cat.createNew();</span><br><span class="line">// 继承的方法重写</span><br><span class="line">　cat1.sleep();</span><br><span class="line">// 私有属性只能通过内部方法调用</span><br><span class="line">cat1.makeSound()</span><br><span class="line">// 如果有一个实例对象，修改了共享的数据，另一个实例对象也会受到影响。</span><br><span class="line">cat2.changeVoice(&quot;哈哈哈&quot;);</span><br><span class="line">cat1.getVoice() // 哈哈哈</span><br><span class="line">console.log(Cat.voice) // 哈哈哈</span><br></pre></td></tr></table></figure></p><p>2.2ES6风格类的定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父类 --&gt;</span><br><span class="line">class Point &#123;</span><br><span class="line">  constructor(x, y) &#123;</span><br><span class="line">    this.x = x;</span><br><span class="line">    this.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;!-- 静态方法 --&gt;</span><br><span class="line">  static hello() &#123;</span><br><span class="line">    console.log(&apos;hello world&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;!-- 实例方法 --&gt;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 子类 --&gt;</span><br><span class="line">class ColorPoint extends Point &#123;</span><br><span class="line">  constructor(x, y, color) &#123;</span><br><span class="line">    super(x, y);</span><br><span class="line">    this.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 实例化 --&gt;</span><br><span class="line">var obj = new ColorPoint();</span><br><span class="line">obj.toString()</span><br><span class="line">ColorPoint.hello()</span><br></pre></td></tr></table></figure></p><p>2.3实例练习<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;我是本来的内容&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;target&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      // 定义类</span><br><span class="line">      var RenderContent = &#123;</span><br><span class="line">        createContent: function()&#123;</span><br><span class="line">          var renderContent = &#123;&#125;</span><br><span class="line">          // 动态生成dom</span><br><span class="line">          renderContent.init = function(el)&#123;</span><br><span class="line">            el.innerHTML = &quot;&lt;p&gt;我只是插入的dom&lt;/p&gt;&quot;</span><br><span class="line">          &#125;</span><br><span class="line">          // 异步callback</span><br><span class="line">          renderContent.waitTime = function(n, callback)&#123;</span><br><span class="line">            console.log(&apos;您传入的时间数值是:&apos; + n)</span><br><span class="line">            console.log(&apos;已进入计时状态,请等候...&apos;)</span><br><span class="line">            setTimeout(function()&#123;</span><br><span class="line">              callback(2 * n)</span><br><span class="line">            &#125;, 2 * n * 1000)</span><br><span class="line">          &#125;</span><br><span class="line">          return renderContent</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // 实例化对象</span><br><span class="line">      var render1 = RenderContent.createContent()</span><br><span class="line">      // 调用方法生成dom</span><br><span class="line">      render1.init(document.getElementById(&apos;target&apos;))</span><br><span class="line">      // 调用异步方法:callback</span><br><span class="line">      // 传入等待时间n,返回等待时间的二倍</span><br><span class="line">      render1.waitTime(2, function(m)&#123;</span><br><span class="line">        console.log(&apos;我等待了2n的时间:&apos; + m)</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;类：数据及其行为的封装，可视为一种“类型”&lt;br&gt;对象：对象是类的实例。js中一切皆对象，没有类的概念，但可
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>RN项目发布至APP Store</title>
    <link href="http://yoursite.com/2019/06/12/ios/"/>
    <id>http://yoursite.com/2019/06/12/ios/</id>
    <published>2019-06-12T05:14:17.000Z</published>
    <updated>2019-07-08T01:25:27.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>记录RN项目打包生成IOS安装包,并发布至APP Store的过程.<br>参考网址:<a href="https://www.jianshu.com/p/937daff609eb" target="_blank" rel="noopener">RN转IOS前期处理</a>,<a href="https://blog.csdn.net/hbblzjy/article/details/58592976" target="_blank" rel="noopener">打包开发版</a>,<a href="https://www.jianshu.com/p/a414925906b0" target="_blank" rel="noopener">打包发布版本</a></p><h2 id="2-过程记录"><a href="#2-过程记录" class="headerlink" title="2.过程记录"></a>2.过程记录</h2><p>打包ios实践：<br>2.1 <a href="https://www.jianshu.com/p/937daff609eb" target="_blank" rel="noopener">https://www.jianshu.com/p/937daff609eb</a><br>在ios下新建bundle文件夹<br>在package.json中配置命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;bundle-ios&quot;:&quot;react-native bundle --entry-file index.js  --platform ios --dev false --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle&quot;</span><br></pre></td></tr></table></figure></p><p>运行： yarn run bundle-ios</p><p>将assets 和 index.ios.jsbundle 文件引入到xcode工程<br>打开Xcode，在第二个tpa3文件夹上右键单击，add Files to ‘…’<br>[注意选中：Create folder references]</p><p>修改Appdelegate中的配置代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#if DEBUG</span><br><span class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil];</span><br><span class="line">#else</span><br><span class="line">  jsCodeLocation = [NSURL URLWithString:[[NSBundle mainBundle] pathForResource:@&quot;index.ios.jsbundle&quot; ofType:nil]];</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></p><p>RN项目自带的是debug模式，真机打包需要修改为release模式。下图打开快捷键为command+shit+，</p><p>2.2 Certificates(哪台电脑可以发布程序)<br> 注意：第一步选择证书类型（Development用于测试，App Store and Ad Hoc用于发布正式版）<br>（1）本电脑生成的证书上传IOS<br>（2）IOS生成的Certificates用于安装<br> 注意：不要忘了双击安装<br>2.3 Identifiers（哪个APP可以被发布）<br>（1）App IDs / yananJzfp / org.reactjs.native.example.tpa3(修改为 com.yanan.jzfp) / [能用的服务都可以先选上]<br>2.4 Devices （哪些设备可以运行真机测试）<br>（1）UDID: 可以通过iTunes查看<br>2.5 Provisioning Profiles （生成总配置文件）<br> 注意：必须选择包含应用程序签名的证书（与第一步的证书相对应）<br>（1）Development开发证书（能全选的尽量全选）<br>（2）Distribution （要选对应的配置文件）<br> 注意：不要忘了双击安装[用于打包环境的改变]<br>2.6 打包过程<br>（1）Xcode中确保有团队账号（Xcode—–》Preferences—–&gt;Accounts）<br>（2）配置Build Settings中Code Signing Identity和Development Team<br> 注意：这里设置的要根据打包类型再General中设置对应的Signing(关注 Provisioning Profile项)，dev版本可以待生成之后再选择<br>（3）左上角“运行”按钮右边的运行环境不能是模拟器，才能点击(Product —-&gt; Archive)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;记录RN项目打包生成IOS安装包,并发布至APP Store的过程.&lt;br&gt;参考网址:&lt;a href=&quot;ht
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>模块化</title>
    <link href="http://yoursite.com/2019/06/11/module/"/>
    <id>http://yoursite.com/2019/06/11/module/</id>
    <published>2019-06-11T14:36:22.000Z</published>
    <updated>2019-07-08T01:25:27.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>清楚了解模块化在js中的发展和技术更新，有利于对前端技术体系的整体把控。<br>参考文档：<a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener">阮一峰：模块化编程</a>，<a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">ES6模块标准化</a></p><h2 id="2-要点梳理"><a href="#2-要点梳理" class="headerlink" title="2.要点梳理"></a>2.要点梳理</h2><p>问：什么是模块化？<br>答：模块就是实现特定功能的一组方法(webpack将一切资源都视为模块）</p><p>问：es5中如何模拟模块化？<br>答：CommonJS(简称CMD)和AMD,cmd是同步方式，适用于服务器环境，AMD是异步模块定义，两者均采用require()语句加载模块</p><p>问：ES6中如何支持模块化？<br>答：export和import是专门为模块化而生的，区别于cmd和amd的运行时，export和import方案则选择了静态化，在编译时就能发现问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;清楚了解模块化在js中的发展和技术更新，有利于对前端技术体系的整体把控。&lt;br&gt;参考文档：&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>像素级还原设计稿</title>
    <link href="http://yoursite.com/2019/05/27/px/"/>
    <id>http://yoursite.com/2019/05/27/px/</id>
    <published>2019-05-27T05:24:47.000Z</published>
    <updated>2019-07-08T01:25:27.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>精准清晰的理论基础有助于培养技术自信。<br>参考网址:<a href="http://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650589824&amp;idx=1&amp;sn=8e665900ff5ad912707e215a0bfedc3f&amp;chksm=8891daa4bfe653b2891aab2bcfa4b51129a65ee0ade08a65545043feaea6813291320063b8d4&amp;mpshare=1&amp;scene=23&amp;srcid=0602q4MMmCCe6pPUE1XNnYhH#rd" target="_blank" rel="noopener">像素理论详解</a>,<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">rem</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>###2.1 核心概念解读:<br><strong>英寸:</strong>屏幕对角线的长度,1英寸=2.54厘米<br><strong>分辨率:</strong>表示对象在垂直和水平上像素(物理像素)点数的乘积(注:清晰度还与尺寸有关)<br><strong>PPI:</strong>表示每英寸包括的像素(物理像素)数,反映了清晰度<br><strong>设备独立像素:</strong>为保证新老设备显示效果基本一致,新设备在增大物理像素的同时,并不增加”设备独立像素”,故1设备独立像素等于若干(@2x,@3x)物理像素.ReactNative开发中样式单位(dp)就是设备独立像素(ios尺寸单位pt,android尺寸单位dp同理),而UI设计的原型图一般是基于iphone6的物理像素,为了适配所有机型，我们在写样式时需要把物理像素转换为设备独立像素.浏览器开发者工具显示的移动端设备像素就是设备独立像素.web端开发中,当页面缩放比例为100%时,一个css像素就等于一个设备独立像素.<br><strong>设备像素比(dpr):</strong>物理像素和设备独立像素的比值<br><strong>视口:</strong>布局视口(css依赖的视口),视觉视口(通过屏幕可以看到的区域),理想视口(当页面缩放比例为100%时,理想视口=视觉视口,CSS像素=设备独立像素)<br><strong>安全区域:</strong>为圆角,刘海和小黑条设计的解决方案</p><p>###2.2 H5适配手机主要有两个维度：<br>（1）适配不同像素密度(1像素对应多少物理像素,比如3倍屏@3x, 即1px对应9个物理像素[3x3])<br>（2）适配不同大小屏幕<br>问题一：图片如何在3倍屏和2倍屏上显示不失真？<br>答：1个图片像素对应1个物理像素，图片就不会失真[精准匹配需要借助媒体查询等手段]，简单粗暴的适配方案，就是针对所有屏幕，都只提供最高清图片,还有img标签的srcset等高级属性的应用。<br>问题二：如何适配不同大小屏幕？<br>答：原则是确保页面布局的度量与屏幕大小保持一定比例。例如通常设计稿是750像素，我们需要按比例还原（x / 750，eg: 75 / 750 = 10% ）。<br>实践中不能直接用百分比，因为它总是需要一个参照量，而且边框不支持百分比等问题。<br>rem:依赖根元素font-size属性的计算值<br>vw/vh: 1vw= 1%屏幕宽度 完美方案。<br>问题三：如何方便将px转换为vw?<br>答：<a href="https://www.npmjs.com/package/postcss-px-to-viewport" target="_blank" rel="noopener">postcss-px-to-viewport插件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;精准清晰的理论基础有助于培养技术自信。&lt;br&gt;参考网址:&lt;a href=&quot;http://mp.weixin.
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>layout</title>
    <link href="http://yoursite.com/2019/05/04/layout/"/>
    <id>http://yoursite.com/2019/05/04/layout/</id>
    <published>2019-05-04T08:46:46.000Z</published>
    <updated>2019-07-08T01:25:27.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>总结css布局规则,首先强调一点是布局由“定位”和“盒模型”两部分组成，这是两个不同的概念。<br>本文首先阐述“定位”与“盒模型”两者之间的关系，然后分别梳理弹性盒子flex，网格布局grid,文档流和定位方式，浮动，盒子模型，媒体查询等主要技能点，不断总结，熟能生巧。<br>参考网址:<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">弹性盒子Flex</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout" target="_blank" rel="noopener">网格布局Grid</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D" target="_blank" rel="noopener">文档流和定位方式</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noopener">盒子模型</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><h3 id="2-1“定位”与“盒模型”"><a href="#2-1“定位”与“盒模型”" class="headerlink" title="2.1“定位”与“盒模型”"></a>2.1“定位”与“盒模型”</h3><p>“定位”和“盒模型”是两个完全不同的概念，但是两者共同作用决定了元素的最终布局。</p><h3 id="2-2关于“定位”的相关问题"><a href="#2-2关于“定位”的相关问题" class="headerlink" title="2.2关于“定位”的相关问题"></a>2.2关于“定位”的相关问题</h3><h4 id="2-2-1Flex布局"><a href="#2-2-1Flex布局" class="headerlink" title="2.2.1Flex布局"></a>2.2.1Flex布局</h4><p>阮一峰老师对<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">弹性盒子flex布局</a>的讲解很清楚，也很详细，这里不再赘述。下面仅列出通用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- flex布局 --&gt;</span><br><span class="line">.flex-box &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">    flex-wrap: nowrap;</span><br><span class="line">    justify-content: flex-start;</span><br><span class="line">    /*  副轴对齐方式  */</span><br><span class="line">    align-items: center;</span><br><span class="line">    /*  多行对齐方式  */</span><br><span class="line">    align-content: flex-start;</span><br><span class="line">&#125;</span><br><span class="line">.flex-item &#123;</span><br><span class="line">    /*  排序  */</span><br><span class="line">    order: 0;</span><br><span class="line">    /*   放大比例   */</span><br><span class="line">    flex-grow: 0;</span><br><span class="line">    /*   缩小比例   */</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    /*  项目占据主轴空间 auto    */</span><br><span class="line">    flex-basis： 350px;</span><br><span class="line">    /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */</span><br><span class="line">    align-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-2Grid布局"><a href="#2-2-2Grid布局" class="headerlink" title="2.2.2Grid布局"></a>2.2.2Grid布局</h4><p>网格布局Grid也是非常常用的布局之一，这里主要强调它与弹性盒模型Flex布局的区别：<br><strong>区别一</strong>：弹性盒模型主要用于一维布局（按行或按列），网格布局更适用于二维布局（同时考虑行和列）<br><strong>区别二</strong>：弹性盒模型主要从内容出发（内容多少影响布局），网格布局从布局入手（一旦定义，布局确定）<br>下面列出一个常见的基本用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;One&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;Two&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;Three&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;Four&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;Five&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.wrapper &#123; </span><br><span class="line">    display: grid; </span><br><span class="line">    grid-template-columns: repeat(3, 1fr); </span><br><span class="line">    grid-auto-rows: 100px; </span><br><span class="line">&#125; </span><br><span class="line">.box1 &#123; </span><br><span class="line">    grid-column-start: 1; </span><br><span class="line">    grid-column-end: 4; </span><br><span class="line">    grid-row-start: 1; </span><br><span class="line">    grid-row-end: 3; </span><br><span class="line">&#125; </span><br><span class="line">.box2 &#123; </span><br><span class="line">    grid-column-start: 1; </span><br><span class="line">    grid-row-start: 3; </span><br><span class="line">    grid-row-end: 5; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-3文档流和定位方式"><a href="#2-2-3文档流和定位方式" class="headerlink" title="2.2.3文档流和定位方式"></a>2.2.3文档流和定位方式</h4><p>该内容是定位的基础，之所以放在第三个讨论的位置，是因为我觉得这个没有什么可讨论的，必须严格掌握。<br>如果非要说点什么的话，那就是下面几种定位方式有着循序渐进的关系,z-index扩展到了三维空间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.positioned &#123;</span><br><span class="line">    position: static;</span><br><span class="line">    position: absolute;</span><br><span class="line">    position: fixed;</span><br><span class="line">    z-index: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-3关于“盒模型”的相关问题"><a href="#2-3关于“盒模型”的相关问题" class="headerlink" title="2.3关于“盒模型”的相关问题"></a>2.3关于“盒模型”的相关问题</h3><p>盒子模型除了最基本的属性外，需要强调的是box-sizing对width的影响。当需要明确width便于计算时，建议设置box-sizing为border-box<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    margin: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;总结css布局规则,首先强调一点是布局由“定位”和“盒模型”两部分组成，这是两个不同的概念。&lt;br&gt;本文首先
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>icon</title>
    <link href="http://yoursite.com/2019/04/21/icon/"/>
    <id>http://yoursite.com/2019/04/21/icon/</id>
    <published>2019-04-21T09:10:14.000Z</published>
    <updated>2019-07-08T01:25:27.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。<br>参考网址:<br><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里图标库iconfont</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>使用方法，用github账号登录阿里图标库，查询所需图标，点击“添加入库”,然后打开通用项目common,找到购物车，将库中图标添加至项目，然后选中“font class”生成链接，在web项目中引入图标如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;http://at.alicdn.com/t/font_803606_60a86mpe3nt.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>在项目中使用图标如下（可通过css改变图标大小和颜色）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;iconfont icon-jiazheng&quot; style=&quot;color:red;font-size: 55px;&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;网络使用图标是很常见的，这里提供一种最简单的方式，来快速获取可用的网络图标。基于阿里图标库。&lt;br&gt;参考网址
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>style</title>
    <link href="http://yoursite.com/2019/04/21/style/"/>
    <id>http://yoursite.com/2019/04/21/style/</id>
    <published>2019-04-21T08:08:26.000Z</published>
    <updated>2019-07-08T01:25:27.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非RN），当前很多项目都会自选UI库,各个库都有自己的样式规范，实际开发中要优先考虑UI库样式，然后再将本文整理的通用style样式作为工具和补充。<br>官方提供的bootstrap.min.css样式很多，包含该库组件部分等样式，无特殊要求可直接引入bootstrap.min.css,也可以仅引入我们整理的通用工具类，比如栅格布局，浮动等<br>参考网址:<br><a href="https://v3.bootcss.com/css/" target="_blank" rel="noopener">BootStrap全局css样式</a>，<a href="https://pan.baidu.com/s/1KjTxRk_u0QlwECG1zQ12Xw" target="_blank" rel="noopener">bootstrap.min.css 提取码：he9a</a>，<a href="https://pan.baidu.com/s/1w39gcdHSPCJJgm7V6gH7ew" target="_blank" rel="noopener">bootstrap.css 提取码：khav</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>提取通用样式类如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 容器 --&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">    min-width: 992px !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- flex布局 --&gt;</span><br><span class="line">.flex-box &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">    flex-wrap: nowrap;</span><br><span class="line">    justify-content: flex-start;</span><br><span class="line">    /*  副轴对齐方式  */</span><br><span class="line">    align-items: center;</span><br><span class="line">    /*  多行对齐方式  */</span><br><span class="line">    align-content: flex-start;</span><br><span class="line">&#125;</span><br><span class="line">.flex-item &#123;</span><br><span class="line">    /*  排序  */</span><br><span class="line">    order: 0;</span><br><span class="line">    /*   放大比例   */</span><br><span class="line">    flex-grow: 0;</span><br><span class="line">    /*   缩小比例   */</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">    /*  项目占据主轴空间 auto    */</span><br><span class="line">    flex-basis： 350px;</span><br><span class="line">    /* 不同对齐方式，覆盖align-items[副轴对齐方式]   */</span><br><span class="line">    align-self: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 按钮 --&gt;</span><br><span class="line">.btn &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    text-align: center;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    border: 1px solid transparent;</span><br><span class="line">    padding: 0.375rem 0.75rem;</span><br><span class="line">    font-size: 1rem;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">    border-radius: 0.25rem;</span><br><span class="line">    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line">.btn.focus .btn:focus, &#123;</span><br><span class="line">    outline: 0;</span><br><span class="line">    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);</span><br><span class="line">&#125;</span><br><span class="line">.btn.disabled, .btn:disabled &#123;</span><br><span class="line">    opacity: 0.65;</span><br><span class="line">&#125;</span><br><span class="line">.btn:not(:disabled):not(.disabled) &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.btn:hover, .btn:focus &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">.btn-default &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">.btn-primary &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #337ab7;</span><br><span class="line">    border-color: #2e6da4;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 文本 --&gt;</span><br><span class="line"> .text-primary &#123;</span><br><span class="line">    color: #007bff !important;</span><br><span class="line">&#125;</span><br><span class="line">.text-light &#123;</span><br><span class="line">    color: #f8f9fa !important;</span><br><span class="line">&#125;</span><br><span class="line">.text-dark &#123;</span><br><span class="line">    color: #343a40 !important;</span><br><span class="line">&#125;</span><br><span class="line">.font-weight-light &#123;</span><br><span class="line">    font-weight: 300 !important;</span><br><span class="line">&#125;</span><br><span class="line">.font-weight-normal &#123;</span><br><span class="line">    font-weight: 400 !important;</span><br><span class="line">&#125;</span><br><span class="line">.font-weight-bold &#123;</span><br><span class="line">    font-weight: 700 !important;</span><br><span class="line">&#125;</span><br><span class="line">.font-h1 &#123;</span><br><span class="line">  font-size: 22px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h2 &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h3 &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h4 &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h5 &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.font-h6 &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 超链接 --&gt;</span><br><span class="line">&lt;!-- link 未被访问</span><br><span class="line">visited 已被访问</span><br><span class="line">hover  鼠标指针移动到链接上</span><br><span class="line">active 正在被点击的链接</span><br><span class="line">focus 元素获取焦点 --&gt;</span><br><span class="line">a.text-primary:link,</span><br><span class="line">a.text-primary:visited,</span><br><span class="line">a.text-primary:hover,</span><br><span class="line">a.text-primary:active,</span><br><span class="line">a.text-primary:focus &#123;</span><br><span class="line">    color: #007bff !important;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 1px边框 --&gt;    </span><br><span class="line">.border_1px:before&#123;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    height: 1px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    transform-origin: 50% 0%;</span><br><span class="line">&#125;   </span><br><span class="line">@media only screen and (-webkit-min-device-pixel-ratio:2)&#123;</span><br><span class="line">    .border_1px:before&#123;</span><br><span class="line">        transform:scaleY(0.5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">@media only screen and(-webkit-min-device-pixel-ratio:3)&#123;</span><br><span class="line">    .border_1px:before&#123;</span><br><span class="line">        transform:scaleY(0.33);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;本文基于Bootstrap,收集整理通用style样式，便于快速高效的实现样式效果。该样式适用于web端（非
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>json</title>
    <link href="http://yoursite.com/2019/04/11/json-server/"/>
    <id>http://yoursite.com/2019/04/11/json-server/</id>
    <published>2019-04-11T04:14:03.000Z</published>
    <updated>2019-08-16T08:40:29.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>汇总前端JSON数据模拟技术,本文介绍三种技术:<strong>json server, Easy mock, github api v3</strong>.<br>json server: 该方式采用本地编写JSON文件,并通过本地web服务器请求的方式来模拟请求<br>Easy Mock: 在线json模拟数据生成管理平台<br>github api v3:获取并操作github账号下个人相关信息的接口服务<br>实际上获取网络接口和网络图片资源的方式比较灵活,比如随便在网络上打开开发模式都可以看到get请求,而且get接口链接直接在浏览器中打开就可以获得数据,图片资源更简单,百度搜索的图片,单击右键就可以获得图片链接,直接在浏览器中打开图片链接就可以看到图片资源.<br>参考网址: <a href="https://blog.csdn.net/weixin_40817115/article/details/81237128" target="_blank" rel="noopener">json-server的使用</a>,<a href="http://easymock.xys12345.cn/login" target="_blank" rel="noopener">Easy Mock官网</a>,<a href="https://segmentfault.com/a/1190000015144126?utm_source=tag-newest#articleHeader0" target="_blank" rel="noopener">github api讲解</a>,<a href="https://developer.github.com/" target="_blank" rel="noopener">github api官方文档</a></p><h2 id="2-实践过程"><a href="#2-实践过程" class="headerlink" title="2.实践过程"></a>2.实践过程</h2><h3 id="2-1-json-server"><a href="#2-1-json-server" class="headerlink" title="2.1 json server"></a>2.1 json server</h3><p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure></p><p>查看版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server -v</span><br></pre></td></tr></table></figure></p><p>创建db.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;posts&quot;: [</span><br><span class="line">    &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;comments&quot;: [</span><br><span class="line">    &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server db.json</span><br></pre></td></tr></table></figure></p><p>在postman或浏览器中访问接口,比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000</span><br></pre></td></tr></table></figure></p><h3 id="2-2-East-Mock"><a href="#2-2-East-Mock" class="headerlink" title="2.2 East Mock"></a>2.2 East Mock</h3><p>只需要打开<a href="http://easymock.xys12345.cn/login" target="_blank" rel="noopener">East Mock官网</a>,登录账号并编辑JSON数据,然后用浏览器,postman,axios等请求即可</p><h3 id="2-3-github-api"><a href="#2-3-github-api" class="headerlink" title="2.3 github api"></a>2.3 github api</h3><p>该方式请求的接口由github官方提供服务,数据是个人行为在github平台上产生的真实数据,下面仅列出实用接口,便于调用<br><strong>用户信息[详情信息]</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/users/ruanyf</span><br></pre></td></tr></table></figure></p><p><strong>列表信息[分页/不分页]</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.github.com/users/ruanyf/followers?page=1&amp;per_page=10</span><br></pre></td></tr></table></figure></p><p><strong>占位图</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://temp.im/288x288</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;汇总前端JSON数据模拟技术,本文介绍三种技术:&lt;strong&gt;json server, Easy mock
      
    
    </summary>
    
    
      <category term="tool" scheme="http://yoursite.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>基于React Native在应用中查看PDF文档</title>
    <link href="http://yoursite.com/2019/04/04/pdf-view/"/>
    <id>http://yoursite.com/2019/04/04/pdf-view/</id>
    <published>2019-04-04T04:30:06.000Z</published>
    <updated>2019-07-08T01:25:27.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.<br>[注:根据PDF显示实例,不用下载也可以直接加载网络pdf资源,值得进一步探究]<br>参考网址: <a href="https://www.jianshu.com/p/acf5a502f999" target="_blank" rel="noopener">react-native-fs文件下载</a>,<a href="https://www.npmjs.com/package/react-native-pdf" target="_blank" rel="noopener">react-native-pdf PDF查看</a></p><h2 id="2-实践过程"><a href="#2-实践过程" class="headerlink" title="2.实践过程"></a>2.实践过程</h2><p>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-native-fs</span><br></pre></td></tr></table></figure></p><p>挂载,根据提示可能需要再执行一个命令,若执行一次不成功,则再次尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native link react-native-fs</span><br></pre></td></tr></table></figure></p><p>然后即可在项目中引入使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import RNFS from &apos;react-native-fs&apos;;</span><br></pre></td></tr></table></figure></p><p>下载文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">/*下载文件*/</span><br><span class="line">    downloadFile() &#123;</span><br><span class="line">        // On Android, use &quot;RNFS.DocumentDirectoryPath&quot; (MainBundlePath is not defined)</span><br><span class="line"></span><br><span class="line">        // 图片</span><br><span class="line">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.jpg`;</span><br><span class="line">        // const formUrl = &apos;http://img.kaiyanapp.com/c7b46c492261a7c19fa880802afe93b3.png?imageMogr2/quality/60/format/jpg&apos;;</span><br><span class="line"></span><br><span class="line">        // 文件</span><br><span class="line">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.zip`;</span><br><span class="line">        // const formUrl = &apos;http://files.cnblogs.com/zhuqil/UIWebViewDemo.zip&apos;;</span><br><span class="line"></span><br><span class="line">        // 视频</span><br><span class="line">        // const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp4`;</span><br><span class="line">        // http://gslb.miaopai.com/stream/SnY~bbkqbi2uLEBMXHxGqnNKqyiG9ub8.mp4?vend=miaopai&amp;</span><br><span class="line">        // https://gslb.miaopai.com/stream/BNaEYOL-tEwSrAiYBnPDR03dDlFavoWD.mp4?vend=miaopai&amp;</span><br><span class="line">        // const formUrl = &apos;https://gslb.miaopai.com/stream/9Q5ADAp2v5NHtQIeQT7t461VkNPxvC2T.mp4?vend=miaopai&amp;&apos;;</span><br><span class="line"></span><br><span class="line">        // 音频</span><br><span class="line">        const downloadDest = `$&#123;RNFS.MainBundlePath&#125;/$&#123;((Math.random() * 1000) | 0)&#125;.mp3`;</span><br><span class="line">        // http://wvoice.spriteapp.cn/voice/2015/0902/55e6fc6e4f7b9.mp3</span><br><span class="line">        const formUrl = &apos;http://wvoice.spriteapp.cn/voice/2015/0818/55d2248309b09.mp3&apos;;</span><br><span class="line"></span><br><span class="line">        const options = &#123;</span><br><span class="line">            fromUrl: formUrl,</span><br><span class="line">            toFile: downloadDest,</span><br><span class="line">            background: true,</span><br><span class="line">            begin: (res) =&gt; &#123;</span><br><span class="line">                console.log(&apos;begin&apos;, res);</span><br><span class="line">                console.log(&apos;contentLength:&apos;, res.contentLength / 1024 / 1024, &apos;M&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">            progress: (res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">                let pro = res.bytesWritten / res.contentLength;</span><br><span class="line"></span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    progressNum: pro,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        try &#123;</span><br><span class="line">            const ret = RNFS.downloadFile(options);</span><br><span class="line">            ret.promise.then(res =&gt; &#123;</span><br><span class="line">                console.log(&apos;success&apos;, res);</span><br><span class="line"></span><br><span class="line">                console.log(&apos;file://&apos; + downloadDest)</span><br><span class="line"></span><br><span class="line">                // 例如保存图片</span><br><span class="line">                CameraRoll.saveToCameraRoll(downloadDest)</span><br><span class="line">                    .then(()=&gt;&#123;</span><br><span class="line">                        Toast.showShortCenter(&apos;图片已保存到相册&apos;)</span><br><span class="line">                    &#125;).catch(()=&gt;&#123;</span><br><span class="line">                        Toast.showShortCenter(&apos;图片保存失败&apos;)</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;).catch(err =&gt; &#123;</span><br><span class="line">                console.log(&apos;err&apos;, err);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (e) &#123;</span><br><span class="line">            console.log(error);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>PDF文档的查看,首先也要安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn add rn-fetch-blob</span><br><span class="line">yarn add react-native-pdf</span><br><span class="line"></span><br><span class="line">react-native link rn-fetch-blob</span><br><span class="line">react-native link react-native-pdf</span><br></pre></td></tr></table></figure></p><p>然后就可以尝试显示PDF资源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; StyleSheet, Dimensions, View &#125; from &apos;react-native&apos;;</span><br><span class="line"> </span><br><span class="line">import Pdf from &apos;react-native-pdf&apos;;</span><br><span class="line"> </span><br><span class="line">export default class PDFExample extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const source = &#123;uri:&apos;http://samples.leanpub.com/thereactnativebook-sample.pdf&apos;,cache:true&#125;;</span><br><span class="line">        //const source = require(&apos;./test.pdf&apos;);  // ios only</span><br><span class="line">        //const source = &#123;uri:&apos;bundle-assets://test.pdf&apos;&#125;;</span><br><span class="line"> </span><br><span class="line">        //const source = &#123;uri:&apos;file:///sdcard/test.pdf&apos;&#125;;</span><br><span class="line">        //const source = &#123;uri:&quot;data:application/pdf;base64,...&quot;&#125;;</span><br><span class="line"> </span><br><span class="line">        return (</span><br><span class="line">            &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                &lt;Pdf</span><br><span class="line">                    source=&#123;source&#125;</span><br><span class="line">                    onLoadComplete=&#123;(numberOfPages,filePath)=&gt;&#123;</span><br><span class="line">                        console.log(`number of pages: $&#123;numberOfPages&#125;`);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    onPageChanged=&#123;(page,numberOfPages)=&gt;&#123;</span><br><span class="line">                        console.log(`current page: $&#123;page&#125;`);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    onError=&#123;(error)=&gt;&#123;</span><br><span class="line">                        console.log(error);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    style=&#123;styles.pdf&#125;/&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">    container: &#123;</span><br><span class="line">        flex: 1,</span><br><span class="line">        justifyContent: &apos;flex-start&apos;,</span><br><span class="line">        alignItems: &apos;center&apos;,</span><br><span class="line">        marginTop: 25,</span><br><span class="line">    &#125;,</span><br><span class="line">    pdf: &#123;</span><br><span class="line">        flex:1,</span><br><span class="line">        width:Dimensions.get(&apos;window&apos;).width,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;记录在RN中查看PDF的实践经验,便于后期参考.其原理是先从网络上下载pdf资源,然后在应用中打开查看.&lt;b
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>echarts</title>
    <link href="http://yoursite.com/2019/03/27/echarts/"/>
    <id>http://yoursite.com/2019/03/27/echarts/</id>
    <published>2019-03-27T04:23:39.000Z</published>
    <updated>2019-08-16T08:37:52.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>维护一个简单的图表模板,积累常用参数,便于快速配置图表<br>参考网址:<a href="https://echarts.baidu.com/" target="_blank" rel="noopener">echarts门户网站</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>图表基础模板(基于vue):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;chart demo&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/mint-ui.css&quot; /&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../styles/global.css&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;chart&quot; class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- chart1 条形图 --&gt;</span><br><span class="line">      &lt;div ref=&quot;chart1&quot; style=&quot;width: 100%;height:300px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;!-- chart2 饼状图 --&gt;</span><br><span class="line">      &lt;div ref=&quot;chart2&quot; style=&quot;width: 100%; height: 270px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=&quot;../../script/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../../script/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../../script/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../../script/httpRequest.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../../script/constants.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      window.onload = () =&gt; &#123;</span><br><span class="line">        document.addEventListener(&apos;message&apos;, (&#123; data &#125;) =&gt; &#123;</span><br><span class="line">          const &#123; token, areaId &#125; = JSON.parse(data)</span><br><span class="line">          if (window.postMessage) &#123;</span><br><span class="line">            let message = &#123; loadFinish: true &#125;</span><br><span class="line">            window.postMessage(JSON.stringify(message))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      let indexVue = new Vue(&#123;</span><br><span class="line">        el: &apos;#chart&apos;,</span><br><span class="line">        data() &#123;</span><br><span class="line">          return &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">          initChart() &#123;</span><br><span class="line">            // 条形图</span><br><span class="line">            let chart1 = echarts.init(this.$refs[&apos;chart1&apos;])</span><br><span class="line">            let chartOptions1 = &#123;</span><br><span class="line">              title: &#123;</span><br><span class="line">                text: &apos;大国人口&apos;,</span><br><span class="line">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              color: [</span><br><span class="line">                &apos;#7199D6&apos;,</span><br><span class="line">                &apos;#DB7D36&apos;,</span><br><span class="line">                &apos;#82AB4E&apos;,</span><br><span class="line">                &apos;#9CABE1&apos;,</span><br><span class="line">                &apos;#F0B885&apos;,</span><br><span class="line">                &apos;#739BD6&apos;,</span><br><span class="line">                &apos;#72C4CC&apos;,</span><br><span class="line">                &apos;#B1A3DE&apos;,</span><br><span class="line">                &apos;#78B0ED&apos;,</span><br><span class="line">                &apos;#E0A1B6&apos;,</span><br><span class="line">                &apos;#F1C026&apos;</span><br><span class="line">              ],</span><br><span class="line">               // 对点击时显示的tip就行配置</span><br><span class="line">               tooltip: &#123;</span><br><span class="line">                trigger: &apos;item&apos;,</span><br><span class="line">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125;&apos;</span><br><span class="line">              &#125;,</span><br><span class="line">              // 配置图例边距留白距离,是否包含坐标轴刻度</span><br><span class="line">              grid: &#123; left: &apos;3%&apos;, right: &apos;4%&apos;, bottom: &apos;3%&apos;, containLabel: true &#125;,</span><br><span class="line">              xAxis: &#123;</span><br><span class="line">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              yAxis: &#123;</span><br><span class="line">                data: [&apos;巴西&apos;, &apos;印尼&apos;, &apos;美国&apos;, &apos;印度&apos;, &apos;中国&apos;],</span><br><span class="line">                // 对y坐标轴显示的刻度进行配置</span><br><span class="line">                axisLabel: &#123; rotate: 0, interval: 0 &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              series: [</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;人数&apos;,</span><br><span class="line">                  type: &apos;bar&apos;,</span><br><span class="line">                  data: [18203, 23489, 29034, 104970, 131744]</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">            chart1.setOption(chartOptions1)</span><br><span class="line"></span><br><span class="line">            // 饼状图</span><br><span class="line">            let chart2 = echarts.init(this.$refs[&apos;chart2&apos;])</span><br><span class="line">            let chartOptions2 = &#123;</span><br><span class="line">              title: &#123;</span><br><span class="line">                text: &apos;社会资源分布&apos;,</span><br><span class="line">                textStyle: &#123; color: &apos;#39a3d5&apos;, fontSize: 14 &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              color: [</span><br><span class="line">                &apos;#7199D6&apos;,</span><br><span class="line">                &apos;#DB7D36&apos;,</span><br><span class="line">                &apos;#82AB4E&apos;,</span><br><span class="line">                &apos;#9CABE1&apos;,</span><br><span class="line">                &apos;#F0B885&apos;,</span><br><span class="line">                &apos;#739BD6&apos;,</span><br><span class="line">                &apos;#72C4CC&apos;,</span><br><span class="line">                &apos;#B1A3DE&apos;,</span><br><span class="line">                &apos;#78B0ED&apos;,</span><br><span class="line">                &apos;#E0A1B6&apos;,</span><br><span class="line">                &apos;#F1C026&apos;</span><br><span class="line">              ],</span><br><span class="line">              // 对点击时显示的tip就行配置</span><br><span class="line">              tooltip: &#123;</span><br><span class="line">                trigger: &apos;item&apos;,</span><br><span class="line">                formatter: &apos;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&apos;</span><br><span class="line">              &#125;,</span><br><span class="line">              // 对图例的显示位置等内容进行配置</span><br><span class="line">              legend: &#123;</span><br><span class="line">                // horizontal, vertical</span><br><span class="line">                orient: &apos;horizontal&apos;,</span><br><span class="line">                bottom: &apos;5%&apos;</span><br><span class="line">              &#125;,</span><br><span class="line">              series: [</span><br><span class="line">                &#123;</span><br><span class="line">                  name: &apos;占比&apos;,</span><br><span class="line">                  type: &apos;pie&apos;,</span><br><span class="line">                  radius: &apos;50%&apos;,</span><br><span class="line">                  center: [&apos;50%&apos;, &apos;40%&apos;],</span><br><span class="line">                  data: [</span><br><span class="line">                    &#123; value: 335, name: &apos;直接访问&apos; &#125;,</span><br><span class="line">                    &#123; value: 310, name: &apos;邮件营销&apos; &#125;,</span><br><span class="line">                    &#123; value: 234, name: &apos;联盟广告&apos; &#125;,</span><br><span class="line">                    &#123; value: 135, name: &apos;视频广告&apos; &#125;,</span><br><span class="line">                    &#123; value: 1548, name: &apos;搜索引擎&apos; &#125;</span><br><span class="line">                  ],</span><br><span class="line">                  label: &#123;</span><br><span class="line">                    normal: &#123;</span><br><span class="line">                      // 是否显示每个扇形指示</span><br><span class="line">                      show: false,</span><br><span class="line">                      // 若显示,则对过长内容格式化处理</span><br><span class="line">                      formatter(v) &#123;</span><br><span class="line">                        let text = v.name</span><br><span class="line">                        return text.length &lt; 4 ? text : `$&#123;text.slice(0, 4)&#125;\n$&#123;text.slice(4)&#125;`</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">            chart2.setOption(chartOptions2)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">          this.initChart()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;维护一个简单的图表模板,积累常用参数,便于快速配置图表&lt;br&gt;参考网址:&lt;a href=&quot;https://e
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>color</title>
    <link href="http://yoursite.com/2019/03/26/theme/"/>
    <id>http://yoursite.com/2019/03/26/theme/</id>
    <published>2019-03-26T04:32:40.000Z</published>
    <updated>2019-07-08T01:25:27.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文档目的"><a href="#1-文档目的" class="headerlink" title="1.文档目的"></a>1.文档目的</h2><p>收集整理常用样式,便于通用配置出简约大气的页面，下面仅选取Flat UI库作为代表性的颜色值，举一反三，当前项目使用了什么UI库，那么自己也应该抽取该库中Colors文件中的颜色值，作为项目的全局颜色值，这样有利于保持项目色调的统一（例如BootStrap主题色）。<br>参考网址:<br><a href="https://flatuicolors.com/palette/defo" target="_blank" rel="noopener">Flat UI 色表</a>,<a href="https://metrocolor.live/index.html" target="_blank" rel="noopener">香港地铁色</a>,<a href="https://sendwithses.gitbook.io/helpdocs/random-stuff/easy-to-remember-color-guide-for-non-designers" target="_blank" rel="noopener">经验配色法则</a></p><h2 id="2-内容梳理"><a href="#2-内容梳理" class="headerlink" title="2.内容梳理"></a>2.内容梳理</h2><p>经验配色法效果图及其颜色值如下：<br><img src="/2019/03/26/theme/image001.png" title="this is first image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;图层灰:背景, 列表项&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #aaaaaa&quot;&gt;aaaaaa&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #bbbbbb&quot;&gt;bbbbbb&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #cccccc&quot;&gt;cccccc&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #dddddd&quot;&gt;dddddd&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #eeeeee&quot;&gt;eeeeee&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;文字黑: 分级标题&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #1a2a3a&quot;&gt;1a2a3a&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #2a3a4a&quot;&gt;2a3a4a&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #333333&quot;&gt;333333&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #3a4a5a&quot;&gt;3a4a5a&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #4a5a6a&quot;&gt;4a5a6a&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;主题深:cf69&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #9966ff&quot;&gt;9966ff&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #6666ff&quot;&gt;6666ff&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #66ff99&quot;&gt;66ff99&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #6699ff&quot;&gt;6699ff&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;主题浅:cf69&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #ffff66&quot;&gt;ffff66&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #ffcc66&quot;&gt;ffcc66&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #ff9966&quot;&gt;ff9966&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #ff6666&quot;&gt;ff6666&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;主题灰:abcdef&lt;/h3&gt;</span><br><span class="line">&lt;div class=&quot;flex-box&quot;&gt;</span><br><span class="line">  &lt;span style=&quot;background: #abcdef&quot;&gt;abcdef&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #bedcaf&quot;&gt;bedcaf&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #cafedb&quot;&gt;cafedb&lt;/span&gt;</span><br><span class="line">  &lt;span style=&quot;background: #decafb&quot;&gt;decafb&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.flex-box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.flex-box span&#123;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-文档目的&quot;&gt;&lt;a href=&quot;#1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.文档目的&quot;&gt;&lt;/a&gt;1.文档目的&lt;/h2&gt;&lt;p&gt;收集整理常用样式,便于通用配置出简约大气的页面，下面仅选取Flat UI库作为代表性的颜色值，举一反三，当前
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
