[{"title":"npm淘宝镜像","date":"2018-11-15T13:18:51.000Z","path":"2018/11/15/npm/","text":"1.文档目的该文档用于解释说明npm淘宝镜像的使用参考网址：淘宝npm镜像、react native环境搭建、淘宝镜像说明 2.内容梳理淘宝镜像使用目的：加快访问速度使用方式及其对比： npm切换镜像源（加快访问速度）：npm config set registry https://registry.npm.taobao.org –globalnpm config set disturl https://npm.taobao.org/dist –global验证查看镜像源：npm config get registrynpm config get disturl yarn方式[推荐]yarn安装：npm install -g yarnyarn配置镜像源：yarn config set registry https://registry.npm.taobao.org –globalyarn config set disturl https://npm.taobao.org/dist –global验证查看镜像源：yarn config get registryyarn config get disturl cnpm方式[不推荐：安装的模块路径比较奇怪]npm install -g cnpm –registry=https://registry.npm.taobao.org","tags":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/tags/tools/"}]},{"title":"vue组件快速原型开发","date":"2018-11-15T12:56:20.000Z","path":"2018/11/15/vueserve/","text":"1.文档目的该文档用于快速开发vue组件，不用搭建完整的vue cli 3.0环境，就可以直接开发预览vue组件参考网址：基于vue cli 3.0中快速原型开发模块 2.快速原型开发检查是否安装了全局扩展： vue -V安装全局扩展： npm install -g @vue/cli-service-global编写App.vue组件：123&lt;template&gt; &lt;h1&gt;Hello!&lt;/h1&gt;&lt;/template&gt; 运行组件： vue serve编译构建组件： vue build","tags":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/tags/tools/"}]},{"title":"keymap","date":"2018-11-15T12:12:21.000Z","path":"2018/11/15/keymap/","text":"1.windows平台常用快捷键【win系统】无鼠标快捷操作电脑[win7][1]开启键盘操作鼠标控制面板-&gt;轻松访问-&gt;鼠标更易用-&gt;设置鼠标键…Alt+Shift[左]+Num Lock启用,小键盘数字键控制方向,5确认单击,Shift+数字减速移动,Ctrl加速移动[2]常用系统快捷键WIN 打开搜素程序和文件WIN+E 我的电脑WIN+T 切换任务栏WIN+L 锁定计算机WIN+D 显示桌面WIN+M 最小化所有窗口WIN+R 打开运行对话框WIN+Tab 3D切换任务栏程序WIN+空格键 预览桌面WIN+方向键 最大/小化窗口/左右移动窗口关闭活动应用程序:Alt+F4 【Webstorm快捷键】控制台：Alt+F12打开任何文件：Double Shift打开最近文件：Ctrl+E全局搜索字符串：Ctrl+HSettings:Ctrl+Alt+SFormat code:Ctrl+Alt+L删除一行： Ctrl+D Ctrl+X复制一行： Ctrl+Alt+向下箭头折叠代码块： Ctrl+加减号注释：Ctrl+/ 或 Ctrl+Shift+/ 【浏览器】打开新窗口:Ctrl+T切换导航栏窗口:Ctrl+Tab关闭活动页面:Ctrl+W上下浏览网页:方向键和Page Up和Page Down 2.mac平台常用快捷键【mac系统】Command + Shift + c 打开我的电脑Command + Shift + h 打开当前用户文件夹Command + 向上箭头 打开包含当前文件夹的文件夹Command + [ / ] 打开上一个文件夹/下一个文件夹Command + w 关闭最前tabCommand + m 最小化当前应用窗口Command + q 关闭当前应用Command + T 打开多个tab 【eg:浏览器，Terminal】Command + Tab 多窗口切换 【三个小手指向上滑，平铺当前打开窗口】control + tab 转向下一个标签页【eg:webStorm多个编辑窗口】control + shift + tab 转向上一个标签页Control + 向上向下 查看所有打开窗口【两个手指向下滑：向下滚动】 Command + shift + n 新建文件夹Command + N 新建文件【eg:sublime新文件，webStorm新文件】Command + delete 删除Return 重命名选中的文件或文件夹 Shift 搜狗输入法中英文切换Command + , 当前应用的偏好设置 【文件处理快捷键】Command + Fn + 上下左右 将光标移动到可视范围开头/结尾/文档开头/结尾Command + 左右 将光标移动到行首/行尾Command + L 将光标移动到指定行Command + shift + 上下左右 选中文本alt + 上下 选取代码块Shift + 上下左右 扩展选择区域Command + f 查找Command + r 替换Delete 删除光标左边的字符Fn + delete 删除光标右边的字符Option + delete 删除光标左边的word 【截图快捷键】Command + shift + 3 屏幕快照，拍摄整个屏幕的屏幕快照，截取全屏到文件Command + shift + 4 截取选中屏幕区域到文件Command + shift + control + 3 截取全屏到剪贴板Command + shift + control + 4 截取选中屏幕区域到剪贴板 【Mac下浏览器快捷键】Command + L 光标直接跳至地址栏Chrome 开发者模式 Command + alt + j刷新 Command + r 【Mac下webStorm快捷键】全局查找 Command + shift + f格式整理 Command + alt + L注释：Command + /调整缩进 Shift + tab复制当前行 Command + d删除当前行 Command + delete快速换行 Shift + Enter清除缩进变成单行 Command + Shift + J光标在多处定位 Alt + 单击大小写转换 Command + Shift + U 3.其他工具【sublime】sublime修炼：一款得心应手的开发软件1.sublime官网下载，安装时勾选右键打开文件2.快捷键设置Preferences-&gt;Key Bindings-User打开浏览器：ctrl+alt+f3.命令模式ctrl+shift+p，输入install package，安装命令包 【VIM】【命令模式】左下上右:HJKL向右向下跳一个词:w/b下/上一个句子/段落 （）/{}跳转到行首/行尾：0/shift+$跳转到最后一行/第一行：shift+G/gg跳转到上一次编辑的地方：跳转到上一次编辑的文件：ctrl+o/ctrl+i整行选中： 光标移动到起始点shfit+V, 然后按j/k区域选中整行非整行选中： 光标移动到起始点V, 然后按H/J/K/L区域选中整行删除选中内容:X删除某行：DD / dl (L字符) /dw (w单词)替换某行：CC (删除内容，并进入编辑模式等待输入被替换内容) /cl /cw复制当前行：YY /yl /yw复制一个词：YW复制任意选中内容：先选中，再按Y粘贴：P撤销：U/u代码格式化 选中，按= 【编辑模式】进入/退出 :i/a/0/shift+o esc自动补齐：ctrl+N 若有多个备选项继续ctrl+N选中下一项，ctrl+P选中上一项（基于本文件补全） 【扩展模式】：! 命令 （叹号后面有个空格）搜索：/searchText /搜索文本 回车确认 然后按N查找下一个向前搜索：？searchText退出搜索高亮：nohl[质疑]替换：%s/searchText/replaceText/g %代表每行，s代表全局，第一个斜线代表被替换文本，第二个代表要替换文本,g全局[质疑]多行局部替换：首先选中多行Shift+V，再Shift:s/searchText/replaceText横屏分屏：sp 上下横屏切换ctrl+ww竖屏分屏：vs 左右竖屏切换ctrl+ww退出分屏：q显示行号：set number","tags":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/tags/tools/"}]},{"title":"hexo使用笔记","date":"2018-11-15T11:44:41.000Z","path":"2018/11/15/hexo/","text":"1.文档目的该文档用于自己及时查看，并快速上手继续写博客参考网址：hexo官方文挡 2.快速编写博客1.查看自己远程博客：https://zhuxiaobotongxue.github.io/2.本地化启动服务：hexo s3.如何生成一篇博客(如：git1)：hexo new post git14.打开source文件夹并编辑博客，markdown语法5.编译博客： hexo g6.部署至远程：hexo d7.备份原代码：git add ./git commit -m ‘’/git push","tags":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/tags/tools/"}]},{"title":"Hello World","date":"2018-10-16T10:19:36.546Z","path":"2018/10/16/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"开发者工具","date":"2018-06-29T12:49:28.000Z","path":"2018/06/29/googledev/","text":"1.Elementsctrl+shift+c 选取dom元素ESC 在Elements面板可以用打开Console在Elements元素面板中可以通过键盘方向键折叠和向上向下快速选择节点,同时面包屑导航会给出层级结构,按住并拖动节点可以移动节点位置,查看元素事件侦听器,选中对应元素,打开Elements-&gt;Event Listeners,进一步打开对应选择器后,在handler上单击右键选择show function definition,可以查看具体方法定义,单击节点,右键Break on可以为节点添加Dom事件监听,在Elements-&gt;DOM Breakpoints面板可以查看详情,鼠标悬停在Elements-&gt;Styles面板对应css名称上可以查看受影响的Dom,在对应css右下角有小图标可以调整颜色和阴影,编辑数字和css属性值时,可以使用键盘箭头增大缩小,也可以使用鼠标滚轮,Ctrl+点击任何css属性可以直接跳转至对应文件相应行 2.Console提供了一个命令行接口，用来与网页代码互动。F12 打开DevToolsctrl+shift+J 打开控制台并定位光标ctrl+L 清空控制台console.log(‘aaa’);console.info(‘aaa’);console.error(‘aaa’);console.warn(‘aaa’);分组日志console.group(‘aaa’);console.log(‘我是aaa小组的日志’);console.groupEnd();断言日志console.assert(false,’当第一个参数为false时输出该条消息’);统计执行次数日志function myFun(){ console.count(‘myFun被执行的次数’);}myFun();myFun();输出对象的属性和方法console.dir(document.body);统计代码执行时间console.time(“Array initialize”);var array=new Array(1000000);for(var i=array.length - 1;i&gt;=0;i–){ array[i] = new Object();};console.timeEnd(“Array initialize”);查看代码执行对cpu的使用情况console.profile(“Array initialize”);var array=new Array(1000000);for(var i=array.length - 1;i&gt;=0;i–){ array[i] = new Object();};console.profileEnd(“Array initialize”);执行完成后在Profiles面板里面查看就可以看到cpu相关使用信息复制选中的DOM结构至剪切板copy(document.body);输出对象的键或值对var myObj = {name:’xiaoming’,sex:’female’};keys(myObj);values(myObj);用表格样式输出json格式数组var myArray = [{“name”:”xiaoming”},{“sex”:”12”}];console.table(myArray); console.log(‘%c This text is styled!’, ‘color: red; background: yellow; font-size: 24px;’) var number = 11 * 9;var color = ‘red’;console.log(‘%d %s balloons’, number, color); %s 字符串%d 整数%i 整数%f 浮点数%o 对象的链接%c CSS格式字符串 debugger","tags":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/tags/tools/"}]},{"title":"Git系列之命令一览","date":"2018-06-25T12:30:27.000Z","path":"2018/06/25/git6/","text":"1.配置/初始化/常规操作git –versiongit helpgit config –helpgit config –list –globalgit config –global –add user.name zhuxiaobotongxuegit initgit clonegit add .git commit –m “this is a commit”git push origin mastergit pull origin self_branchgit fetch origin master //拉取远程分支git merge self_branch //合并本地分支self_branch至当前分支git checkout . //撤销所有工作空间修改git reset HEAD a.html //撤销暂存区修改git revert //撤销指定的提交git checkout self_branch //切换分支git checkout –d self_branch //删除本地分支git log –p fileName //查看指定文件提交历史git log –oneline –decorate –graph –allgit diff –cachedgit mv oldName newName //文件改名git rm fileName //删除文件git branch –a //查看所有分支 2.非频繁实用操作git clone -b self_branch http://mall-service.git //克隆指定分支git reset –hard resetVersionHash //将工作空间强制恢复至指定提交git push -f origin currentBranch //将本地分支强制推送至远程git stash listgit stash pop stash@{0}git remote add origin https://github.com/Test.git //将本地项目与远程建立联系git push -u origin master //首次推送项目至远程，指定origin为默认git push –delete origin self_branch //删除远程分支git update-index –assume-unchanged FILENAME //已入库文件不再监听git update-index –no-assume-unchanged FILENAME //恢复已入库文件监听git gui //调出图形界面ssh-keygen -t rsa -C ”zhuxiaobotongxue@gmail.com” //生成秘钥 3.小专题探究拉取分支git pull origin self_branch:self_branch //拉取远程self_branch分支至本地self_branch分支等同于git fetch origin onlinegit checkout onlinegit merge origin/self_branch //将远程self_branch分支合并至当前分支创建本地分支并提交至远程git checkout –b self_branch //从当前分支创建本地分支并切换git push origin selft_branch //将新分支提交至远程忽略文件.gitignore //创建未入库文件忽略配置.[oa] 表示忽略以o或者a结尾的文件 ~ 表示忽略以~结尾的文件*.pyc 表示忽略以.pyc结尾的文件！test.pyc 表示虽然上面一条忽略了以.pyc结尾的文件，但是现在要求不能忽略test.pyc!test.py 同上，不忽略以！开头的！test.py文件foo/ 意思是忽略foo文件夹**/res 表示忽略顶层和任何层次的res文件夹a 表示忽略a文件","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Git系列之冲突详解","date":"2018-06-14T15:52:59.000Z","path":"2018/06/14/git5/","text":"1.冲突产生的原因针对某个合并操作,HEAD仓库中被修改过的部分与工作目录中将被合并的修改部分为同一代码片段,此时git不知如何取舍,便会产生冲突. 2.演示冲突的产生从某个A状态出发，我们修改index.html和test.html，并将其保存至暂存区，此时本地代码会恢复至A点。如下图所示。我们再次修改index.html的同一代码片段，并将其提交至HEAD仓库。如下图所示。此时若要取出暂存区内容，就会产生冲突，具体表现如下图所示。【注意下图行为: index.html出现了冲突，将HEAD仓库代码和暂存区代码都合并到了工作目录，但text.txt并没有冲突，而是直接从暂存区取出至缓存区】 3.冲突解决的原理人为处理冲突，根据具体业务逻辑，判断代码的取舍，然后提交修改后的代码。 4.演示冲突的解决冲突文件中冲突区域如下图所示。我们调整冲突后，如下图所示。【注意：解决冲突只要删除冲突标识即可，具体内容根据具体业务取舍，下面我们假如只保留已经提交至HEAD仓库的内容】然后将处理后的文件加入缓存区，此时你会发现index.html会被自动添加至HEAD仓库，而text.txt还在缓存区，需要我们手动提交。如下图所示。","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Git系列之分支","date":"2018-06-14T14:21:52.000Z","path":"2018/06/14/git4/","text":"1.创建本地分支并推送至github从master分支上创建分支test_branch，并切换至该分支，如图（1）所示。 图（1）推送该分支至github，并查看所有分支，如图（2）所示。 图（2） 2.合并分支首先切换至master分支，将test_branch分支上所做的修改合并至master分支。推送合并后的提交至远程，如下图所示。【注意：严格操作，推送之前必须先git pull，若出现冲突，要先处理冲突】【小技巧：分支切换之前若本地工作目录有修改，不希望在切换后可见，可利用暂存区暂存】","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Git系列之撤销","date":"2018-06-14T14:05:42.000Z","path":"2018/06/14/git3/","text":"1.工作流的状态要使用git进行版本控制，必须深刻理解并认识git工作流中的几个状态，如图（1）所示。 图（1）本地环境可以细分为3中状态：【功能尚未完毕之前，不用轻易提交至远程】工作区，修改文档尚未添加至版本控制暂存区，修改文档已添加至版本控制，但尚未提交至版本库版本库，修改文档提交至版本库，文档状态变化远程环境只有一种状态：远程分支，修改文档被提交至远程代码仓库【名词辨识】master/branch : 分支，master为项目默认分支，也叫主分支head : 本地当前版本库的指针，指向最新的提交origin : 默认的远程版本库名称 2.工作区撤销修改该状态尚未添加至版本控制，即尚未执行git add，此时撤销不可恢复。撤销执行命令git checkout .即可。 3.暂存区撤销修改该状态已添加至版本控制，即已执行git add，修改内容处于暂存区撤销执行命令git reset HEAD .即可，原理是用版本库内容替换缓存区内容，同时工作目录修改保留 4.版本库撤销修改该状态已添加至版本库，即已执行git commit,修改内容处于版本库。撤销命令如下：git reset –hard HEAD~1 撤销提交并删除修改git reset –soft HEAD~1 撤销提交并将修改恢复至暂存区git reset HEAD~1 撤销提交并就修改恢复至工作区 5.远程分支撤销修改思路：先回退本地版本库至指定版本库【同4】，再强制推送指定版本库内容至远程分支，如下图所示。也可以用–soft保持修改内容至暂存区，如下图所示。","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Git系列之本地仓库","date":"2018-06-14T13:48:30.000Z","path":"2018/06/14/git2/","text":"1.初始化本地仓库本地新建一个项目文件夹test,并在该文件夹中点击右键打开git bash,用git init命令来初始化git仓库，如图（1）所示。初始化后默认是master分支。 图（1）初始化仓库配置如图（2）所示【没有配置全局作用域的需要此步骤】 图（2）本地仓库现在什么也没有，我们可以新建一个文件README.txt，便于观察。添加修改并提交至HEAD，如何（3）所示。 图（3） 2.推送本地仓库至github先登录github官网，并创建一个空的同名项目test【注意不要勾选README.txt】。复制项目的git地址（如：git@github.com:zhuxiaobotongxue/test.git）。在git bash中执行命令如图（4）所示【注意首次提交要有-u参数】。 图（4）此时刷新github仓库，就可以看到内容提交成功了。","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Git系列之环境配置与github代码托管","date":"2018-06-13T14:35:54.000Z","path":"2018/06/13/git1/","text":"1.名词解释Git: 一个免费的开源分布式版本控制系统github: 一个面向开源及私有软件项目的托管平台 2.Git下载安装与配置从git官网上下载并傻瓜式安装，安装完成后在桌面单击右键，看到“Git Bash Here”和“Git Gui Here”说明安装成功。单击打开“Git Bash Here”输入命令检查版本信息，如图（1）所示。 图（1）git基本配置如图（2）所示，前两个命令添加，第三个命令查看。更多关于配置的操作可以输入git config –help查看。图（2）配置ssh-keygen如图（3）所示，输入命令后，依次输入三个回车。然后在系统目录C:\\Users\\Administrator.ssh文件夹中会看到两个文件id_rsa和id_rsa.pub，后者中的内容将用于配置在github中，服务于代码传输。图（3） 3.github配置并新建托管项目访问github官网，没有账号的自行注册并登陆【建议注册邮箱同git配置邮箱】。在右上角个人头像处单击，并点击Settings选项，找到SSH and GPG keys,并点击右上角“New SSH key”的按钮来添加配置。Title名字可以自己命名，key的内容要复制上面生成的id_rsa.pub中的内容，确认后输入注册账号时的密码，配置好后如图（4）所示。 图（4）回到github首页，找到“New repository”按钮，新建一个项目仓库，如图（5）所示。图（5）创建完成后找到“Clone and download”按钮，点击并复制项目仓库路径，如图（6）所示。图（6）在系统中找一个合适的文件夹放置项目代码，在该文件夹中打开git bash，输入命令来下载github上新创建的项目代码，首次输入命令后可能会提示确认操作，此时输入yes即可，下载完成后，如图（7）所示。此时项目已被下载到了文件夹中。图（7）","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]}]